/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.DeviceControlSchemasPostDeviceSchemaData = factory(root.S1MgmtApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The DeviceControlSchemasPostDeviceSchemaData model module.
   * @module model/DeviceControlSchemasPostDeviceSchemaData
   * @version 2.1
   */

  /**
   * Constructs a new <code>DeviceControlSchemasPostDeviceSchemaData</code>.
   * Data
   * @alias module:model/DeviceControlSchemasPostDeviceSchemaData
   * @class
   * @param ruleType {module:model/DeviceControlSchemasPostDeviceSchemaData.RuleTypeEnum} Rule type. Depending on the type, each rule requires different parameters.
   * @param ruleName {String} The name of the device rule.
   * @param action {module:model/DeviceControlSchemasPostDeviceSchemaData.ActionEnum} Defines if agent shall Block or Allow use of devices which matches the rule parameters.
   * @param _interface {module:model/DeviceControlSchemasPostDeviceSchemaData.InterfaceEnum} The physical bus type of the device.
   * @param status {module:model/DeviceControlSchemasPostDeviceSchemaData.StatusEnum} Defines if rule is Enabled or Disabled.
   */
  var exports = function(ruleType, ruleName, action, _interface, status) {
    this.ruleType = ruleType;
    this.ruleName = ruleName;
    this.action = action;
    this._interface = _interface;
    this.status = status;
  };

  /**
   * Constructs a <code>DeviceControlSchemasPostDeviceSchemaData</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DeviceControlSchemasPostDeviceSchemaData} obj Optional instance to populate.
   * @return {module:model/DeviceControlSchemasPostDeviceSchemaData} The populated <code>DeviceControlSchemasPostDeviceSchemaData</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('ruleType'))
        obj.ruleType = ApiClient.convertToType(data['ruleType'], 'String');
      if (data.hasOwnProperty('uid'))
        obj.uid = ApiClient.convertToType(data['uid'], 'String');
      if (data.hasOwnProperty('productId'))
        obj.productId = ApiClient.convertToType(data['productId'], 'String');
      if (data.hasOwnProperty('serviceClass'))
        obj.serviceClass = ApiClient.convertToType(data['serviceClass'], 'String');
      if (data.hasOwnProperty('vendorId'))
        obj.vendorId = ApiClient.convertToType(data['vendorId'], 'String');
      if (data.hasOwnProperty('deviceId'))
        obj.deviceId = ApiClient.convertToType(data['deviceId'], 'String');
      if (data.hasOwnProperty('deviceClass'))
        obj.deviceClass = ApiClient.convertToType(data['deviceClass'], 'String');
      if (data.hasOwnProperty('deviceInformationServiceInfoValue'))
        obj.deviceInformationServiceInfoValue = ApiClient.convertToType(data['deviceInformationServiceInfoValue'], 'String');
      if (data.hasOwnProperty('version'))
        obj.version = ApiClient.convertToType(data['version'], 'String');
      if (data.hasOwnProperty('ruleName'))
        obj.ruleName = ApiClient.convertToType(data['ruleName'], 'String');
      if (data.hasOwnProperty('gattService'))
        obj.gattService = ApiClient.convertToType(data['gattService'], ['String']);
      if (data.hasOwnProperty('action'))
        obj.action = ApiClient.convertToType(data['action'], 'String');
      if (data.hasOwnProperty('deviceName'))
        obj.deviceName = ApiClient.convertToType(data['deviceName'], 'String');
      if (data.hasOwnProperty('deviceInformationServiceInfoKey'))
        obj.deviceInformationServiceInfoKey = ApiClient.convertToType(data['deviceInformationServiceInfoKey'], 'String');
      if (data.hasOwnProperty('interface'))
        obj._interface = ApiClient.convertToType(data['interface'], 'String');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('accessPermission'))
        obj.accessPermission = ApiClient.convertToType(data['accessPermission'], 'String');
      if (data.hasOwnProperty('bluetoothAddress'))
        obj.bluetoothAddress = ApiClient.convertToType(data['bluetoothAddress'], 'String');
      if (data.hasOwnProperty('manufacturerName'))
        obj.manufacturerName = ApiClient.convertToType(data['manufacturerName'], 'String');
      if (data.hasOwnProperty('minorClasses'))
        obj.minorClasses = ApiClient.convertToType(data['minorClasses'], ['String']);
    }
    return obj;
  }

  /**
   * Rule type. Depending on the type, each rule requires different parameters.
   * @member {module:model/DeviceControlSchemasPostDeviceSchemaData.RuleTypeEnum} ruleType
   */
  exports.prototype.ruleType = undefined;

  /**
   * Relevant USB Mass storage devices only (Interface=USB, Class=mass storage).
   * @member {String} uid
   */
  exports.prototype.uid = undefined;

  /**
   * Product identifier. Unique for a specific product module, per vendor ID, Interface.
   * @member {String} productId
   */
  exports.prototype.productId = undefined;

  /**
   * Relevant for Bluetooth devices only
   * @member {String} serviceClass
   */
  exports.prototype.serviceClass = undefined;

  /**
   * Vendor identifier. Mandatory when rule type is vendor id or product id.
   * @member {String} vendorId
   */
  exports.prototype.vendorId = undefined;

  /**
   * Physical device identifier. Mandatory when rule type is device id.
   * @member {String} deviceId
   */
  exports.prototype.deviceId = undefined;

  /**
   * The Device Class
   * @member {String} deviceClass
   */
  exports.prototype.deviceClass = undefined;

  /**
   * Device Information Service Info Value
   * @member {String} deviceInformationServiceInfoValue
   */
  exports.prototype.deviceInformationServiceInfoValue = undefined;

  /**
   * The version of the device.
   * @member {String} version
   */
  exports.prototype.version = undefined;

  /**
   * The name of the device rule.
   * @member {String} ruleName
   */
  exports.prototype.ruleName = undefined;

  /**
   * Gatt service
   * @member {Array.<String>} gattService
   */
  exports.prototype.gattService = undefined;

  /**
   * Defines if agent shall Block or Allow use of devices which matches the rule parameters.
   * @member {module:model/DeviceControlSchemasPostDeviceSchemaData.ActionEnum} action
   */
  exports.prototype.action = undefined;

  /**
   * Device Name
   * @member {String} deviceName
   */
  exports.prototype.deviceName = undefined;

  /**
   * Device Information Service Info Key
   * @member {String} deviceInformationServiceInfoKey
   */
  exports.prototype.deviceInformationServiceInfoKey = undefined;

  /**
   * The physical bus type of the device.
   * @member {module:model/DeviceControlSchemasPostDeviceSchemaData.InterfaceEnum} _interface
   */
  exports.prototype._interface = undefined;

  /**
   * Defines if rule is Enabled or Disabled.
   * @member {module:model/DeviceControlSchemasPostDeviceSchemaData.StatusEnum} status
   */
  exports.prototype.status = undefined;

  /**
   * Access permission
   * @member {module:model/DeviceControlSchemasPostDeviceSchemaData.AccessPermissionEnum} accessPermission
   */
  exports.prototype.accessPermission = undefined;

  /**
   * Bluetooth Address
   * @member {String} bluetoothAddress
   */
  exports.prototype.bluetoothAddress = undefined;

  /**
   * Manufacturer Name
   * @member {String} manufacturerName
   */
  exports.prototype.manufacturerName = undefined;

  /**
   * Minor classes
   * @member {Array.<String>} minorClasses
   */
  exports.prototype.minorClasses = undefined;



  /**
   * Allowed values for the <code>ruleType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.RuleTypeEnum = {
    /**
     * value: "class"
     * @const
     */
    _class: "class",

    /**
     * value: "productId"
     * @const
     */
    productId: "productId",

    /**
     * value: "vendorId"
     * @const
     */
    vendorId: "vendorId",

    /**
     * value: "deviceId"
     * @const
     */
    deviceId: "deviceId",

    /**
     * value: "uid"
     * @const
     */
    uid: "uid",

    /**
     * value: "hwIdentifiers"
     * @const
     */
    hwIdentifiers: "hwIdentifiers",

    /**
     * value: "bluetoothVersion"
     * @const
     */
    bluetoothVersion: "bluetoothVersion"
  };


  /**
   * Allowed values for the <code>action</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ActionEnum = {
    /**
     * value: "Allow"
     * @const
     */
    allow: "Allow",

    /**
     * value: "Block"
     * @const
     */
    block: "Block"
  };


  /**
   * Allowed values for the <code>_interface</code> property.
   * @enum {String}
   * @readonly
   */
  exports.InterfaceEnum = {
    /**
     * value: "USB"
     * @const
     */
    USB: "USB",

    /**
     * value: "Bluetooth"
     * @const
     */
    bluetooth: "Bluetooth",

    /**
     * value: "Thunderbolt"
     * @const
     */
    thunderbolt: "Thunderbolt"
  };


  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StatusEnum = {
    /**
     * value: "Enabled"
     * @const
     */
    enabled: "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    disabled: "Disabled"
  };


  /**
   * Allowed values for the <code>accessPermission</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AccessPermissionEnum = {
    /**
     * value: "Read-Only"
     * @const
     */
    readOnly: "Read-Only",

    /**
     * value: "Read-Write"
     * @const
     */
    readWrite: "Read-Write",

    /**
     * value: "Not-Applicable"
     * @const
     */
    notApplicable: "Not-Applicable"
  };

  return exports;

}));
