/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.V21AlertsSchemasAlertInformationSchemaMany200AlertInfo = factory(root.S1MgmtApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The V21AlertsSchemasAlertInformationSchemaMany200AlertInfo model module.
   * @module model/V21AlertsSchemasAlertInformationSchemaMany200AlertInfo
   * @version 2.1
   */

  /**
   * Constructs a new <code>V21AlertsSchemasAlertInformationSchemaMany200AlertInfo</code>.
   * Alert information
   * @alias module:model/V21AlertsSchemasAlertInformationSchemaMany200AlertInfo
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>V21AlertsSchemasAlertInformationSchemaMany200AlertInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/V21AlertsSchemasAlertInformationSchemaMany200AlertInfo} obj Optional instance to populate.
   * @return {module:model/V21AlertsSchemasAlertInformationSchemaMany200AlertInfo} The populated <code>V21AlertsSchemasAlertInformationSchemaMany200AlertInfo</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('dnsResponse'))
        obj.dnsResponse = ApiClient.convertToType(data['dnsResponse'], 'String');
      if (data.hasOwnProperty('moduleSha1'))
        obj.moduleSha1 = ApiClient.convertToType(data['moduleSha1'], 'String');
      if (data.hasOwnProperty('indicatorCategory'))
        obj.indicatorCategory = ApiClient.convertToType(data['indicatorCategory'], 'String');
      if (data.hasOwnProperty('incidentStatus'))
        obj.incidentStatus = ApiClient.convertToType(data['incidentStatus'], 'String');
      if (data.hasOwnProperty('tiIndicatorValue'))
        obj.tiIndicatorValue = ApiClient.convertToType(data['tiIndicatorValue'], 'String');
      if (data.hasOwnProperty('netEventDirection'))
        obj.netEventDirection = ApiClient.convertToType(data['netEventDirection'], 'String');
      if (data.hasOwnProperty('loginAccountSid'))
        obj.loginAccountSid = ApiClient.convertToType(data['loginAccountSid'], 'String');
      if (data.hasOwnProperty('hitType'))
        obj.hitType = ApiClient.convertToType(data['hitType'], 'String');
      if (data.hasOwnProperty('modulePath'))
        obj.modulePath = ApiClient.convertToType(data['modulePath'], 'String');
      if (data.hasOwnProperty('indicatorDescription'))
        obj.indicatorDescription = ApiClient.convertToType(data['indicatorDescription'], 'String');
      if (data.hasOwnProperty('indicatorName'))
        obj.indicatorName = ApiClient.convertToType(data['indicatorName'], 'String');
      if (data.hasOwnProperty('dstPort'))
        obj.dstPort = ApiClient.convertToType(data['dstPort'], 'String');
      if (data.hasOwnProperty('isEdr'))
        obj.isEdr = ApiClient.convertToType(data['isEdr'], 'Boolean');
      if (data.hasOwnProperty('analystVerdict'))
        obj.analystVerdict = ApiClient.convertToType(data['analystVerdict'], 'String');
      if (data.hasOwnProperty('srcMachineIp'))
        obj.srcMachineIp = ApiClient.convertToType(data['srcMachineIp'], 'String');
      if (data.hasOwnProperty('registryKeyPath'))
        obj.registryKeyPath = ApiClient.convertToType(data['registryKeyPath'], 'String');
      if (data.hasOwnProperty('registryOldValueType'))
        obj.registryOldValueType = ApiClient.convertToType(data['registryOldValueType'], 'String');
      if (data.hasOwnProperty('tiIndicatorComparisonMethod'))
        obj.tiIndicatorComparisonMethod = ApiClient.convertToType(data['tiIndicatorComparisonMethod'], 'String');
      if (data.hasOwnProperty('registryPath'))
        obj.registryPath = ApiClient.convertToType(data['registryPath'], 'String');
      if (data.hasOwnProperty('registryValue'))
        obj.registryValue = ApiClient.convertToType(data['registryValue'], 'String');
      if (data.hasOwnProperty('loginIsAdministratorEquivalent'))
        obj.loginIsAdministratorEquivalent = ApiClient.convertToType(data['loginIsAdministratorEquivalent'], 'String');
      if (data.hasOwnProperty('loginAccountDomain'))
        obj.loginAccountDomain = ApiClient.convertToType(data['loginAccountDomain'], 'String');
      if (data.hasOwnProperty('reportedAt'))
        obj.reportedAt = ApiClient.convertToType(data['reportedAt'], 'Date');
      if (data.hasOwnProperty('dnsRequest'))
        obj.dnsRequest = ApiClient.convertToType(data['dnsRequest'], 'String');
      if (data.hasOwnProperty('loginType'))
        obj.loginType = ApiClient.convertToType(data['loginType'], 'String');
      if (data.hasOwnProperty('registryOldValue'))
        obj.registryOldValue = ApiClient.convertToType(data['registryOldValue'], 'String');
      if (data.hasOwnProperty('srcIp'))
        obj.srcIp = ApiClient.convertToType(data['srcIp'], 'String');
      if (data.hasOwnProperty('updatedAt'))
        obj.updatedAt = ApiClient.convertToType(data['updatedAt'], 'Date');
      if (data.hasOwnProperty('tiIndicatorSource'))
        obj.tiIndicatorSource = ApiClient.convertToType(data['tiIndicatorSource'], 'String');
      if (data.hasOwnProperty('source'))
        obj.source = ApiClient.convertToType(data['source'], 'String');
      if (data.hasOwnProperty('eventType'))
        obj.eventType = ApiClient.convertToType(data['eventType'], 'String');
      if (data.hasOwnProperty('tiIndicatorType'))
        obj.tiIndicatorType = ApiClient.convertToType(data['tiIndicatorType'], 'String');
      if (data.hasOwnProperty('dstIp'))
        obj.dstIp = ApiClient.convertToType(data['dstIp'], 'String');
      if (data.hasOwnProperty('loginsUserName'))
        obj.loginsUserName = ApiClient.convertToType(data['loginsUserName'], 'String');
      if (data.hasOwnProperty('createdAt'))
        obj.createdAt = ApiClient.convertToType(data['createdAt'], 'Date');
      if (data.hasOwnProperty('loginIsSuccessful'))
        obj.loginIsSuccessful = ApiClient.convertToType(data['loginIsSuccessful'], 'String');
      if (data.hasOwnProperty('dvEventId'))
        obj.dvEventId = ApiClient.convertToType(data['dvEventId'], 'String');
      if (data.hasOwnProperty('srcPort'))
        obj.srcPort = ApiClient.convertToType(data['srcPort'], 'String');
      if (data.hasOwnProperty('alertId'))
        obj.alertId = ApiClient.convertToType(data['alertId'], 'String');
    }
    return obj;
  }

  /**
   * Get the DNS response information (examples: IP address, DNS, data type).
   * @member {String} dnsResponse
   */
  exports.prototype.dnsResponse = undefined;

  /**
   * Get the SHA1 signatures for modules loaded by this process.
   * @member {String} moduleSha1
   */
  exports.prototype.moduleSha1 = undefined;

  /**
   * Get the Indicator categories for this process.
   * @member {String} indicatorCategory
   */
  exports.prototype.indicatorCategory = undefined;

  /**
   * Incident status
   * @member {module:model/V21AlertsSchemasAlertInformationSchemaMany200AlertInfo.IncidentStatusEnum} incidentStatus
   * @default 'Unresolved'
   */
  exports.prototype.incidentStatus = 'Unresolved';

  /**
   * Get the value of the identified Threat Intelligence indicator.
   * @member {String} tiIndicatorValue
   */
  exports.prototype.tiIndicatorValue = undefined;

  /**
   * Get the direction of the connection attempt (incoming or outgoing).
   * @member {String} netEventDirection
   */
  exports.prototype.netEventDirection = undefined;

  /**
   * Get the SID of the account that attempted to log in.
   * @member {String} loginAccountSid
   */
  exports.prototype.loginAccountSid = undefined;

  /**
   * Type of hit reported from the Agent
   * @member {module:model/V21AlertsSchemasAlertInformationSchemaMany200AlertInfo.HitTypeEnum} hitType
   */
  exports.prototype.hitType = undefined;

  /**
   * Get the paths of modules loaded by this process.
   * @member {String} modulePath
   */
  exports.prototype.modulePath = undefined;

  /**
   * Get the description of the Indicator.
   * @member {String} indicatorDescription
   */
  exports.prototype.indicatorDescription = undefined;

  /**
   * Get the Indicator names for this process.
   * @member {String} indicatorName
   */
  exports.prototype.indicatorName = undefined;

  /**
   * Get the port number of the destination.
   * @member {String} dstPort
   */
  exports.prototype.dstPort = undefined;

  /**
   * True if the event is edr event
   * @member {Boolean} isEdr
   */
  exports.prototype.isEdr = undefined;

  /**
   * Analyst verdict
   * @member {module:model/V21AlertsSchemasAlertInformationSchemaMany200AlertInfo.AnalystVerdictEnum} analystVerdict
   * @default 'Undefined'
   */
  exports.prototype.analystVerdict = 'Undefined';

  /**
   * Get the IP address of the endpoint performing the login attempt.
   * @member {String} srcMachineIp
   */
  exports.prototype.srcMachineIp = undefined;

  /**
   * Get the full paths of registry entries modified by this process.
   * @member {String} registryKeyPath
   */
  exports.prototype.registryKeyPath = undefined;

  /**
   * Get the previous registry value type if it was modified.
   * @member {String} registryOldValueType
   */
  exports.prototype.registryOldValueType = undefined;

  /**
   * Get the comparison method used by SentinelOne to trigger the event.
   * @member {String} tiIndicatorComparisonMethod
   */
  exports.prototype.tiIndicatorComparisonMethod = undefined;

  /**
   * Get the full path location of the registry key entry.
   * @member {String} registryPath
   */
  exports.prototype.registryPath = undefined;

  /**
   * Get the registry value
   * @member {String} registryValue
   */
  exports.prototype.registryValue = undefined;

  /**
   * See if the login attempt was performed by an administrator equivalent.
   * @member {String} loginIsAdministratorEquivalent
   */
  exports.prototype.loginIsAdministratorEquivalent = undefined;

  /**
   * Get the domain or computer name for which the login attempt was performed.
   * @member {String} loginAccountDomain
   */
  exports.prototype.loginAccountDomain = undefined;

  /**
   * Timestamp of alert creation in STAR
   * @member {Date} reportedAt
   */
  exports.prototype.reportedAt = undefined;

  /**
   * Get the DNS name.
   * @member {String} dnsRequest
   */
  exports.prototype.dnsRequest = undefined;

  /**
   * Get the type of login that was performed.
   * @member {String} loginType
   */
  exports.prototype.loginType = undefined;

  /**
   * Get the previous registry value if it was modified.
   * @member {String} registryOldValue
   */
  exports.prototype.registryOldValue = undefined;

  /**
   * Get the IP address of the traffic source.
   * @member {String} srcIp
   */
  exports.prototype.srcIp = undefined;

  /**
   * Date of alert updated in Star MMS
   * @member {Date} updatedAt
   */
  exports.prototype.updatedAt = undefined;

  /**
   * Get the source of the identified Threat Intelligence indicator.
   * @member {String} tiIndicatorSource
   */
  exports.prototype.tiIndicatorSource = undefined;

  /**
   * Source reported from the Agent.
   * @member {String} source
   */
  exports.prototype.source = undefined;

  /**
   * Event type
   * @member {String} eventType
   */
  exports.prototype.eventType = undefined;

  /**
   * Get the type of the identified Threat Intelligence indicator.
   * @member {String} tiIndicatorType
   */
  exports.prototype.tiIndicatorType = undefined;

  /**
   * Get the IP address of the destination.
   * @member {String} dstIp
   */
  exports.prototype.dstIp = undefined;

  /**
   * Get the login username.
   * @member {String} loginsUserName
   */
  exports.prototype.loginsUserName = undefined;

  /**
   * Timestamp alert sent for detection
   * @member {Date} createdAt
   */
  exports.prototype.createdAt = undefined;

  /**
   * Check if the login attempt succeeded.
   * @member {String} loginIsSuccessful
   */
  exports.prototype.loginIsSuccessful = undefined;

  /**
   * Deep Visibility event ID
   * @member {String} dvEventId
   */
  exports.prototype.dvEventId = undefined;

  /**
   * Get the port number of the traffic source.
   * @member {String} srcPort
   */
  exports.prototype.srcPort = undefined;

  /**
   * Alert ID
   * @member {String} alertId
   */
  exports.prototype.alertId = undefined;



  /**
   * Allowed values for the <code>incidentStatus</code> property.
   * @enum {String}
   * @readonly
   */
  exports.IncidentStatusEnum = {
    /**
     * value: "Unresolved"
     * @const
     */
    unresolved: "Unresolved",

    /**
     * value: "In progress"
     * @const
     */
    inProgress: "In progress",

    /**
     * value: "Resolved"
     * @const
     */
    resolved: "Resolved"
  };


  /**
   * Allowed values for the <code>hitType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.HitTypeEnum = {
    /**
     * value: "Events"
     * @const
     */
    events: "Events",

    /**
     * value: "Processes"
     * @const
     */
    processes: "Processes",

    /**
     * value: "Correlation"
     * @const
     */
    correlation: "Correlation"
  };


  /**
   * Allowed values for the <code>analystVerdict</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AnalystVerdictEnum = {
    /**
     * value: "Undefined"
     * @const
     */
    _undefined: "Undefined",

    /**
     * value: "True positive"
     * @const
     */
    truePositive: "True positive",

    /**
     * value: "False positive"
     * @const
     */
    falsePositive: "False positive",

    /**
     * value: "Suspicious"
     * @const
     */
    suspicious: "Suspicious"
  };

  return exports;

}));
