/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/V21RsoSchemasEnrichedScriptSchemaMany200Package'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./V21RsoSchemasEnrichedScriptSchemaMany200Package'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200ScriptData = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.V21RsoSchemasEnrichedScriptSchemaMany200Package);
  }
}(this, function(ApiClient, V21RsoSchemasEnrichedScriptSchemaMany200Package) {
  'use strict';

  /**
   * The V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200ScriptData model module.
   * @module model/V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200ScriptData
   * @version 2.1
   */

  /**
   * Constructs a new <code>V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200ScriptData</code>.
   * Script data
   * @alias module:model/V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200ScriptData
   * @class
   * @param inputInstructions {String} Input instructions
   * @param scriptType {String} Script type
   * @param inputExample {String} Input example
   * @param osTypes {Array.<String>} OS types
   * @param createdByUserId {String} Created by user id
   * @param inputRequired {Boolean} Is input required
   * @param scriptName {String} Script name
   * @param version {String} Version
   */
  var exports = function(inputInstructions, scriptType, inputExample, osTypes, createdByUserId, inputRequired, scriptName, version) {
    this.inputInstructions = inputInstructions;
    this.scriptType = scriptType;
    this.inputExample = inputExample;
    this.osTypes = osTypes;
    this.createdByUserId = createdByUserId;
    this.inputRequired = inputRequired;
    this.scriptName = scriptName;
    this.version = version;
  };

  /**
   * Constructs a <code>V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200ScriptData</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200ScriptData} obj Optional instance to populate.
   * @return {module:model/V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200ScriptData} The populated <code>V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200ScriptData</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('isAvailableForLite'))
        obj.isAvailableForLite = ApiClient.convertToType(data['isAvailableForLite'], 'Boolean');
      if (data.hasOwnProperty('inputInstructions'))
        obj.inputInstructions = ApiClient.convertToType(data['inputInstructions'], 'String');
      if (data.hasOwnProperty('supportedDestinations'))
        obj.supportedDestinations = ApiClient.convertToType(data['supportedDestinations'], ['String']);
      if (data.hasOwnProperty('package'))
        obj._package = V21RsoSchemasEnrichedScriptSchemaMany200Package.constructFromObject(data['package']);
      if (data.hasOwnProperty('isAvailableForArs'))
        obj.isAvailableForArs = ApiClient.convertToType(data['isAvailableForArs'], 'Boolean');
      if (data.hasOwnProperty('scriptType'))
        obj.scriptType = ApiClient.convertToType(data['scriptType'], 'String');
      if (data.hasOwnProperty('inputExample'))
        obj.inputExample = ApiClient.convertToType(data['inputExample'], 'String');
      if (data.hasOwnProperty('osTypes'))
        obj.osTypes = ApiClient.convertToType(data['osTypes'], ['String']);
      if (data.hasOwnProperty('scopeId'))
        obj.scopeId = ApiClient.convertToType(data['scopeId'], 'String');
      if (data.hasOwnProperty('createdByUserId'))
        obj.createdByUserId = ApiClient.convertToType(data['createdByUserId'], 'String');
      if (data.hasOwnProperty('inputRequired'))
        obj.inputRequired = ApiClient.convertToType(data['inputRequired'], 'Boolean');
      if (data.hasOwnProperty('bucketName'))
        obj.bucketName = ApiClient.convertToType(data['bucketName'], 'String');
      if (data.hasOwnProperty('mgmtId'))
        obj.mgmtId = ApiClient.convertToType(data['mgmtId'], 'Number');
      if (data.hasOwnProperty('scriptName'))
        obj.scriptName = ApiClient.convertToType(data['scriptName'], 'String');
      if (data.hasOwnProperty('updatedAt'))
        obj.updatedAt = ApiClient.convertToType(data['updatedAt'], 'Date');
      if (data.hasOwnProperty('scopeLevel'))
        obj.scopeLevel = ApiClient.convertToType(data['scopeLevel'], 'String');
      if (data.hasOwnProperty('signatureType'))
        obj.signatureType = ApiClient.convertToType(data['signatureType'], 'String');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('updaterId'))
        obj.updaterId = ApiClient.convertToType(data['updaterId'], 'String');
      if (data.hasOwnProperty('version'))
        obj.version = ApiClient.convertToType(data['version'], 'String');
      if (data.hasOwnProperty('createdByUser'))
        obj.createdByUser = ApiClient.convertToType(data['createdByUser'], 'String');
      if (data.hasOwnProperty('scriptDescription'))
        obj.scriptDescription = ApiClient.convertToType(data['scriptDescription'], 'String');
      if (data.hasOwnProperty('fileSize'))
        obj.fileSize = ApiClient.convertToType(data['fileSize'], 'Number');
      if (data.hasOwnProperty('outputFilePaths'))
        obj.outputFilePaths = ApiClient.convertToType(data['outputFilePaths'], ['String']);
      if (data.hasOwnProperty('creator'))
        obj.creator = ApiClient.convertToType(data['creator'], 'String');
      if (data.hasOwnProperty('signature'))
        obj.signature = ApiClient.convertToType(data['signature'], 'String');
      if (data.hasOwnProperty('scopeName'))
        obj.scopeName = ApiClient.convertToType(data['scopeName'], 'String');
      if (data.hasOwnProperty('scopePath'))
        obj.scopePath = ApiClient.convertToType(data['scopePath'], 'String');
      if (data.hasOwnProperty('fileName'))
        obj.fileName = ApiClient.convertToType(data['fileName'], 'String');
      if (data.hasOwnProperty('updater'))
        obj.updater = ApiClient.convertToType(data['updater'], 'String');
      if (data.hasOwnProperty('shortFileName'))
        obj.shortFileName = ApiClient.convertToType(data['shortFileName'], 'String');
      if (data.hasOwnProperty('scriptRuntimeTimeoutSeconds'))
        obj.scriptRuntimeTimeoutSeconds = ApiClient.convertToType(data['scriptRuntimeTimeoutSeconds'], 'Number');
      if (data.hasOwnProperty('creatorId'))
        obj.creatorId = ApiClient.convertToType(data['creatorId'], 'String');
      if (data.hasOwnProperty('createdAt'))
        obj.createdAt = ApiClient.convertToType(data['createdAt'], 'Date');
    }
    return obj;
  }

  /**
   * Is the script runnable in Lite version
   * @member {Boolean} isAvailableForLite
   */
  exports.prototype.isAvailableForLite = undefined;

  /**
   * Input instructions
   * @member {String} inputInstructions
   */
  exports.prototype.inputInstructions = undefined;

  /**
   * Supported destinations
   * @member {Array.<String>} supportedDestinations
   */
  exports.prototype.supportedDestinations = undefined;

  /**
   * @member {module:model/V21RsoSchemasEnrichedScriptSchemaMany200Package} _package
   */
  exports.prototype._package = undefined;

  /**
   * Is the script runnable in Advanced Response Scripts
   * @member {Boolean} isAvailableForArs
   */
  exports.prototype.isAvailableForArs = undefined;

  /**
   * Script type
   * @member {String} scriptType
   */
  exports.prototype.scriptType = undefined;

  /**
   * Input example
   * @member {String} inputExample
   */
  exports.prototype.inputExample = undefined;

  /**
   * OS types
   * @member {Array.<String>} osTypes
   */
  exports.prototype.osTypes = undefined;

  /**
   * Scope ID
   * @member {String} scopeId
   */
  exports.prototype.scopeId = undefined;

  /**
   * Created by user id
   * @member {String} createdByUserId
   */
  exports.prototype.createdByUserId = undefined;

  /**
   * Is input required
   * @member {Boolean} inputRequired
   */
  exports.prototype.inputRequired = undefined;

  /**
   * Bucket name
   * @member {String} bucketName
   */
  exports.prototype.bucketName = undefined;

  /**
   * Mgmt id
   * @member {Number} mgmtId
   */
  exports.prototype.mgmtId = undefined;

  /**
   * Script name
   * @member {String} scriptName
   */
  exports.prototype.scriptName = undefined;

  /**
   * Updated at
   * @member {Date} updatedAt
   */
  exports.prototype.updatedAt = undefined;

  /**
   * Scope level
   * @member {module:model/V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200ScriptData.ScopeLevelEnum} scopeLevel
   */
  exports.prototype.scopeLevel = undefined;

  /**
   * Signature type
   * @member {String} signatureType
   */
  exports.prototype.signatureType = undefined;

  /**
   * Script ID
   * @member {String} id
   */
  exports.prototype.id = undefined;

  /**
   * Id of the updating user
   * @member {String} updaterId
   */
  exports.prototype.updaterId = undefined;

  /**
   * Version
   * @member {String} version
   */
  exports.prototype.version = undefined;

  /**
   * Created by user
   * @member {String} createdByUser
   */
  exports.prototype.createdByUser = undefined;

  /**
   * Script description
   * @member {String} scriptDescription
   */
  exports.prototype.scriptDescription = undefined;

  /**
   * File size
   * @member {Number} fileSize
   */
  exports.prototype.fileSize = undefined;

  /**
   * Output file paths
   * @member {Array.<String>} outputFilePaths
   */
  exports.prototype.outputFilePaths = undefined;

  /**
   * Name of the creating user
   * @member {String} creator
   */
  exports.prototype.creator = undefined;

  /**
   * Signature
   * @member {String} signature
   */
  exports.prototype.signature = undefined;

  /**
   * The scripts scope name
   * @member {String} scopeName
   */
  exports.prototype.scopeName = undefined;

  /**
   * The path of the scripts scope
   * @member {String} scopePath
   */
  exports.prototype.scopePath = undefined;

  /**
   * File name with full path
   * @member {String} fileName
   */
  exports.prototype.fileName = undefined;

  /**
   * Name of the updating user
   * @member {String} updater
   */
  exports.prototype.updater = undefined;

  /**
   * File name
   * @member {String} shortFileName
   */
  exports.prototype.shortFileName = undefined;

  /**
   * Script runtime timeout in seconds
   * @member {Number} scriptRuntimeTimeoutSeconds
   */
  exports.prototype.scriptRuntimeTimeoutSeconds = undefined;

  /**
   * Id of the creating user
   * @member {String} creatorId
   */
  exports.prototype.creatorId = undefined;

  /**
   * Created at
   * @member {Date} createdAt
   */
  exports.prototype.createdAt = undefined;



  /**
   * Allowed values for the <code>scopeLevel</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ScopeLevelEnum = {
    /**
     * value: "tenant"
     * @const
     */
    tenant: "tenant",

    /**
     * value: "account"
     * @const
     */
    account: "account",

    /**
     * value: "site"
     * @const
     */
    site: "site",

    /**
     * value: "group"
     * @const
     */
    group: "group",

    /**
     * value: "sentinel"
     * @const
     */
    sentinel: "sentinel",

    /**
     * value: "global"
     * @const
     */
    global: "global"
  };

  return exports;

}));
