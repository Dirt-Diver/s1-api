/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/V21IncidentsSchemasListIncidentsSchema200Details', 'model/V21IncidentsSchemasListIncidentsSchema200Notes'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./V21IncidentsSchemasListIncidentsSchema200Details'), require('./V21IncidentsSchemasListIncidentsSchema200Notes'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.V21IncidentsSchemasListIncidentsSchema200Data = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.V21IncidentsSchemasListIncidentsSchema200Details, root.S1MgmtApi.V21IncidentsSchemasListIncidentsSchema200Notes);
  }
}(this, function(ApiClient, V21IncidentsSchemasListIncidentsSchema200Details, V21IncidentsSchemasListIncidentsSchema200Notes) {
  'use strict';

  /**
   * The V21IncidentsSchemasListIncidentsSchema200Data model module.
   * @module model/V21IncidentsSchemasListIncidentsSchema200Data
   * @version 2.1
   */

  /**
   * Constructs a new <code>V21IncidentsSchemasListIncidentsSchema200Data</code>.
   * @alias module:model/V21IncidentsSchemasListIncidentsSchema200Data
   * @class
   * @param userEmail {String} Useremail
   * @param status {String} Status
   * @param reportedTime {String} Reportedtime
   * @param siteId {String} A reference to the containing site
   * @param accountId {String} A reference to the containing account
   * @param description {String} Description
   * @param osType {String} Ostype
   * @param incidentStatus {String} Incidentstatus
   * @param groupId {String} A reference to the containing network group
   * @param remediationStep {String} Remediationstep
   * @param type {String} Type
   * @param accountName {String} Name of the containing account
   * @param siteName {String} Name of the containing site
   * @param notes {Array.<module:model/V21IncidentsSchemasListIncidentsSchema200Notes>} Notes
   * @param severity {String} Severity
   * @param detectionType {String} Detectiontype
   * @param kind {String} Kind
   * @param deviceId {String} Deviceid
   * @param statusAction {String} Statusaction
   * @param detectionEngine {String} Detectionengine
   * @param trackingId1 {String} Trackingid1
   * @param trackingId2 {String} Trackingid2
   * @param groupName {String} Name of the containing network group
   * @param investigation {String} Investigation
   * @param analystVerdict {String} Analystverdict
   * @param details {module:model/V21IncidentsSchemasListIncidentsSchema200Details} 
   * @param userNotified {Boolean} Usernotified
   * @param osVersion {String} Osversion
   * @param id {Number} Id
   */
  var exports = function(userEmail, status, reportedTime, siteId, accountId, description, osType, incidentStatus, groupId, remediationStep, type, accountName, siteName, notes, severity, detectionType, kind, deviceId, statusAction, detectionEngine, trackingId1, trackingId2, groupName, investigation, analystVerdict, details, userNotified, osVersion, id) {
    this.userEmail = userEmail;
    this.status = status;
    this.reportedTime = reportedTime;
    this.siteId = siteId;
    this.accountId = accountId;
    this.description = description;
    this.osType = osType;
    this.incidentStatus = incidentStatus;
    this.groupId = groupId;
    this.remediationStep = remediationStep;
    this.type = type;
    this.accountName = accountName;
    this.siteName = siteName;
    this.notes = notes;
    this.severity = severity;
    this.detectionType = detectionType;
    this.kind = kind;
    this.deviceId = deviceId;
    this.statusAction = statusAction;
    this.detectionEngine = detectionEngine;
    this.trackingId1 = trackingId1;
    this.trackingId2 = trackingId2;
    this.groupName = groupName;
    this.investigation = investigation;
    this.analystVerdict = analystVerdict;
    this.details = details;
    this.userNotified = userNotified;
    this.osVersion = osVersion;
    this.id = id;
  };

  /**
   * Constructs a <code>V21IncidentsSchemasListIncidentsSchema200Data</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/V21IncidentsSchemasListIncidentsSchema200Data} obj Optional instance to populate.
   * @return {module:model/V21IncidentsSchemasListIncidentsSchema200Data} The populated <code>V21IncidentsSchemasListIncidentsSchema200Data</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('userEmail'))
        obj.userEmail = ApiClient.convertToType(data['userEmail'], 'String');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('reportedTime'))
        obj.reportedTime = ApiClient.convertToType(data['reportedTime'], 'String');
      if (data.hasOwnProperty('siteId'))
        obj.siteId = ApiClient.convertToType(data['siteId'], 'String');
      if (data.hasOwnProperty('accountId'))
        obj.accountId = ApiClient.convertToType(data['accountId'], 'String');
      if (data.hasOwnProperty('detail'))
        obj.detail = ApiClient.convertToType(data['detail'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('osType'))
        obj.osType = ApiClient.convertToType(data['osType'], 'String');
      if (data.hasOwnProperty('incidentStatus'))
        obj.incidentStatus = ApiClient.convertToType(data['incidentStatus'], 'String');
      if (data.hasOwnProperty('groupId'))
        obj.groupId = ApiClient.convertToType(data['groupId'], 'String');
      if (data.hasOwnProperty('remediationStep'))
        obj.remediationStep = ApiClient.convertToType(data['remediationStep'], 'String');
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('accountName'))
        obj.accountName = ApiClient.convertToType(data['accountName'], 'String');
      if (data.hasOwnProperty('siteName'))
        obj.siteName = ApiClient.convertToType(data['siteName'], 'String');
      if (data.hasOwnProperty('notes'))
        obj.notes = ApiClient.convertToType(data['notes'], [V21IncidentsSchemasListIncidentsSchema200Notes]);
      if (data.hasOwnProperty('network'))
        obj.network = ApiClient.convertToType(data['network'], 'String');
      if (data.hasOwnProperty('severity'))
        obj.severity = ApiClient.convertToType(data['severity'], 'String');
      if (data.hasOwnProperty('detectionType'))
        obj.detectionType = ApiClient.convertToType(data['detectionType'], 'String');
      if (data.hasOwnProperty('kind'))
        obj.kind = ApiClient.convertToType(data['kind'], 'String');
      if (data.hasOwnProperty('deviceId'))
        obj.deviceId = ApiClient.convertToType(data['deviceId'], 'String');
      if (data.hasOwnProperty('statusAction'))
        obj.statusAction = ApiClient.convertToType(data['statusAction'], 'String');
      if (data.hasOwnProperty('detectionEngine'))
        obj.detectionEngine = ApiClient.convertToType(data['detectionEngine'], 'String');
      if (data.hasOwnProperty('trackingId1'))
        obj.trackingId1 = ApiClient.convertToType(data['trackingId1'], 'String');
      if (data.hasOwnProperty('trackingId2'))
        obj.trackingId2 = ApiClient.convertToType(data['trackingId2'], 'String');
      if (data.hasOwnProperty('groupName'))
        obj.groupName = ApiClient.convertToType(data['groupName'], 'String');
      if (data.hasOwnProperty('investigation'))
        obj.investigation = ApiClient.convertToType(data['investigation'], 'String');
      if (data.hasOwnProperty('analystVerdict'))
        obj.analystVerdict = ApiClient.convertToType(data['analystVerdict'], 'String');
      if (data.hasOwnProperty('details'))
        obj.details = V21IncidentsSchemasListIncidentsSchema200Details.constructFromObject(data['details']);
      if (data.hasOwnProperty('userNotified'))
        obj.userNotified = ApiClient.convertToType(data['userNotified'], 'Boolean');
      if (data.hasOwnProperty('osVersion'))
        obj.osVersion = ApiClient.convertToType(data['osVersion'], 'String');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
    }
    return obj;
  }

  /**
   * Useremail
   * @member {String} userEmail
   */
  exports.prototype.userEmail = undefined;

  /**
   * Status
   * @member {String} status
   */
  exports.prototype.status = undefined;

  /**
   * Reportedtime
   * @member {String} reportedTime
   */
  exports.prototype.reportedTime = undefined;

  /**
   * A reference to the containing site
   * @member {String} siteId
   */
  exports.prototype.siteId = undefined;

  /**
   * A reference to the containing account
   * @member {String} accountId
   */
  exports.prototype.accountId = undefined;

  /**
   * Detail
   * @member {String} detail
   */
  exports.prototype.detail = undefined;

  /**
   * Description
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * Ostype
   * @member {String} osType
   */
  exports.prototype.osType = undefined;

  /**
   * Incidentstatus
   * @member {String} incidentStatus
   */
  exports.prototype.incidentStatus = undefined;

  /**
   * A reference to the containing network group
   * @member {String} groupId
   */
  exports.prototype.groupId = undefined;

  /**
   * Remediationstep
   * @member {String} remediationStep
   */
  exports.prototype.remediationStep = undefined;

  /**
   * Type
   * @member {String} type
   */
  exports.prototype.type = undefined;

  /**
   * Name of the containing account
   * @member {String} accountName
   */
  exports.prototype.accountName = undefined;

  /**
   * Name of the containing site
   * @member {String} siteName
   */
  exports.prototype.siteName = undefined;

  /**
   * Notes
   * @member {Array.<module:model/V21IncidentsSchemasListIncidentsSchema200Notes>} notes
   */
  exports.prototype.notes = undefined;

  /**
   * Network
   * @member {String} network
   */
  exports.prototype.network = undefined;

  /**
   * Severity
   * @member {String} severity
   */
  exports.prototype.severity = undefined;

  /**
   * Detectiontype
   * @member {String} detectionType
   */
  exports.prototype.detectionType = undefined;

  /**
   * Kind
   * @member {String} kind
   */
  exports.prototype.kind = undefined;

  /**
   * Deviceid
   * @member {String} deviceId
   */
  exports.prototype.deviceId = undefined;

  /**
   * Statusaction
   * @member {String} statusAction
   */
  exports.prototype.statusAction = undefined;

  /**
   * Detectionengine
   * @member {String} detectionEngine
   */
  exports.prototype.detectionEngine = undefined;

  /**
   * Trackingid1
   * @member {String} trackingId1
   */
  exports.prototype.trackingId1 = undefined;

  /**
   * Trackingid2
   * @member {String} trackingId2
   */
  exports.prototype.trackingId2 = undefined;

  /**
   * Name of the containing network group
   * @member {String} groupName
   */
  exports.prototype.groupName = undefined;

  /**
   * Investigation
   * @member {String} investigation
   */
  exports.prototype.investigation = undefined;

  /**
   * Analystverdict
   * @member {String} analystVerdict
   */
  exports.prototype.analystVerdict = undefined;

  /**
   * @member {module:model/V21IncidentsSchemasListIncidentsSchema200Details} details
   */
  exports.prototype.details = undefined;

  /**
   * Usernotified
   * @member {Boolean} userNotified
   */
  exports.prototype.userNotified = undefined;

  /**
   * Osversion
   * @member {String} osVersion
   */
  exports.prototype.osVersion = undefined;

  /**
   * Id
   * @member {Number} id
   */
  exports.prototype.id = undefined;


  return exports;

}));
