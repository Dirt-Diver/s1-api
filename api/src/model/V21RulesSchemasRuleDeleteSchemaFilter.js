/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.V21RulesSchemasRuleDeleteSchemaFilter = factory(root.S1MgmtApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The V21RulesSchemasRuleDeleteSchemaFilter model module.
   * @module model/V21RulesSchemasRuleDeleteSchemaFilter
   * @version 2.1
   */

  /**
   * Constructs a new <code>V21RulesSchemasRuleDeleteSchemaFilter</code>.
   * Filter
   * @alias module:model/V21RulesSchemasRuleDeleteSchemaFilter
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>V21RulesSchemasRuleDeleteSchemaFilter</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/V21RulesSchemasRuleDeleteSchemaFilter} obj Optional instance to populate.
   * @return {module:model/V21RulesSchemasRuleDeleteSchemaFilter} The populated <code>V21RulesSchemasRuleDeleteSchemaFilter</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('ids'))
        obj.ids = ApiClient.convertToType(data['ids'], ['String']);
      if (data.hasOwnProperty('creator__contains'))
        obj.creatorContains = ApiClient.convertToType(data['creator__contains'], ['String']);
      if (data.hasOwnProperty('scopes'))
        obj.scopes = ApiClient.convertToType(data['scopes'], ['String']);
      if (data.hasOwnProperty('expired'))
        obj.expired = ApiClient.convertToType(data['expired'], 'Boolean');
      if (data.hasOwnProperty('activeResponse'))
        obj.activeResponse = ApiClient.convertToType(data['activeResponse'], 'Boolean');
      if (data.hasOwnProperty('siteIds'))
        obj.siteIds = ApiClient.convertToType(data['siteIds'], ['String']);
      if (data.hasOwnProperty('reachedLimit'))
        obj.reachedLimit = ApiClient.convertToType(data['reachedLimit'], 'Boolean');
      if (data.hasOwnProperty('expirationMode'))
        obj.expirationMode = ApiClient.convertToType(data['expirationMode'], 'String');
      if (data.hasOwnProperty('groupIds'))
        obj.groupIds = ApiClient.convertToType(data['groupIds'], ['String']);
      if (data.hasOwnProperty('accountIds'))
        obj.accountIds = ApiClient.convertToType(data['accountIds'], ['String']);
      if (data.hasOwnProperty('queryType'))
        obj.queryType = ApiClient.convertToType(data['queryType'], 'String');
      if (data.hasOwnProperty('query'))
        obj.query = ApiClient.convertToType(data['query'], ['String']);
      if (data.hasOwnProperty('s1ql__contains'))
        obj.s1qlContains = ApiClient.convertToType(data['s1ql__contains'], ['String']);
      if (data.hasOwnProperty('description__contains'))
        obj.descriptionContains = ApiClient.convertToType(data['description__contains'], ['String']);
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], ['String']);
      if (data.hasOwnProperty('name__contains'))
        obj.nameContains = ApiClient.convertToType(data['name__contains'], ['String']);
    }
    return obj;
  }

  /**
   * To filter by Rule ID, enter one or more Rule IDs, separated by commas.
   * @member {Array.<String>} ids
   */
  exports.prototype.ids = undefined;

  /**
   * Free-text filter by rule creator. You can enter multiple values, separated by commas.
   * @member {Array.<String>} creatorContains
   */
  exports.prototype.creatorContains = undefined;

  /**
   * To filter by scope, enter one or more scopes, separated by commas.
   * @member {Array.<module:model/V21RulesSchemasRuleDeleteSchemaFilter.ScopesEnum>} scopes
   */
  exports.prototype.scopes = undefined;

  /**
   * Rule expired or not.
   * @member {Boolean} expired
   */
  exports.prototype.expired = undefined;

  /**
   * The active response status for the rule.
   * @member {Boolean} activeResponse
   */
  exports.prototype.activeResponse = undefined;

  /**
   * List of Site IDs to filter by
   * @member {Array.<String>} siteIds
   */
  exports.prototype.siteIds = undefined;

  /**
   * Rule reached limit or not.
   * @member {Boolean} reachedLimit
   */
  exports.prototype.reachedLimit = undefined;

  /**
   * The expiration mode.
   * @member {module:model/V21RulesSchemasRuleDeleteSchemaFilter.ExpirationModeEnum} expirationMode
   */
  exports.prototype.expirationMode = undefined;

  /**
   * List of Group IDs to filter by
   * @member {Array.<String>} groupIds
   */
  exports.prototype.groupIds = undefined;

  /**
   * List of Account IDs to filter by
   * @member {Array.<String>} accountIds
   */
  exports.prototype.accountIds = undefined;

  /**
   * The query type.
   * @member {module:model/V21RulesSchemasRuleDeleteSchemaFilter.QueryTypeEnum} queryType
   */
  exports.prototype.queryType = undefined;

  /**
   * Free-text filter by S1 query. You can enter multiple values, separated by commas.
   * @member {Array.<String>} query
   */
  exports.prototype.query = undefined;

  /**
   * Free-text filter by S1 query. You can enter multiple values, separated by commas.
   * @member {Array.<String>} s1qlContains
   */
  exports.prototype.s1qlContains = undefined;

  /**
   * Free-text filter by rule description. You can enter multiple values, separated by commas.
   * @member {Array.<String>} descriptionContains
   */
  exports.prototype.descriptionContains = undefined;

  /**
   * To filter by status, enter one or more statuses, separated by commas.
   * @member {Array.<module:model/V21RulesSchemasRuleDeleteSchemaFilter.StatusEnum>} status
   */
  exports.prototype.status = undefined;

  /**
   * Free-text filter by rule name. You can enter multiple values, separated by commas.
   * @member {Array.<String>} nameContains
   */
  exports.prototype.nameContains = undefined;



  /**
   * Allowed values for the <code>scopes</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ScopesEnum = {
    /**
     * value: "account"
     * @const
     */
    account: "account",

    /**
     * value: "site"
     * @const
     */
    site: "site",

    /**
     * value: "group"
     * @const
     */
    group: "group",

    /**
     * value: "global"
     * @const
     */
    global: "global"
  };


  /**
   * Allowed values for the <code>expirationMode</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ExpirationModeEnum = {
    /**
     * value: "Permanent"
     * @const
     */
    permanent: "Permanent",

    /**
     * value: "Temporary"
     * @const
     */
    temporary: "Temporary"
  };


  /**
   * Allowed values for the <code>queryType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.QueryTypeEnum = {
    /**
     * value: "events"
     * @const
     */
    events: "events",

    /**
     * value: "processes"
     * @const
     */
    processes: "processes",

    /**
     * value: "correlation"
     * @const
     */
    correlation: "correlation"
  };


  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StatusEnum = {
    /**
     * value: "Draft"
     * @const
     */
    draft: "Draft",

    /**
     * value: "Activating"
     * @const
     */
    activating: "Activating",

    /**
     * value: "Active"
     * @const
     */
    active: "Active",

    /**
     * value: "Disabling"
     * @const
     */
    disabling: "Disabling",

    /**
     * value: "Disabled"
     * @const
     */
    disabled: "Disabled",

    /**
     * value: "Deleted"
     * @const
     */
    deleted: "Deleted",

    /**
     * value: "Deleting"
     * @const
     */
    deleting: "Deleting"
  };

  return exports;

}));
