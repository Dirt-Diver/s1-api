/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasBaseRisksCveSchemaMany200Data = factory(root.S1MgmtApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The V21ApplicationManagementApplicationManagementSchemasBaseRisksCveSchemaMany200Data model module.
   * @module model/V21ApplicationManagementApplicationManagementSchemasBaseRisksCveSchemaMany200Data
   * @version 2.1
   */

  /**
   * Constructs a new <code>V21ApplicationManagementApplicationManagementSchemasBaseRisksCveSchemaMany200Data</code>.
   * @alias module:model/V21ApplicationManagementApplicationManagementSchemasBaseRisksCveSchemaMany200Data
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>V21ApplicationManagementApplicationManagementSchemasBaseRisksCveSchemaMany200Data</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/V21ApplicationManagementApplicationManagementSchemasBaseRisksCveSchemaMany200Data} obj Optional instance to populate.
   * @return {module:model/V21ApplicationManagementApplicationManagementSchemasBaseRisksCveSchemaMany200Data} The populated <code>V21ApplicationManagementApplicationManagementSchemasBaseRisksCveSchemaMany200Data</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('osType'))
        obj.osType = ApiClient.convertToType(data['osType'], 'String');
      if (data.hasOwnProperty('mitigationStatusChangedBy'))
        obj.mitigationStatusChangedBy = ApiClient.convertToType(data['mitigationStatusChangedBy'], 'String');
      if (data.hasOwnProperty('mitigationStatusChangeTime'))
        obj.mitigationStatusChangeTime = ApiClient.convertToType(data['mitigationStatusChangeTime'], 'Date');
      if (data.hasOwnProperty('nvdCvssVersion'))
        obj.nvdCvssVersion = ApiClient.convertToType(data['nvdCvssVersion'], 'String');
      if (data.hasOwnProperty('lastScanResult'))
        obj.lastScanResult = ApiClient.convertToType(data['lastScanResult'], 'String');
      if (data.hasOwnProperty('endpointName'))
        obj.endpointName = ApiClient.convertToType(data['endpointName'], 'String');
      if (data.hasOwnProperty('applicationVersion'))
        obj.applicationVersion = ApiClient.convertToType(data['applicationVersion'], 'String');
      if (data.hasOwnProperty('severity'))
        obj.severity = ApiClient.convertToType(data['severity'], 'String');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('mitigationStatusReason'))
        obj.mitigationStatusReason = ApiClient.convertToType(data['mitigationStatusReason'], 'String');
      if (data.hasOwnProperty('endpointId'))
        obj.endpointId = ApiClient.convertToType(data['endpointId'], 'String');
      if (data.hasOwnProperty('nvdBaseScore'))
        obj.nvdBaseScore = ApiClient.convertToType(data['nvdBaseScore'], 'String');
      if (data.hasOwnProperty('daysDetected'))
        obj.daysDetected = ApiClient.convertToType(data['daysDetected'], 'Number');
      if (data.hasOwnProperty('publishedDate'))
        obj.publishedDate = ApiClient.convertToType(data['publishedDate'], 'Date');
      if (data.hasOwnProperty('cvssVersion'))
        obj.cvssVersion = ApiClient.convertToType(data['cvssVersion'], 'String');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('markedBy'))
        obj.markedBy = ApiClient.convertToType(data['markedBy'], 'String');
      if (data.hasOwnProperty('riskScore'))
        obj.riskScore = ApiClient.convertToType(data['riskScore'], 'String');
      if (data.hasOwnProperty('markType'))
        obj.markType = ApiClient.convertToType(data['markType'], Object);
      if (data.hasOwnProperty('exploitCodeMaturity'))
        obj.exploitCodeMaturity = ApiClient.convertToType(data['exploitCodeMaturity'], 'String');
      if (data.hasOwnProperty('applicationName'))
        obj.applicationName = ApiClient.convertToType(data['applicationName'], 'String');
      if (data.hasOwnProperty('lastScanDate'))
        obj.lastScanDate = ApiClient.convertToType(data['lastScanDate'], 'Date');
      if (data.hasOwnProperty('reason'))
        obj.reason = ApiClient.convertToType(data['reason'], 'String');
      if (data.hasOwnProperty('reportConfidence'))
        obj.reportConfidence = ApiClient.convertToType(data['reportConfidence'], 'String');
      if (data.hasOwnProperty('markedDate'))
        obj.markedDate = ApiClient.convertToType(data['markedDate'], 'Date');
      if (data.hasOwnProperty('cveId'))
        obj.cveId = ApiClient.convertToType(data['cveId'], 'String');
      if (data.hasOwnProperty('application'))
        obj.application = ApiClient.convertToType(data['application'], 'String');
      if (data.hasOwnProperty('baseScore'))
        obj.baseScore = ApiClient.convertToType(data['baseScore'], 'String');
      if (data.hasOwnProperty('detectionDate'))
        obj.detectionDate = ApiClient.convertToType(data['detectionDate'], 'Date');
      if (data.hasOwnProperty('mitigationStatus'))
        obj.mitigationStatus = ApiClient.convertToType(data['mitigationStatus'], 'String');
      if (data.hasOwnProperty('applicationVendor'))
        obj.applicationVendor = ApiClient.convertToType(data['applicationVendor'], 'String');
      if (data.hasOwnProperty('remediationLevel'))
        obj.remediationLevel = ApiClient.convertToType(data['remediationLevel'], 'String');
      if (data.hasOwnProperty('endpointType'))
        obj.endpointType = ApiClient.convertToType(data['endpointType'], 'String');
    }
    return obj;
  }

  /**
   * OS type
   * @member {module:model/V21ApplicationManagementApplicationManagementSchemasBaseRisksCveSchemaMany200Data.OsTypeEnum} osType
   */
  exports.prototype.osType = undefined;

  /**
   * Mitigation status changer
   * @member {String} mitigationStatusChangedBy
   */
  exports.prototype.mitigationStatusChangedBy = undefined;

  /**
   * Mitigation status change time
   * @member {Date} mitigationStatusChangeTime
   */
  exports.prototype.mitigationStatusChangeTime = undefined;

  /**
   * Available for VLN SKU
   * @member {String} nvdCvssVersion
   */
  exports.prototype.nvdCvssVersion = undefined;

  /**
   * Last scan result
   * @member {String} lastScanResult
   */
  exports.prototype.lastScanResult = undefined;

  /**
   * Endpoint name
   * @member {String} endpointName
   */
  exports.prototype.endpointName = undefined;

  /**
   * Application version
   * @member {String} applicationVersion
   */
  exports.prototype.applicationVersion = undefined;

  /**
   * Severity
   * @member {String} severity
   */
  exports.prototype.severity = undefined;

  /**
   * Id
   * @member {String} id
   */
  exports.prototype.id = undefined;

  /**
   * Mitigation status reason
   * @member {String} mitigationStatusReason
   */
  exports.prototype.mitigationStatusReason = undefined;

  /**
   * Endpoint id
   * @member {String} endpointId
   */
  exports.prototype.endpointId = undefined;

  /**
   * Available for VLN SKU
   * @member {String} nvdBaseScore
   */
  exports.prototype.nvdBaseScore = undefined;

  /**
   * Days detected
   * @member {Number} daysDetected
   */
  exports.prototype.daysDetected = undefined;

  /**
   * Published date
   * @member {Date} publishedDate
   */
  exports.prototype.publishedDate = undefined;

  /**
   * Cvss version
   * @member {String} cvssVersion
   */
  exports.prototype.cvssVersion = undefined;

  /**
   * Risk status
   * @member {module:model/V21ApplicationManagementApplicationManagementSchemasBaseRisksCveSchemaMany200Data.StatusEnum} status
   */
  exports.prototype.status = undefined;

  /**
   * Marked by
   * @member {String} markedBy
   */
  exports.prototype.markedBy = undefined;

  /**
   * Available for VLN SKU
   * @member {String} riskScore
   */
  exports.prototype.riskScore = undefined;

  /**
   * Mark type
   * @member {Object} markType
   */
  exports.prototype.markType = undefined;

  /**
   * Available for VLN SKU
   * @member {module:model/V21ApplicationManagementApplicationManagementSchemasBaseRisksCveSchemaMany200Data.ExploitCodeMaturityEnum} exploitCodeMaturity
   */
  exports.prototype.exploitCodeMaturity = undefined;

  /**
   * Application name
   * @member {String} applicationName
   */
  exports.prototype.applicationName = undefined;

  /**
   * Last scan date
   * @member {Date} lastScanDate
   */
  exports.prototype.lastScanDate = undefined;

  /**
   * Reason
   * @member {String} reason
   */
  exports.prototype.reason = undefined;

  /**
   * Available for VLN SKU
   * @member {module:model/V21ApplicationManagementApplicationManagementSchemasBaseRisksCveSchemaMany200Data.ReportConfidenceEnum} reportConfidence
   */
  exports.prototype.reportConfidence = undefined;

  /**
   * Marked date
   * @member {Date} markedDate
   */
  exports.prototype.markedDate = undefined;

  /**
   * CVE Id
   * @member {String} cveId
   */
  exports.prototype.cveId = undefined;

  /**
   * Composed application name
   * @member {String} application
   */
  exports.prototype.application = undefined;

  /**
   * Not available with VLN SKU
   * @member {String} baseScore
   */
  exports.prototype.baseScore = undefined;

  /**
   * Detection date
   * @member {Date} detectionDate
   */
  exports.prototype.detectionDate = undefined;

  /**
   * Risk mitigation status
   * @member {module:model/V21ApplicationManagementApplicationManagementSchemasBaseRisksCveSchemaMany200Data.MitigationStatusEnum} mitigationStatus
   */
  exports.prototype.mitigationStatus = undefined;

  /**
   * Application vendor
   * @member {String} applicationVendor
   */
  exports.prototype.applicationVendor = undefined;

  /**
   * Available for VLN SKU
   * @member {module:model/V21ApplicationManagementApplicationManagementSchemasBaseRisksCveSchemaMany200Data.RemediationLevelEnum} remediationLevel
   */
  exports.prototype.remediationLevel = undefined;

  /**
   * Endpoint type
   * @member {String} endpointType
   */
  exports.prototype.endpointType = undefined;



  /**
   * Allowed values for the <code>osType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.OsTypeEnum = {
    /**
     * value: "linux"
     * @const
     */
    linux: "linux",

    /**
     * value: "macos"
     * @const
     */
    macos: "macos",

    /**
     * value: "windows"
     * @const
     */
    windows: "windows",

    /**
     * value: "windows_legacy"
     * @const
     */
    windowsLegacy: "windows_legacy"
  };


  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StatusEnum = {
    /**
     * value: "Detected"
     * @const
     */
    detected: "Detected",

    /**
     * value: "Removed"
     * @const
     */
    removed: "Removed"
  };


  /**
   * Allowed values for the <code>exploitCodeMaturity</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ExploitCodeMaturityEnum = {
    /**
     * value: "Not Defined"
     * @const
     */
    notDefined: "Not Defined",

    /**
     * value: "Unproven"
     * @const
     */
    unproven: "Unproven",

    /**
     * value: "Proof of Concept"
     * @const
     */
    proofOfConcept: "Proof of Concept",

    /**
     * value: "Functional"
     * @const
     */
    functional: "Functional",

    /**
     * value: "High"
     * @const
     */
    high: "High"
  };


  /**
   * Allowed values for the <code>reportConfidence</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ReportConfidenceEnum = {
    /**
     * value: "Not Defined"
     * @const
     */
    notDefined: "Not Defined",

    /**
     * value: "Unknown"
     * @const
     */
    unknown: "Unknown",

    /**
     * value: "Reasonable"
     * @const
     */
    reasonable: "Reasonable",

    /**
     * value: "Confirmed"
     * @const
     */
    confirmed: "Confirmed"
  };


  /**
   * Allowed values for the <code>mitigationStatus</code> property.
   * @enum {String}
   * @readonly
   */
  exports.MitigationStatusEnum = {
    /**
     * value: "Not mitigated"
     * @const
     */
    notMitigated: "Not mitigated",

    /**
     * value: "To be patched"
     * @const
     */
    toBePatched: "To be patched",

    /**
     * value: "On hold"
     * @const
     */
    onHold: "On hold"
  };


  /**
   * Allowed values for the <code>remediationLevel</code> property.
   * @enum {String}
   * @readonly
   */
  exports.RemediationLevelEnum = {
    /**
     * value: "Not Defined"
     * @const
     */
    notDefined: "Not Defined",

    /**
     * value: "Official Fix"
     * @const
     */
    officialFix: "Official Fix",

    /**
     * value: "Temporary Fix"
     * @const
     */
    temporaryFix: "Temporary Fix",

    /**
     * value: "Workaround"
     * @const
     */
    workaround: "Workaround",

    /**
     * value: "Unavailable"
     * @const
     */
    unavailable: "Unavailable"
  };

  return exports;

}));
