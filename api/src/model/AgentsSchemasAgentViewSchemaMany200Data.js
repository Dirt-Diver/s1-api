/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AgentsSchemasAgentViewSchemaMany200ActiveDirectory', 'model/AgentsSchemasAgentViewSchemaMany200CloudProviders', 'model/AgentsSchemasAgentViewSchemaMany200ContainerizedWorkloadCounts', 'model/AgentsSchemasAgentViewSchemaMany200Locations', 'model/AgentsSchemasAgentViewSchemaMany200NetworkInterfaces', 'model/AgentsSchemasAgentViewSchemaMany200ProxyStates', 'model/AgentsSchemasAgentViewSchemaMany200Tags'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AgentsSchemasAgentViewSchemaMany200ActiveDirectory'), require('./AgentsSchemasAgentViewSchemaMany200CloudProviders'), require('./AgentsSchemasAgentViewSchemaMany200ContainerizedWorkloadCounts'), require('./AgentsSchemasAgentViewSchemaMany200Locations'), require('./AgentsSchemasAgentViewSchemaMany200NetworkInterfaces'), require('./AgentsSchemasAgentViewSchemaMany200ProxyStates'), require('./AgentsSchemasAgentViewSchemaMany200Tags'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.AgentsSchemasAgentViewSchemaMany200Data = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.AgentsSchemasAgentViewSchemaMany200ActiveDirectory, root.S1MgmtApi.AgentsSchemasAgentViewSchemaMany200CloudProviders, root.S1MgmtApi.AgentsSchemasAgentViewSchemaMany200ContainerizedWorkloadCounts, root.S1MgmtApi.AgentsSchemasAgentViewSchemaMany200Locations, root.S1MgmtApi.AgentsSchemasAgentViewSchemaMany200NetworkInterfaces, root.S1MgmtApi.AgentsSchemasAgentViewSchemaMany200ProxyStates, root.S1MgmtApi.AgentsSchemasAgentViewSchemaMany200Tags);
  }
}(this, function(ApiClient, AgentsSchemasAgentViewSchemaMany200ActiveDirectory, AgentsSchemasAgentViewSchemaMany200CloudProviders, AgentsSchemasAgentViewSchemaMany200ContainerizedWorkloadCounts, AgentsSchemasAgentViewSchemaMany200Locations, AgentsSchemasAgentViewSchemaMany200NetworkInterfaces, AgentsSchemasAgentViewSchemaMany200ProxyStates, AgentsSchemasAgentViewSchemaMany200Tags) {
  'use strict';

  /**
   * The AgentsSchemasAgentViewSchemaMany200Data model module.
   * @module model/AgentsSchemasAgentViewSchemaMany200Data
   * @version 2.1
   */

  /**
   * Constructs a new <code>AgentsSchemasAgentViewSchemaMany200Data</code>.
   * @alias module:model/AgentsSchemasAgentViewSchemaMany200Data
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>AgentsSchemasAgentViewSchemaMany200Data</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AgentsSchemasAgentViewSchemaMany200Data} obj Optional instance to populate.
   * @return {module:model/AgentsSchemasAgentViewSchemaMany200Data} The populated <code>AgentsSchemasAgentViewSchemaMany200Data</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('licenseKey'))
        obj.licenseKey = ApiClient.convertToType(data['licenseKey'], 'String');
      if (data.hasOwnProperty('machineType'))
        obj.machineType = ApiClient.convertToType(data['machineType'], 'String');
      if (data.hasOwnProperty('mitigationModeSuspicious'))
        obj.mitigationModeSuspicious = ApiClient.convertToType(data['mitigationModeSuspicious'], 'String');
      if (data.hasOwnProperty('inRemoteShellSession'))
        obj.inRemoteShellSession = ApiClient.convertToType(data['inRemoteShellSession'], 'Boolean');
      if (data.hasOwnProperty('cpuCount'))
        obj.cpuCount = ApiClient.convertToType(data['cpuCount'], 'Number');
      if (data.hasOwnProperty('externalIp'))
        obj.externalIp = ApiClient.convertToType(data['externalIp'], 'String');
      if (data.hasOwnProperty('hasContainerizedWorkload'))
        obj.hasContainerizedWorkload = ApiClient.convertToType(data['hasContainerizedWorkload'], 'Boolean');
      if (data.hasOwnProperty('threatRebootRequired'))
        obj.threatRebootRequired = ApiClient.convertToType(data['threatRebootRequired'], 'Boolean');
      if (data.hasOwnProperty('detectionState'))
        obj.detectionState = ApiClient.convertToType(data['detectionState'], 'String');
      if (data.hasOwnProperty('consoleMigrationStatus'))
        obj.consoleMigrationStatus = ApiClient.convertToType(data['consoleMigrationStatus'], 'String');
      if (data.hasOwnProperty('lastSuccessfulScanDate'))
        obj.lastSuccessfulScanDate = ApiClient.convertToType(data['lastSuccessfulScanDate'], 'Date');
      if (data.hasOwnProperty('agentVersion'))
        obj.agentVersion = ApiClient.convertToType(data['agentVersion'], 'String');
      if (data.hasOwnProperty('lastLoggedInUserName'))
        obj.lastLoggedInUserName = ApiClient.convertToType(data['lastLoggedInUserName'], 'String');
      if (data.hasOwnProperty('encryptedApplications'))
        obj.encryptedApplications = ApiClient.convertToType(data['encryptedApplications'], 'Boolean');
      if (data.hasOwnProperty('cloudProviders'))
        obj.cloudProviders = ApiClient.convertToType(data['cloudProviders'], {'String': AgentsSchemasAgentViewSchemaMany200CloudProviders});
      if (data.hasOwnProperty('tags'))
        obj.tags = AgentsSchemasAgentViewSchemaMany200Tags.constructFromObject(data['tags']);
      if (data.hasOwnProperty('rangerVersion'))
        obj.rangerVersion = ApiClient.convertToType(data['rangerVersion'], 'String');
      if (data.hasOwnProperty('isActive'))
        obj.isActive = ApiClient.convertToType(data['isActive'], 'Boolean');
      if (data.hasOwnProperty('mitigationMode'))
        obj.mitigationMode = ApiClient.convertToType(data['mitigationMode'], 'String');
      if (data.hasOwnProperty('operationalState'))
        obj.operationalState = ApiClient.convertToType(data['operationalState'], 'String');
      if (data.hasOwnProperty('accountId'))
        obj.accountId = ApiClient.convertToType(data['accountId'], 'String');
      if (data.hasOwnProperty('updatedAt'))
        obj.updatedAt = ApiClient.convertToType(data['updatedAt'], 'Date');
      if (data.hasOwnProperty('modelName'))
        obj.modelName = ApiClient.convertToType(data['modelName'], 'String');
      if (data.hasOwnProperty('totalMemory'))
        obj.totalMemory = ApiClient.convertToType(data['totalMemory'], 'Number');
      if (data.hasOwnProperty('coreCount'))
        obj.coreCount = ApiClient.convertToType(data['coreCount'], 'Number');
      if (data.hasOwnProperty('serialNumber'))
        obj.serialNumber = ApiClient.convertToType(data['serialNumber'], 'String');
      if (data.hasOwnProperty('activeThreats'))
        obj.activeThreats = ApiClient.convertToType(data['activeThreats'], 'Number');
      if (data.hasOwnProperty('activeDirectory'))
        obj.activeDirectory = AgentsSchemasAgentViewSchemaMany200ActiveDirectory.constructFromObject(data['activeDirectory']);
      if (data.hasOwnProperty('allowRemoteShell'))
        obj.allowRemoteShell = ApiClient.convertToType(data['allowRemoteShell'], 'Boolean');
      if (data.hasOwnProperty('locationType'))
        obj.locationType = ApiClient.convertToType(data['locationType'], 'String');
      if (data.hasOwnProperty('groupIp'))
        obj.groupIp = ApiClient.convertToType(data['groupIp'], 'String');
      if (data.hasOwnProperty('groupUpdatedAt'))
        obj.groupUpdatedAt = ApiClient.convertToType(data['groupUpdatedAt'], 'Date');
      if (data.hasOwnProperty('networkQuarantineEnabled'))
        obj.networkQuarantineEnabled = ApiClient.convertToType(data['networkQuarantineEnabled'], 'Boolean');
      if (data.hasOwnProperty('scanStartedAt'))
        obj.scanStartedAt = ApiClient.convertToType(data['scanStartedAt'], 'Date');
      if (data.hasOwnProperty('groupId'))
        obj.groupId = ApiClient.convertToType(data['groupId'], 'String');
      if (data.hasOwnProperty('lastActiveDate'))
        obj.lastActiveDate = ApiClient.convertToType(data['lastActiveDate'], 'Date');
      if (data.hasOwnProperty('policyUpdatedAt'))
        obj.policyUpdatedAt = ApiClient.convertToType(data['policyUpdatedAt'], 'Date');
      if (data.hasOwnProperty('siteName'))
        obj.siteName = ApiClient.convertToType(data['siteName'], 'String');
      if (data.hasOwnProperty('osUsername'))
        obj.osUsername = ApiClient.convertToType(data['osUsername'], 'String');
      if (data.hasOwnProperty('osType'))
        obj.osType = ApiClient.convertToType(data['osType'], 'String');
      if (data.hasOwnProperty('showAlertIcon'))
        obj.showAlertIcon = ApiClient.convertToType(data['showAlertIcon'], 'Boolean');
      if (data.hasOwnProperty('appsVulnerabilityStatus'))
        obj.appsVulnerabilityStatus = ApiClient.convertToType(data['appsVulnerabilityStatus'], 'String');
      if (data.hasOwnProperty('isUpToDate'))
        obj.isUpToDate = ApiClient.convertToType(data['isUpToDate'], 'Boolean');
      if (data.hasOwnProperty('rangerStatus'))
        obj.rangerStatus = ApiClient.convertToType(data['rangerStatus'], 'String');
      if (data.hasOwnProperty('osRevision'))
        obj.osRevision = ApiClient.convertToType(data['osRevision'], 'String');
      if (data.hasOwnProperty('remoteProfilingState'))
        obj.remoteProfilingState = ApiClient.convertToType(data['remoteProfilingState'], 'String');
      if (data.hasOwnProperty('storageType'))
        obj.storageType = ApiClient.convertToType(data['storageType'], 'String');
      if (data.hasOwnProperty('operationalStateExpiration'))
        obj.operationalStateExpiration = ApiClient.convertToType(data['operationalStateExpiration'], 'Date');
      if (data.hasOwnProperty('computerName'))
        obj.computerName = ApiClient.convertToType(data['computerName'], 'String');
      if (data.hasOwnProperty('uuid'))
        obj.uuid = ApiClient.convertToType(data['uuid'], 'String');
      if (data.hasOwnProperty('lastIpToMgmt'))
        obj.lastIpToMgmt = ApiClient.convertToType(data['lastIpToMgmt'], 'String');
      if (data.hasOwnProperty('accountName'))
        obj.accountName = ApiClient.convertToType(data['accountName'], 'String');
      if (data.hasOwnProperty('networkStatus'))
        obj.networkStatus = ApiClient.convertToType(data['networkStatus'], 'String');
      if (data.hasOwnProperty('scanStatus'))
        obj.scanStatus = ApiClient.convertToType(data['scanStatus'], 'String');
      if (data.hasOwnProperty('osArch'))
        obj.osArch = ApiClient.convertToType(data['osArch'], 'String');
      if (data.hasOwnProperty('locations'))
        obj.locations = ApiClient.convertToType(data['locations'], [AgentsSchemasAgentViewSchemaMany200Locations]);
      if (data.hasOwnProperty('isUninstalled'))
        obj.isUninstalled = ApiClient.convertToType(data['isUninstalled'], 'Boolean');
      if (data.hasOwnProperty('storageName'))
        obj.storageName = ApiClient.convertToType(data['storageName'], 'String');
      if (data.hasOwnProperty('isPendingUninstall'))
        obj.isPendingUninstall = ApiClient.convertToType(data['isPendingUninstall'], 'Boolean');
      if (data.hasOwnProperty('proxyStates'))
        obj.proxyStates = AgentsSchemasAgentViewSchemaMany200ProxyStates.constructFromObject(data['proxyStates']);
      if (data.hasOwnProperty('remoteProfilingStateExpiration'))
        obj.remoteProfilingStateExpiration = ApiClient.convertToType(data['remoteProfilingStateExpiration'], 'Date');
      if (data.hasOwnProperty('osName'))
        obj.osName = ApiClient.convertToType(data['osName'], 'String');
      if (data.hasOwnProperty('scanFinishedAt'))
        obj.scanFinishedAt = ApiClient.convertToType(data['scanFinishedAt'], 'Date');
      if (data.hasOwnProperty('osStartTime'))
        obj.osStartTime = ApiClient.convertToType(data['osStartTime'], 'Date');
      if (data.hasOwnProperty('siteId'))
        obj.siteId = ApiClient.convertToType(data['siteId'], 'String');
      if (data.hasOwnProperty('userActionsNeeded'))
        obj.userActionsNeeded = ApiClient.convertToType(data['userActionsNeeded'], ['String']);
      if (data.hasOwnProperty('cpuId'))
        obj.cpuId = ApiClient.convertToType(data['cpuId'], 'String');
      if (data.hasOwnProperty('containerizedWorkloadCounts'))
        obj.containerizedWorkloadCounts = AgentsSchemasAgentViewSchemaMany200ContainerizedWorkloadCounts.constructFromObject(data['containerizedWorkloadCounts']);
      if (data.hasOwnProperty('registeredAt'))
        obj.registeredAt = ApiClient.convertToType(data['registeredAt'], 'Date');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('groupName'))
        obj.groupName = ApiClient.convertToType(data['groupName'], 'String');
      if (data.hasOwnProperty('isDecommissioned'))
        obj.isDecommissioned = ApiClient.convertToType(data['isDecommissioned'], 'Boolean');
      if (data.hasOwnProperty('installerType'))
        obj.installerType = ApiClient.convertToType(data['installerType'], 'String');
      if (data.hasOwnProperty('infected'))
        obj.infected = ApiClient.convertToType(data['infected'], 'Boolean');
      if (data.hasOwnProperty('externalId'))
        obj.externalId = ApiClient.convertToType(data['externalId'], 'String');
      if (data.hasOwnProperty('fullDiskScanLastUpdatedAt'))
        obj.fullDiskScanLastUpdatedAt = ApiClient.convertToType(data['fullDiskScanLastUpdatedAt'], 'Date');
      if (data.hasOwnProperty('networkInterfaces'))
        obj.networkInterfaces = ApiClient.convertToType(data['networkInterfaces'], [AgentsSchemasAgentViewSchemaMany200NetworkInterfaces]);
      if (data.hasOwnProperty('locationEnabled'))
        obj.locationEnabled = ApiClient.convertToType(data['locationEnabled'], 'Boolean');
      if (data.hasOwnProperty('firstFullModeTime'))
        obj.firstFullModeTime = ApiClient.convertToType(data['firstFullModeTime'], 'Date');
      if (data.hasOwnProperty('firewallEnabled'))
        obj.firewallEnabled = ApiClient.convertToType(data['firewallEnabled'], 'Boolean');
      if (data.hasOwnProperty('missingPermissions'))
        obj.missingPermissions = ApiClient.convertToType(data['missingPermissions'], ['String']);
      if (data.hasOwnProperty('createdAt'))
        obj.createdAt = ApiClient.convertToType(data['createdAt'], 'Date');
      if (data.hasOwnProperty('domain'))
        obj.domain = ApiClient.convertToType(data['domain'], 'String');
      if (data.hasOwnProperty('scanAbortedAt'))
        obj.scanAbortedAt = ApiClient.convertToType(data['scanAbortedAt'], 'Date');
    }
    return obj;
  }

  /**
   * License key
   * @member {String} licenseKey
   */
  exports.prototype.licenseKey = undefined;

  /**
   * Machine type
   * @member {module:model/AgentsSchemasAgentViewSchemaMany200Data.MachineTypeEnum} machineType
   */
  exports.prototype.machineType = undefined;

  /**
   * Mitigation mode policy for suspicious activity
   * @member {module:model/AgentsSchemasAgentViewSchemaMany200Data.MitigationModeSuspiciousEnum} mitigationModeSuspicious
   */
  exports.prototype.mitigationModeSuspicious = undefined;

  /**
   * Is the Agent in a remote shell session
   * @member {Boolean} inRemoteShellSession
   */
  exports.prototype.inRemoteShellSession = undefined;

  /**
   * Number of CPUs
   * @member {Number} cpuCount
   */
  exports.prototype.cpuCount = undefined;

  /**
   * External IPv4 address
   * @member {String} externalIp
   */
  exports.prototype.externalIp = undefined;

  /**
   * Indicates whether the agent protects containerized workload at the moment
   * @member {Boolean} hasContainerizedWorkload
   */
  exports.prototype.hasContainerizedWorkload = undefined;

  /**
   * Has at least one threat with at least one mitigation action that is pending reboot to succeed
   * @member {Boolean} threatRebootRequired
   */
  exports.prototype.threatRebootRequired = undefined;

  /**
   * Detection State
   * @member {String} detectionState
   */
  exports.prototype.detectionState = undefined;

  /**
   * What step the agent is at in the process of migrating to another console, if any
   * @member {module:model/AgentsSchemasAgentViewSchemaMany200Data.ConsoleMigrationStatusEnum} consoleMigrationStatus
   */
  exports.prototype.consoleMigrationStatus = undefined;

  /**
   * Last successful full disc scan time
   * @member {Date} lastSuccessfulScanDate
   */
  exports.prototype.lastSuccessfulScanDate = undefined;

  /**
   * Agent version
   * @member {String} agentVersion
   */
  exports.prototype.agentVersion = undefined;

  /**
   * Last logged in user name
   * @member {String} lastLoggedInUserName
   */
  exports.prototype.lastLoggedInUserName = undefined;

  /**
   * Disk encryption status
   * @member {Boolean} encryptedApplications
   */
  exports.prototype.encryptedApplications = undefined;

  /**
   * Cloud providers for this agent
   * @member {Object.<String, module:model/AgentsSchemasAgentViewSchemaMany200CloudProviders>} cloudProviders
   */
  exports.prototype.cloudProviders = undefined;

  /**
   * @member {module:model/AgentsSchemasAgentViewSchemaMany200Tags} tags
   */
  exports.prototype.tags = undefined;

  /**
   * The version of Ranger
   * @member {String} rangerVersion
   */
  exports.prototype.rangerVersion = undefined;

  /**
   * Indicates if the agent was recently active
   * @member {Boolean} isActive
   */
  exports.prototype.isActive = undefined;

  /**
   * Agent mitigation mode policy
   * @member {module:model/AgentsSchemasAgentViewSchemaMany200Data.MitigationModeEnum} mitigationMode
   */
  exports.prototype.mitigationMode = undefined;

  /**
   * Agent operational state
   * @member {String} operationalState
   */
  exports.prototype.operationalState = undefined;

  /**
   * A reference to the containing account
   * @member {String} accountId
   */
  exports.prototype.accountId = undefined;

  /**
   * Updated at
   * @member {Date} updatedAt
   */
  exports.prototype.updatedAt = undefined;

  /**
   * Device model
   * @member {String} modelName
   */
  exports.prototype.modelName = undefined;

  /**
   * Memory size (MB)
   * @member {Number} totalMemory
   */
  exports.prototype.totalMemory = undefined;

  /**
   * CPU cores
   * @member {Number} coreCount
   */
  exports.prototype.coreCount = undefined;

  /**
   * Serial Number of the endpoint
   * @member {String} serialNumber
   */
  exports.prototype.serialNumber = undefined;

  /**
   * Current number of active threats
   * @member {Number} activeThreats
   */
  exports.prototype.activeThreats = undefined;

  /**
   * @member {module:model/AgentsSchemasAgentViewSchemaMany200ActiveDirectory} activeDirectory
   */
  exports.prototype.activeDirectory = undefined;

  /**
   * Agent is capable and policy enabled for remote shell
   * @member {Boolean} allowRemoteShell
   */
  exports.prototype.allowRemoteShell = undefined;

  /**
   * Reported location type
   * @member {module:model/AgentsSchemasAgentViewSchemaMany200Data.LocationTypeEnum} locationType
   */
  exports.prototype.locationType = undefined;

  /**
   * IP Address subnet
   * @member {String} groupIp
   */
  exports.prototype.groupIp = undefined;

  /**
   * Group updated at
   * @member {Date} groupUpdatedAt
   */
  exports.prototype.groupUpdatedAt = undefined;

  /**
   * Network quarantine enabled
   * @member {Boolean} networkQuarantineEnabled
   */
  exports.prototype.networkQuarantineEnabled = undefined;

  /**
   * Start time of last scan
   * @member {Date} scanStartedAt
   */
  exports.prototype.scanStartedAt = undefined;

  /**
   * A reference to the containing network group
   * @member {String} groupId
   */
  exports.prototype.groupId = undefined;

  /**
   * Last active date
   * @member {Date} lastActiveDate
   */
  exports.prototype.lastActiveDate = undefined;

  /**
   * Policy updated at
   * @member {Date} policyUpdatedAt
   */
  exports.prototype.policyUpdatedAt = undefined;

  /**
   * Name of the containing site
   * @member {String} siteName
   */
  exports.prototype.siteName = undefined;

  /**
   * Os username
   * @member {String} osUsername
   */
  exports.prototype.osUsername = undefined;

  /**
   * OS type
   * @member {module:model/AgentsSchemasAgentViewSchemaMany200Data.OsTypeEnum} osType
   */
  exports.prototype.osType = undefined;

  /**
   * Show alert icon in agent view and details
   * @member {Boolean} showAlertIcon
   */
  exports.prototype.showAlertIcon = undefined;

  /**
   * Apps vulnerability status
   * @member {module:model/AgentsSchemasAgentViewSchemaMany200Data.AppsVulnerabilityStatusEnum} appsVulnerabilityStatus
   */
  exports.prototype.appsVulnerabilityStatus = undefined;

  /**
   * Indicates if the agent version is up to date
   * @member {Boolean} isUpToDate
   */
  exports.prototype.isUpToDate = undefined;

  /**
   * Is Agent disabled as a Ranger
   * @member {module:model/AgentsSchemasAgentViewSchemaMany200Data.RangerStatusEnum} rangerStatus
   */
  exports.prototype.rangerStatus = undefined;

  /**
   * Os revision
   * @member {String} osRevision
   */
  exports.prototype.osRevision = undefined;

  /**
   * Agent remote profiling state
   * @member {String} remoteProfilingState
   */
  exports.prototype.remoteProfilingState = undefined;

  /**
   * Storage Type
   * @member {String} storageType
   */
  exports.prototype.storageType = undefined;

  /**
   * Agent operational state expiration
   * @member {Date} operationalStateExpiration
   */
  exports.prototype.operationalStateExpiration = undefined;

  /**
   * Computer name
   * @member {String} computerName
   */
  exports.prototype.computerName = undefined;

  /**
   * Agent's universally unique identifier
   * @member {String} uuid
   */
  exports.prototype.uuid = undefined;

  /**
   * The last ip used to connect to the Management console
   * @member {String} lastIpToMgmt
   */
  exports.prototype.lastIpToMgmt = undefined;

  /**
   * Name of the containing account
   * @member {String} accountName
   */
  exports.prototype.accountName = undefined;

  /**
   * Agent's network connectivity status
   * @member {module:model/AgentsSchemasAgentViewSchemaMany200Data.NetworkStatusEnum} networkStatus
   */
  exports.prototype.networkStatus = undefined;

  /**
   * Last scan status
   * @member {module:model/AgentsSchemasAgentViewSchemaMany200Data.ScanStatusEnum} scanStatus
   */
  exports.prototype.scanStatus = undefined;

  /**
   * Os arch
   * @member {module:model/AgentsSchemasAgentViewSchemaMany200Data.OsArchEnum} osArch
   */
  exports.prototype.osArch = undefined;

  /**
   * A list of locations reported by the Agent
   * @member {Array.<module:model/AgentsSchemasAgentViewSchemaMany200Locations>} locations
   */
  exports.prototype.locations = undefined;

  /**
   * Indicates if Agent was removed from the device
   * @member {Boolean} isUninstalled
   */
  exports.prototype.isUninstalled = undefined;

  /**
   * Storage Name
   * @member {String} storageName
   */
  exports.prototype.storageName = undefined;

  /**
   * Agent with a pending uninstall request
   * @member {Boolean} isPendingUninstall
   */
  exports.prototype.isPendingUninstall = undefined;

  /**
   * @member {module:model/AgentsSchemasAgentViewSchemaMany200ProxyStates} proxyStates
   */
  exports.prototype.proxyStates = undefined;

  /**
   * Agent remote profiling state expiration inseconds
   * @member {Date} remoteProfilingStateExpiration
   */
  exports.prototype.remoteProfilingStateExpiration = undefined;

  /**
   * Os name
   * @member {String} osName
   */
  exports.prototype.osName = undefined;

  /**
   * Finish time of last scan (If applicable)
   * @member {Date} scanFinishedAt
   */
  exports.prototype.scanFinishedAt = undefined;

  /**
   * Last boot time
   * @member {Date} osStartTime
   */
  exports.prototype.osStartTime = undefined;

  /**
   * A reference to the containing site
   * @member {String} siteId
   */
  exports.prototype.siteId = undefined;

  /**
   * A list of pending user actions. List items possible values: \"none, user_action_needed, reboot_needed, upgrade_needed, incompatible_os, unprotected, rebootless_without_dynamic_detection, extended_exclusions_partially_accepted, reboot_required, pending_deprecation, ne_not_running, ne_cf_not_active\".
   * @member {Array.<module:model/AgentsSchemasAgentViewSchemaMany200Data.UserActionsNeededEnum>} userActionsNeeded
   */
  exports.prototype.userActionsNeeded = undefined;

  /**
   * CPU model
   * @member {String} cpuId
   */
  exports.prototype.cpuId = undefined;

  /**
   * @member {module:model/AgentsSchemasAgentViewSchemaMany200ContainerizedWorkloadCounts} containerizedWorkloadCounts
   */
  exports.prototype.containerizedWorkloadCounts = undefined;

  /**
   * Time of first registration to management console (similar to createdAt)
   * @member {Date} registeredAt
   */
  exports.prototype.registeredAt = undefined;

  /**
   * Agent ID
   * @member {String} id
   */
  exports.prototype.id = undefined;

  /**
   * Name of the containing network group
   * @member {String} groupName
   */
  exports.prototype.groupName = undefined;

  /**
   * Is Agent decommissioned
   * @member {Boolean} isDecommissioned
   */
  exports.prototype.isDecommissioned = undefined;

  /**
   * Installer package type (file extension)
   * @member {module:model/AgentsSchemasAgentViewSchemaMany200Data.InstallerTypeEnum} installerType
   */
  exports.prototype.installerType = undefined;

  /**
   * Indicates if the Agent has active threats
   * @member {Boolean} infected
   */
  exports.prototype.infected = undefined;

  /**
   * External id set by customer
   * @member {String} externalId
   */
  exports.prototype.externalId = undefined;

  /**
   * Last time scan status was updated
   * @member {Date} fullDiskScanLastUpdatedAt
   */
  exports.prototype.fullDiskScanLastUpdatedAt = undefined;

  /**
   * Device's network interfaces
   * @member {Array.<module:model/AgentsSchemasAgentViewSchemaMany200NetworkInterfaces>} networkInterfaces
   */
  exports.prototype.networkInterfaces = undefined;

  /**
   * Location enabled
   * @member {Boolean} locationEnabled
   */
  exports.prototype.locationEnabled = undefined;

  /**
   * Date of the first time the Agent moved to full or slim detection modes
   * @member {Date} firstFullModeTime
   */
  exports.prototype.firstFullModeTime = undefined;

  /**
   * Firewall enabled
   * @member {Boolean} firewallEnabled
   */
  exports.prototype.firewallEnabled = undefined;

  /**
   * A list of missing permissions. List items possible values: \"user_action_needed_fda, user_action_needed_rs_fda, user_action_needed_fda_helper, user_action_needed_fda_sentineld, user_action_needed_bluetooth_per, user_action_needed_network, user_action_needed_notifications\".
   * @member {Array.<module:model/AgentsSchemasAgentViewSchemaMany200Data.MissingPermissionsEnum>} missingPermissions
   */
  exports.prototype.missingPermissions = undefined;

  /**
   * Created at
   * @member {Date} createdAt
   */
  exports.prototype.createdAt = undefined;

  /**
   * Network domain
   * @member {String} domain
   */
  exports.prototype.domain = undefined;

  /**
   * Abort time of last scan (If applicable)
   * @member {Date} scanAbortedAt
   */
  exports.prototype.scanAbortedAt = undefined;



  /**
   * Allowed values for the <code>machineType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.MachineTypeEnum = {
    /**
     * value: "unknown"
     * @const
     */
    unknown: "unknown",

    /**
     * value: "desktop"
     * @const
     */
    desktop: "desktop",

    /**
     * value: "laptop"
     * @const
     */
    laptop: "laptop",

    /**
     * value: "server"
     * @const
     */
    server: "server",

    /**
     * value: "kubernetes node"
     * @const
     */
    kubernetesNode: "kubernetes node",

    /**
     * value: "storage"
     * @const
     */
    storage: "storage",

    /**
     * value: "kubernetes pod"
     * @const
     */
    kubernetesPod: "kubernetes pod",

    /**
     * value: "ecs task"
     * @const
     */
    ecsTask: "ecs task"
  };


  /**
   * Allowed values for the <code>mitigationModeSuspicious</code> property.
   * @enum {String}
   * @readonly
   */
  exports.MitigationModeSuspiciousEnum = {
    /**
     * value: "detect"
     * @const
     */
    detect: "detect",

    /**
     * value: "protect"
     * @const
     */
    protect: "protect"
  };


  /**
   * Allowed values for the <code>consoleMigrationStatus</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ConsoleMigrationStatusEnum = {
    /**
     * value: "N/A"
     * @const
     */
    NA: "N/A",

    /**
     * value: "Pending"
     * @const
     */
    pending: "Pending",

    /**
     * value: "Migrated"
     * @const
     */
    migrated: "Migrated",

    /**
     * value: "Failed"
     * @const
     */
    failed: "Failed"
  };


  /**
   * Allowed values for the <code>mitigationMode</code> property.
   * @enum {String}
   * @readonly
   */
  exports.MitigationModeEnum = {
    /**
     * value: "detect"
     * @const
     */
    detect: "detect",

    /**
     * value: "protect"
     * @const
     */
    protect: "protect"
  };


  /**
   * Allowed values for the <code>locationType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.LocationTypeEnum = {
    /**
     * value: "not_applicable"
     * @const
     */
    notApplicable: "not_applicable",

    /**
     * value: "not_supported"
     * @const
     */
    notSupported: "not_supported",

    /**
     * value: "specific"
     * @const
     */
    specific: "specific",

    /**
     * value: "fallback"
     * @const
     */
    fallback: "fallback"
  };


  /**
   * Allowed values for the <code>osType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.OsTypeEnum = {
    /**
     * value: "windows"
     * @const
     */
    windows: "windows",

    /**
     * value: "macos"
     * @const
     */
    macos: "macos",

    /**
     * value: "linux"
     * @const
     */
    linux: "linux",

    /**
     * value: "windows_legacy"
     * @const
     */
    windowsLegacy: "windows_legacy"
  };


  /**
   * Allowed values for the <code>appsVulnerabilityStatus</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AppsVulnerabilityStatusEnum = {
    /**
     * value: "patch_required"
     * @const
     */
    patchRequired: "patch_required",

    /**
     * value: "up_to_date"
     * @const
     */
    upToDate: "up_to_date",

    /**
     * value: "not_applicable"
     * @const
     */
    notApplicable: "not_applicable"
  };


  /**
   * Allowed values for the <code>rangerStatus</code> property.
   * @enum {String}
   * @readonly
   */
  exports.RangerStatusEnum = {
    /**
     * value: "NotApplicable"
     * @const
     */
    notApplicable: "NotApplicable",

    /**
     * value: "Enabled"
     * @const
     */
    enabled: "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    disabled: "Disabled"
  };


  /**
   * Allowed values for the <code>networkStatus</code> property.
   * @enum {String}
   * @readonly
   */
  exports.NetworkStatusEnum = {
    /**
     * value: "connected"
     * @const
     */
    connected: "connected",

    /**
     * value: "disconnected"
     * @const
     */
    disconnected: "disconnected",

    /**
     * value: "connecting"
     * @const
     */
    connecting: "connecting",

    /**
     * value: "disconnecting"
     * @const
     */
    disconnecting: "disconnecting"
  };


  /**
   * Allowed values for the <code>scanStatus</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ScanStatusEnum = {
    /**
     * value: "none"
     * @const
     */
    none: "none",

    /**
     * value: "started"
     * @const
     */
    started: "started",

    /**
     * value: "aborted"
     * @const
     */
    aborted: "aborted",

    /**
     * value: "finished"
     * @const
     */
    finished: "finished"
  };


  /**
   * Allowed values for the <code>osArch</code> property.
   * @enum {String}
   * @readonly
   */
  exports.OsArchEnum = {
    /**
     * value: "32 bit"
     * @const
     */
    _32Bit: "32 bit",

    /**
     * value: "64 bit"
     * @const
     */
    _64Bit: "64 bit",

    /**
     * value: "ARM64"
     * @const
     */
    aRM64: "ARM64"
  };


  /**
   * Allowed values for the <code>userActionsNeeded</code> property.
   * @enum {String}
   * @readonly
   */
  exports.UserActionsNeededEnum = {
    /**
     * value: "none"
     * @const
     */
    none: "none",

    /**
     * value: "user_action_needed"
     * @const
     */
    userActionNeeded: "user_action_needed",

    /**
     * value: "reboot_needed"
     * @const
     */
    rebootNeeded: "reboot_needed",

    /**
     * value: "upgrade_needed"
     * @const
     */
    upgradeNeeded: "upgrade_needed",

    /**
     * value: "incompatible_os"
     * @const
     */
    incompatibleOs: "incompatible_os",

    /**
     * value: "unprotected"
     * @const
     */
    unprotected: "unprotected",

    /**
     * value: "rebootless_without_dynamic_detection"
     * @const
     */
    rebootlessWithoutDynamicDetection: "rebootless_without_dynamic_detection",

    /**
     * value: "extended_exclusions_partially_accepted"
     * @const
     */
    extendedExclusionsPartiallyAccepted: "extended_exclusions_partially_accepted",

    /**
     * value: "reboot_required"
     * @const
     */
    rebootRequired: "reboot_required",

    /**
     * value: "pending_deprecation"
     * @const
     */
    pendingDeprecation: "pending_deprecation",

    /**
     * value: "ne_not_running"
     * @const
     */
    neNotRunning: "ne_not_running",

    /**
     * value: "ne_cf_not_active"
     * @const
     */
    neCfNotActive: "ne_cf_not_active"
  };


  /**
   * Allowed values for the <code>installerType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.InstallerTypeEnum = {
    /**
     * value: ".msi"
     * @const
     */
    msi: ".msi",

    /**
     * value: ".exe"
     * @const
     */
    exe: ".exe",

    /**
     * value: ".deb"
     * @const
     */
    deb: ".deb",

    /**
     * value: ".rpm"
     * @const
     */
    rpm: ".rpm",

    /**
     * value: ".bsx"
     * @const
     */
    bsx: ".bsx",

    /**
     * value: ".pkg"
     * @const
     */
    pkg: ".pkg",

    /**
     * value: ".img"
     * @const
     */
    img: ".img",

    /**
     * value: "unknown"
     * @const
     */
    unknown: "unknown",

    /**
     * value: ".tar"
     * @const
     */
    tar: ".tar",

    /**
     * value: ".zip"
     * @const
     */
    zip: ".zip",

    /**
     * value: ".gz"
     * @const
     */
    gz: ".gz",

    /**
     * value: ".xz"
     * @const
     */
    xz: ".xz"
  };


  /**
   * Allowed values for the <code>missingPermissions</code> property.
   * @enum {String}
   * @readonly
   */
  exports.MissingPermissionsEnum = {
    /**
     * value: "user_action_needed_fda"
     * @const
     */
    fda: "user_action_needed_fda",

    /**
     * value: "user_action_needed_rs_fda"
     * @const
     */
    rsFda: "user_action_needed_rs_fda",

    /**
     * value: "user_action_needed_fda_helper"
     * @const
     */
    fdaHelper: "user_action_needed_fda_helper",

    /**
     * value: "user_action_needed_fda_sentineld"
     * @const
     */
    fdaSentineld: "user_action_needed_fda_sentineld",

    /**
     * value: "user_action_needed_bluetooth_per"
     * @const
     */
    bluetoothPer: "user_action_needed_bluetooth_per",

    /**
     * value: "user_action_needed_network"
     * @const
     */
    network: "user_action_needed_network",

    /**
     * value: "user_action_needed_notifications"
     * @const
     */
    notifications: "user_action_needed_notifications"
  };

  return exports;

}));
