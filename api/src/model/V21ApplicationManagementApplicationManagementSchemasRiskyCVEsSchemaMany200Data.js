/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200FpFnMarks'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200FpFnMarks'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200Data = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200FpFnMarks);
  }
}(this, function(ApiClient, V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200FpFnMarks) {
  'use strict';

  /**
   * The V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200Data model module.
   * @module model/V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200Data
   * @version 2.1
   */

  /**
   * Constructs a new <code>V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200Data</code>.
   * @alias module:model/V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200Data
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200Data</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200Data} obj Optional instance to populate.
   * @return {module:model/V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200Data} The populated <code>V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200Data</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('nvdBaseScore'))
        obj.nvdBaseScore = ApiClient.convertToType(data['nvdBaseScore'], 'String');
      if (data.hasOwnProperty('cveId'))
        obj.cveId = ApiClient.convertToType(data['cveId'], 'String');
      if (data.hasOwnProperty('publishedDate'))
        obj.publishedDate = ApiClient.convertToType(data['publishedDate'], 'Date');
      if (data.hasOwnProperty('exploitedInTheWild'))
        obj.exploitedInTheWild = ApiClient.convertToType(data['exploitedInTheWild'], 'String');
      if (data.hasOwnProperty('cvssVersion'))
        obj.cvssVersion = ApiClient.convertToType(data['cvssVersion'], 'String');
      if (data.hasOwnProperty('fpFnMarks'))
        obj.fpFnMarks = ApiClient.convertToType(data['fpFnMarks'], [V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200FpFnMarks]);
      if (data.hasOwnProperty('nvdUrl'))
        obj.nvdUrl = ApiClient.convertToType(data['nvdUrl'], Object);
      if (data.hasOwnProperty('riskScore'))
        obj.riskScore = ApiClient.convertToType(data['riskScore'], 'String');
      if (data.hasOwnProperty('remediationLevel'))
        obj.remediationLevel = ApiClient.convertToType(data['remediationLevel'], 'String');
      if (data.hasOwnProperty('exploitCodeMaturity'))
        obj.exploitCodeMaturity = ApiClient.convertToType(data['exploitCodeMaturity'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], Object);
      if (data.hasOwnProperty('severity'))
        obj.severity = ApiClient.convertToType(data['severity'], Object);
      if (data.hasOwnProperty('reportConfidence'))
        obj.reportConfidence = ApiClient.convertToType(data['reportConfidence'], 'String');
      if (data.hasOwnProperty('mitreUrl'))
        obj.mitreUrl = ApiClient.convertToType(data['mitreUrl'], Object);
    }
    return obj;
  }

  /**
   * Nvd base score
   * @member {String} nvdBaseScore
   */
  exports.prototype.nvdBaseScore = undefined;

  /**
   * Cve id
   * @member {String} cveId
   */
  exports.prototype.cveId = undefined;

  /**
   * Published date
   * @member {Date} publishedDate
   */
  exports.prototype.publishedDate = undefined;

  /**
   * Available with Ranger Insights
   * @member {module:model/V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200Data.ExploitedInTheWildEnum} exploitedInTheWild
   */
  exports.prototype.exploitedInTheWild = undefined;

  /**
   * Cvss version
   * @member {String} cvssVersion
   */
  exports.prototype.cvssVersion = undefined;

  /**
   * Fp fn marks
   * @member {Array.<module:model/V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200FpFnMarks>} fpFnMarks
   */
  exports.prototype.fpFnMarks = undefined;

  /**
   * Nvd url
   * @member {Object} nvdUrl
   */
  exports.prototype.nvdUrl = undefined;

  /**
   * Available with Ranger Insights
   * @member {String} riskScore
   */
  exports.prototype.riskScore = undefined;

  /**
   * Available with Ranger Insights
   * @member {module:model/V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200Data.RemediationLevelEnum} remediationLevel
   */
  exports.prototype.remediationLevel = undefined;

  /**
   * Available with Ranger Insights
   * @member {module:model/V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200Data.ExploitCodeMaturityEnum} exploitCodeMaturity
   */
  exports.prototype.exploitCodeMaturity = undefined;

  /**
   * Description
   * @member {Object} description
   */
  exports.prototype.description = undefined;

  /**
   * Severity
   * @member {Object} severity
   */
  exports.prototype.severity = undefined;

  /**
   * Available with Ranger Insights
   * @member {module:model/V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200Data.ReportConfidenceEnum} reportConfidence
   */
  exports.prototype.reportConfidence = undefined;

  /**
   * Mitre url
   * @member {Object} mitreUrl
   */
  exports.prototype.mitreUrl = undefined;



  /**
   * Allowed values for the <code>exploitedInTheWild</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ExploitedInTheWildEnum = {
    /**
     * value: "Not Defined"
     * @const
     */
    notDefined: "Not Defined",

    /**
     * value: "Unknown"
     * @const
     */
    unknown: "Unknown",

    /**
     * value: "Yes"
     * @const
     */
    yes: "Yes"
  };


  /**
   * Allowed values for the <code>remediationLevel</code> property.
   * @enum {String}
   * @readonly
   */
  exports.RemediationLevelEnum = {
    /**
     * value: "Official Fix"
     * @const
     */
    officialFix: "Official Fix",

    /**
     * value: "Temporary Fix"
     * @const
     */
    temporaryFix: "Temporary Fix",

    /**
     * value: "Unavailable"
     * @const
     */
    unavailable: "Unavailable",

    /**
     * value: "Not Defined"
     * @const
     */
    notDefined: "Not Defined",

    /**
     * value: "Workaround"
     * @const
     */
    workaround: "Workaround"
  };


  /**
   * Allowed values for the <code>exploitCodeMaturity</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ExploitCodeMaturityEnum = {
    /**
     * value: "Not Defined"
     * @const
     */
    notDefined: "Not Defined",

    /**
     * value: "Functional"
     * @const
     */
    functional: "Functional",

    /**
     * value: "Proof of Concept"
     * @const
     */
    proofOfConcept: "Proof of Concept",

    /**
     * value: "Unproven"
     * @const
     */
    unproven: "Unproven",

    /**
     * value: "High"
     * @const
     */
    high: "High"
  };


  /**
   * Allowed values for the <code>reportConfidence</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ReportConfidenceEnum = {
    /**
     * value: "Reasonable"
     * @const
     */
    reasonable: "Reasonable",

    /**
     * value: "Not Defined"
     * @const
     */
    notDefined: "Not Defined",

    /**
     * value: "Unknown"
     * @const
     */
    unknown: "Unknown",

    /**
     * value: "Confirmed"
     * @const
     */
    confirmed: "Confirmed"
  };

  return exports;

}));
