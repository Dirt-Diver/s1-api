/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SchemasRangerSettingsSchema200DataRestrictions', 'model/SchemasRangerSettingsSchema200DataSpecificPorts'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./SchemasRangerSettingsSchema200DataRestrictions'), require('./SchemasRangerSettingsSchema200DataSpecificPorts'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.SchemasRangerSettingsSchema200Data = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.SchemasRangerSettingsSchema200DataRestrictions, root.S1MgmtApi.SchemasRangerSettingsSchema200DataSpecificPorts);
  }
}(this, function(ApiClient, SchemasRangerSettingsSchema200DataRestrictions, SchemasRangerSettingsSchema200DataSpecificPorts) {
  'use strict';

  /**
   * The SchemasRangerSettingsSchema200Data model module.
   * @module model/SchemasRangerSettingsSchema200Data
   * @version 2.1
   */

  /**
   * Constructs a new <code>SchemasRangerSettingsSchema200Data</code>.
   * Response data
   * @alias module:model/SchemasRangerSettingsSchema200Data
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>SchemasRangerSettingsSchema200Data</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SchemasRangerSettingsSchema200Data} obj Optional instance to populate.
   * @return {module:model/SchemasRangerSettingsSchema200Data} The populated <code>SchemasRangerSettingsSchema200Data</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('snmpScan'))
        obj.snmpScan = ApiClient.convertToType(data['snmpScan'], 'Boolean');
      if (data.hasOwnProperty('accountId'))
        obj.accountId = ApiClient.convertToType(data['accountId'], 'String');
      if (data.hasOwnProperty('useFullDnsScan'))
        obj.useFullDnsScan = ApiClient.convertToType(data['useFullDnsScan'], 'Boolean');
      if (data.hasOwnProperty('icmpScan'))
        obj.icmpScan = ApiClient.convertToType(data['icmpScan'], 'Boolean');
      if (data.hasOwnProperty('tcpPorts'))
        obj.tcpPorts = ApiClient.convertToType(data['tcpPorts'], ['Number']);
      if (data.hasOwnProperty('scopeId'))
        obj.scopeId = ApiClient.convertToType(data['scopeId'], 'String');
      if (data.hasOwnProperty('scanOnlyLocalSubnets'))
        obj.scanOnlyLocalSubnets = ApiClient.convertToType(data['scanOnlyLocalSubnets'], 'Boolean');
      if (data.hasOwnProperty('minAgentsInNetworkToScan'))
        obj.minAgentsInNetworkToScan = ApiClient.convertToType(data['minAgentsInNetworkToScan'], 'Number');
      if (data.hasOwnProperty('smbScan'))
        obj.smbScan = ApiClient.convertToType(data['smbScan'], 'Boolean');
      if (data.hasOwnProperty('combineDevices'))
        obj.combineDevices = ApiClient.convertToType(data['combineDevices'], 'Boolean');
      if (data.hasOwnProperty('udpPortScan'))
        obj.udpPortScan = ApiClient.convertToType(data['udpPortScan'], 'Boolean');
      if (data.hasOwnProperty('udpPorts'))
        obj.udpPorts = ApiClient.convertToType(data['udpPorts'], ['Number']);
      if (data.hasOwnProperty('specificPorts'))
        obj.specificPorts = ApiClient.convertToType(data['specificPorts'], [SchemasRangerSettingsSchema200DataSpecificPorts]);
      if (data.hasOwnProperty('enabled'))
        obj.enabled = ApiClient.convertToType(data['enabled'], 'Boolean');
      if (data.hasOwnProperty('usePeriodicSnapshots'))
        obj.usePeriodicSnapshots = ApiClient.convertToType(data['usePeriodicSnapshots'], 'Boolean');
      if (data.hasOwnProperty('rdnsScan'))
        obj.rdnsScan = ApiClient.convertToType(data['rdnsScan'], 'Boolean');
      if (data.hasOwnProperty('newNetworkInHours'))
        obj.newNetworkInHours = ApiClient.convertToType(data['newNetworkInHours'], 'Number');
      if (data.hasOwnProperty('multiScanSsdp'))
        obj.multiScanSsdp = ApiClient.convertToType(data['multiScanSsdp'], 'Boolean');
      if (data.hasOwnProperty('autoEnableNetworks'))
        obj.autoEnableNetworks = ApiClient.convertToType(data['autoEnableNetworks'], 'Boolean');
      if (data.hasOwnProperty('snapshotPeriod'))
        obj.snapshotPeriod = ApiClient.convertToType(data['snapshotPeriod'], 'Number');
      if (data.hasOwnProperty('networkDecommissionValue'))
        obj.networkDecommissionValue = ApiClient.convertToType(data['networkDecommissionValue'], 'Number');
      if (data.hasOwnProperty('tcpPortScan'))
        obj.tcpPortScan = ApiClient.convertToType(data['tcpPortScan'], 'Boolean');
      if (data.hasOwnProperty('restrictions'))
        obj.restrictions = ApiClient.convertToType(data['restrictions'], [SchemasRangerSettingsSchema200DataRestrictions]);
      if (data.hasOwnProperty('mdnsScan'))
        obj.mdnsScan = ApiClient.convertToType(data['mdnsScan'], 'Boolean');
      if (data.hasOwnProperty('useSpecificPorts'))
        obj.useSpecificPorts = ApiClient.convertToType(data['useSpecificPorts'], 'Boolean');
    }
    return obj;
  }

  /**
   * SNMP scan enabled
   * @member {Boolean} snmpScan
   */
  exports.prototype.snmpScan = undefined;

  /**
   * Account id
   * @member {String} accountId
   */
  exports.prototype.accountId = undefined;

  /**
   * DNS Full scan enabled
   * @member {Boolean} useFullDnsScan
   */
  exports.prototype.useFullDnsScan = undefined;

  /**
   * ICMP scan enabled
   * @member {Boolean} icmpScan
   */
  exports.prototype.icmpScan = undefined;

  /**
   * TCP Ports
   * @member {Array.<Number>} tcpPorts
   */
  exports.prototype.tcpPorts = undefined;

  /**
   * Scope id
   * @member {String} scopeId
   */
  exports.prototype.scopeId = undefined;

  /**
   * Scan only local subnets
   * @member {Boolean} scanOnlyLocalSubnets
   */
  exports.prototype.scanOnlyLocalSubnets = undefined;

  /**
   * Minimum agents required in a network to be listed as selectable for scan
   * @member {Number} minAgentsInNetworkToScan
   */
  exports.prototype.minAgentsInNetworkToScan = undefined;

  /**
   * SMB scan enabled
   * @member {Boolean} smbScan
   */
  exports.prototype.smbScan = undefined;

  /**
   * Combine devices as one among multiple networks
   * @member {Boolean} combineDevices
   */
  exports.prototype.combineDevices = undefined;

  /**
   * UDP Port scan enabled
   * @member {Boolean} udpPortScan
   */
  exports.prototype.udpPortScan = undefined;

  /**
   * UDP Ports
   * @member {Array.<Number>} udpPorts
   */
  exports.prototype.udpPorts = undefined;

  /**
   * [FUTURE] A set of specific ports allowed to be used as source ports for an active scan
   * @member {Array.<module:model/SchemasRangerSettingsSchema200DataSpecificPorts>} specificPorts
   */
  exports.prototype.specificPorts = undefined;

  /**
   * Is the ranger collection enabled for the account
   * @member {Boolean} enabled
   */
  exports.prototype.enabled = undefined;

  /**
   * Ranger views are generated periodically by the snapshot period
   * @member {Boolean} usePeriodicSnapshots
   */
  exports.prototype.usePeriodicSnapshots = undefined;

  /**
   * RDNS scan enabled
   * @member {Boolean} rdnsScan
   */
  exports.prototype.rdnsScan = undefined;

  /**
   * Networks are going to be marked as new for this period
   * @member {Number} newNetworkInHours
   */
  exports.prototype.newNetworkInHours = undefined;

  /**
   * SSDP Multicast scan enabled
   * @member {Boolean} multiScanSsdp
   */
  exports.prototype.multiScanSsdp = undefined;

  /**
   * All networks that match the min agents configuration will be enabled automatically
   * @member {Boolean} autoEnableNetworks
   */
  exports.prototype.autoEnableNetworks = undefined;

  /**
   * Period in minutes for each snapshot
   * @member {Number} snapshotPeriod
   */
  exports.prototype.snapshotPeriod = undefined;

  /**
   * The number of days to archive a network which was not enabled for scan
   * @member {Number} networkDecommissionValue
   */
  exports.prototype.networkDecommissionValue = undefined;

  /**
   * TCP Port scan enabled
   * @member {Boolean} tcpPortScan
   */
  exports.prototype.tcpPortScan = undefined;

  /**
   * A set of IP addresses that should not be scanned in the specific network
   * @member {Array.<module:model/SchemasRangerSettingsSchema200DataRestrictions>} restrictions
   */
  exports.prototype.restrictions = undefined;

  /**
   * MDNS scan enabled
   * @member {Boolean} mdnsScan
   */
  exports.prototype.mdnsScan = undefined;

  /**
   * [FUTURE] Use only specific ports defined in specific ports as source ports of active scans
   * @member {Boolean} useSpecificPorts
   */
  exports.prototype.useSpecificPorts = undefined;


  return exports;

}));
