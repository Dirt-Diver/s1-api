/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.SettingsSmtpSettingsPutSchemaData = factory(root.S1MgmtApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The SettingsSmtpSettingsPutSchemaData model module.
   * @module model/SettingsSmtpSettingsPutSchemaData
   * @version 2.1
   */

  /**
   * Constructs a new <code>SettingsSmtpSettingsPutSchemaData</code>.
   * Data
   * @alias module:model/SettingsSmtpSettingsPutSchemaData
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>SettingsSmtpSettingsPutSchemaData</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SettingsSmtpSettingsPutSchemaData} obj Optional instance to populate.
   * @return {module:model/SettingsSmtpSettingsPutSchemaData} The populated <code>SettingsSmtpSettingsPutSchemaData</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('username'))
        obj.username = ApiClient.convertToType(data['username'], 'String');
      if (data.hasOwnProperty('host'))
        obj.host = ApiClient.convertToType(data['host'], 'String');
      if (data.hasOwnProperty('port'))
        obj.port = ApiClient.convertToType(data['port'], 'Number');
      if (data.hasOwnProperty('noReplyEmail'))
        obj.noReplyEmail = ApiClient.convertToType(data['noReplyEmail'], 'String');
      if (data.hasOwnProperty('encryption'))
        obj.encryption = ApiClient.convertToType(data['encryption'], 'String');
      if (data.hasOwnProperty('enabled'))
        obj.enabled = ApiClient.convertToType(data['enabled'], 'Boolean');
      if (data.hasOwnProperty('inherits'))
        obj.inherits = ApiClient.convertToType(data['inherits'], 'Boolean');
      if (data.hasOwnProperty('password'))
        obj.password = ApiClient.convertToType(data['password'], 'String');
    }
    return obj;
  }

  /**
   * SMTP service username
   * @member {String} username
   */
  exports.prototype.username = undefined;

  /**
   * SMTP service host
   * @member {String} host
   */
  exports.prototype.host = undefined;

  /**
   * SMTP service port
   * @member {Number} port
   */
  exports.prototype.port = undefined;

  /**
   * SMTP service no-reply-email
   * @member {String} noReplyEmail
   */
  exports.prototype.noReplyEmail = undefined;

  /**
   * SMTP service encryption type
   * @member {module:model/SettingsSmtpSettingsPutSchemaData.EncryptionEnum} encryption
   */
  exports.prototype.encryption = undefined;

  /**
   * SMTP service is enabled
   * @member {Boolean} enabled
   */
  exports.prototype.enabled = undefined;

  /**
   * True if site inherits SMTP settings from global scope, False if using custom settings.
   * @member {Boolean} inherits
   */
  exports.prototype.inherits = undefined;

  /**
   * SMTP service password. Required when creating new SMTP settings or updating host and/or port of the existing one.
   * @member {String} password
   */
  exports.prototype.password = undefined;



  /**
   * Allowed values for the <code>encryption</code> property.
   * @enum {String}
   * @readonly
   */
  exports.EncryptionEnum = {
    /**
     * value: "ssl"
     * @const
     */
    ssl: "ssl",

    /**
     * value: "tls"
     * @const
     */
    tls: "tls"
  };

  return exports;

}));
