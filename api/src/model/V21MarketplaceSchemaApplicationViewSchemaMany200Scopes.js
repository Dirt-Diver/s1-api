/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.V21MarketplaceSchemaApplicationViewSchemaMany200Scopes = factory(root.S1MgmtApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The V21MarketplaceSchemaApplicationViewSchemaMany200Scopes model module.
   * @module model/V21MarketplaceSchemaApplicationViewSchemaMany200Scopes
   * @version 2.1
   */

  /**
   * Constructs a new <code>V21MarketplaceSchemaApplicationViewSchemaMany200Scopes</code>.
   * @alias module:model/V21MarketplaceSchemaApplicationViewSchemaMany200Scopes
   * @class
   * @param desiredStatus {module:model/V21MarketplaceSchemaApplicationViewSchemaMany200Scopes.DesiredStatusEnum} Desired status
   * @param status {module:model/V21MarketplaceSchemaApplicationViewSchemaMany200Scopes.StatusEnum} Status
   */
  var exports = function(desiredStatus, status) {
    this.desiredStatus = desiredStatus;
    this.status = status;
  };

  /**
   * Constructs a <code>V21MarketplaceSchemaApplicationViewSchemaMany200Scopes</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/V21MarketplaceSchemaApplicationViewSchemaMany200Scopes} obj Optional instance to populate.
   * @return {module:model/V21MarketplaceSchemaApplicationViewSchemaMany200Scopes} The populated <code>V21MarketplaceSchemaApplicationViewSchemaMany200Scopes</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('accountId'))
        obj.accountId = ApiClient.convertToType(data['accountId'], 'String');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('lastEntityCreatedAt'))
        obj.lastEntityCreatedAt = ApiClient.convertToType(data['lastEntityCreatedAt'], 'String');
      if (data.hasOwnProperty('alertMessage'))
        obj.alertMessage = ApiClient.convertToType(data['alertMessage'], 'String');
      if (data.hasOwnProperty('scopeLevel'))
        obj.scopeLevel = ApiClient.convertToType(data['scopeLevel'], 'String');
      if (data.hasOwnProperty('creatorId'))
        obj.creatorId = ApiClient.convertToType(data['creatorId'], 'String');
      if (data.hasOwnProperty('siteId'))
        obj.siteId = ApiClient.convertToType(data['siteId'], 'String');
      if (data.hasOwnProperty('desiredStatus'))
        obj.desiredStatus = ApiClient.convertToType(data['desiredStatus'], 'String');
      if (data.hasOwnProperty('scopeId'))
        obj.scopeId = ApiClient.convertToType(data['scopeId'], 'String');
      if (data.hasOwnProperty('creator'))
        obj.creator = ApiClient.convertToType(data['creator'], 'String');
      if (data.hasOwnProperty('site'))
        obj.site = ApiClient.convertToType(data['site'], 'String');
      if (data.hasOwnProperty('modifier'))
        obj.modifier = ApiClient.convertToType(data['modifier'], 'String');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('groupId'))
        obj.groupId = ApiClient.convertToType(data['groupId'], 'String');
      if (data.hasOwnProperty('group'))
        obj.group = ApiClient.convertToType(data['group'], 'String');
      if (data.hasOwnProperty('modifierId'))
        obj.modifierId = ApiClient.convertToType(data['modifierId'], 'String');
      if (data.hasOwnProperty('hasAlert'))
        obj.hasAlert = ApiClient.convertToType(data['hasAlert'], 'Boolean');
      if (data.hasOwnProperty('account'))
        obj.account = ApiClient.convertToType(data['account'], 'String');
      if (data.hasOwnProperty('retryUntil'))
        obj.retryUntil = ApiClient.convertToType(data['retryUntil'], 'Date');
      if (data.hasOwnProperty('createdAt'))
        obj.createdAt = ApiClient.convertToType(data['createdAt'], 'String');
      if (data.hasOwnProperty('updatedAt'))
        obj.updatedAt = ApiClient.convertToType(data['updatedAt'], 'String');
    }
    return obj;
  }

  /**
   * Account ID of the scope the application was installed for
   * @member {String} accountId
   */
  exports.prototype.accountId = undefined;

  /**
   * Application ID
   * @member {String} id
   */
  exports.prototype.id = undefined;

  /**
   * Date of the last entity processed by the application
   * @member {String} lastEntityCreatedAt
   */
  exports.prototype.lastEntityCreatedAt = undefined;

  /**
   * Application's alert message, in case of an alert
   * @member {String} alertMessage
   */
  exports.prototype.alertMessage = undefined;

  /**
   * Scope the application was installed for
   * @member {module:model/V21MarketplaceSchemaApplicationViewSchemaMany200Scopes.ScopeLevelEnum} scopeLevel
   */
  exports.prototype.scopeLevel = undefined;

  /**
   * The ID of the user who installed the application
   * @member {String} creatorId
   */
  exports.prototype.creatorId = undefined;

  /**
   * Site ID of the scope the application was installed for
   * @member {String} siteId
   */
  exports.prototype.siteId = undefined;

  /**
   * Desired status
   * @member {module:model/V21MarketplaceSchemaApplicationViewSchemaMany200Scopes.DesiredStatusEnum} desiredStatus
   */
  exports.prototype.desiredStatus = undefined;

  /**
   * Scope ID of the scope the application was installed for
   * @member {String} scopeId
   */
  exports.prototype.scopeId = undefined;

  /**
   * Application's creator name
   * @member {String} creator
   */
  exports.prototype.creator = undefined;

  /**
   * Application's scope site name
   * @member {String} site
   */
  exports.prototype.site = undefined;

  /**
   * Application's last modifier name
   * @member {String} modifier
   */
  exports.prototype.modifier = undefined;

  /**
   * Status
   * @member {module:model/V21MarketplaceSchemaApplicationViewSchemaMany200Scopes.StatusEnum} status
   */
  exports.prototype.status = undefined;

  /**
   * Group ID of the scope the application was installed for
   * @member {String} groupId
   */
  exports.prototype.groupId = undefined;

  /**
   * Application's scope group name
   * @member {String} group
   */
  exports.prototype.group = undefined;

  /**
   * The ID of the user who modified last the application
   * @member {String} modifierId
   */
  exports.prototype.modifierId = undefined;

  /**
   * True if the application has any issues
   * @member {Boolean} hasAlert
   */
  exports.prototype.hasAlert = undefined;

  /**
   * Application's scope account name
   * @member {String} account
   */
  exports.prototype.account = undefined;

  /**
   * In case the application receives errors, the field will be populated with the last date and time the application can retry
   * @member {Date} retryUntil
   */
  exports.prototype.retryUntil = undefined;

  /**
   * Date application was installed
   * @member {String} createdAt
   */
  exports.prototype.createdAt = undefined;

  /**
   * Date of last update
   * @member {String} updatedAt
   */
  exports.prototype.updatedAt = undefined;



  /**
   * Allowed values for the <code>scopeLevel</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ScopeLevelEnum = {
    /**
     * value: "global"
     * @const
     */
    global: "global",

    /**
     * value: "account"
     * @const
     */
    account: "account",

    /**
     * value: "group"
     * @const
     */
    group: "group",

    /**
     * value: "site"
     * @const
     */
    site: "site"
  };


  /**
   * Allowed values for the <code>desiredStatus</code> property.
   * @enum {String}
   * @readonly
   */
  exports.DesiredStatusEnum = {
    /**
     * value: "draft"
     * @const
     */
    draft: "draft",

    /**
     * value: "Draft"
     * @const
     */
    draft_2: "Draft",

    /**
     * value: "active"
     * @const
     */
    active: "active",

    /**
     * value: "Active"
     * @const
     */
    active_2: "Active",

    /**
     * value: "disabled"
     * @const
     */
    disabled: "disabled",

    /**
     * value: "Disabled"
     * @const
     */
    disabled_2: "Disabled",

    /**
     * value: "deleted"
     * @const
     */
    deleted: "deleted",

    /**
     * value: "Deleted"
     * @const
     */
    deleted_2: "Deleted"
  };


  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StatusEnum = {
    /**
     * value: "active"
     * @const
     */
    active: "active",

    /**
     * value: "Active"
     * @const
     */
    active_2: "Active",

    /**
     * value: "activating"
     * @const
     */
    activating: "activating",

    /**
     * value: "Activating"
     * @const
     */
    activating_2: "Activating",

    /**
     * value: "disabled"
     * @const
     */
    disabled: "disabled",

    /**
     * value: "Disabled"
     * @const
     */
    disabled_2: "Disabled",

    /**
     * value: "disabling"
     * @const
     */
    disabling: "disabling",

    /**
     * value: "Disabling"
     * @const
     */
    disabling_2: "Disabling",

    /**
     * value: "deleting"
     * @const
     */
    deleting: "deleting",

    /**
     * value: "Deleting"
     * @const
     */
    deleting_2: "Deleting",

    /**
     * value: "deleted"
     * @const
     */
    deleted: "deleted",

    /**
     * value: "Deleted"
     * @const
     */
    deleted_2: "Deleted",

    /**
     * value: "error"
     * @const
     */
    error: "error",

    /**
     * value: "Error"
     * @const
     */
    error_2: "Error"
  };

  return exports;

}));
