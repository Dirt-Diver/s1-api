/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SchemasRangerTableViewSchemaMany200DeviceReviewLog', 'model/SchemasRangerTableViewSchemaMany200Networks', 'model/SchemasRangerTableViewSchemaMany200Tags'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./SchemasRangerTableViewSchemaMany200DeviceReviewLog'), require('./SchemasRangerTableViewSchemaMany200Networks'), require('./SchemasRangerTableViewSchemaMany200Tags'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.SchemasRangerTableViewSchemaMany200Data = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.SchemasRangerTableViewSchemaMany200DeviceReviewLog, root.S1MgmtApi.SchemasRangerTableViewSchemaMany200Networks, root.S1MgmtApi.SchemasRangerTableViewSchemaMany200Tags);
  }
}(this, function(ApiClient, SchemasRangerTableViewSchemaMany200DeviceReviewLog, SchemasRangerTableViewSchemaMany200Networks, SchemasRangerTableViewSchemaMany200Tags) {
  'use strict';

  /**
   * The SchemasRangerTableViewSchemaMany200Data model module.
   * @module model/SchemasRangerTableViewSchemaMany200Data
   * @version 2.1
   */

  /**
   * Constructs a new <code>SchemasRangerTableViewSchemaMany200Data</code>.
   * @alias module:model/SchemasRangerTableViewSchemaMany200Data
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>SchemasRangerTableViewSchemaMany200Data</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SchemasRangerTableViewSchemaMany200Data} obj Optional instance to populate.
   * @return {module:model/SchemasRangerTableViewSchemaMany200Data} The populated <code>SchemasRangerTableViewSchemaMany200Data</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('previousOsVersion'))
        obj.previousOsVersion = ApiClient.convertToType(data['previousOsVersion'], 'String');
      if (data.hasOwnProperty('hasUserLabel'))
        obj.hasUserLabel = ApiClient.convertToType(data['hasUserLabel'], 'Boolean');
      if (data.hasOwnProperty('tcpPorts'))
        obj.tcpPorts = ApiClient.convertToType(data['tcpPorts'], ['Number']);
      if (data.hasOwnProperty('lastSeen'))
        obj.lastSeen = ApiClient.convertToType(data['lastSeen'], 'Date');
      if (data.hasOwnProperty('osVersion'))
        obj.osVersion = ApiClient.convertToType(data['osVersion'], 'String');
      if (data.hasOwnProperty('deviceReviewLog'))
        obj.deviceReviewLog = ApiClient.convertToType(data['deviceReviewLog'], [SchemasRangerTableViewSchemaMany200DeviceReviewLog]);
      if (data.hasOwnProperty('labelUpdatedAt'))
        obj.labelUpdatedAt = ApiClient.convertToType(data['labelUpdatedAt'], 'Date');
      if (data.hasOwnProperty('networks'))
        obj.networks = ApiClient.convertToType(data['networks'], [SchemasRangerTableViewSchemaMany200Networks]);
      if (data.hasOwnProperty('gatewayIpAddress'))
        obj.gatewayIpAddress = ApiClient.convertToType(data['gatewayIpAddress'], 'String');
      if (data.hasOwnProperty('discoveryMethods'))
        obj.discoveryMethods = ApiClient.convertToType(data['discoveryMethods'], ['String']);
      if (data.hasOwnProperty('localIp'))
        obj.localIp = ApiClient.convertToType(data['localIp'], 'String');
      if (data.hasOwnProperty('hasIdentity'))
        obj.hasIdentity = ApiClient.convertToType(data['hasIdentity'], 'Boolean');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('gatewayMacAddress'))
        obj.gatewayMacAddress = ApiClient.convertToType(data['gatewayMacAddress'], 'String');
      if (data.hasOwnProperty('udpPorts'))
        obj.udpPorts = ApiClient.convertToType(data['udpPorts'], ['Number']);
      if (data.hasOwnProperty('deviceReview'))
        obj.deviceReview = ApiClient.convertToType(data['deviceReview'], 'String');
      if (data.hasOwnProperty('externalIp'))
        obj.externalIp = ApiClient.convertToType(data['externalIp'], 'String');
      if (data.hasOwnProperty('deviceFunction'))
        obj.deviceFunction = ApiClient.convertToType(data['deviceFunction'], 'String');
      if (data.hasOwnProperty('subnetAddress'))
        obj.subnetAddress = ApiClient.convertToType(data['subnetAddress'], 'String');
      if (data.hasOwnProperty('agentId'))
        obj.agentId = ApiClient.convertToType(data['agentId'], 'String');
      if (data.hasOwnProperty('hostnames'))
        obj.hostnames = ApiClient.convertToType(data['hostnames'], ['String']);
      if (data.hasOwnProperty('previousOsType'))
        obj.previousOsType = ApiClient.convertToType(data['previousOsType'], 'String');
      if (data.hasOwnProperty('macAddress'))
        obj.macAddress = ApiClient.convertToType(data['macAddress'], 'String');
      if (data.hasOwnProperty('ipAddresses'))
        obj.ipAddresses = ApiClient.convertToType(data['ipAddresses'], ['String']);
      if (data.hasOwnProperty('firstSeen'))
        obj.firstSeen = ApiClient.convertToType(data['firstSeen'], 'Date');
      if (data.hasOwnProperty('previousDeviceFunction'))
        obj.previousDeviceFunction = ApiClient.convertToType(data['previousDeviceFunction'], 'String');
      if (data.hasOwnProperty('labelUserName'))
        obj.labelUserName = ApiClient.convertToType(data['labelUserName'], 'String');
      if (data.hasOwnProperty('manufacturer'))
        obj.manufacturer = ApiClient.convertToType(data['manufacturer'], 'String');
      if (data.hasOwnProperty('siteName'))
        obj.siteName = ApiClient.convertToType(data['siteName'], 'String');
      if (data.hasOwnProperty('fingerPrintScore'))
        obj.fingerPrintScore = ApiClient.convertToType(data['fingerPrintScore'], 'Number');
      if (data.hasOwnProperty('osType'))
        obj.osType = ApiClient.convertToType(data['osType'], 'String');
      if (data.hasOwnProperty('domain'))
        obj.domain = ApiClient.convertToType(data['domain'], 'String');
      if (data.hasOwnProperty('networkName'))
        obj.networkName = ApiClient.convertToType(data['networkName'], 'String');
      if (data.hasOwnProperty('deviceType'))
        obj.deviceType = ApiClient.convertToType(data['deviceType'], 'String');
      if (data.hasOwnProperty('tags'))
        obj.tags = ApiClient.convertToType(data['tags'], [SchemasRangerTableViewSchemaMany200Tags]);
      if (data.hasOwnProperty('managedState'))
        obj.managedState = ApiClient.convertToType(data['managedState'], 'String');
      if (data.hasOwnProperty('osName'))
        obj.osName = ApiClient.convertToType(data['osName'], 'String');
    }
    return obj;
  }

  /**
   * Previous OS Version of the device if manually changed
   * @member {String} previousOsVersion
   */
  exports.prototype.previousOsVersion = undefined;

  /**
   * True if it has a user label
   * @member {Boolean} hasUserLabel
   */
  exports.prototype.hasUserLabel = undefined;

  /**
   * TCP Ports
   * @member {Array.<Number>} tcpPorts
   */
  exports.prototype.tcpPorts = undefined;

  /**
   * Time the device was last seen
   * @member {Date} lastSeen
   */
  exports.prototype.lastSeen = undefined;

  /**
   * OS Version of the device
   * @member {String} osVersion
   */
  exports.prototype.osVersion = undefined;

  /**
   * Log of actions for this device
   * @member {Array.<module:model/SchemasRangerTableViewSchemaMany200DeviceReviewLog>} deviceReviewLog
   */
  exports.prototype.deviceReviewLog = undefined;

  /**
   * The date of the last label update
   * @member {Date} labelUpdatedAt
   */
  exports.prototype.labelUpdatedAt = undefined;

  /**
   * A list of all the networks associated to the device. When it is not combined it is always one element
   * @member {Array.<module:model/SchemasRangerTableViewSchemaMany200Networks>} networks
   */
  exports.prototype.networks = undefined;

  /**
   * Main gateway IP address
   * @member {String} gatewayIpAddress
   */
  exports.prototype.gatewayIpAddress = undefined;

  /**
   * Methods used to discover the device
   * @member {Array.<String>} discoveryMethods
   */
  exports.prototype.discoveryMethods = undefined;

  /**
   * Local ip of the device
   * @member {String} localIp
   */
  exports.prototype.localIp = undefined;

  /**
   * Would we be able to identify this device over time
   * @member {Boolean} hasIdentity
   */
  exports.prototype.hasIdentity = undefined;

  /**
   * Id of the device
   * @member {String} id
   */
  exports.prototype.id = undefined;

  /**
   * Main gateway MAC address
   * @member {String} gatewayMacAddress
   */
  exports.prototype.gatewayMacAddress = undefined;

  /**
   * UDP Ports
   * @member {Array.<Number>} udpPorts
   */
  exports.prototype.udpPorts = undefined;

  /**
   * The device review state
   * @member {String} deviceReview
   */
  exports.prototype.deviceReview = undefined;

  /**
   * Main Gateway Visible IP
   * @member {String} externalIp
   */
  exports.prototype.externalIp = undefined;

  /**
   * Function of the device
   * @member {String} deviceFunction
   */
  exports.prototype.deviceFunction = undefined;

  /**
   * Main subnet address
   * @member {String} subnetAddress
   */
  exports.prototype.subnetAddress = undefined;

  /**
   * The agent id if this is a known managed device
   * @member {String} agentId
   */
  exports.prototype.agentId = undefined;

  /**
   * Array of host names
   * @member {Array.<String>} hostnames
   */
  exports.prototype.hostnames = undefined;

  /**
   * Previous Os Type of the device if manually changed
   * @member {String} previousOsType
   */
  exports.prototype.previousOsType = undefined;

  /**
   * Mac address of the device
   * @member {String} macAddress
   */
  exports.prototype.macAddress = undefined;

  /**
   * A list of ip addresses. When it is not combined it is always one element
   * @member {Array.<String>} ipAddresses
   */
  exports.prototype.ipAddresses = undefined;

  /**
   * Time the device was first seen
   * @member {Date} firstSeen
   */
  exports.prototype.firstSeen = undefined;

  /**
   * Previous Function of the device if manually changed
   * @member {String} previousDeviceFunction
   */
  exports.prototype.previousDeviceFunction = undefined;

  /**
   * The user that changed the label
   * @member {String} labelUserName
   */
  exports.prototype.labelUserName = undefined;

  /**
   * Manufacturer of the device or network interface
   * @member {String} manufacturer
   */
  exports.prototype.manufacturer = undefined;

  /**
   * Site name
   * @member {String} siteName
   */
  exports.prototype.siteName = undefined;

  /**
   * The confidence for this fingerprinting result
   * @member {Number} fingerPrintScore
   */
  exports.prototype.fingerPrintScore = undefined;

  /**
   * Os Type of the device
   * @member {String} osType
   */
  exports.prototype.osType = undefined;

  /**
   * The domain of the device
   * @member {String} domain
   */
  exports.prototype.domain = undefined;

  /**
   * The network name
   * @member {String} networkName
   */
  exports.prototype.networkName = undefined;

  /**
   * Role of the device
   * @member {String} deviceType
   */
  exports.prototype.deviceType = undefined;

  /**
   * The tags
   * @member {Array.<module:model/SchemasRangerTableViewSchemaMany200Tags>} tags
   */
  exports.prototype.tags = undefined;

  /**
   * Protection state of the device
   * @member {String} managedState
   */
  exports.prototype.managedState = undefined;

  /**
   * OS Name/Version of the device
   * @member {String} osName
   */
  exports.prototype.osName = undefined;


  return exports;

}));
