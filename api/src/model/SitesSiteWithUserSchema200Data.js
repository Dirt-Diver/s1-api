/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SitesSiteResponseSchema200DataLicenses', 'model/SitesSiteWithUserSchema200DataUser'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./SitesSiteResponseSchema200DataLicenses'), require('./SitesSiteWithUserSchema200DataUser'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.SitesSiteWithUserSchema200Data = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.SitesSiteResponseSchema200DataLicenses, root.S1MgmtApi.SitesSiteWithUserSchema200DataUser);
  }
}(this, function(ApiClient, SitesSiteResponseSchema200DataLicenses, SitesSiteWithUserSchema200DataUser) {
  'use strict';

  /**
   * The SitesSiteWithUserSchema200Data model module.
   * @module model/SitesSiteWithUserSchema200Data
   * @version 2.1
   */

  /**
   * Constructs a new <code>SitesSiteWithUserSchema200Data</code>.
   * Response data
   * @alias module:model/SitesSiteWithUserSchema200Data
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>SitesSiteWithUserSchema200Data</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SitesSiteWithUserSchema200Data} obj Optional instance to populate.
   * @return {module:model/SitesSiteWithUserSchema200Data} The populated <code>SitesSiteWithUserSchema200Data</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('accountId'))
        obj.accountId = ApiClient.convertToType(data['accountId'], 'String');
      if (data.hasOwnProperty('healthStatus'))
        obj.healthStatus = ApiClient.convertToType(data['healthStatus'], 'Boolean');
      if (data.hasOwnProperty('updatedAt'))
        obj.updatedAt = ApiClient.convertToType(data['updatedAt'], 'Date');
      if (data.hasOwnProperty('expiration'))
        obj.expiration = ApiClient.convertToType(data['expiration'], 'Date');
      if (data.hasOwnProperty('siteType'))
        obj.siteType = ApiClient.convertToType(data['siteType'], 'String');
      if (data.hasOwnProperty('isDefault'))
        obj.isDefault = ApiClient.convertToType(data['isDefault'], 'Boolean');
      if (data.hasOwnProperty('user'))
        obj.user = SitesSiteWithUserSchema200DataUser.constructFromObject(data['user']);
      if (data.hasOwnProperty('state'))
        obj.state = ApiClient.convertToType(data['state'], 'String');
      if (data.hasOwnProperty('accountName'))
        obj.accountName = ApiClient.convertToType(data['accountName'], 'String');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('activeLicenses'))
        obj.activeLicenses = ApiClient.convertToType(data['activeLicenses'], 'Number');
      if (data.hasOwnProperty('totalLicenses'))
        obj.totalLicenses = ApiClient.convertToType(data['totalLicenses'], 'Number');
      if (data.hasOwnProperty('usageType'))
        obj.usageType = ApiClient.convertToType(data['usageType'], 'String');
      if (data.hasOwnProperty('externalId'))
        obj.externalId = ApiClient.convertToType(data['externalId'], 'String');
      if (data.hasOwnProperty('suite'))
        obj.suite = ApiClient.convertToType(data['suite'], 'String');
      if (data.hasOwnProperty('licenses'))
        obj.licenses = SitesSiteResponseSchema200DataLicenses.constructFromObject(data['licenses']);
      if (data.hasOwnProperty('registrationToken'))
        obj.registrationToken = ApiClient.convertToType(data['registrationToken'], Object);
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('createdAt'))
        obj.createdAt = ApiClient.convertToType(data['createdAt'], 'Date');
      if (data.hasOwnProperty('sku'))
        obj.sku = ApiClient.convertToType(data['sku'], 'String');
    }
    return obj;
  }

  /**
   * Account id
   * @member {String} accountId
   */
  exports.prototype.accountId = undefined;

  /**
   * Obsolete. Always true
   * @member {Boolean} healthStatus
   */
  exports.prototype.healthStatus = undefined;

  /**
   * Timestamp of last update
   * @member {Date} updatedAt
   */
  exports.prototype.updatedAt = undefined;

  /**
   * Expiration
   * @member {Date} expiration
   */
  exports.prototype.expiration = undefined;

  /**
   * Site type
   * @member {String} siteType
   */
  exports.prototype.siteType = undefined;

  /**
   * Is default
   * @member {Boolean} isDefault
   */
  exports.prototype.isDefault = undefined;

  /**
   * @member {module:model/SitesSiteWithUserSchema200DataUser} user
   */
  exports.prototype.user = undefined;

  /**
   * Site state
   * @member {module:model/SitesSiteWithUserSchema200Data.StateEnum} state
   */
  exports.prototype.state = undefined;

  /**
   * Account name
   * @member {String} accountName
   */
  exports.prototype.accountName = undefined;

  /**
   * Site ID
   * @member {String} id
   */
  exports.prototype.id = undefined;

  /**
   * Number of active licenses for the site
   * @member {Number} activeLicenses
   */
  exports.prototype.activeLicenses = undefined;

  /**
   * Total licenses
   * @member {Number} totalLicenses
   */
  exports.prototype.totalLicenses = undefined;

  /**
   * Usage type
   * @member {String} usageType
   */
  exports.prototype.usageType = undefined;

  /**
   * Id of CRM external system
   * @member {String} externalId
   */
  exports.prototype.externalId = undefined;

  /**
   * [DEPRECATED] Use sku instead
   * @member {module:model/SitesSiteWithUserSchema200Data.SuiteEnum} suite
   */
  exports.prototype.suite = undefined;

  /**
   * @member {module:model/SitesSiteResponseSchema200DataLicenses} licenses
   */
  exports.prototype.licenses = undefined;

  /**
   * [DEPRECATED] token generation in dedicated endpoint - /sites/<site_id>/token
   * @member {Object} registrationToken
   */
  exports.prototype.registrationToken = undefined;

  /**
   * The user-defined description for the Site
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * Name
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * Timestamp of site creation
   * @member {Date} createdAt
   */
  exports.prototype.createdAt = undefined;

  /**
   * [DEPRECATED] The sku of product features active for this site
   * @member {module:model/SitesSiteWithUserSchema200Data.SkuEnum} sku
   */
  exports.prototype.sku = undefined;



  /**
   * Allowed values for the <code>state</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StateEnum = {
    /**
     * value: "active"
     * @const
     */
    active: "active",

    /**
     * value: "expired"
     * @const
     */
    expired: "expired",

    /**
     * value: "deleted"
     * @const
     */
    deleted: "deleted"
  };


  /**
   * Allowed values for the <code>suite</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SuiteEnum = {
    /**
     * value: "Core"
     * @const
     */
    core: "Core",

    /**
     * value: "Control"
     * @const
     */
    control: "Control",

    /**
     * value: "Complete"
     * @const
     */
    complete: "Complete"
  };


  /**
   * Allowed values for the <code>sku</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SkuEnum = {
    /**
     * value: "Core"
     * @const
     */
    core: "Core",

    /**
     * value: "Control"
     * @const
     */
    control: "Control",

    /**
     * value: "Complete"
     * @const
     */
    complete: "Complete"
  };

  return exports;

}));
