/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.V21IncidentsSchemasListIncidentsSchema200Details = factory(root.S1MgmtApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The V21IncidentsSchemasListIncidentsSchema200Details model module.
   * @module model/V21IncidentsSchemasListIncidentsSchema200Details
   * @version 2.1
   */

  /**
   * Constructs a new <code>V21IncidentsSchemasListIncidentsSchema200Details</code>.
   * Details
   * @alias module:model/V21IncidentsSchemasListIncidentsSchema200Details
   * @class
   * @param applicationDeveloper {String} Applicationdeveloper
   * @param processName {String} Processname
   * @param fileName {String} Filename
   * @param malwareThreatName {String} Malwarethreatname
   * @param networkInterface {String} Networkinterface
   * @param applicationPackage {String} Applicationpackage
   * @param installerSource {String} Installersource
   * @param routerSSID {String} Routerssid
   * @param routerBSSID {String} Routerbssid
   * @param applicationName {String} Applicationname
   * @param fileHash {String} Filehash
   * @param suspectedUrl {String} Suspectedurl
   * @param deviceTime {String} Devicetime
   */
  var exports = function(applicationDeveloper, processName, fileName, malwareThreatName, networkInterface, applicationPackage, installerSource, routerSSID, routerBSSID, applicationName, fileHash, suspectedUrl, deviceTime) {
    this.applicationDeveloper = applicationDeveloper;
    this.processName = processName;
    this.fileName = fileName;
    this.malwareThreatName = malwareThreatName;
    this.networkInterface = networkInterface;
    this.applicationPackage = applicationPackage;
    this.installerSource = installerSource;
    this.routerSSID = routerSSID;
    this.routerBSSID = routerBSSID;
    this.applicationName = applicationName;
    this.fileHash = fileHash;
    this.suspectedUrl = suspectedUrl;
    this.deviceTime = deviceTime;
  };

  /**
   * Constructs a <code>V21IncidentsSchemasListIncidentsSchema200Details</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/V21IncidentsSchemasListIncidentsSchema200Details} obj Optional instance to populate.
   * @return {module:model/V21IncidentsSchemasListIncidentsSchema200Details} The populated <code>V21IncidentsSchemasListIncidentsSchema200Details</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('applicationDeveloper'))
        obj.applicationDeveloper = ApiClient.convertToType(data['applicationDeveloper'], 'String');
      if (data.hasOwnProperty('processName'))
        obj.processName = ApiClient.convertToType(data['processName'], 'String');
      if (data.hasOwnProperty('fileName'))
        obj.fileName = ApiClient.convertToType(data['fileName'], 'String');
      if (data.hasOwnProperty('malwareThreatName'))
        obj.malwareThreatName = ApiClient.convertToType(data['malwareThreatName'], 'String');
      if (data.hasOwnProperty('networkInterface'))
        obj.networkInterface = ApiClient.convertToType(data['networkInterface'], 'String');
      if (data.hasOwnProperty('applicationPackage'))
        obj.applicationPackage = ApiClient.convertToType(data['applicationPackage'], 'String');
      if (data.hasOwnProperty('installerSource'))
        obj.installerSource = ApiClient.convertToType(data['installerSource'], 'String');
      if (data.hasOwnProperty('routerSSID'))
        obj.routerSSID = ApiClient.convertToType(data['routerSSID'], 'String');
      if (data.hasOwnProperty('routerBSSID'))
        obj.routerBSSID = ApiClient.convertToType(data['routerBSSID'], 'String');
      if (data.hasOwnProperty('applicationName'))
        obj.applicationName = ApiClient.convertToType(data['applicationName'], 'String');
      if (data.hasOwnProperty('fileHash'))
        obj.fileHash = ApiClient.convertToType(data['fileHash'], 'String');
      if (data.hasOwnProperty('suspectedUrl'))
        obj.suspectedUrl = ApiClient.convertToType(data['suspectedUrl'], 'String');
      if (data.hasOwnProperty('deviceTime'))
        obj.deviceTime = ApiClient.convertToType(data['deviceTime'], 'String');
    }
    return obj;
  }

  /**
   * Applicationdeveloper
   * @member {String} applicationDeveloper
   */
  exports.prototype.applicationDeveloper = undefined;

  /**
   * Processname
   * @member {String} processName
   */
  exports.prototype.processName = undefined;

  /**
   * Filename
   * @member {String} fileName
   */
  exports.prototype.fileName = undefined;

  /**
   * Malwarethreatname
   * @member {String} malwareThreatName
   */
  exports.prototype.malwareThreatName = undefined;

  /**
   * Networkinterface
   * @member {String} networkInterface
   */
  exports.prototype.networkInterface = undefined;

  /**
   * Applicationpackage
   * @member {String} applicationPackage
   */
  exports.prototype.applicationPackage = undefined;

  /**
   * Installersource
   * @member {String} installerSource
   */
  exports.prototype.installerSource = undefined;

  /**
   * Routerssid
   * @member {String} routerSSID
   */
  exports.prototype.routerSSID = undefined;

  /**
   * Routerbssid
   * @member {String} routerBSSID
   */
  exports.prototype.routerBSSID = undefined;

  /**
   * Applicationname
   * @member {String} applicationName
   */
  exports.prototype.applicationName = undefined;

  /**
   * Filehash
   * @member {String} fileHash
   */
  exports.prototype.fileHash = undefined;

  /**
   * Suspectedurl
   * @member {String} suspectedUrl
   */
  exports.prototype.suspectedUrl = undefined;

  /**
   * Devicetime
   * @member {String} deviceTime
   */
  exports.prototype.deviceTime = undefined;


  return exports;

}));
