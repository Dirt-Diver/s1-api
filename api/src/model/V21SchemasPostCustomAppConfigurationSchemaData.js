/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.V21SchemasPostCustomAppConfigurationSchemaData = factory(root.S1MgmtApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The V21SchemasPostCustomAppConfigurationSchemaData model module.
   * @module model/V21SchemasPostCustomAppConfigurationSchemaData
   * @version 2.1
   */

  /**
   * Constructs a new <code>V21SchemasPostCustomAppConfigurationSchemaData</code>.
   * Data
   * @alias module:model/V21SchemasPostCustomAppConfigurationSchemaData
   * @class
   * @param scopeId {Number} Scope id of custom app configuration
   * @param driverMemory {Number} TI spark app driver memory
   * @param executorMemory {Number} TI spark app executor memory
   * @param minScale {Number} TI spark app min scale
   * @param scopeLevel {module:model/V21SchemasPostCustomAppConfigurationSchemaData.ScopeLevelEnum} The scope level of custom app configuration
   * @param driverCores {Number} TI spark app driver cores
   * @param mgmtId {Number} Id of the MGMT of custom app configuration
   * @param sparkConf {String} TI spark app spark conf
   * @param maxScale {Number} TI spark app max scale
   * @param executorCores {Number} TI spark app executor cores
   */
  var exports = function(scopeId, driverMemory, executorMemory, minScale, scopeLevel, driverCores, mgmtId, sparkConf, maxScale, executorCores) {
    this.scopeId = scopeId;
    this.driverMemory = driverMemory;
    this.executorMemory = executorMemory;
    this.minScale = minScale;
    this.scopeLevel = scopeLevel;
    this.driverCores = driverCores;
    this.mgmtId = mgmtId;
    this.sparkConf = sparkConf;
    this.maxScale = maxScale;
    this.executorCores = executorCores;
  };

  /**
   * Constructs a <code>V21SchemasPostCustomAppConfigurationSchemaData</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/V21SchemasPostCustomAppConfigurationSchemaData} obj Optional instance to populate.
   * @return {module:model/V21SchemasPostCustomAppConfigurationSchemaData} The populated <code>V21SchemasPostCustomAppConfigurationSchemaData</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('scopeId'))
        obj.scopeId = ApiClient.convertToType(data['scopeId'], 'Number');
      if (data.hasOwnProperty('driverMemory'))
        obj.driverMemory = ApiClient.convertToType(data['driverMemory'], 'Number');
      if (data.hasOwnProperty('executorMemory'))
        obj.executorMemory = ApiClient.convertToType(data['executorMemory'], 'Number');
      if (data.hasOwnProperty('minScale'))
        obj.minScale = ApiClient.convertToType(data['minScale'], 'Number');
      if (data.hasOwnProperty('scopeLevel'))
        obj.scopeLevel = ApiClient.convertToType(data['scopeLevel'], 'String');
      if (data.hasOwnProperty('driverCores'))
        obj.driverCores = ApiClient.convertToType(data['driverCores'], 'Number');
      if (data.hasOwnProperty('mgmtId'))
        obj.mgmtId = ApiClient.convertToType(data['mgmtId'], 'Number');
      if (data.hasOwnProperty('sparkConf'))
        obj.sparkConf = ApiClient.convertToType(data['sparkConf'], 'String');
      if (data.hasOwnProperty('maxScale'))
        obj.maxScale = ApiClient.convertToType(data['maxScale'], 'Number');
      if (data.hasOwnProperty('executorCores'))
        obj.executorCores = ApiClient.convertToType(data['executorCores'], 'Number');
    }
    return obj;
  }

  /**
   * Scope id of custom app configuration
   * @member {Number} scopeId
   */
  exports.prototype.scopeId = undefined;

  /**
   * TI spark app driver memory
   * @member {Number} driverMemory
   */
  exports.prototype.driverMemory = undefined;

  /**
   * TI spark app executor memory
   * @member {Number} executorMemory
   */
  exports.prototype.executorMemory = undefined;

  /**
   * TI spark app min scale
   * @member {Number} minScale
   */
  exports.prototype.minScale = undefined;

  /**
   * The scope level of custom app configuration
   * @member {module:model/V21SchemasPostCustomAppConfigurationSchemaData.ScopeLevelEnum} scopeLevel
   */
  exports.prototype.scopeLevel = undefined;

  /**
   * TI spark app driver cores
   * @member {Number} driverCores
   */
  exports.prototype.driverCores = undefined;

  /**
   * Id of the MGMT of custom app configuration
   * @member {Number} mgmtId
   */
  exports.prototype.mgmtId = undefined;

  /**
   * TI spark app spark conf
   * @member {String} sparkConf
   */
  exports.prototype.sparkConf = undefined;

  /**
   * TI spark app max scale
   * @member {Number} maxScale
   */
  exports.prototype.maxScale = undefined;

  /**
   * TI spark app executor cores
   * @member {Number} executorCores
   */
  exports.prototype.executorCores = undefined;



  /**
   * Allowed values for the <code>scopeLevel</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ScopeLevelEnum = {
    /**
     * value: "site"
     * @const
     */
    site: "site",

    /**
     * value: "group"
     * @const
     */
    group: "group",

    /**
     * value: "account"
     * @const
     */
    account: "account",

    /**
     * value: "global"
     * @const
     */
    global: "global"
  };

  return exports;

}));
