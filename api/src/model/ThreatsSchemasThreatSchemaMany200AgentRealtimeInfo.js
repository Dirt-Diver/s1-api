/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ThreatsSchemasThreatSchemaMany200AgentRealtimeInfoNetworkInterfaces'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ThreatsSchemasThreatSchemaMany200AgentRealtimeInfoNetworkInterfaces'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.ThreatsSchemasThreatSchemaMany200AgentRealtimeInfo = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.ThreatsSchemasThreatSchemaMany200AgentRealtimeInfoNetworkInterfaces);
  }
}(this, function(ApiClient, ThreatsSchemasThreatSchemaMany200AgentRealtimeInfoNetworkInterfaces) {
  'use strict';

  /**
   * The ThreatsSchemasThreatSchemaMany200AgentRealtimeInfo model module.
   * @module model/ThreatsSchemasThreatSchemaMany200AgentRealtimeInfo
   * @version 2.1
   */

  /**
   * Constructs a new <code>ThreatsSchemasThreatSchemaMany200AgentRealtimeInfo</code>.
   * Agent realtime information
   * @alias module:model/ThreatsSchemasThreatSchemaMany200AgentRealtimeInfo
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>ThreatsSchemasThreatSchemaMany200AgentRealtimeInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ThreatsSchemasThreatSchemaMany200AgentRealtimeInfo} obj Optional instance to populate.
   * @return {module:model/ThreatsSchemasThreatSchemaMany200AgentRealtimeInfo} The populated <code>ThreatsSchemasThreatSchemaMany200AgentRealtimeInfo</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('agentIsActive'))
        obj.agentIsActive = ApiClient.convertToType(data['agentIsActive'], 'Boolean');
      if (data.hasOwnProperty('scanFinishedAt'))
        obj.scanFinishedAt = ApiClient.convertToType(data['scanFinishedAt'], 'Date');
      if (data.hasOwnProperty('agentMitigationMode'))
        obj.agentMitigationMode = ApiClient.convertToType(data['agentMitigationMode'], 'String');
      if (data.hasOwnProperty('agentInfected'))
        obj.agentInfected = ApiClient.convertToType(data['agentInfected'], 'Boolean');
      if (data.hasOwnProperty('operationalState'))
        obj.operationalState = ApiClient.convertToType(data['operationalState'], 'String');
      if (data.hasOwnProperty('accountId'))
        obj.accountId = ApiClient.convertToType(data['accountId'], 'String');
      if (data.hasOwnProperty('agentMachineType'))
        obj.agentMachineType = ApiClient.convertToType(data['agentMachineType'], 'String');
      if (data.hasOwnProperty('siteId'))
        obj.siteId = ApiClient.convertToType(data['siteId'], 'String');
      if (data.hasOwnProperty('storageType'))
        obj.storageType = ApiClient.convertToType(data['storageType'], 'String');
      if (data.hasOwnProperty('userActionsNeeded'))
        obj.userActionsNeeded = ApiClient.convertToType(data['userActionsNeeded'], ['String']);
      if (data.hasOwnProperty('rebootRequired'))
        obj.rebootRequired = ApiClient.convertToType(data['rebootRequired'], 'Boolean');
      if (data.hasOwnProperty('agentComputerName'))
        obj.agentComputerName = ApiClient.convertToType(data['agentComputerName'], 'String');
      if (data.hasOwnProperty('agentUuid'))
        obj.agentUuid = ApiClient.convertToType(data['agentUuid'], 'String');
      if (data.hasOwnProperty('accountName'))
        obj.accountName = ApiClient.convertToType(data['accountName'], 'String');
      if (data.hasOwnProperty('agentId'))
        obj.agentId = ApiClient.convertToType(data['agentId'], 'String');
      if (data.hasOwnProperty('agentDecommissionedAt'))
        obj.agentDecommissionedAt = ApiClient.convertToType(data['agentDecommissionedAt'], 'Boolean');
      if (data.hasOwnProperty('groupName'))
        obj.groupName = ApiClient.convertToType(data['groupName'], 'String');
      if (data.hasOwnProperty('agentIsDecommissioned'))
        obj.agentIsDecommissioned = ApiClient.convertToType(data['agentIsDecommissioned'], 'Boolean');
      if (data.hasOwnProperty('activeThreats'))
        obj.activeThreats = ApiClient.convertToType(data['activeThreats'], 'Number');
      if (data.hasOwnProperty('agentOsName'))
        obj.agentOsName = ApiClient.convertToType(data['agentOsName'], 'String');
      if (data.hasOwnProperty('agentNetworkStatus'))
        obj.agentNetworkStatus = ApiClient.convertToType(data['agentNetworkStatus'], 'String');
      if (data.hasOwnProperty('scanStatus'))
        obj.scanStatus = ApiClient.convertToType(data['scanStatus'], 'String');
      if (data.hasOwnProperty('networkInterfaces'))
        obj.networkInterfaces = ApiClient.convertToType(data['networkInterfaces'], [ThreatsSchemasThreatSchemaMany200AgentRealtimeInfoNetworkInterfaces]);
      if (data.hasOwnProperty('scanStartedAt'))
        obj.scanStartedAt = ApiClient.convertToType(data['scanStartedAt'], 'Date');
      if (data.hasOwnProperty('groupId'))
        obj.groupId = ApiClient.convertToType(data['groupId'], 'String');
      if (data.hasOwnProperty('siteName'))
        obj.siteName = ApiClient.convertToType(data['siteName'], 'String');
      if (data.hasOwnProperty('agentVersion'))
        obj.agentVersion = ApiClient.convertToType(data['agentVersion'], 'String');
      if (data.hasOwnProperty('storageName'))
        obj.storageName = ApiClient.convertToType(data['storageName'], 'String');
      if (data.hasOwnProperty('agentOsType'))
        obj.agentOsType = ApiClient.convertToType(data['agentOsType'], 'String');
      if (data.hasOwnProperty('agentDomain'))
        obj.agentDomain = ApiClient.convertToType(data['agentDomain'], 'String');
      if (data.hasOwnProperty('scanAbortedAt'))
        obj.scanAbortedAt = ApiClient.convertToType(data['scanAbortedAt'], 'Date');
      if (data.hasOwnProperty('agentOsRevision'))
        obj.agentOsRevision = ApiClient.convertToType(data['agentOsRevision'], 'String');
    }
    return obj;
  }

  /**
   * Is active
   * @member {Boolean} agentIsActive
   */
  exports.prototype.agentIsActive = undefined;

  /**
   * Finish time of last scan (If applicable)
   * @member {Date} scanFinishedAt
   */
  exports.prototype.scanFinishedAt = undefined;

  /**
   * Agent mitigation mode policy
   * @member {module:model/ThreatsSchemasThreatSchemaMany200AgentRealtimeInfo.AgentMitigationModeEnum} agentMitigationMode
   */
  exports.prototype.agentMitigationMode = undefined;

  /**
   * Agent infected
   * @member {Boolean} agentInfected
   */
  exports.prototype.agentInfected = undefined;

  /**
   * Agent operational state
   * @member {String} operationalState
   */
  exports.prototype.operationalState = undefined;

  /**
   * Account id
   * @member {String} accountId
   */
  exports.prototype.accountId = undefined;

  /**
   * Machine type
   * @member {module:model/ThreatsSchemasThreatSchemaMany200AgentRealtimeInfo.AgentMachineTypeEnum} agentMachineType
   */
  exports.prototype.agentMachineType = undefined;

  /**
   * Site id
   * @member {String} siteId
   */
  exports.prototype.siteId = undefined;

  /**
   * Storage Type
   * @member {String} storageType
   */
  exports.prototype.storageType = undefined;

  /**
   * A list of pending user actions. List items possible values: \"none, user_action_needed, reboot_needed, upgrade_needed, incompatible_os, unprotected, rebootless_without_dynamic_detection, extended_exclusions_partially_accepted, reboot_required, pending_deprecation, ne_not_running, ne_cf_not_active\".
   * @member {Array.<module:model/ThreatsSchemasThreatSchemaMany200AgentRealtimeInfo.UserActionsNeededEnum>} userActionsNeeded
   */
  exports.prototype.userActionsNeeded = undefined;

  /**
   * A reboot is required on the endpoint for at least one threat
   * @member {Boolean} rebootRequired
   */
  exports.prototype.rebootRequired = undefined;

  /**
   * Computer name
   * @member {String} agentComputerName
   */
  exports.prototype.agentComputerName = undefined;

  /**
   * Uuid
   * @member {String} agentUuid
   */
  exports.prototype.agentUuid = undefined;

  /**
   * Account name
   * @member {String} accountName
   */
  exports.prototype.accountName = undefined;

  /**
   * Id
   * @member {String} agentId
   */
  exports.prototype.agentId = undefined;

  /**
   * Decommissioned at
   * @member {Boolean} agentDecommissionedAt
   */
  exports.prototype.agentDecommissionedAt = undefined;

  /**
   * Group name
   * @member {String} groupName
   */
  exports.prototype.groupName = undefined;

  /**
   * Is decommissioned
   * @member {Boolean} agentIsDecommissioned
   */
  exports.prototype.agentIsDecommissioned = undefined;

  /**
   * Active threats
   * @member {Number} activeThreats
   */
  exports.prototype.activeThreats = undefined;

  /**
   * Os name
   * @member {String} agentOsName
   */
  exports.prototype.agentOsName = undefined;

  /**
   * Network status
   * @member {module:model/ThreatsSchemasThreatSchemaMany200AgentRealtimeInfo.AgentNetworkStatusEnum} agentNetworkStatus
   */
  exports.prototype.agentNetworkStatus = undefined;

  /**
   * Scan status
   * @member {module:model/ThreatsSchemasThreatSchemaMany200AgentRealtimeInfo.ScanStatusEnum} scanStatus
   */
  exports.prototype.scanStatus = undefined;

  /**
   * Device's network interfaces
   * @member {Array.<module:model/ThreatsSchemasThreatSchemaMany200AgentRealtimeInfoNetworkInterfaces>} networkInterfaces
   */
  exports.prototype.networkInterfaces = undefined;

  /**
   * Start time of last scan
   * @member {Date} scanStartedAt
   */
  exports.prototype.scanStartedAt = undefined;

  /**
   * Group id
   * @member {String} groupId
   */
  exports.prototype.groupId = undefined;

  /**
   * Site name
   * @member {String} siteName
   */
  exports.prototype.siteName = undefined;

  /**
   * Agent version
   * @member {String} agentVersion
   */
  exports.prototype.agentVersion = undefined;

  /**
   * Storage Name
   * @member {String} storageName
   */
  exports.prototype.storageName = undefined;

  /**
   * OS type
   * @member {module:model/ThreatsSchemasThreatSchemaMany200AgentRealtimeInfo.AgentOsTypeEnum} agentOsType
   */
  exports.prototype.agentOsType = undefined;

  /**
   * Domain
   * @member {String} agentDomain
   */
  exports.prototype.agentDomain = undefined;

  /**
   * Abort time of last scan (If applicable)
   * @member {Date} scanAbortedAt
   */
  exports.prototype.scanAbortedAt = undefined;

  /**
   * Os revision
   * @member {String} agentOsRevision
   */
  exports.prototype.agentOsRevision = undefined;



  /**
   * Allowed values for the <code>agentMitigationMode</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AgentMitigationModeEnum = {
    /**
     * value: "detect"
     * @const
     */
    detect: "detect",

    /**
     * value: "protect"
     * @const
     */
    protect: "protect"
  };


  /**
   * Allowed values for the <code>agentMachineType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AgentMachineTypeEnum = {
    /**
     * value: "unknown"
     * @const
     */
    unknown: "unknown",

    /**
     * value: "desktop"
     * @const
     */
    desktop: "desktop",

    /**
     * value: "laptop"
     * @const
     */
    laptop: "laptop",

    /**
     * value: "server"
     * @const
     */
    server: "server",

    /**
     * value: "kubernetes node"
     * @const
     */
    kubernetesNode: "kubernetes node",

    /**
     * value: "storage"
     * @const
     */
    storage: "storage",

    /**
     * value: "kubernetes pod"
     * @const
     */
    kubernetesPod: "kubernetes pod",

    /**
     * value: "ecs task"
     * @const
     */
    ecsTask: "ecs task"
  };


  /**
   * Allowed values for the <code>userActionsNeeded</code> property.
   * @enum {String}
   * @readonly
   */
  exports.UserActionsNeededEnum = {
    /**
     * value: "none"
     * @const
     */
    none: "none",

    /**
     * value: "user_action_needed"
     * @const
     */
    userActionNeeded: "user_action_needed",

    /**
     * value: "reboot_needed"
     * @const
     */
    rebootNeeded: "reboot_needed",

    /**
     * value: "upgrade_needed"
     * @const
     */
    upgradeNeeded: "upgrade_needed",

    /**
     * value: "incompatible_os"
     * @const
     */
    incompatibleOs: "incompatible_os",

    /**
     * value: "unprotected"
     * @const
     */
    unprotected: "unprotected",

    /**
     * value: "rebootless_without_dynamic_detection"
     * @const
     */
    rebootlessWithoutDynamicDetection: "rebootless_without_dynamic_detection",

    /**
     * value: "extended_exclusions_partially_accepted"
     * @const
     */
    extendedExclusionsPartiallyAccepted: "extended_exclusions_partially_accepted",

    /**
     * value: "reboot_required"
     * @const
     */
    rebootRequired: "reboot_required",

    /**
     * value: "pending_deprecation"
     * @const
     */
    pendingDeprecation: "pending_deprecation",

    /**
     * value: "ne_not_running"
     * @const
     */
    neNotRunning: "ne_not_running",

    /**
     * value: "ne_cf_not_active"
     * @const
     */
    neCfNotActive: "ne_cf_not_active"
  };


  /**
   * Allowed values for the <code>agentNetworkStatus</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AgentNetworkStatusEnum = {
    /**
     * value: "connected"
     * @const
     */
    connected: "connected",

    /**
     * value: "disconnected"
     * @const
     */
    disconnected: "disconnected",

    /**
     * value: "connecting"
     * @const
     */
    connecting: "connecting",

    /**
     * value: "disconnecting"
     * @const
     */
    disconnecting: "disconnecting"
  };


  /**
   * Allowed values for the <code>scanStatus</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ScanStatusEnum = {
    /**
     * value: "none"
     * @const
     */
    none: "none",

    /**
     * value: "started"
     * @const
     */
    started: "started",

    /**
     * value: "aborted"
     * @const
     */
    aborted: "aborted",

    /**
     * value: "finished"
     * @const
     */
    finished: "finished"
  };


  /**
   * Allowed values for the <code>agentOsType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AgentOsTypeEnum = {
    /**
     * value: "windows"
     * @const
     */
    windows: "windows",

    /**
     * value: "macos"
     * @const
     */
    macos: "macos",

    /**
     * value: "linux"
     * @const
     */
    linux: "linux",

    /**
     * value: "windows_legacy"
     * @const
     */
    windowsLegacy: "windows_legacy"
  };

  return exports;

}));
