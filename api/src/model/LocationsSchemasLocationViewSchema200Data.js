/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/LocationsSchemasNewLocationSchemaDataDnsLookup', 'model/LocationsSchemasNewLocationSchemaDataDnsServers', 'model/LocationsSchemasNewLocationSchemaDataIpAddresses', 'model/LocationsSchemasNewLocationSchemaDataNetworkInterfaces', 'model/LocationsSchemasNewLocationSchemaDataRegistryKeys', 'model/LocationsSchemasNewLocationSchemaDataServerConnectivity'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./LocationsSchemasNewLocationSchemaDataDnsLookup'), require('./LocationsSchemasNewLocationSchemaDataDnsServers'), require('./LocationsSchemasNewLocationSchemaDataIpAddresses'), require('./LocationsSchemasNewLocationSchemaDataNetworkInterfaces'), require('./LocationsSchemasNewLocationSchemaDataRegistryKeys'), require('./LocationsSchemasNewLocationSchemaDataServerConnectivity'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.LocationsSchemasLocationViewSchema200Data = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsLookup, root.S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsServers, root.S1MgmtApi.LocationsSchemasNewLocationSchemaDataIpAddresses, root.S1MgmtApi.LocationsSchemasNewLocationSchemaDataNetworkInterfaces, root.S1MgmtApi.LocationsSchemasNewLocationSchemaDataRegistryKeys, root.S1MgmtApi.LocationsSchemasNewLocationSchemaDataServerConnectivity);
  }
}(this, function(ApiClient, LocationsSchemasNewLocationSchemaDataDnsLookup, LocationsSchemasNewLocationSchemaDataDnsServers, LocationsSchemasNewLocationSchemaDataIpAddresses, LocationsSchemasNewLocationSchemaDataNetworkInterfaces, LocationsSchemasNewLocationSchemaDataRegistryKeys, LocationsSchemasNewLocationSchemaDataServerConnectivity) {
  'use strict';

  /**
   * The LocationsSchemasLocationViewSchema200Data model module.
   * @module model/LocationsSchemasLocationViewSchema200Data
   * @version 2.1
   */

  /**
   * Constructs a new <code>LocationsSchemasLocationViewSchema200Data</code>.
   * Response data
   * @alias module:model/LocationsSchemasLocationViewSchema200Data
   * @class
   * @param operator {module:model/LocationsSchemasLocationViewSchema200Data.OperatorEnum} Logical operator to apply between the set of identifiers
   * @param name {String} Location name (should be unique per scope)
   */
  var exports = function(operator, name) {
    this.operator = operator;
    this.name = name;
  };

  /**
   * Constructs a <code>LocationsSchemasLocationViewSchema200Data</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/LocationsSchemasLocationViewSchema200Data} obj Optional instance to populate.
   * @return {module:model/LocationsSchemasLocationViewSchema200Data} The populated <code>LocationsSchemasLocationViewSchema200Data</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('operator'))
        obj.operator = ApiClient.convertToType(data['operator'], 'String');
      if (data.hasOwnProperty('dnsLookup'))
        obj.dnsLookup = LocationsSchemasNewLocationSchemaDataDnsLookup.constructFromObject(data['dnsLookup']);
      if (data.hasOwnProperty('updatedAt'))
        obj.updatedAt = ApiClient.convertToType(data['updatedAt'], 'Date');
      if (data.hasOwnProperty('scopeId'))
        obj.scopeId = ApiClient.convertToType(data['scopeId'], 'String');
      if (data.hasOwnProperty('updaterId'))
        obj.updaterId = ApiClient.convertToType(data['updaterId'], 'String');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('creatorId'))
        obj.creatorId = ApiClient.convertToType(data['creatorId'], 'String');
      if (data.hasOwnProperty('reportingAgents'))
        obj.reportingAgents = ApiClient.convertToType(data['reportingAgents'], 'Number');
      if (data.hasOwnProperty('updater'))
        obj.updater = ApiClient.convertToType(data['updater'], 'String');
      if (data.hasOwnProperty('scopeName'))
        obj.scopeName = ApiClient.convertToType(data['scopeName'], 'String');
      if (data.hasOwnProperty('dnsServers'))
        obj.dnsServers = LocationsSchemasNewLocationSchemaDataDnsServers.constructFromObject(data['dnsServers']);
      if (data.hasOwnProperty('networkInterfaces'))
        obj.networkInterfaces = LocationsSchemasNewLocationSchemaDataNetworkInterfaces.constructFromObject(data['networkInterfaces']);
      if (data.hasOwnProperty('ipAddresses'))
        obj.ipAddresses = LocationsSchemasNewLocationSchemaDataIpAddresses.constructFromObject(data['ipAddresses']);
      if (data.hasOwnProperty('registryKeys'))
        obj.registryKeys = LocationsSchemasNewLocationSchemaDataRegistryKeys.constructFromObject(data['registryKeys']);
      if (data.hasOwnProperty('scope'))
        obj.scope = ApiClient.convertToType(data['scope'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('activeFirewallRules'))
        obj.activeFirewallRules = ApiClient.convertToType(data['activeFirewallRules'], 'Number');
      if (data.hasOwnProperty('serverConnectivity'))
        obj.serverConnectivity = LocationsSchemasNewLocationSchemaDataServerConnectivity.constructFromObject(data['serverConnectivity']);
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('createdAt'))
        obj.createdAt = ApiClient.convertToType(data['createdAt'], 'Date');
      if (data.hasOwnProperty('creator'))
        obj.creator = ApiClient.convertToType(data['creator'], 'String');
      if (data.hasOwnProperty('editable'))
        obj.editable = ApiClient.convertToType(data['editable'], 'Boolean');
      if (data.hasOwnProperty('isFallback'))
        obj.isFallback = ApiClient.convertToType(data['isFallback'], 'Boolean');
    }
    return obj;
  }

  /**
   * Logical operator to apply between the set of identifiers
   * @member {module:model/LocationsSchemasLocationViewSchema200Data.OperatorEnum} operator
   */
  exports.prototype.operator = undefined;

  /**
   * @member {module:model/LocationsSchemasNewLocationSchemaDataDnsLookup} dnsLookup
   */
  exports.prototype.dnsLookup = undefined;

  /**
   * Updated at
   * @member {Date} updatedAt
   */
  exports.prototype.updatedAt = undefined;

  /**
   * Scope id
   * @member {String} scopeId
   */
  exports.prototype.scopeId = undefined;

  /**
   * Location updater
   * @member {String} updaterId
   */
  exports.prototype.updaterId = undefined;

  /**
   * Id
   * @member {String} id
   */
  exports.prototype.id = undefined;

  /**
   * Location creator ID
   * @member {String} creatorId
   */
  exports.prototype.creatorId = undefined;

  /**
   * Number of agents in the location
   * @member {Number} reportingAgents
   */
  exports.prototype.reportingAgents = undefined;

  /**
   * Location updater name
   * @member {String} updater
   */
  exports.prototype.updater = undefined;

  /**
   * Scope name
   * @member {String} scopeName
   */
  exports.prototype.scopeName = undefined;

  /**
   * @member {module:model/LocationsSchemasNewLocationSchemaDataDnsServers} dnsServers
   */
  exports.prototype.dnsServers = undefined;

  /**
   * @member {module:model/LocationsSchemasNewLocationSchemaDataNetworkInterfaces} networkInterfaces
   */
  exports.prototype.networkInterfaces = undefined;

  /**
   * @member {module:model/LocationsSchemasNewLocationSchemaDataIpAddresses} ipAddresses
   */
  exports.prototype.ipAddresses = undefined;

  /**
   * @member {module:model/LocationsSchemasNewLocationSchemaDataRegistryKeys} registryKeys
   */
  exports.prototype.registryKeys = undefined;

  /**
   * Scope
   * @member {module:model/LocationsSchemasLocationViewSchema200Data.ScopeEnum} scope
   */
  exports.prototype.scope = undefined;

  /**
   * Location description
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * Number of active firewall rules defined in the location
   * @member {Number} activeFirewallRules
   */
  exports.prototype.activeFirewallRules = undefined;

  /**
   * @member {module:model/LocationsSchemasNewLocationSchemaDataServerConnectivity} serverConnectivity
   */
  exports.prototype.serverConnectivity = undefined;

  /**
   * Location name (should be unique per scope)
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * Created at
   * @member {Date} createdAt
   */
  exports.prototype.createdAt = undefined;

  /**
   * Location creator name
   * @member {String} creator
   */
  exports.prototype.creator = undefined;

  /**
   * Is location editable in current scope
   * @member {Boolean} editable
   */
  exports.prototype.editable = undefined;

  /**
   * Is fallback
   * @member {Boolean} isFallback
   */
  exports.prototype.isFallback = undefined;



  /**
   * Allowed values for the <code>operator</code> property.
   * @enum {String}
   * @readonly
   */
  exports.OperatorEnum = {
    /**
     * value: "all"
     * @const
     */
    all: "all",

    /**
     * value: "any"
     * @const
     */
    any: "any",

    /**
     * value: "none"
     * @const
     */
    none: "none"
  };


  /**
   * Allowed values for the <code>scope</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ScopeEnum = {
    /**
     * value: "site"
     * @const
     */
    site: "site",

    /**
     * value: "group"
     * @const
     */
    group: "group",

    /**
     * value: "account"
     * @const
     */
    account: "account",

    /**
     * value: "global"
     * @const
     */
    global: "global"
  };

  return exports;

}));
