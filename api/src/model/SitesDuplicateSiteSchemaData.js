/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SitesDuplicateSiteSchemaDataPolicy'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./SitesDuplicateSiteSchemaDataPolicy'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.SitesDuplicateSiteSchemaData = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.SitesDuplicateSiteSchemaDataPolicy);
  }
}(this, function(ApiClient, SitesDuplicateSiteSchemaDataPolicy) {
  'use strict';

  /**
   * The SitesDuplicateSiteSchemaData model module.
   * @module model/SitesDuplicateSiteSchemaData
   * @version 2.1
   */

  /**
   * Constructs a new <code>SitesDuplicateSiteSchemaData</code>.
   * Data
   * @alias module:model/SitesDuplicateSiteSchemaData
   * @class
   * @param name {String} New Site Name
   * @param sourceSiteId {Number} Site ID of origin site
   * @param policySource {module:model/SitesDuplicateSiteSchemaData.PolicySourceEnum} Source of duplicate site policy
   * @param copyUsers {Boolean} If true adds the duplicated site to all source site users
   */
  var exports = function(name, sourceSiteId, policySource, copyUsers) {
    this.name = name;
    this.sourceSiteId = sourceSiteId;
    this.policySource = policySource;
    this.copyUsers = copyUsers;
  };

  /**
   * Constructs a <code>SitesDuplicateSiteSchemaData</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SitesDuplicateSiteSchemaData} obj Optional instance to populate.
   * @return {module:model/SitesDuplicateSiteSchemaData} The populated <code>SitesDuplicateSiteSchemaData</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('sourceSiteId'))
        obj.sourceSiteId = ApiClient.convertToType(data['sourceSiteId'], 'Number');
      if (data.hasOwnProperty('unlimitedLicenses'))
        obj.unlimitedLicenses = ApiClient.convertToType(data['unlimitedLicenses'], 'Boolean');
      if (data.hasOwnProperty('policy'))
        obj.policy = SitesDuplicateSiteSchemaDataPolicy.constructFromObject(data['policy']);
      if (data.hasOwnProperty('totalLicenses'))
        obj.totalLicenses = ApiClient.convertToType(data['totalLicenses'], 'Number');
      if (data.hasOwnProperty('policySource'))
        obj.policySource = ApiClient.convertToType(data['policySource'], 'String');
      if (data.hasOwnProperty('copyUsers'))
        obj.copyUsers = ApiClient.convertToType(data['copyUsers'], 'Boolean');
    }
    return obj;
  }

  /**
   * New Site Name
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * Site ID of origin site
   * @member {Number} sourceSiteId
   */
  exports.prototype.sourceSiteId = undefined;

  /**
   * Is the site unlimited, if not then total_licenses must be supplied
   * @member {Boolean} unlimitedLicenses
   */
  exports.prototype.unlimitedLicenses = undefined;

  /**
   * @member {module:model/SitesDuplicateSiteSchemaDataPolicy} policy
   */
  exports.prototype.policy = undefined;

  /**
   * Total licenses for duplicate site, will be subtracted from freelicenses of the source site
   * @member {Number} totalLicenses
   */
  exports.prototype.totalLicenses = undefined;

  /**
   * Source of duplicate site policy
   * @member {module:model/SitesDuplicateSiteSchemaData.PolicySourceEnum} policySource
   */
  exports.prototype.policySource = undefined;

  /**
   * If true adds the duplicated site to all source site users
   * @member {Boolean} copyUsers
   */
  exports.prototype.copyUsers = undefined;



  /**
   * Allowed values for the <code>policySource</code> property.
   * @enum {String}
   * @readonly
   */
  exports.PolicySourceEnum = {
    /**
     * value: "inherit_global"
     * @const
     */
    inheritGlobal: "inherit_global",

    /**
     * value: "copy_source_site"
     * @const
     */
    copySourceSite: "copy_source_site",

    /**
     * value: "custom"
     * @const
     */
    custom: "custom"
  };

  return exports;

}));
