/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.SitesSitePutSchemaDataPolicyForensicsAutoTriggering = factory(root.S1MgmtApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The SitesSitePutSchemaDataPolicyForensicsAutoTriggering model module.
   * @module model/SitesSitePutSchemaDataPolicyForensicsAutoTriggering
   * @version 2.1
   */

  /**
   * Constructs a new <code>SitesSitePutSchemaDataPolicyForensicsAutoTriggering</code>.
   * Forensics auto triggering configuration
   * @alias module:model/SitesSitePutSchemaDataPolicyForensicsAutoTriggering
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>SitesSitePutSchemaDataPolicyForensicsAutoTriggering</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SitesSitePutSchemaDataPolicyForensicsAutoTriggering} obj Optional instance to populate.
   * @return {module:model/SitesSitePutSchemaDataPolicyForensicsAutoTriggering} The populated <code>SitesSitePutSchemaDataPolicyForensicsAutoTriggering</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('windowsProfileId'))
        obj.windowsProfileId = ApiClient.convertToType(data['windowsProfileId'], 'String');
      if (data.hasOwnProperty('linuxEnabled'))
        obj.linuxEnabled = ApiClient.convertToType(data['linuxEnabled'], 'Boolean');
      if (data.hasOwnProperty('macosProfileName'))
        obj.macosProfileName = ApiClient.convertToType(data['macosProfileName'], 'String');
      if (data.hasOwnProperty('macosProfileId'))
        obj.macosProfileId = ApiClient.convertToType(data['macosProfileId'], 'String');
      if (data.hasOwnProperty('windowsProfileName'))
        obj.windowsProfileName = ApiClient.convertToType(data['windowsProfileName'], 'String');
      if (data.hasOwnProperty('linuxProfileName'))
        obj.linuxProfileName = ApiClient.convertToType(data['linuxProfileName'], 'String');
      if (data.hasOwnProperty('windowsEnabled'))
        obj.windowsEnabled = ApiClient.convertToType(data['windowsEnabled'], 'Boolean');
      if (data.hasOwnProperty('linuxProfileId'))
        obj.linuxProfileId = ApiClient.convertToType(data['linuxProfileId'], 'String');
      if (data.hasOwnProperty('macosEnabled'))
        obj.macosEnabled = ApiClient.convertToType(data['macosEnabled'], 'Boolean');
    }
    return obj;
  }

  /**
   * The profile id for the windows forensics
   * @member {String} windowsProfileId
   */
  exports.prototype.windowsProfileId = undefined;

  /**
   * True if linux forensics is enabled
   * @member {Boolean} linuxEnabled
   */
  exports.prototype.linuxEnabled = undefined;

  /**
   * The profile name for the macos forensics
   * @member {String} macosProfileName
   */
  exports.prototype.macosProfileName = undefined;

  /**
   * The profile id for the macos forensics
   * @member {String} macosProfileId
   */
  exports.prototype.macosProfileId = undefined;

  /**
   * The profile name for the windows forensics
   * @member {String} windowsProfileName
   */
  exports.prototype.windowsProfileName = undefined;

  /**
   * The profile name for the linux forensics
   * @member {String} linuxProfileName
   */
  exports.prototype.linuxProfileName = undefined;

  /**
   * True if windows forensics is enabled
   * @member {Boolean} windowsEnabled
   */
  exports.prototype.windowsEnabled = undefined;

  /**
   * The profile id for the linux forensics
   * @member {String} linuxProfileId
   */
  exports.prototype.linuxProfileId = undefined;

  /**
   * True if macos forensics is enabled
   * @member {Boolean} macosEnabled
   */
  exports.prototype.macosEnabled = undefined;


  return exports;

}));
