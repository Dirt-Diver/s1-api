/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.ThreatAnalysisSchemasThreatEventEntitySchemaMany200Data = factory(root.S1MgmtApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The ThreatAnalysisSchemasThreatEventEntitySchemaMany200Data model module.
   * @module model/ThreatAnalysisSchemasThreatEventEntitySchemaMany200Data
   * @version 2.1
   */

  /**
   * Constructs a new <code>ThreatAnalysisSchemasThreatEventEntitySchemaMany200Data</code>.
   * @alias module:model/ThreatAnalysisSchemasThreatEventEntitySchemaMany200Data
   * @class
   * @param objectType {module:model/ThreatAnalysisSchemasThreatEventEntitySchemaMany200Data.ObjectTypeEnum} Object type
   * @param agentIsActive {Boolean} Agent is active
   * @param agentVersion {String} Agent version
   * @param agentInfected {Boolean} Agent infected
   * @param agentOs {module:model/ThreatAnalysisSchemasThreatEventEntitySchemaMany200Data.AgentOsEnum} OS type
   * @param agentIsDecommissioned {Boolean} Agent is decommissioned
   * @param siteName {String} Site name
   * @param processName {String} Process name
   * @param agentUuid {String} Agent uuid
   * @param agentId {String} Agent id
   * @param agentName {String} Agent name
   * @param agentDomain {String} Agent domain
   * @param agentMachineType {String} Agent machine type
   * @param siteId {String} Site id
   * @param agentNetworkStatus {String} Agent network status
   * @param id {String} Id
   * @param agentGroupId {String} Agent group id
   * @param agentIp {String} Agent ip
   * @param createdAt {Date} Created at
   */
  var exports = function(objectType, agentIsActive, agentVersion, agentInfected, agentOs, agentIsDecommissioned, siteName, processName, agentUuid, agentId, agentName, agentDomain, agentMachineType, siteId, agentNetworkStatus, id, agentGroupId, agentIp, createdAt) {
    this.objectType = objectType;
    this.agentIsActive = agentIsActive;
    this.agentVersion = agentVersion;
    this.agentInfected = agentInfected;
    this.agentOs = agentOs;
    this.agentIsDecommissioned = agentIsDecommissioned;
    this.siteName = siteName;
    this.processName = processName;
    this.agentUuid = agentUuid;
    this.agentId = agentId;
    this.agentName = agentName;
    this.agentDomain = agentDomain;
    this.agentMachineType = agentMachineType;
    this.siteId = siteId;
    this.agentNetworkStatus = agentNetworkStatus;
    this.id = id;
    this.agentGroupId = agentGroupId;
    this.agentIp = agentIp;
    this.createdAt = createdAt;
  };

  /**
   * Constructs a <code>ThreatAnalysisSchemasThreatEventEntitySchemaMany200Data</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ThreatAnalysisSchemasThreatEventEntitySchemaMany200Data} obj Optional instance to populate.
   * @return {module:model/ThreatAnalysisSchemasThreatEventEntitySchemaMany200Data} The populated <code>ThreatAnalysisSchemasThreatEventEntitySchemaMany200Data</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('activeContentHash'))
        obj.activeContentHash = ApiClient.convertToType(data['activeContentHash'], 'String');
      if (data.hasOwnProperty('indicatorCategory'))
        obj.indicatorCategory = ApiClient.convertToType(data['indicatorCategory'], 'String');
      if (data.hasOwnProperty('objectType'))
        obj.objectType = ApiClient.convertToType(data['objectType'], 'String');
      if (data.hasOwnProperty('parentProcessName'))
        obj.parentProcessName = ApiClient.convertToType(data['parentProcessName'], 'String');
      if (data.hasOwnProperty('dnsResponse'))
        obj.dnsResponse = ApiClient.convertToType(data['dnsResponse'], 'String');
      if (data.hasOwnProperty('signedStatus'))
        obj.signedStatus = ApiClient.convertToType(data['signedStatus'], 'String');
      if (data.hasOwnProperty('tid'))
        obj.tid = ApiClient.convertToType(data['tid'], 'String');
      if (data.hasOwnProperty('processSubSystem'))
        obj.processSubSystem = ApiClient.convertToType(data['processSubSystem'], 'String');
      if (data.hasOwnProperty('processGroupId'))
        obj.processGroupId = ApiClient.convertToType(data['processGroupId'], 'String');
      if (data.hasOwnProperty('agentIsActive'))
        obj.agentIsActive = ApiClient.convertToType(data['agentIsActive'], 'Boolean');
      if (data.hasOwnProperty('registryPath'))
        obj.registryPath = ApiClient.convertToType(data['registryPath'], 'String');
      if (data.hasOwnProperty('indicatorMetadata'))
        obj.indicatorMetadata = ApiClient.convertToType(data['indicatorMetadata'], 'String');
      if (data.hasOwnProperty('processImagePath'))
        obj.processImagePath = ApiClient.convertToType(data['processImagePath'], 'String');
      if (data.hasOwnProperty('dnsRequest'))
        obj.dnsRequest = ApiClient.convertToType(data['dnsRequest'], 'String');
      if (data.hasOwnProperty('networkSource'))
        obj.networkSource = ApiClient.convertToType(data['networkSource'], 'String');
      if (data.hasOwnProperty('taskName'))
        obj.taskName = ApiClient.convertToType(data['taskName'], 'String');
      if (data.hasOwnProperty('storyline'))
        obj.storyline = ApiClient.convertToType(data['storyline'], 'String');
      if (data.hasOwnProperty('fileSha1'))
        obj.fileSha1 = ApiClient.convertToType(data['fileSha1'], 'String');
      if (data.hasOwnProperty('oldFileName'))
        obj.oldFileName = ApiClient.convertToType(data['oldFileName'], 'String');
      if (data.hasOwnProperty('agentVersion'))
        obj.agentVersion = ApiClient.convertToType(data['agentVersion'], 'String');
      if (data.hasOwnProperty('processIsRedirectedCommandProcessor'))
        obj.processIsRedirectedCommandProcessor = ApiClient.convertToType(data['processIsRedirectedCommandProcessor'], 'String');
      if (data.hasOwnProperty('oldFileSha1'))
        obj.oldFileSha1 = ApiClient.convertToType(data['oldFileSha1'], 'String');
      if (data.hasOwnProperty('verifiedStatus'))
        obj.verifiedStatus = ApiClient.convertToType(data['verifiedStatus'], 'String');
      if (data.hasOwnProperty('agentInfected'))
        obj.agentInfected = ApiClient.convertToType(data['agentInfected'], 'Boolean');
      if (data.hasOwnProperty('activeContentFileId'))
        obj.activeContentFileId = ApiClient.convertToType(data['activeContentFileId'], 'String');
      if (data.hasOwnProperty('loginsUserName'))
        obj.loginsUserName = ApiClient.convertToType(data['loginsUserName'], 'String');
      if (data.hasOwnProperty('fileSha256'))
        obj.fileSha256 = ApiClient.convertToType(data['fileSha256'], 'String');
      if (data.hasOwnProperty('processUserName'))
        obj.processUserName = ApiClient.convertToType(data['processUserName'], 'String');
      if (data.hasOwnProperty('user'))
        obj.user = ApiClient.convertToType(data['user'], 'String');
      if (data.hasOwnProperty('processRoot'))
        obj.processRoot = ApiClient.convertToType(data['processRoot'], 'String');
      if (data.hasOwnProperty('md5'))
        obj.md5 = ApiClient.convertToType(data['md5'], 'String');
      if (data.hasOwnProperty('registryId'))
        obj.registryId = ApiClient.convertToType(data['registryId'], 'String');
      if (data.hasOwnProperty('fileSize'))
        obj.fileSize = ApiClient.convertToType(data['fileSize'], 'String');
      if (data.hasOwnProperty('agentOs'))
        obj.agentOs = ApiClient.convertToType(data['agentOs'], 'String');
      if (data.hasOwnProperty('activeContentPath'))
        obj.activeContentPath = ApiClient.convertToType(data['activeContentPath'], 'String');
      if (data.hasOwnProperty('dstIp'))
        obj.dstIp = ApiClient.convertToType(data['dstIp'], 'String');
      if (data.hasOwnProperty('hasActiveContent'))
        obj.hasActiveContent = ApiClient.convertToType(data['hasActiveContent'], 'Boolean');
      if (data.hasOwnProperty('agentIsDecommissioned'))
        obj.agentIsDecommissioned = ApiClient.convertToType(data['agentIsDecommissioned'], 'Boolean');
      if (data.hasOwnProperty('sha256'))
        obj.sha256 = ApiClient.convertToType(data['sha256'], 'String');
      if (data.hasOwnProperty('processIsWow64'))
        obj.processIsWow64 = ApiClient.convertToType(data['processIsWow64'], 'String');
      if (data.hasOwnProperty('processDisplayName'))
        obj.processDisplayName = ApiClient.convertToType(data['processDisplayName'], 'String');
      if (data.hasOwnProperty('networkUrl'))
        obj.networkUrl = ApiClient.convertToType(data['networkUrl'], 'String');
      if (data.hasOwnProperty('processCmd'))
        obj.processCmd = ApiClient.convertToType(data['processCmd'], 'String');
      if (data.hasOwnProperty('siteName'))
        obj.siteName = ApiClient.convertToType(data['siteName'], 'String');
      if (data.hasOwnProperty('loginsBaseType'))
        obj.loginsBaseType = ApiClient.convertToType(data['loginsBaseType'], 'String');
      if (data.hasOwnProperty('processIntegrityLevel'))
        obj.processIntegrityLevel = ApiClient.convertToType(data['processIntegrityLevel'], 'String');
      if (data.hasOwnProperty('direction'))
        obj.direction = ApiClient.convertToType(data['direction'], 'String');
      if (data.hasOwnProperty('processName'))
        obj.processName = ApiClient.convertToType(data['processName'], 'String');
      if (data.hasOwnProperty('processSessionId'))
        obj.processSessionId = ApiClient.convertToType(data['processSessionId'], 'String');
      if (data.hasOwnProperty('srcPort'))
        obj.srcPort = ApiClient.convertToType(data['srcPort'], 'Number');
      if (data.hasOwnProperty('agentUuid'))
        obj.agentUuid = ApiClient.convertToType(data['agentUuid'], 'String');
      if (data.hasOwnProperty('signatureSignedInvalidReason'))
        obj.signatureSignedInvalidReason = ApiClient.convertToType(data['signatureSignedInvalidReason'], 'String');
      if (data.hasOwnProperty('taskPath'))
        obj.taskPath = ApiClient.convertToType(data['taskPath'], 'String');
      if (data.hasOwnProperty('oldFileMd5'))
        obj.oldFileMd5 = ApiClient.convertToType(data['oldFileMd5'], 'String');
      if (data.hasOwnProperty('indicatorName'))
        obj.indicatorName = ApiClient.convertToType(data['indicatorName'], 'String');
      if (data.hasOwnProperty('dstPort'))
        obj.dstPort = ApiClient.convertToType(data['dstPort'], 'Number');
      if (data.hasOwnProperty('eventType'))
        obj.eventType = ApiClient.convertToType(data['eventType'], 'String');
      if (data.hasOwnProperty('rpid'))
        obj.rpid = ApiClient.convertToType(data['rpid'], 'String');
      if (data.hasOwnProperty('threatStatus'))
        obj.threatStatus = ApiClient.convertToType(data['threatStatus'], 'String');
      if (data.hasOwnProperty('agentId'))
        obj.agentId = ApiClient.convertToType(data['agentId'], 'String');
      if (data.hasOwnProperty('processUniqueKey'))
        obj.processUniqueKey = ApiClient.convertToType(data['processUniqueKey'], 'String');
      if (data.hasOwnProperty('registryClassification'))
        obj.registryClassification = ApiClient.convertToType(data['registryClassification'], 'String');
      if (data.hasOwnProperty('processStartTime'))
        obj.processStartTime = ApiClient.convertToType(data['processStartTime'], 'Date');
      if (data.hasOwnProperty('parentProcessGroupId'))
        obj.parentProcessGroupId = ApiClient.convertToType(data['parentProcessGroupId'], 'String');
      if (data.hasOwnProperty('srcIp'))
        obj.srcIp = ApiClient.convertToType(data['srcIp'], 'String');
      if (data.hasOwnProperty('protocol'))
        obj.protocol = ApiClient.convertToType(data['protocol'], 'String');
      if (data.hasOwnProperty('relatedToThreat'))
        obj.relatedToThreat = ApiClient.convertToType(data['relatedToThreat'], 'Boolean');
      if (data.hasOwnProperty('networkMethod'))
        obj.networkMethod = ApiClient.convertToType(data['networkMethod'], 'String');
      if (data.hasOwnProperty('fileMd5'))
        obj.fileMd5 = ApiClient.convertToType(data['fileMd5'], 'String');
      if (data.hasOwnProperty('connectionStatus'))
        obj.connectionStatus = ApiClient.convertToType(data['connectionStatus'], 'String');
      if (data.hasOwnProperty('agentName'))
        obj.agentName = ApiClient.convertToType(data['agentName'], 'String');
      if (data.hasOwnProperty('fileType'))
        obj.fileType = ApiClient.convertToType(data['fileType'], 'String');
      if (data.hasOwnProperty('agentDomain'))
        obj.agentDomain = ApiClient.convertToType(data['agentDomain'], 'String');
      if (data.hasOwnProperty('parentProcessIsMalicious'))
        obj.parentProcessIsMalicious = ApiClient.convertToType(data['parentProcessIsMalicious'], 'Boolean');
      if (data.hasOwnProperty('agentMachineType'))
        obj.agentMachineType = ApiClient.convertToType(data['agentMachineType'], 'String');
      if (data.hasOwnProperty('siteId'))
        obj.siteId = ApiClient.convertToType(data['siteId'], 'String');
      if (data.hasOwnProperty('agentNetworkStatus'))
        obj.agentNetworkStatus = ApiClient.convertToType(data['agentNetworkStatus'], 'String');
      if (data.hasOwnProperty('fileFullName'))
        obj.fileFullName = ApiClient.convertToType(data['fileFullName'], 'String');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('agentGroupId'))
        obj.agentGroupId = ApiClient.convertToType(data['agentGroupId'], 'String');
      if (data.hasOwnProperty('oldFileSha256'))
        obj.oldFileSha256 = ApiClient.convertToType(data['oldFileSha256'], 'String');
      if (data.hasOwnProperty('sha1'))
        obj.sha1 = ApiClient.convertToType(data['sha1'], 'String');
      if (data.hasOwnProperty('agentIp'))
        obj.agentIp = ApiClient.convertToType(data['agentIp'], 'String');
      if (data.hasOwnProperty('publisher'))
        obj.publisher = ApiClient.convertToType(data['publisher'], 'String');
      if (data.hasOwnProperty('parentProcessUniqueKey'))
        obj.parentProcessUniqueKey = ApiClient.convertToType(data['parentProcessUniqueKey'], 'String');
      if (data.hasOwnProperty('processImageSha1Hash'))
        obj.processImageSha1Hash = ApiClient.convertToType(data['processImageSha1Hash'], 'String');
      if (data.hasOwnProperty('parentPid'))
        obj.parentPid = ApiClient.convertToType(data['parentPid'], 'String');
      if (data.hasOwnProperty('pid'))
        obj.pid = ApiClient.convertToType(data['pid'], 'String');
      if (data.hasOwnProperty('trueContext'))
        obj.trueContext = ApiClient.convertToType(data['trueContext'], 'String');
      if (data.hasOwnProperty('fileId'))
        obj.fileId = ApiClient.convertToType(data['fileId'], 'String');
      if (data.hasOwnProperty('createdAt'))
        obj.createdAt = ApiClient.convertToType(data['createdAt'], 'Date');
      if (data.hasOwnProperty('processIsMalicious'))
        obj.processIsMalicious = ApiClient.convertToType(data['processIsMalicious'], 'Boolean');
      if (data.hasOwnProperty('indicatorDescription'))
        obj.indicatorDescription = ApiClient.convertToType(data['indicatorDescription'], 'String');
    }
    return obj;
  }

  /**
   * Active content hash
   * @member {String} activeContentHash
   */
  exports.prototype.activeContentHash = undefined;

  /**
   * Indicator category
   * @member {String} indicatorCategory
   */
  exports.prototype.indicatorCategory = undefined;

  /**
   * Object type
   * @member {module:model/ThreatAnalysisSchemasThreatEventEntitySchemaMany200Data.ObjectTypeEnum} objectType
   */
  exports.prototype.objectType = undefined;

  /**
   * Parent process name
   * @member {String} parentProcessName
   */
  exports.prototype.parentProcessName = undefined;

  /**
   * Dns response
   * @member {String} dnsResponse
   */
  exports.prototype.dnsResponse = undefined;

  /**
   * Signed status
   * @member {String} signedStatus
   */
  exports.prototype.signedStatus = undefined;

  /**
   * Tid
   * @member {String} tid
   */
  exports.prototype.tid = undefined;

  /**
   * Process sub system
   * @member {String} processSubSystem
   */
  exports.prototype.processSubSystem = undefined;

  /**
   * Process group id
   * @member {String} processGroupId
   */
  exports.prototype.processGroupId = undefined;

  /**
   * Agent is active
   * @member {Boolean} agentIsActive
   */
  exports.prototype.agentIsActive = undefined;

  /**
   * Registry path
   * @member {String} registryPath
   */
  exports.prototype.registryPath = undefined;

  /**
   * Indicator metadata
   * @member {String} indicatorMetadata
   */
  exports.prototype.indicatorMetadata = undefined;

  /**
   * Process image path
   * @member {String} processImagePath
   */
  exports.prototype.processImagePath = undefined;

  /**
   * Dns request
   * @member {String} dnsRequest
   */
  exports.prototype.dnsRequest = undefined;

  /**
   * Network source
   * @member {String} networkSource
   */
  exports.prototype.networkSource = undefined;

  /**
   * Task name
   * @member {String} taskName
   */
  exports.prototype.taskName = undefined;

  /**
   * Storyline
   * @member {String} storyline
   */
  exports.prototype.storyline = undefined;

  /**
   * File sha1
   * @member {String} fileSha1
   */
  exports.prototype.fileSha1 = undefined;

  /**
   * Old file name
   * @member {String} oldFileName
   */
  exports.prototype.oldFileName = undefined;

  /**
   * Agent version
   * @member {String} agentVersion
   */
  exports.prototype.agentVersion = undefined;

  /**
   * Process is redirected command processor
   * @member {String} processIsRedirectedCommandProcessor
   */
  exports.prototype.processIsRedirectedCommandProcessor = undefined;

  /**
   * Old file sha1
   * @member {String} oldFileSha1
   */
  exports.prototype.oldFileSha1 = undefined;

  /**
   * Verified status
   * @member {String} verifiedStatus
   */
  exports.prototype.verifiedStatus = undefined;

  /**
   * Agent infected
   * @member {Boolean} agentInfected
   */
  exports.prototype.agentInfected = undefined;

  /**
   * Active content file id
   * @member {String} activeContentFileId
   */
  exports.prototype.activeContentFileId = undefined;

  /**
   * Logins user name
   * @member {String} loginsUserName
   */
  exports.prototype.loginsUserName = undefined;

  /**
   * File sha256
   * @member {String} fileSha256
   */
  exports.prototype.fileSha256 = undefined;

  /**
   * Process user name
   * @member {String} processUserName
   */
  exports.prototype.processUserName = undefined;

  /**
   * User
   * @member {String} user
   */
  exports.prototype.user = undefined;

  /**
   * Process root
   * @member {String} processRoot
   */
  exports.prototype.processRoot = undefined;

  /**
   * Md5
   * @member {String} md5
   */
  exports.prototype.md5 = undefined;

  /**
   * Registry id
   * @member {String} registryId
   */
  exports.prototype.registryId = undefined;

  /**
   * File size
   * @member {String} fileSize
   */
  exports.prototype.fileSize = undefined;

  /**
   * OS type
   * @member {module:model/ThreatAnalysisSchemasThreatEventEntitySchemaMany200Data.AgentOsEnum} agentOs
   */
  exports.prototype.agentOs = undefined;

  /**
   * Active content path
   * @member {String} activeContentPath
   */
  exports.prototype.activeContentPath = undefined;

  /**
   * Dst ip
   * @member {String} dstIp
   */
  exports.prototype.dstIp = undefined;

  /**
   * Has active content
   * @member {Boolean} hasActiveContent
   */
  exports.prototype.hasActiveContent = undefined;

  /**
   * Agent is decommissioned
   * @member {Boolean} agentIsDecommissioned
   */
  exports.prototype.agentIsDecommissioned = undefined;

  /**
   * Sha256
   * @member {String} sha256
   */
  exports.prototype.sha256 = undefined;

  /**
   * Process is wow64
   * @member {String} processIsWow64
   */
  exports.prototype.processIsWow64 = undefined;

  /**
   * Process display name
   * @member {String} processDisplayName
   */
  exports.prototype.processDisplayName = undefined;

  /**
   * Network url
   * @member {String} networkUrl
   */
  exports.prototype.networkUrl = undefined;

  /**
   * Process cmd
   * @member {String} processCmd
   */
  exports.prototype.processCmd = undefined;

  /**
   * Site name
   * @member {String} siteName
   */
  exports.prototype.siteName = undefined;

  /**
   * Logins base type
   * @member {String} loginsBaseType
   */
  exports.prototype.loginsBaseType = undefined;

  /**
   * Process integrity level
   * @member {String} processIntegrityLevel
   */
  exports.prototype.processIntegrityLevel = undefined;

  /**
   * Direction
   * @member {String} direction
   */
  exports.prototype.direction = undefined;

  /**
   * Process name
   * @member {String} processName
   */
  exports.prototype.processName = undefined;

  /**
   * Process session id
   * @member {String} processSessionId
   */
  exports.prototype.processSessionId = undefined;

  /**
   * Src port
   * @member {Number} srcPort
   */
  exports.prototype.srcPort = undefined;

  /**
   * Agent uuid
   * @member {String} agentUuid
   */
  exports.prototype.agentUuid = undefined;

  /**
   * Signature signed invalid reason
   * @member {String} signatureSignedInvalidReason
   */
  exports.prototype.signatureSignedInvalidReason = undefined;

  /**
   * Task path
   * @member {String} taskPath
   */
  exports.prototype.taskPath = undefined;

  /**
   * Old file md5
   * @member {String} oldFileMd5
   */
  exports.prototype.oldFileMd5 = undefined;

  /**
   * Indicator name
   * @member {String} indicatorName
   */
  exports.prototype.indicatorName = undefined;

  /**
   * Dst port
   * @member {Number} dstPort
   */
  exports.prototype.dstPort = undefined;

  /**
   * Event type
   * @member {String} eventType
   */
  exports.prototype.eventType = undefined;

  /**
   * Rpid
   * @member {String} rpid
   */
  exports.prototype.rpid = undefined;

  /**
   * Threat status
   * @member {String} threatStatus
   */
  exports.prototype.threatStatus = undefined;

  /**
   * Agent id
   * @member {String} agentId
   */
  exports.prototype.agentId = undefined;

  /**
   * Process unique key
   * @member {String} processUniqueKey
   */
  exports.prototype.processUniqueKey = undefined;

  /**
   * Registry classification
   * @member {String} registryClassification
   */
  exports.prototype.registryClassification = undefined;

  /**
   * Process start time
   * @member {Date} processStartTime
   */
  exports.prototype.processStartTime = undefined;

  /**
   * Parent process group id
   * @member {String} parentProcessGroupId
   */
  exports.prototype.parentProcessGroupId = undefined;

  /**
   * Src ip
   * @member {String} srcIp
   */
  exports.prototype.srcIp = undefined;

  /**
   * Protocol
   * @member {String} protocol
   */
  exports.prototype.protocol = undefined;

  /**
   * Related to threat
   * @member {Boolean} relatedToThreat
   */
  exports.prototype.relatedToThreat = undefined;

  /**
   * Network method
   * @member {String} networkMethod
   */
  exports.prototype.networkMethod = undefined;

  /**
   * File md5
   * @member {String} fileMd5
   */
  exports.prototype.fileMd5 = undefined;

  /**
   * Connection status
   * @member {String} connectionStatus
   */
  exports.prototype.connectionStatus = undefined;

  /**
   * Agent name
   * @member {String} agentName
   */
  exports.prototype.agentName = undefined;

  /**
   * File type
   * @member {String} fileType
   */
  exports.prototype.fileType = undefined;

  /**
   * Agent domain
   * @member {String} agentDomain
   */
  exports.prototype.agentDomain = undefined;

  /**
   * Parent process is malicious
   * @member {Boolean} parentProcessIsMalicious
   */
  exports.prototype.parentProcessIsMalicious = undefined;

  /**
   * Agent machine type
   * @member {String} agentMachineType
   */
  exports.prototype.agentMachineType = undefined;

  /**
   * Site id
   * @member {String} siteId
   */
  exports.prototype.siteId = undefined;

  /**
   * Agent network status
   * @member {String} agentNetworkStatus
   */
  exports.prototype.agentNetworkStatus = undefined;

  /**
   * File full name
   * @member {String} fileFullName
   */
  exports.prototype.fileFullName = undefined;

  /**
   * Id
   * @member {String} id
   */
  exports.prototype.id = undefined;

  /**
   * Agent group id
   * @member {String} agentGroupId
   */
  exports.prototype.agentGroupId = undefined;

  /**
   * Old file sha256
   * @member {String} oldFileSha256
   */
  exports.prototype.oldFileSha256 = undefined;

  /**
   * Sha1
   * @member {String} sha1
   */
  exports.prototype.sha1 = undefined;

  /**
   * Agent ip
   * @member {String} agentIp
   */
  exports.prototype.agentIp = undefined;

  /**
   * Publisher
   * @member {String} publisher
   */
  exports.prototype.publisher = undefined;

  /**
   * Parent process unique key
   * @member {String} parentProcessUniqueKey
   */
  exports.prototype.parentProcessUniqueKey = undefined;

  /**
   * Process image sha1 hash
   * @member {String} processImageSha1Hash
   */
  exports.prototype.processImageSha1Hash = undefined;

  /**
   * Parent pid
   * @member {String} parentPid
   */
  exports.prototype.parentPid = undefined;

  /**
   * Pid
   * @member {String} pid
   */
  exports.prototype.pid = undefined;

  /**
   * [DEPRECATED] Use \"storyline\" instead
   * @member {String} trueContext
   */
  exports.prototype.trueContext = undefined;

  /**
   * File id
   * @member {String} fileId
   */
  exports.prototype.fileId = undefined;

  /**
   * Created at
   * @member {Date} createdAt
   */
  exports.prototype.createdAt = undefined;

  /**
   * Process is malicious
   * @member {Boolean} processIsMalicious
   */
  exports.prototype.processIsMalicious = undefined;

  /**
   * Indicator description
   * @member {String} indicatorDescription
   */
  exports.prototype.indicatorDescription = undefined;



  /**
   * Allowed values for the <code>objectType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ObjectTypeEnum = {
    /**
     * value: "events"
     * @const
     */
    events: "events",

    /**
     * value: "file"
     * @const
     */
    file: "file",

    /**
     * value: "ip"
     * @const
     */
    ip: "ip",

    /**
     * value: "url"
     * @const
     */
    url: "url",

    /**
     * value: "dns"
     * @const
     */
    dns: "dns",

    /**
     * value: "process"
     * @const
     */
    process: "process",

    /**
     * value: "registry"
     * @const
     */
    registry: "registry",

    /**
     * value: "scheduled_task"
     * @const
     */
    scheduledTask: "scheduled_task",

    /**
     * value: "logins"
     * @const
     */
    logins: "logins",

    /**
     * value: "indicators"
     * @const
     */
    indicators: "indicators",

    /**
     * value: "module"
     * @const
     */
    module: "module"
  };


  /**
   * Allowed values for the <code>agentOs</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AgentOsEnum = {
    /**
     * value: "windows"
     * @const
     */
    windows: "windows",

    /**
     * value: "macos"
     * @const
     */
    macos: "macos",

    /**
     * value: "linux"
     * @const
     */
    linux: "linux",

    /**
     * value: "windows_legacy"
     * @const
     */
    windowsLegacy: "windows_legacy"
  };

  return exports;

}));
