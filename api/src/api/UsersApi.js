/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AffectedResultsSchema200', 'model/NoDataSchema400', 'model/NoDataSchema401', 'model/NoDataSchema403', 'model/NoDataSchema404', 'model/NoDataSchema409', 'model/NoDataSchema500', 'model/SuccessResponseSchema200', 'model/SuccessResponseSchema302', 'model/UsersSchemasApiTokenDetailSchema200', 'model/UsersSchemasApiTokenSchema', 'model/UsersSchemasAuthCodeSchema', 'model/UsersSchemasBulkUsersActionSchema', 'model/UsersSchemasChangePasswordSchema', 'model/UsersSchemasCreateIFrameUserSchema', 'model/UsersSchemasCreateUserSchema', 'model/UsersSchemasDeleteTfaSchema', 'model/UsersSchemasElevateSessionResponseSchema200', 'model/UsersSchemasElevateSessionSchema', 'model/UsersSchemasEnableAppSchema', 'model/UsersSchemasEnrollTfaResponseSchema200', 'model/UsersSchemasGenerateApiTokenSchema', 'model/UsersSchemasGetApiTokenSchema200', 'model/UsersSchemasGetCreateIFrameTokenSchema200', 'model/UsersSchemasGetUserListSchemaMany200', 'model/UsersSchemasLoginByApiTokenSchema', 'model/UsersSchemasLoginContinueResponseSchema200', 'model/UsersSchemasLoginContinueSchema', 'model/UsersSchemasLoginInputSchema', 'model/UsersSchemasLoginOutputSchema200', 'model/UsersSchemasOnboardingVerificationSchema', 'model/UsersSchemasRequestAppResponseSchema200', 'model/UsersSchemasRequestAppSchema', 'model/UsersSchemasResetTfaSchema', 'model/UsersSchemasSetPasswordResponseSchema200', 'model/UsersSchemasSetPasswordSchema', 'model/UsersSchemasSingleUserSchema200', 'model/UsersSchemasTokenSchema200', 'model/UsersSchemasUpdateUserSchema', 'model/UsersSchemasUserIdSchema', 'model/UsersSchemasUserIdsSchema', 'model/UsersSchemasUserSchema200'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AffectedResultsSchema200'), require('../model/NoDataSchema400'), require('../model/NoDataSchema401'), require('../model/NoDataSchema403'), require('../model/NoDataSchema404'), require('../model/NoDataSchema409'), require('../model/NoDataSchema500'), require('../model/SuccessResponseSchema200'), require('../model/SuccessResponseSchema302'), require('../model/UsersSchemasApiTokenDetailSchema200'), require('../model/UsersSchemasApiTokenSchema'), require('../model/UsersSchemasAuthCodeSchema'), require('../model/UsersSchemasBulkUsersActionSchema'), require('../model/UsersSchemasChangePasswordSchema'), require('../model/UsersSchemasCreateIFrameUserSchema'), require('../model/UsersSchemasCreateUserSchema'), require('../model/UsersSchemasDeleteTfaSchema'), require('../model/UsersSchemasElevateSessionResponseSchema200'), require('../model/UsersSchemasElevateSessionSchema'), require('../model/UsersSchemasEnableAppSchema'), require('../model/UsersSchemasEnrollTfaResponseSchema200'), require('../model/UsersSchemasGenerateApiTokenSchema'), require('../model/UsersSchemasGetApiTokenSchema200'), require('../model/UsersSchemasGetCreateIFrameTokenSchema200'), require('../model/UsersSchemasGetUserListSchemaMany200'), require('../model/UsersSchemasLoginByApiTokenSchema'), require('../model/UsersSchemasLoginContinueResponseSchema200'), require('../model/UsersSchemasLoginContinueSchema'), require('../model/UsersSchemasLoginInputSchema'), require('../model/UsersSchemasLoginOutputSchema200'), require('../model/UsersSchemasOnboardingVerificationSchema'), require('../model/UsersSchemasRequestAppResponseSchema200'), require('../model/UsersSchemasRequestAppSchema'), require('../model/UsersSchemasResetTfaSchema'), require('../model/UsersSchemasSetPasswordResponseSchema200'), require('../model/UsersSchemasSetPasswordSchema'), require('../model/UsersSchemasSingleUserSchema200'), require('../model/UsersSchemasTokenSchema200'), require('../model/UsersSchemasUpdateUserSchema'), require('../model/UsersSchemasUserIdSchema'), require('../model/UsersSchemasUserIdsSchema'), require('../model/UsersSchemasUserSchema200'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.UsersApi = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.AffectedResultsSchema200, root.S1MgmtApi.NoDataSchema400, root.S1MgmtApi.NoDataSchema401, root.S1MgmtApi.NoDataSchema403, root.S1MgmtApi.NoDataSchema404, root.S1MgmtApi.NoDataSchema409, root.S1MgmtApi.NoDataSchema500, root.S1MgmtApi.SuccessResponseSchema200, root.S1MgmtApi.SuccessResponseSchema302, root.S1MgmtApi.UsersSchemasApiTokenDetailSchema200, root.S1MgmtApi.UsersSchemasApiTokenSchema, root.S1MgmtApi.UsersSchemasAuthCodeSchema, root.S1MgmtApi.UsersSchemasBulkUsersActionSchema, root.S1MgmtApi.UsersSchemasChangePasswordSchema, root.S1MgmtApi.UsersSchemasCreateIFrameUserSchema, root.S1MgmtApi.UsersSchemasCreateUserSchema, root.S1MgmtApi.UsersSchemasDeleteTfaSchema, root.S1MgmtApi.UsersSchemasElevateSessionResponseSchema200, root.S1MgmtApi.UsersSchemasElevateSessionSchema, root.S1MgmtApi.UsersSchemasEnableAppSchema, root.S1MgmtApi.UsersSchemasEnrollTfaResponseSchema200, root.S1MgmtApi.UsersSchemasGenerateApiTokenSchema, root.S1MgmtApi.UsersSchemasGetApiTokenSchema200, root.S1MgmtApi.UsersSchemasGetCreateIFrameTokenSchema200, root.S1MgmtApi.UsersSchemasGetUserListSchemaMany200, root.S1MgmtApi.UsersSchemasLoginByApiTokenSchema, root.S1MgmtApi.UsersSchemasLoginContinueResponseSchema200, root.S1MgmtApi.UsersSchemasLoginContinueSchema, root.S1MgmtApi.UsersSchemasLoginInputSchema, root.S1MgmtApi.UsersSchemasLoginOutputSchema200, root.S1MgmtApi.UsersSchemasOnboardingVerificationSchema, root.S1MgmtApi.UsersSchemasRequestAppResponseSchema200, root.S1MgmtApi.UsersSchemasRequestAppSchema, root.S1MgmtApi.UsersSchemasResetTfaSchema, root.S1MgmtApi.UsersSchemasSetPasswordResponseSchema200, root.S1MgmtApi.UsersSchemasSetPasswordSchema, root.S1MgmtApi.UsersSchemasSingleUserSchema200, root.S1MgmtApi.UsersSchemasTokenSchema200, root.S1MgmtApi.UsersSchemasUpdateUserSchema, root.S1MgmtApi.UsersSchemasUserIdSchema, root.S1MgmtApi.UsersSchemasUserIdsSchema, root.S1MgmtApi.UsersSchemasUserSchema200);
  }
}(this, function(ApiClient, AffectedResultsSchema200, NoDataSchema400, NoDataSchema401, NoDataSchema403, NoDataSchema404, NoDataSchema409, NoDataSchema500, SuccessResponseSchema200, SuccessResponseSchema302, UsersSchemasApiTokenDetailSchema200, UsersSchemasApiTokenSchema, UsersSchemasAuthCodeSchema, UsersSchemasBulkUsersActionSchema, UsersSchemasChangePasswordSchema, UsersSchemasCreateIFrameUserSchema, UsersSchemasCreateUserSchema, UsersSchemasDeleteTfaSchema, UsersSchemasElevateSessionResponseSchema200, UsersSchemasElevateSessionSchema, UsersSchemasEnableAppSchema, UsersSchemasEnrollTfaResponseSchema200, UsersSchemasGenerateApiTokenSchema, UsersSchemasGetApiTokenSchema200, UsersSchemasGetCreateIFrameTokenSchema200, UsersSchemasGetUserListSchemaMany200, UsersSchemasLoginByApiTokenSchema, UsersSchemasLoginContinueResponseSchema200, UsersSchemasLoginContinueSchema, UsersSchemasLoginInputSchema, UsersSchemasLoginOutputSchema200, UsersSchemasOnboardingVerificationSchema, UsersSchemasRequestAppResponseSchema200, UsersSchemasRequestAppSchema, UsersSchemasResetTfaSchema, UsersSchemasSetPasswordResponseSchema200, UsersSchemasSetPasswordSchema, UsersSchemasSingleUserSchema200, UsersSchemasTokenSchema200, UsersSchemasUpdateUserSchema, UsersSchemasUserIdSchema, UsersSchemasUserIdsSchema, UsersSchemasUserSchema200) {
  'use strict';

  /**
   * Users service.
   * @module api/UsersApi
   * @version 2.1
   */

  /**
   * Constructs a new UsersApi. 
   * @alias module:api/UsersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the webApiExportUsersGet operation.
     * @callback module:api/UsersApi~webApiExportUsersGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export Users
     * Export User data to a CSV, for Users that match the filter.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.createdAtGt User was created after this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Boolean} opts.emailVerified Return only verified/unverified users
     * @param {Boolean} opts.canGenerateApiToken Can generate api token
     * @param {String} opts.lastActivationBetween Date range for when the user was last active (format: <from_timestamp>-<to_timestamp>, inclusive). Example: \"1514978890136-1514978650130\".
     * @param {Array.<String>} opts.ids List of user IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {String} opts.query Full text search for fields: full_name, email, description
     * @param {Date} opts.apiTokenExpiresAtLte API token expires before or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Date} opts.createdAtLt User was created before this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Date} opts.lastActivationLte User was last active before or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<module:model/String>} opts.sources Source in. Example: \"mgmt\".
     * @param {String} opts.primaryTwoFaMethod Primary two fa method
     * @param {Date} opts.lastLogin Last login. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Date} opts.lastActivationLt User was last active before this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Boolean} opts.hasValidApiToken Has valid api token
     * @param {module:model/String} opts.source User Source. Example: \"mgmt\".
     * @param {Date} opts.createdAtLte User was created before or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Date} opts.dateJoined Date joined. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.fullNameContains Match full name partially (substring)
     * @param {Array.<String>} opts.roleIds List of rbac roles to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {String} opts.email Email. Example: \"admin@sentinelone.com\".
     * @param {Date} opts.apiTokenExpiresAtGt API token expires after this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.twoFaStatuses Two fa status in
     * @param {Boolean} opts.fullNameReadOnly True if full name cannot be changed
     * @param {String} opts.twoFaStatus Two fa status
     * @param {Date} opts.apiTokenExpiresAtGte API token expires after or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {String} opts.fullName Full name
     * @param {Boolean} opts.groupsReadOnly [DEPRECATED] True if permissions cannot be changed
     * @param {String} opts.apiTokenExpiresAtBetween Date range for when the API token expires (format: <from_timestamp>-<to_timestamp>, inclusive). Example: \"1514978890136-1514978650130\".
     * @param {String} opts.createdAtBetween Date range for when the user was created (format: <from_timestamp>-<to_timestamp>, inclusive). Example: \"1514978890136-1514978650130\".
     * @param {Date} opts.firstLogin First login. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Boolean} opts.emailReadOnly True if email cannot be changed
     * @param {Date} opts.createdAtGte User was created after or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.siteIds List of Site IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.accountIds List of Account IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Date} opts.lastActivationGt User was last active after this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Date} opts.apiTokenExpiresAtLt API token expires before this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.emailContains Match email partially (substring)
     * @param {Date} opts.lastActivationGte User was last active after or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Boolean} opts.twoFaEnabled Two fa enabled
     * @param {module:api/UsersApi~webApiExportUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webApiExportUsersGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'createdAt__gt': opts['createdAtGt'],
        'emailVerified': opts['emailVerified'],
        'canGenerateApiToken': opts['canGenerateApiToken'],
        'lastActivation__between': opts['lastActivationBetween'],
        'query': opts['query'],
        'apiTokenExpiresAt__lte': opts['apiTokenExpiresAtLte'],
        'createdAt__lt': opts['createdAtLt'],
        'lastActivation__lte': opts['lastActivationLte'],
        'primaryTwoFaMethod': opts['primaryTwoFaMethod'],
        'lastLogin': opts['lastLogin'],
        'lastActivation__lt': opts['lastActivationLt'],
        'hasValidApiToken': opts['hasValidApiToken'],
        'source': opts['source'],
        'createdAt__lte': opts['createdAtLte'],
        'dateJoined': opts['dateJoined'],
        'email': opts['email'],
        'apiTokenExpiresAt__gt': opts['apiTokenExpiresAtGt'],
        'fullNameReadOnly': opts['fullNameReadOnly'],
        'twoFaStatus': opts['twoFaStatus'],
        'apiTokenExpiresAt__gte': opts['apiTokenExpiresAtGte'],
        'fullName': opts['fullName'],
        'groupsReadOnly': opts['groupsReadOnly'],
        'apiTokenExpiresAt__between': opts['apiTokenExpiresAtBetween'],
        'createdAt__between': opts['createdAtBetween'],
        'firstLogin': opts['firstLogin'],
        'emailReadOnly': opts['emailReadOnly'],
        'createdAt__gte': opts['createdAtGte'],
        'lastActivation__gt': opts['lastActivationGt'],
        'apiTokenExpiresAt__lt': opts['apiTokenExpiresAtLt'],
        'lastActivation__gte': opts['lastActivationGte'],
        'twoFaEnabled': opts['twoFaEnabled'],
      };
      var collectionQueryParams = {
        'ids': {
          value: opts['ids'],
          collectionFormat: 'csv'
        },
        'sources': {
          value: opts['sources'],
          collectionFormat: 'csv'
        },
        'fullName__contains': {
          value: opts['fullNameContains'],
          collectionFormat: 'csv'
        },
        'roleIds': {
          value: opts['roleIds'],
          collectionFormat: 'csv'
        },
        'twoFaStatuses': {
          value: opts['twoFaStatuses'],
          collectionFormat: 'csv'
        },
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
        'email__contains': {
          value: opts['emailContains'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/web/api/v2.1/export/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUserGet operation.
     * @callback module:api/UsersApi~webApiUserGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersSchemasUserSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User by token
     * Get a user by token.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.accountIds List of Account IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.groupIds List of Group IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Boolean} opts.tenant Indicates a tenant scope request
     * @param {Array.<String>} opts.siteIds List of Site IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {module:api/UsersApi~webApiUserGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersSchemasUserSchema200}
     */
    this.webApiUserGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'tenant': opts['tenant'],
      };
      var collectionQueryParams = {
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
        'groupIds': {
          value: opts['groupIds'],
          collectionFormat: 'csv'
        },
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UsersSchemasUserSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/user', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsers2faDisablePost operation.
     * @callback module:api/UsersApi~webApiUsers2faDisablePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable 2FA
     * Disable Two-Factor Authentication for one user. This requires the ID of the user (run \"users\").
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasUserIdSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsers2faDisablePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiUsers2faDisablePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/2fa/disable', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsers2faEnablePost operation.
     * @callback module:api/UsersApi~webApiUsers2faEnablePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable 2FA
     * Enable two-factor authentication for a given user.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasUserIdSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsers2faEnablePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiUsers2faEnablePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/2fa/enable', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersApiTokenDetailsPost operation.
     * @callback module:api/UsersApi~webApiUsersApiTokenDetailsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersSchemasApiTokenDetailSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API Token Details
     * Get details of the API token that matches the filter.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasApiTokenSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersApiTokenDetailsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersSchemasApiTokenDetailSchema200}
     */
    this.webApiUsersApiTokenDetailsPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersSchemasApiTokenDetailSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/api-token-details', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersAuthAppPost operation.
     * @callback module:api/UsersApi~webApiUsersAuthAppPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersSchemasLoginOutputSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Auth App
     * Authenticate a user with a third-party app, such as DUO or Google Authenticator, for deployments that require Two Factor Authentication.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasAuthCodeSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersAuthAppPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersSchemasLoginOutputSchema200}
     */
    this.webApiUsersAuthAppPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersSchemasLoginOutputSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/auth/app', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersAuthElevatePost operation.
     * @callback module:api/UsersApi~webApiUsersAuthElevatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersSchemasElevateSessionResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Auth App
     * Elevate a session with a third-party app, such as DUO or Google Authenticator.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasElevateSessionSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersAuthElevatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersSchemasElevateSessionResponseSchema200}
     */
    this.webApiUsersAuthElevatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersSchemasElevateSessionResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/auth/elevate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersAuthEulaPost operation.
     * @callback module:api/UsersApi~webApiUsersAuthEulaPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sign EULA
     * Mark the End User License Agreement (EULA) as signed for user scopes.
     * @param {module:api/UsersApi~webApiUsersAuthEulaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiUsersAuthEulaPost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/auth/eula', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersChangePasswordPost operation.
     * @callback module:api/UsersApi~webApiUsersChangePasswordPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Password
     * Change the user password.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasChangePasswordSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersChangePasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiUsersChangePasswordPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/change-password', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersDelete2faPost operation.
     * @callback module:api/UsersApi~webApiUsersDelete2faPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AffectedResultsSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete 2FA
     * Delete 2FA for users.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasDeleteTfaSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersDelete2faPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AffectedResultsSchema200}
     */
    this.webApiUsersDelete2faPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AffectedResultsSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/delete-2fa', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersDeleteUsersPost operation.
     * @callback module:api/UsersApi~webApiUsersDeleteUsersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk Delete Users
     * Delete all users that match the filter.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasBulkUsersActionSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersDeleteUsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webApiUsersDeleteUsersPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/delete-users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersEnableAppPost operation.
     * @callback module:api/UsersApi~webApiUsersEnableAppPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable 2FA App
     * Enable support for the 2FA app (such as Duo or Google Authenticator) that your Console users will use to log in.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasEnableAppSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersEnableAppPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiUsersEnableAppPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/enable-app', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersEnroll2faPost operation.
     * @callback module:api/UsersApi~webApiUsersEnroll2faPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersSchemasEnrollTfaResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enroll 2FA
     * Enroll users for 2FA setup.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasUserIdsSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersEnroll2faPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersSchemasEnrollTfaResponseSchema200}
     */
    this.webApiUsersEnroll2faPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersSchemasEnrollTfaResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/enroll-2fa', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersGenerateApiTokenPost operation.
     * @callback module:api/UsersApi~webApiUsersGenerateApiTokenPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersSchemasGetApiTokenSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate API Token
     * Get the API token for the authenticated user.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasGenerateApiTokenSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersGenerateApiTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersSchemasGetApiTokenSchema200}
     */
    this.webApiUsersGenerateApiTokenPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersSchemasGetApiTokenSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/generate-api-token', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersGenerateIframeTokenPost operation.
     * @callback module:api/UsersApi~webApiUsersGenerateIframeTokenPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersSchemasGetCreateIFrameTokenSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate iFrame Token
     * Get a new iFrame token with the provided limitations.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasCreateIFrameUserSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersGenerateIframeTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersSchemasGetCreateIFrameTokenSchema200}
     */
    this.webApiUsersGenerateIframeTokenPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersSchemasGetCreateIFrameTokenSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/generate-iframe-token', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersGet operation.
     * @callback module:api/UsersApi~webApiUsersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersSchemasGetUserListSchemaMany200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users
     * Get a list of users.
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor Cursor position returned by the last request. Use to iterate over more than 1000 items. Example: \"YWdlbnRfaWQ6NTgwMjkzODE=\". (default to null)
     * @param {Date} opts.createdAtGt User was created after this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Boolean} opts.emailVerified Return only verified/unverified users
     * @param {Boolean} opts.canGenerateApiToken Can generate api token
     * @param {String} opts.lastActivationBetween Date range for when the user was last active (format: <from_timestamp>-<to_timestamp>, inclusive). Example: \"1514978890136-1514978650130\".
     * @param {String} opts.query Full text search for fields: full_name, email, description
     * @param {Array.<String>} opts.ids List of user IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Date} opts.apiTokenExpiresAtLte API token expires before or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Boolean} opts.countOnly If true, only total number of items will be returned, without any of the actual objects. (default to false)
     * @param {Date} opts.createdAtLt User was created before this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Number} opts.limit Limit number of returned items (1-1000). Example: \"10\". (default to 10)
     * @param {Date} opts.lastActivationLte User was last active before or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<module:model/String>} opts.sources Source in. Example: \"mgmt\".
     * @param {Number} opts.skip Skip first number of items (0-1000). To iterate over more than 1000 items,  use \"cursor\". Example: \"150\".
     * @param {Date} opts.lastLogin Last login. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {String} opts.primaryTwoFaMethod Primary two fa method
     * @param {Date} opts.lastActivationLt User was last active before this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Boolean} opts.skipCount If true, total number of items will not be calculated, which speeds up execution time. (default to null)
     * @param {Boolean} opts.hasValidApiToken Has valid api token
     * @param {module:model/String} opts.sortOrder Sort direction. Example: \"asc\". (default to null)
     * @param {module:model/String} opts.source User Source. Example: \"mgmt\".
     * @param {Date} opts.createdAtLte User was created before or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Date} opts.dateJoined Date joined. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.fullNameContains Match full name partially (substring)
     * @param {Array.<String>} opts.roleIds List of rbac roles to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {String} opts.email Email. Example: \"admin@sentinelone.com\".
     * @param {Date} opts.apiTokenExpiresAtGt API token expires after this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.twoFaStatuses Two fa status in
     * @param {Boolean} opts.fullNameReadOnly True if full name cannot be changed
     * @param {String} opts.twoFaStatus Two fa status
     * @param {Date} opts.apiTokenExpiresAtGte API token expires after or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {String} opts.fullName Full name
     * @param {Boolean} opts.groupsReadOnly [DEPRECATED] True if permissions cannot be changed
     * @param {module:model/String} opts.sortBy The column to sort the results by. Example: \"id\". (default to null)
     * @param {String} opts.apiTokenExpiresAtBetween Date range for when the API token expires (format: <from_timestamp>-<to_timestamp>, inclusive). Example: \"1514978890136-1514978650130\".
     * @param {String} opts.createdAtBetween Date range for when the user was created (format: <from_timestamp>-<to_timestamp>, inclusive). Example: \"1514978890136-1514978650130\".
     * @param {Date} opts.firstLogin First login. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Boolean} opts.emailReadOnly True if email cannot be changed
     * @param {Date} opts.createdAtGte User was created after or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.siteIds List of Site IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.accountIds List of Account IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Date} opts.lastActivationGt User was last active after this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Date} opts.apiTokenExpiresAtLt API token expires before this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.emailContains Match email partially (substring)
     * @param {Date} opts.lastActivationGte User was last active after or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Boolean} opts.twoFaEnabled Two fa enabled
     * @param {module:api/UsersApi~webApiUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersSchemasGetUserListSchemaMany200}
     */
    this.webApiUsersGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'cursor': opts['cursor'],
        'createdAt__gt': opts['createdAtGt'],
        'emailVerified': opts['emailVerified'],
        'canGenerateApiToken': opts['canGenerateApiToken'],
        'lastActivation__between': opts['lastActivationBetween'],
        'query': opts['query'],
        'apiTokenExpiresAt__lte': opts['apiTokenExpiresAtLte'],
        'countOnly': opts['countOnly'],
        'createdAt__lt': opts['createdAtLt'],
        'limit': opts['limit'],
        'lastActivation__lte': opts['lastActivationLte'],
        'skip': opts['skip'],
        'lastLogin': opts['lastLogin'],
        'primaryTwoFaMethod': opts['primaryTwoFaMethod'],
        'lastActivation__lt': opts['lastActivationLt'],
        'skipCount': opts['skipCount'],
        'hasValidApiToken': opts['hasValidApiToken'],
        'sortOrder': opts['sortOrder'],
        'source': opts['source'],
        'createdAt__lte': opts['createdAtLte'],
        'dateJoined': opts['dateJoined'],
        'email': opts['email'],
        'apiTokenExpiresAt__gt': opts['apiTokenExpiresAtGt'],
        'fullNameReadOnly': opts['fullNameReadOnly'],
        'twoFaStatus': opts['twoFaStatus'],
        'apiTokenExpiresAt__gte': opts['apiTokenExpiresAtGte'],
        'fullName': opts['fullName'],
        'groupsReadOnly': opts['groupsReadOnly'],
        'sortBy': opts['sortBy'],
        'apiTokenExpiresAt__between': opts['apiTokenExpiresAtBetween'],
        'createdAt__between': opts['createdAtBetween'],
        'firstLogin': opts['firstLogin'],
        'emailReadOnly': opts['emailReadOnly'],
        'createdAt__gte': opts['createdAtGte'],
        'lastActivation__gt': opts['lastActivationGt'],
        'apiTokenExpiresAt__lt': opts['apiTokenExpiresAtLt'],
        'lastActivation__gte': opts['lastActivationGte'],
        'twoFaEnabled': opts['twoFaEnabled'],
      };
      var collectionQueryParams = {
        'ids': {
          value: opts['ids'],
          collectionFormat: 'csv'
        },
        'sources': {
          value: opts['sources'],
          collectionFormat: 'csv'
        },
        'fullName__contains': {
          value: opts['fullNameContains'],
          collectionFormat: 'csv'
        },
        'roleIds': {
          value: opts['roleIds'],
          collectionFormat: 'csv'
        },
        'twoFaStatuses': {
          value: opts['twoFaStatuses'],
          collectionFormat: 'csv'
        },
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
        'email__contains': {
          value: opts['emailContains'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UsersSchemasGetUserListSchemaMany200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersLoginByApiTokenPost operation.
     * @callback module:api/UsersApi~webApiUsersLoginByApiTokenPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersSchemasTokenSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login by API Token
     * Log in to the API with a token. To learn more about temporary and 6-month tokens and how to generate them, see https://support.sentinelone.com/hc/en-us/articles/360004195934.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasLoginByApiTokenSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersLoginByApiTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersSchemasTokenSchema200}
     */
    this.webApiUsersLoginByApiTokenPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersSchemasTokenSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/login/by-api-token', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersLoginByTokenGet operation.
     * @callback module:api/UsersApi~webApiUsersLoginByTokenGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login by Token
     * Log in with user token.
     * @param {String} token User token. Example: \"bfd9070c1afa88516d3cdfd722e62fe433e42bad6bb14da27088140ad785585f8582adaccd56fb69\".
     * @param {Object} opts Optional parameters
     * @param {String} opts.redirectTo Relative url to redirect to
     * @param {String} opts.redirectToParams Query params for the redirect to, without '?' prefix
     * @param {String} opts.removedSavedScope Removed saved scope
     * @param {module:api/UsersApi~webApiUsersLoginByTokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webApiUsersLoginByTokenGet = function(token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling webApiUsersLoginByTokenGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'redirectTo': opts['redirectTo'],
        'redirectToParams': opts['redirectToParams'],
        'token': token,
        'removedSavedScope': opts['removedSavedScope'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/login/by-token', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersLoginContinuePost operation.
     * @callback module:api/UsersApi~webApiUsersLoginContinuePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersSchemasLoginContinueResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Continue with login due to upcoming password expiration or SSO 2FA setup
     * For SSO 2FA setup tokens, allows users to skip setting up the 2FA and proceed with their login.<br>Accepts a temporary token from SSO login flow with error code 4010035.<br><br>For password expiration tokens, allows users to decide if they want to change their soon to expire password now or later. <br>Users can also choose not to receive the notification again for this password cycle. <br>Accepts a temporary token from /users/login with error code 4010093.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasLoginContinueSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersLoginContinuePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersSchemasLoginContinueResponseSchema200}
     */
    this.webApiUsersLoginContinuePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersSchemasLoginContinueResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/login-continue', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersLoginForceResetPasswordOnLoginPost operation.
     * @callback module:api/UsersApi~webApiUsersLoginForceResetPasswordOnLoginPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AffectedResultsSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset password on next login
     * Force users to reset their password on next login.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasBulkUsersActionSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersLoginForceResetPasswordOnLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AffectedResultsSchema200}
     */
    this.webApiUsersLoginForceResetPasswordOnLoginPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AffectedResultsSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/login/force-reset-password-on-login', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersLoginPost operation.
     * @callback module:api/UsersApi~webApiUsersLoginPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersSchemasLoginOutputSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * Authenticate a user by username and password and return an authentication token. Rate limit: 1 call per second for each different IP address that communicates with the Console.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasLoginInputSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersSchemasLoginOutputSchema200}
     */
    this.webApiUsersLoginPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersSchemasLoginOutputSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/login', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersLoginSendResetPasswordEmailPost operation.
     * @callback module:api/UsersApi~webApiUsersLoginSendResetPasswordEmailPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AffectedResultsSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prompt reset password
     * Prompt reset password for users.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasBulkUsersActionSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersLoginSendResetPasswordEmailPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AffectedResultsSchema200}
     */
    this.webApiUsersLoginSendResetPasswordEmailPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AffectedResultsSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/login/send-reset-password-email', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersLoginSetPasswordPost operation.
     * @callback module:api/UsersApi~webApiUsersLoginSetPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersSchemasSetPasswordResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set a New Password
     * Sets a new password for the user. <br>Used by forced password reset and password expiration flows. <br>Accepts temporary tokens from /users/login with error codes 4010091 and 4010092.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasSetPasswordSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersLoginSetPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersSchemasSetPasswordResponseSchema200}
     */
    this.webApiUsersLoginSetPasswordPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersSchemasSetPasswordResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/login/set-password', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersLoginSsoSaml2Get operation.
     * @callback module:api/UsersApi~webApiUsersLoginSsoSaml2GetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redirect to SSO
     * If SSO is enabled for a deployment or scope, and a user attempts to log in with name and password, this command redirects the login to SSO.
     * @param {Object} opts Optional parameters
     * @param {String} opts.email Email address of the user trying to log in. Example: \"me@sentinelone.com\".
     * @param {String} opts.scopeId The scope the desired SSO IdP is configured on. email is irrelevant when using scope_id. If both are provided, email is ignored. Example: \"225494730938493804\".
     * @param {module:api/UsersApi~webApiUsersLoginSsoSaml2GetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webApiUsersLoginSsoSaml2Get = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'email': opts['email'],
        'scopeId': opts['scopeId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/login/sso-saml2', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersLoginSsoSaml2scopeIdPost operation.
     * @callback module:api/UsersApi~webApiUsersLoginSsoSaml2scopeIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Auth by SSO
     * Authenticate a Single Sign-On response over SAML v2 protocol.
     * @param {String} scopeId Scope ID. Example: \"225494730938493804\".
     * @param {module:api/UsersApi~webApiUsersLoginSsoSaml2scopeIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webApiUsersLoginSsoSaml2scopeIdPost = function(scopeId, callback) {
      var postBody = null;

      // verify the required parameter 'scopeId' is set
      if (scopeId === undefined || scopeId === null) {
        throw new Error("Missing the required parameter 'scopeId' when calling webApiUsersLoginSsoSaml2scopeIdPost");
      }


      var pathParams = {
        'scope_id': scopeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/login/sso-saml2/{scope_id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersLogoutPost operation.
     * @callback module:api/UsersApi~webApiUsersLogoutPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout
     * Log out the authenticated user.
     * @param {module:api/UsersApi~webApiUsersLogoutPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webApiUsersLogoutPost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/logout', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersOnboardingSendVerificationEmailPost operation.
     * @callback module:api/UsersApi~webApiUsersOnboardingSendVerificationEmailPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AffectedResultsSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send Verification Email
     * Send verification email to users that match the filter. Warning: Active users will be locked out of the Management Console until they verify (unless set_user_password_methods is on)their email. If your Management Console has Onboarding enabled, when you create a new user, the user gets an email invitation. If the user does not respond in time or loses the email, you can send it again. You can send the email invitation to multiple users. Your SMTP server must be correctly configured in Settings > SMTP for the Global scope. Changing the Global SMTP settings requires an Admin role with Global scope or Support.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasBulkUsersActionSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersOnboardingSendVerificationEmailPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AffectedResultsSchema200}
     */
    this.webApiUsersOnboardingSendVerificationEmailPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AffectedResultsSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/onboarding/send-verification-email', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersOnboardingValidateTokenGet operation.
     * @callback module:api/UsersApi~webApiUsersOnboardingValidateTokenGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate Verification Token
     * When a new user verifies their email, the Management gets a token.  Use this command to validate the token.
     * @param {String} token Verification token
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.resetPasswordFlow Reset password flow (default to false)
     * @param {module:api/UsersApi~webApiUsersOnboardingValidateTokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiUsersOnboardingValidateTokenGet = function(token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling webApiUsersOnboardingValidateTokenGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'token': token,
        'resetPasswordFlow': opts['resetPasswordFlow'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/onboarding/validate-token', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersOnboardingVerifyPost operation.
     * @callback module:api/UsersApi~webApiUsersOnboardingVerifyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Email Verification
     * When a new user verifies their email, the Management gets a token. Use this command to verify the token and set a new password.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasOnboardingVerificationSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersOnboardingVerifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiUsersOnboardingVerifyPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/onboarding/verify', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersPost operation.
     * @callback module:api/UsersApi~webApiUsersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersSchemasUserSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create User
     * Create a new user.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasCreateUserSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersSchemasUserSchema200}
     */
    this.webApiUsersPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersSchemasUserSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersRequestAppPost operation.
     * @callback module:api/UsersApi~webApiUsersRequestAppPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersSchemasRequestAppResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request 2FA App
     * Request 2FA App response.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasRequestAppSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersRequestAppPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersSchemasRequestAppResponseSchema200}
     */
    this.webApiUsersRequestAppPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersSchemasRequestAppResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/request-app', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersReset2faPost operation.
     * @callback module:api/UsersApi~webApiUsersReset2faPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AffectedResultsSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset 2FA
     * Reset 2FA for users.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasResetTfaSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersReset2faPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AffectedResultsSchema200}
     */
    this.webApiUsersReset2faPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AffectedResultsSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/reset-2fa', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersRevokeApiTokenPost operation.
     * @callback module:api/UsersApi~webApiUsersRevokeApiTokenPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke API Token
     * Revoke an API token.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasUserIdSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersRevokeApiTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiUsersRevokeApiTokenPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/revoke-api-token', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersRsAuthCheckGet operation.
     * @callback module:api/UsersApi~webApiUsersRsAuthCheckGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check Remote Shell Permissions
     * See if the logged in user is allowed to use Remote Shell.
     * @param {module:api/UsersApi~webApiUsersRsAuthCheckGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiUsersRsAuthCheckGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/rs-auth-check', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersSsoSaml2ReAuthGet operation.
     * @callback module:api/UsersApi~webApiUsersSsoSaml2ReAuthGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redirect to SSO for re-authentication
     * Initiates re-authentication with user's identity provider.
     * @param {module:api/UsersApi~webApiUsersSsoSaml2ReAuthGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webApiUsersSsoSaml2ReAuthGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/sso-saml2/re-auth', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersTenantAdminAuthCheckGet operation.
     * @callback module:api/UsersApi~webApiUsersTenantAdminAuthCheckGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check Global User
     * See if logged in user is a user with the Global scope of access.
     * @param {module:api/UsersApi~webApiUsersTenantAdminAuthCheckGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiUsersTenantAdminAuthCheckGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/tenant-admin-auth-check', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersViewerAuthCheckGet operation.
     * @callback module:api/UsersApi~webApiUsersViewerAuthCheckGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check Viewer
     * See if the logged in user has only viewer permissions.
     * @param {module:api/UsersApi~webApiUsersViewerAuthCheckGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiUsersViewerAuthCheckGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/viewer-auth-check', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersuserIdApiTokenDetailsGet operation.
     * @callback module:api/UsersApi~webApiUsersuserIdApiTokenDetailsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersSchemasApiTokenDetailSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API Token by User ID
     * Get the details of the API token generated for a given user.
     * @param {String} userId User ID. Example: \"225494730938493804\".
     * @param {module:api/UsersApi~webApiUsersuserIdApiTokenDetailsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersSchemasApiTokenDetailSchema200}
     */
    this.webApiUsersuserIdApiTokenDetailsGet = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling webApiUsersuserIdApiTokenDetailsGet");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UsersSchemasApiTokenDetailSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/{user_id}/api-token-details', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersuserIdDelete operation.
     * @callback module:api/UsersApi~webApiUsersuserIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete User
     * Delete a user by ID.
     * @param {String} userId User ID. Example: \"225494730938493804\".
     * @param {module:api/UsersApi~webApiUsersuserIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiUsersuserIdDelete = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling webApiUsersuserIdDelete");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/{user_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersuserIdGet operation.
     * @callback module:api/UsersApi~webApiUsersuserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersSchemasSingleUserSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User
     * Get a user by ID.
     * @param {String} userId User ID. Example: \"225494730938493804\".
     * @param {module:api/UsersApi~webApiUsersuserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersSchemasSingleUserSchema200}
     */
    this.webApiUsersuserIdGet = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling webApiUsersuserIdGet");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UsersSchemasSingleUserSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/{user_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUsersuserIdPut operation.
     * @callback module:api/UsersApi~webApiUsersuserIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersSchemasUserSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update User
     * Change properties of the user of the given ID.
     * @param {String} userId User ID. Example: \"225494730938493804\".
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersSchemasUpdateUserSchema} opts.body 
     * @param {module:api/UsersApi~webApiUsersuserIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersSchemasUserSchema200}
     */
    this.webApiUsersuserIdPut = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling webApiUsersuserIdPut");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UsersSchemasUserSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/users/{user_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
