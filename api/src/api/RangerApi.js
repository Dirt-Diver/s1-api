/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AffectedResultsSchema200', 'model/NoDataSchema400', 'model/NoDataSchema401', 'model/NoDataSchema403', 'model/NoDataSchema404', 'model/RawDataSchema200', 'model/SchemasDeviceReviewSchema', 'model/SchemasDeviceReviewSchemaPut', 'model/SchemasDeviceTagsSchema', 'model/SchemasPutRangerSchema', 'model/SchemasRangerSettingsSchema200', 'model/SchemasRangerTableViewSchema200', 'model/SchemasRangerTableViewSchemaMany200'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AffectedResultsSchema200'), require('../model/NoDataSchema400'), require('../model/NoDataSchema401'), require('../model/NoDataSchema403'), require('../model/NoDataSchema404'), require('../model/RawDataSchema200'), require('../model/SchemasDeviceReviewSchema'), require('../model/SchemasDeviceReviewSchemaPut'), require('../model/SchemasDeviceTagsSchema'), require('../model/SchemasPutRangerSchema'), require('../model/SchemasRangerSettingsSchema200'), require('../model/SchemasRangerTableViewSchema200'), require('../model/SchemasRangerTableViewSchemaMany200'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.RangerApi = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.AffectedResultsSchema200, root.S1MgmtApi.NoDataSchema400, root.S1MgmtApi.NoDataSchema401, root.S1MgmtApi.NoDataSchema403, root.S1MgmtApi.NoDataSchema404, root.S1MgmtApi.RawDataSchema200, root.S1MgmtApi.SchemasDeviceReviewSchema, root.S1MgmtApi.SchemasDeviceReviewSchemaPut, root.S1MgmtApi.SchemasDeviceTagsSchema, root.S1MgmtApi.SchemasPutRangerSchema, root.S1MgmtApi.SchemasRangerSettingsSchema200, root.S1MgmtApi.SchemasRangerTableViewSchema200, root.S1MgmtApi.SchemasRangerTableViewSchemaMany200);
  }
}(this, function(ApiClient, AffectedResultsSchema200, NoDataSchema400, NoDataSchema401, NoDataSchema403, NoDataSchema404, RawDataSchema200, SchemasDeviceReviewSchema, SchemasDeviceReviewSchemaPut, SchemasDeviceTagsSchema, SchemasPutRangerSchema, SchemasRangerSettingsSchema200, SchemasRangerTableViewSchema200, SchemasRangerTableViewSchemaMany200) {
  'use strict';

  /**
   * Ranger service.
   * @module api/RangerApi
   * @version 2.1
   */

  /**
   * Constructs a new RangerApi. 
   * @alias module:api/RangerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the webApiRangerDeviceReviewPost operation.
     * @callback module:api/RangerApi~webApiRangerDeviceReviewPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AffectedResultsSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Device Review in Bulk
     * Change the review state of more than one device.
     * @param {Object} opts Optional parameters
     * @param {module:model/SchemasDeviceReviewSchema} opts.body 
     * @param {module:api/RangerApi~webApiRangerDeviceReviewPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AffectedResultsSchema200}
     */
    this.webApiRangerDeviceReviewPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AffectedResultsSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/ranger/device-review', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRangerDeviceReviewinventoryIdPut operation.
     * @callback module:api/RangerApi~webApiRangerDeviceReviewinventoryIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchemasRangerTableViewSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Device Review
     * Change the review state of one device.
     * @param {String} inventoryId Inventory ID. Example: \"225494730938493804\".
     * @param {Object} opts Optional parameters
     * @param {module:model/SchemasDeviceReviewSchemaPut} opts.body 
     * @param {module:api/RangerApi~webApiRangerDeviceReviewinventoryIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchemasRangerTableViewSchema200}
     */
    this.webApiRangerDeviceReviewinventoryIdPut = function(inventoryId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'inventoryId' is set
      if (inventoryId === undefined || inventoryId === null) {
        throw new Error("Missing the required parameter 'inventoryId' when calling webApiRangerDeviceReviewinventoryIdPut");
      }


      var pathParams = {
        'inventory_id': inventoryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SchemasRangerTableViewSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/ranger/device-review/{inventory_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRangerReportCsvGet operation.
     * @callback module:api/RangerApi~webApiRangerReportCsvGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export Ranger Data
     * Export Ranger data to csv. You can set filters to get only relevant data. The response sends the csv data as text.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.agentIds List of agent ids. Example: \"225494730938493804,225494730938493915\".
     * @param {String} opts.externalIp Search using external IP
     * @param {String} opts.managedState Is the device managed
     * @param {Array.<String>} opts.discoveryMethods Discovery methods
     * @param {Array.<Number>} opts.udpPortsContains Free-text filter by udp port (supports multiple values). Example: \"137,2002\".
     * @param {Array.<String>} opts.hostnamesContains Free-text filter by hostname (supports multiple values). Example: \"s1_host,SomeHost\".
     * @param {String} opts.osVersion Os version
     * @param {Array.<String>} opts.deviceTypes Device types
     * @param {Array.<String>} opts.ids List of device ids. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.networkNameContains Free-text filter by network name (supports multiple values). Example: \"Office\".
     * @param {String} opts.query Query
     * @param {String} opts.networkName Search using network name
     * @param {Array.<String>} opts.osVersionContains Free-text filter by OS full name and version (supports multiple values). Example: \"Service Pack 1\".
     * @param {Array.<String>} opts.externalIpContains Free-text filter by visible IP (supports multiple values). Example: \"192.168.0.1/24,10.1\".
     * @param {Date} opts.firstSeenLte Devices first seen before or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.osTypes Included OS types
     * @param {Array.<String>} opts.deviceReviews The device review state
     * @param {String} opts.gatewayMacAddress A gateway mac address to search for
     * @param {String} opts.osName Os name
     * @param {Date} opts.lastSeenGt Devices last seen after this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.manufacturerContains Free-text filter by manufacturer (supports multiple values). Example: \"Company\".
     * @param {module:model/String} opts.period Period. Example: \"latest\". (default to latest)
     * @param {String} opts.firstSeenBetween Date range refor first seen(format: <from_timestamp>-<to_timestamp>, inclusive). Example: \"1514978890136-1514978650130\".
     * @param {Array.<String>} opts.hostnames Hostnames
     * @param {Array.<String>} opts.localIpContains Free-text filter by IP Address (supports multiple values). Example: \"192.168.0.1/24,10.1\".
     * @param {Array.<String>} opts.deviceFunctionContains Free-text filter by device function (supports multiple values). Example: \"security,mobile\".
     * @param {Array.<Number>} opts.tcpPortsContains Free-text filter by tcp port (supports multiple values). Example: \"80,24\".
     * @param {Date} opts.lastSeenLte Devices last seen before or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<module:model/String>} opts.knownFingerprintingData Known fingerprinting data. Example: \"Manufacturer\".
     * @param {Date} opts.firstSeenGt Devices first seen after this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {String} opts.macAddress A mac address to search for
     * @param {Date} opts.firstSeenLt Devices first seen before this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {String} opts.localIp Search using local IP
     * @param {Array.<String>} opts.managedStates Is the device managed
     * @param {Date} opts.lastSeenGte Devices last seen after or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {String} opts.manufacturer Manufacturer of the device or network interface
     * @param {Array.<String>} opts.subnetAddressContains Free-text filter by Subnet Address (supports multiple values). Example: \"192.168.0.1/24,10.1\".
     * @param {Array.<String>} opts.siteIds Single Site ID to filter by. Example: \"225494730938493804\".
     * @param {Array.<String>} opts.accountIds Single Account ID to filter by. Example: \"225494730938493804\".
     * @param {Array.<String>} opts.gatewayMacAddressContains Free-text filter by gateway mac address (supports multiple values). Example: \"aa:ee:b1\".
     * @param {String} opts.osType OS type
     * @param {Date} opts.firstSeenGte Devices first seen after or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.macAddressContains Free-text filter by mac address (supports multiple values). Example: \"aa:ee:b1\".
     * @param {String} opts.lastSeenBetween Date range for last seen(format: <from_timestamp>-<to_timestamp>, inclusive). Example: \"1514978890136-1514978650130\".
     * @param {String} opts.deviceType Device type. Example: \"Server/Workstation/...\".
     * @param {Date} opts.lastSeenLt Devices last seen before this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.tagNameContains Free-text filter by tag name (supports multiple values). Example: \"iot\".
     * @param {Array.<String>} opts.domains Included network domains. Example: \"mybusiness,workgroup\".
     * @param {Array.<String>} opts.siteNames Included site names. Example: \"Office,Test\".
     * @param {module:api/RangerApi~webApiRangerReportCsvGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webApiRangerReportCsvGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'externalIp': opts['externalIp'],
        'managedState': opts['managedState'],
        'osVersion': opts['osVersion'],
        'query': opts['query'],
        'networkName': opts['networkName'],
        'firstSeen__lte': opts['firstSeenLte'],
        'gatewayMacAddress': opts['gatewayMacAddress'],
        'osName': opts['osName'],
        'lastSeen__gt': opts['lastSeenGt'],
        'period': opts['period'],
        'firstSeen__between': opts['firstSeenBetween'],
        'lastSeen__lte': opts['lastSeenLte'],
        'firstSeen__gt': opts['firstSeenGt'],
        'macAddress': opts['macAddress'],
        'firstSeen__lt': opts['firstSeenLt'],
        'localIp': opts['localIp'],
        'lastSeen__gte': opts['lastSeenGte'],
        'manufacturer': opts['manufacturer'],
        'osType': opts['osType'],
        'firstSeen__gte': opts['firstSeenGte'],
        'lastSeen__between': opts['lastSeenBetween'],
        'deviceType': opts['deviceType'],
        'lastSeen__lt': opts['lastSeenLt'],
      };
      var collectionQueryParams = {
        'agentIds': {
          value: opts['agentIds'],
          collectionFormat: 'csv'
        },
        'discoveryMethods': {
          value: opts['discoveryMethods'],
          collectionFormat: 'csv'
        },
        'udpPorts__contains': {
          value: opts['udpPortsContains'],
          collectionFormat: 'csv'
        },
        'hostnames__contains': {
          value: opts['hostnamesContains'],
          collectionFormat: 'csv'
        },
        'deviceTypes': {
          value: opts['deviceTypes'],
          collectionFormat: 'csv'
        },
        'ids': {
          value: opts['ids'],
          collectionFormat: 'csv'
        },
        'networkName__contains': {
          value: opts['networkNameContains'],
          collectionFormat: 'csv'
        },
        'osVersion__contains': {
          value: opts['osVersionContains'],
          collectionFormat: 'csv'
        },
        'externalIp__contains': {
          value: opts['externalIpContains'],
          collectionFormat: 'csv'
        },
        'osTypes': {
          value: opts['osTypes'],
          collectionFormat: 'csv'
        },
        'deviceReviews': {
          value: opts['deviceReviews'],
          collectionFormat: 'csv'
        },
        'manufacturer__contains': {
          value: opts['manufacturerContains'],
          collectionFormat: 'csv'
        },
        'hostnames': {
          value: opts['hostnames'],
          collectionFormat: 'csv'
        },
        'localIp__contains': {
          value: opts['localIpContains'],
          collectionFormat: 'csv'
        },
        'deviceFunction__contains': {
          value: opts['deviceFunctionContains'],
          collectionFormat: 'csv'
        },
        'tcpPorts__contains': {
          value: opts['tcpPortsContains'],
          collectionFormat: 'csv'
        },
        'knownFingerprintingData': {
          value: opts['knownFingerprintingData'],
          collectionFormat: 'csv'
        },
        'managedStates': {
          value: opts['managedStates'],
          collectionFormat: 'csv'
        },
        'subnetAddress__contains': {
          value: opts['subnetAddressContains'],
          collectionFormat: 'csv'
        },
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
        'gatewayMacAddress__contains': {
          value: opts['gatewayMacAddressContains'],
          collectionFormat: 'csv'
        },
        'macAddress__contains': {
          value: opts['macAddressContains'],
          collectionFormat: 'csv'
        },
        'tagName__contains': {
          value: opts['tagNameContains'],
          collectionFormat: 'csv'
        },
        'domains': {
          value: opts['domains'],
          collectionFormat: 'csv'
        },
        'siteNames': {
          value: opts['siteNames'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/web/api/v2.1/ranger/report/csv', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRangerSettingsGet operation.
     * @callback module:api/RangerApi~webApiRangerSettingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchemasRangerSettingsSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Ranger Settings
     * Ranger gives full visibility of all devices connected to your network. Ranger scans your corporate environment to identify and manage connected devices, even those not protected by or supported by SentinelOne. Ranger identifies devices as:<br>* Secured - End-user computer or laptop, or server, with a SentinelOne Agent.<br>* Unsecured - Endpoint of supported hardware and OS, without an Agent.<br>* Unsupported - Hardware or software that are not compatible with the SentinelOne Agent.<br>* Unknown - Ranger cannot determine if the device is Unsecured or Unsupported.<br>When you install Windows Agents with Ranger, the Agents can become scanners. Selected scanners from networks that you enable for scanning find connected devices with passive and active scan techniques. The scanners send the collected data to Ranger on the Management. Ranger then runs fingerprinting to identify and classify unique devices and to update the Device Inventory Table in the Management Console. With port scanning, it is important that you understand the legal and ethical considerations and that you document a Ranger plan and implementation. See https://support.sentinelone.com/hc/en-us/articles/360041484913 > Legal Considerations and Proper Implementation.<br>Requirements:  Ranger license, Cloud-based Management (not supported for On-Prem), Global user or Account user with scope access to the Account with a Ranger license.<br>Use this command to get the Ranger Settings for the Account of the given ID (run \"accounts\" to get an Account ID). The Response shows if Ranger is enabled on the Account, the protocols and ports of the scans, and more:<br>* minAgentsInNetworkToScan - To help you determine which networks are corporate, Ranger looks at the number of secured endpoints (Agents) in a network. If there are not enough Agents in a network - set by this parameter value - Ranger considers the network to be non-corporate and will not scan it.<br>* scanOnlyLocalSubnets - If false, Ranger scans remote subnets that do not have online Ranger scanners. This will create network traffic through the corporate firewall (and between different corporate locations), which can impact network performance.<br>* usePeriodicSnapshots - A complete scan includes scanner port scanning and Ranger AI analysis of the scanner data to update the Device Inventory Snapshot. If this setting is true, Ranger runs a new scan on an interval. If snapshotPeriod is shorter, the data is more accurate. If longer, there is better performance.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.accountIds List of Account IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.siteIds List of Site IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {module:api/RangerApi~webApiRangerSettingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchemasRangerSettingsSchema200}
     */
    this.webApiRangerSettingsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SchemasRangerSettingsSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/ranger/settings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRangerSettingsPut operation.
     * @callback module:api/RangerApi~webApiRangerSettingsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchemasRangerSettingsSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Ranger Settings
     * Change the Ranger Settings. Best Practice: Get the current settings before you change them. See: Get Ranger Settings.
     * @param {Object} opts Optional parameters
     * @param {module:model/SchemasPutRangerSchema} opts.body 
     * @param {module:api/RangerApi~webApiRangerSettingsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchemasRangerSettingsSchema200}
     */
    this.webApiRangerSettingsPut = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SchemasRangerSettingsSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/ranger/settings', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRangerTableViewGet operation.
     * @callback module:api/RangerApi~webApiRangerTableViewGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SchemasRangerTableViewSchemaMany200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Ranger Table
     * Get the data for each row in the Ranger Device Inventory Table. Best practice: Set filters. Each row is a set of parameters that quickly fills the pagination limits.
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor Cursor position returned by the last request. Use to iterate over more than 1000 items. Example: \"YWdlbnRfaWQ6NTgwMjkzODE=\". (default to null)
     * @param {Array.<String>} opts.agentIds List of agent ids. Example: \"225494730938493804,225494730938493915\".
     * @param {String} opts.externalIp Search using external IP
     * @param {String} opts.managedState Is the device managed
     * @param {Array.<String>} opts.discoveryMethods Discovery methods
     * @param {Array.<Number>} opts.udpPortsContains Free-text filter by udp port (supports multiple values). Example: \"137,2002\".
     * @param {Array.<String>} opts.hostnamesContains Free-text filter by hostname (supports multiple values). Example: \"s1_host,SomeHost\".
     * @param {String} opts.osVersion Os version
     * @param {Array.<String>} opts.ids List of device ids. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.deviceTypes Device types
     * @param {Array.<String>} opts.networkNameContains Free-text filter by network name (supports multiple values). Example: \"Office\".
     * @param {Boolean} opts.countOnly If true, only total number of items will be returned, without any of the actual objects. (default to false)
     * @param {String} opts.query Query
     * @param {String} opts.networkName Search using network name
     * @param {Number} opts.limit Limit number of returned items (1-1000). Example: \"10\". (default to 10)
     * @param {Array.<String>} opts.externalIpContains Free-text filter by visible IP (supports multiple values). Example: \"192.168.0.1/24,10.1\".
     * @param {Date} opts.firstSeenLte Devices first seen before or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.osVersionContains Free-text filter by OS full name and version (supports multiple values). Example: \"Service Pack 1\".
     * @param {Array.<String>} opts.osTypes Included OS types
     * @param {Number} opts.skip Skip first number of items (0-1000). To iterate over more than 1000 items,  use \"cursor\". Example: \"150\".
     * @param {Array.<String>} opts.deviceReviews The device review state
     * @param {String} opts.gatewayMacAddress A gateway mac address to search for
     * @param {Boolean} opts.skipCount If true, total number of items will not be calculated, which speeds up execution time. (default to null)
     * @param {Date} opts.lastSeenGt Devices last seen after this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {module:model/String} opts.sortOrder Sort direction. Example: \"asc\". (default to null)
     * @param {Array.<String>} opts.manufacturerContains Free-text filter by manufacturer (supports multiple values). Example: \"Company\".
     * @param {module:model/String} opts.period Period. Example: \"latest\". (default to latest)
     * @param {String} opts.firstSeenBetween Date range refor first seen(format: <from_timestamp>-<to_timestamp>, inclusive). Example: \"1514978890136-1514978650130\".
     * @param {Array.<String>} opts.hostnames Hostnames
     * @param {Array.<String>} opts.localIpContains Free-text filter by IP Address (supports multiple values). Example: \"192.168.0.1/24,10.1\".
     * @param {Array.<String>} opts.deviceFunctionContains Free-text filter by device function (supports multiple values). Example: \"security,mobile\".
     * @param {Array.<Number>} opts.tcpPortsContains Free-text filter by tcp port (supports multiple values). Example: \"80,24\".
     * @param {Date} opts.lastSeenLte Devices last seen before or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<module:model/String>} opts.knownFingerprintingData Known fingerprinting data. Example: \"Manufacturer\".
     * @param {Date} opts.firstSeenGt Devices first seen after this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {module:model/String} opts.sortBy The column to sort the results by. Example: \"id\". (default to null)
     * @param {String} opts.macAddress A mac address to search for
     * @param {Date} opts.firstSeenLt Devices first seen before this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {String} opts.localIp Search using local IP
     * @param {Array.<String>} opts.managedStates Is the device managed
     * @param {Date} opts.lastSeenGte Devices last seen after or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {String} opts.manufacturer Manufacturer of the device or network interface
     * @param {Array.<String>} opts.subnetAddressContains Free-text filter by Subnet Address (supports multiple values). Example: \"192.168.0.1/24,10.1\".
     * @param {Array.<String>} opts.siteNames Included site names. Example: \"Office,Test\".
     * @param {Array.<String>} opts.siteIds Single Site ID to filter by. Example: \"225494730938493804\".
     * @param {Array.<String>} opts.accountIds Single Account ID to filter by. Example: \"225494730938493804\".
     * @param {Array.<String>} opts.gatewayMacAddressContains Free-text filter by gateway mac address (supports multiple values). Example: \"aa:ee:b1\".
     * @param {String} opts.osType OS type
     * @param {Date} opts.firstSeenGte Devices first seen after or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.macAddressContains Free-text filter by mac address (supports multiple values). Example: \"aa:ee:b1\".
     * @param {String} opts.lastSeenBetween Date range for last seen(format: <from_timestamp>-<to_timestamp>, inclusive). Example: \"1514978890136-1514978650130\".
     * @param {String} opts.deviceType Device type. Example: \"Server/Workstation/...\".
     * @param {Date} opts.lastSeenLt Devices last seen before this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.tagNameContains Free-text filter by tag name (supports multiple values). Example: \"iot\".
     * @param {Array.<String>} opts.domains Included network domains. Example: \"mybusiness,workgroup\".
     * @param {String} opts.osName Os name
     * @param {module:api/RangerApi~webApiRangerTableViewGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchemasRangerTableViewSchemaMany200}
     */
    this.webApiRangerTableViewGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'cursor': opts['cursor'],
        'externalIp': opts['externalIp'],
        'managedState': opts['managedState'],
        'osVersion': opts['osVersion'],
        'countOnly': opts['countOnly'],
        'query': opts['query'],
        'networkName': opts['networkName'],
        'limit': opts['limit'],
        'firstSeen__lte': opts['firstSeenLte'],
        'skip': opts['skip'],
        'gatewayMacAddress': opts['gatewayMacAddress'],
        'skipCount': opts['skipCount'],
        'lastSeen__gt': opts['lastSeenGt'],
        'sortOrder': opts['sortOrder'],
        'period': opts['period'],
        'firstSeen__between': opts['firstSeenBetween'],
        'lastSeen__lte': opts['lastSeenLte'],
        'firstSeen__gt': opts['firstSeenGt'],
        'sortBy': opts['sortBy'],
        'macAddress': opts['macAddress'],
        'firstSeen__lt': opts['firstSeenLt'],
        'localIp': opts['localIp'],
        'lastSeen__gte': opts['lastSeenGte'],
        'manufacturer': opts['manufacturer'],
        'osType': opts['osType'],
        'firstSeen__gte': opts['firstSeenGte'],
        'lastSeen__between': opts['lastSeenBetween'],
        'deviceType': opts['deviceType'],
        'lastSeen__lt': opts['lastSeenLt'],
        'osName': opts['osName'],
      };
      var collectionQueryParams = {
        'agentIds': {
          value: opts['agentIds'],
          collectionFormat: 'csv'
        },
        'discoveryMethods': {
          value: opts['discoveryMethods'],
          collectionFormat: 'csv'
        },
        'udpPorts__contains': {
          value: opts['udpPortsContains'],
          collectionFormat: 'csv'
        },
        'hostnames__contains': {
          value: opts['hostnamesContains'],
          collectionFormat: 'csv'
        },
        'ids': {
          value: opts['ids'],
          collectionFormat: 'csv'
        },
        'deviceTypes': {
          value: opts['deviceTypes'],
          collectionFormat: 'csv'
        },
        'networkName__contains': {
          value: opts['networkNameContains'],
          collectionFormat: 'csv'
        },
        'externalIp__contains': {
          value: opts['externalIpContains'],
          collectionFormat: 'csv'
        },
        'osVersion__contains': {
          value: opts['osVersionContains'],
          collectionFormat: 'csv'
        },
        'osTypes': {
          value: opts['osTypes'],
          collectionFormat: 'csv'
        },
        'deviceReviews': {
          value: opts['deviceReviews'],
          collectionFormat: 'csv'
        },
        'manufacturer__contains': {
          value: opts['manufacturerContains'],
          collectionFormat: 'csv'
        },
        'hostnames': {
          value: opts['hostnames'],
          collectionFormat: 'csv'
        },
        'localIp__contains': {
          value: opts['localIpContains'],
          collectionFormat: 'csv'
        },
        'deviceFunction__contains': {
          value: opts['deviceFunctionContains'],
          collectionFormat: 'csv'
        },
        'tcpPorts__contains': {
          value: opts['tcpPortsContains'],
          collectionFormat: 'csv'
        },
        'knownFingerprintingData': {
          value: opts['knownFingerprintingData'],
          collectionFormat: 'csv'
        },
        'managedStates': {
          value: opts['managedStates'],
          collectionFormat: 'csv'
        },
        'subnetAddress__contains': {
          value: opts['subnetAddressContains'],
          collectionFormat: 'csv'
        },
        'siteNames': {
          value: opts['siteNames'],
          collectionFormat: 'csv'
        },
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
        'gatewayMacAddress__contains': {
          value: opts['gatewayMacAddressContains'],
          collectionFormat: 'csv'
        },
        'macAddress__contains': {
          value: opts['macAddressContains'],
          collectionFormat: 'csv'
        },
        'tagName__contains': {
          value: opts['tagNameContains'],
          collectionFormat: 'csv'
        },
        'domains': {
          value: opts['domains'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SchemasRangerTableViewSchemaMany200;

      return this.apiClient.callApi(
        '/web/api/v2.1/ranger/table-view', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRangerTagsPost operation.
     * @callback module:api/RangerApi~webApiRangerTagsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AffectedResultsSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Device Tags
     * Change the device tags.
     * @param {Object} opts Optional parameters
     * @param {module:model/SchemasDeviceTagsSchema} opts.body 
     * @param {module:api/RangerApi~webApiRangerTagsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AffectedResultsSchema200}
     */
    this.webApiRangerTagsPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AffectedResultsSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/ranger/tags', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRangerinventoryIdJsonExportGet operation.
     * @callback module:api/RangerApi~webApiRangerinventoryIdJsonExportGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export JSON Raw Data
     * Export the raw data for one device, by its ID in the Device Inventory Data. To get the ID, run ranger/table-view (see Get Ranger Table). Use this command to get data for Support.
     * @param {String} inventoryId Inventory ID. Example: \"225494730938493804\".
     * @param {module:api/RangerApi~webApiRangerinventoryIdJsonExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webApiRangerinventoryIdJsonExportGet = function(inventoryId, callback) {
      var postBody = null;

      // verify the required parameter 'inventoryId' is set
      if (inventoryId === undefined || inventoryId === null) {
        throw new Error("Missing the required parameter 'inventoryId' when calling webApiRangerinventoryIdJsonExportGet");
      }


      var pathParams = {
        'inventory_id': inventoryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/web/api/v2.1/ranger/{inventory_id}/json/export', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRangerinventoryIdJsonGet operation.
     * @callback module:api/RangerApi~webApiRangerinventoryIdJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RawDataSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * JSON Raw Data
     * Get a json string with the Ranger data for one device, by ID in the Device Inventory Data.
     * @param {String} inventoryId Inventory ID. Example: \"225494730938493804\".
     * @param {module:api/RangerApi~webApiRangerinventoryIdJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RawDataSchema200}
     */
    this.webApiRangerinventoryIdJsonGet = function(inventoryId, callback) {
      var postBody = null;

      // verify the required parameter 'inventoryId' is set
      if (inventoryId === undefined || inventoryId === null) {
        throw new Error("Missing the required parameter 'inventoryId' when calling webApiRangerinventoryIdJsonGet");
      }


      var pathParams = {
        'inventory_id': inventoryId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RawDataSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/ranger/{inventory_id}/json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
