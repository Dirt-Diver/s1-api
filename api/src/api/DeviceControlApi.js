/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AffectedResultsSchema200', 'model/DeviceControlSchemasCopyRuleSchema', 'model/DeviceControlSchemasDeviceEventResponseSchemaMany200', 'model/DeviceControlSchemasDeviceSchema200', 'model/DeviceControlSchemasDeviceSchemaMany200', 'model/DeviceControlSchemasDeviceSettingsSchema200', 'model/DeviceControlSchemasEnableRuleSchema', 'model/DeviceControlSchemasPostDeviceSchema', 'model/DeviceControlSchemasPostDeviceSettingsSchema', 'model/DeviceControlSchemasPutDeviceSchema', 'model/DeviceControlSchemasReorderSchema', 'model/DeviceControlSchemasRuleDeleteSchema', 'model/NoDataSchema400', 'model/NoDataSchema401', 'model/NoDataSchema404', 'model/SuccessResponseSchema200'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AffectedResultsSchema200'), require('../model/DeviceControlSchemasCopyRuleSchema'), require('../model/DeviceControlSchemasDeviceEventResponseSchemaMany200'), require('../model/DeviceControlSchemasDeviceSchema200'), require('../model/DeviceControlSchemasDeviceSchemaMany200'), require('../model/DeviceControlSchemasDeviceSettingsSchema200'), require('../model/DeviceControlSchemasEnableRuleSchema'), require('../model/DeviceControlSchemasPostDeviceSchema'), require('../model/DeviceControlSchemasPostDeviceSettingsSchema'), require('../model/DeviceControlSchemasPutDeviceSchema'), require('../model/DeviceControlSchemasReorderSchema'), require('../model/DeviceControlSchemasRuleDeleteSchema'), require('../model/NoDataSchema400'), require('../model/NoDataSchema401'), require('../model/NoDataSchema404'), require('../model/SuccessResponseSchema200'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.DeviceControlApi = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.AffectedResultsSchema200, root.S1MgmtApi.DeviceControlSchemasCopyRuleSchema, root.S1MgmtApi.DeviceControlSchemasDeviceEventResponseSchemaMany200, root.S1MgmtApi.DeviceControlSchemasDeviceSchema200, root.S1MgmtApi.DeviceControlSchemasDeviceSchemaMany200, root.S1MgmtApi.DeviceControlSchemasDeviceSettingsSchema200, root.S1MgmtApi.DeviceControlSchemasEnableRuleSchema, root.S1MgmtApi.DeviceControlSchemasPostDeviceSchema, root.S1MgmtApi.DeviceControlSchemasPostDeviceSettingsSchema, root.S1MgmtApi.DeviceControlSchemasPutDeviceSchema, root.S1MgmtApi.DeviceControlSchemasReorderSchema, root.S1MgmtApi.DeviceControlSchemasRuleDeleteSchema, root.S1MgmtApi.NoDataSchema400, root.S1MgmtApi.NoDataSchema401, root.S1MgmtApi.NoDataSchema404, root.S1MgmtApi.SuccessResponseSchema200);
  }
}(this, function(ApiClient, AffectedResultsSchema200, DeviceControlSchemasCopyRuleSchema, DeviceControlSchemasDeviceEventResponseSchemaMany200, DeviceControlSchemasDeviceSchema200, DeviceControlSchemasDeviceSchemaMany200, DeviceControlSchemasDeviceSettingsSchema200, DeviceControlSchemasEnableRuleSchema, DeviceControlSchemasPostDeviceSchema, DeviceControlSchemasPostDeviceSettingsSchema, DeviceControlSchemasPutDeviceSchema, DeviceControlSchemasReorderSchema, DeviceControlSchemasRuleDeleteSchema, NoDataSchema400, NoDataSchema401, NoDataSchema404, SuccessResponseSchema200) {
  'use strict';

  /**
   * DeviceControl service.
   * @module api/DeviceControlApi
   * @version 2.1
   */

  /**
   * Constructs a new DeviceControlApi. 
   * @alias module:api/DeviceControlApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the webApiDeviceControlConfigurationGet operation.
     * @callback module:api/DeviceControlApi~webApiDeviceControlConfigurationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceControlSchemasDeviceSettingsSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Configuration
     * Get Device Control configuration for a given scope.<br>To filter the results for a scope:<br>* Global - Make sure \"tenant\" is \"true\" and no other scope ID is given.<br>* Account - Make sure \"tenant\" is \"false\" and at least one Account ID is given.<br>* Site - Make sure \"tenant\" is \"false\" and at least one Site ID is given.<brDevice Control requires Control SKU. It is not supported on Linux.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.accountIds List of Account IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.groupIds List of Group IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Boolean} opts.tenant Indicates a tenant scope request
     * @param {Array.<String>} opts.siteIds List of Site IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {module:api/DeviceControlApi~webApiDeviceControlConfigurationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceControlSchemasDeviceSettingsSchema200}
     */
    this.webApiDeviceControlConfigurationGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'tenant': opts['tenant'],
      };
      var collectionQueryParams = {
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
        'groupIds': {
          value: opts['groupIds'],
          collectionFormat: 'csv'
        },
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeviceControlSchemasDeviceSettingsSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/device-control/configuration', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiDeviceControlConfigurationPut operation.
     * @callback module:api/DeviceControlApi~webApiDeviceControlConfigurationPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceControlSchemasDeviceSettingsSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Configuration
     * Use this command to change the Device Control configuration. Enter a Group ID, Site ID, Account ID, or \"tenant = true\". If you select only tenant, and the other scopes are empty, the change is applied to the Global policy.  Device Control requires Control SKU. It is not supported on Linux.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeviceControlSchemasPostDeviceSettingsSchema} opts.body 
     * @param {module:api/DeviceControlApi~webApiDeviceControlConfigurationPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceControlSchemasDeviceSettingsSchema200}
     */
    this.webApiDeviceControlConfigurationPut = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeviceControlSchemasDeviceSettingsSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/device-control/configuration', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiDeviceControlCopyRulesPost operation.
     * @callback module:api/DeviceControlApi~webApiDeviceControlCopyRulesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AffectedResultsSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy Rules
     * You can copy a set of Device Control rules to use in other Accounts, Sites, or Groups. Copy the rules from a source Group, Site, or Account to target Groups, Sites, or Accounts. <br>Define the rules to copy with the filters. To get the values for devices, run \"unscoped\". To get Account IDs, run \"accounts\". To get Site IDs, run \"sites\". <br>Device Control requires Control SKU. Linux Agents do not support Device Control.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeviceControlSchemasCopyRuleSchema} opts.body 
     * @param {module:api/DeviceControlApi~webApiDeviceControlCopyRulesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AffectedResultsSchema200}
     */
    this.webApiDeviceControlCopyRulesPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AffectedResultsSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/device-control/copy-rules', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiDeviceControlDelete operation.
     * @callback module:api/DeviceControlApi~webApiDeviceControlDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AffectedResultsSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Rules
     * Delete Device Control rules that match the filter.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeviceControlSchemasRuleDeleteSchema} opts.body 
     * @param {module:api/DeviceControlApi~webApiDeviceControlDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AffectedResultsSchema200}
     */
    this.webApiDeviceControlDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AffectedResultsSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/device-control', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiDeviceControlEnablePut operation.
     * @callback module:api/DeviceControlApi~webApiDeviceControlEnablePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AffectedResultsSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable/Disable Rules
     * It is best practice to disable a rule rather than delete it. Use this command to change the status of a rule between Enabled and Disabled. <br>Note: On Windows, if a USB device is already connected to an endpoint, new rules and rule changes do not affect it. USB rules will apply the next time the device connects to the endpoint. For Windows Bluetooth rules, the device and endpoint must be paired after the SentinelOne Agent that supports Bluetooth is installed or upgraded. If the endpoint and device were already paired before the Agent supported bluetooth, reboot the endpoint to activate the rule, or re-pair the endpoint and device.<br>On macOS, changes apply to devices that are already connected to an endpoint. 
     * @param {Object} opts Optional parameters
     * @param {module:model/DeviceControlSchemasEnableRuleSchema} opts.body 
     * @param {module:api/DeviceControlApi~webApiDeviceControlEnablePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AffectedResultsSchema200}
     */
    this.webApiDeviceControlEnablePut = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AffectedResultsSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/device-control/enable', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiDeviceControlEventsGet operation.
     * @callback module:api/DeviceControlApi~webApiDeviceControlEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceControlSchemasDeviceEventResponseSchemaMany200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Device Control Events
     * Get the data of Device Control events on Windows and macOS endpoints with Device Control-enabled Agents that match the filter.  Device Control requires Control SKU. Linux Agents do not support Device Control.
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor Cursor position returned by the last request. Use to iterate over more than 1000 items. Example: \"YWdlbnRfaWQ6NTgwMjkzODE=\". (default to null)
     * @param {Array.<String>} opts.agentIds List of agent Ids to filter by
     * @param {Array.<String>} opts.uids List of uIds to filter by.
     * @param {Array.<module:model/String>} opts.interfaces List of interfaces to filter by. Example: \"USB\".
     * @param {Array.<String>} opts.deviceClasses List of device classes to filter by. Example: \"02h\".
     * @param {String} opts.query A free-text search term, will match applicable attributes.
     * @param {Array.<String>} opts.ids List of IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Boolean} opts.countOnly If true, only total number of items will be returned, without any of the actual objects. (default to false)
     * @param {Number} opts.limit Limit number of returned items (1-1000). Example: \"10\". (default to 10)
     * @param {Number} opts.skip Skip first number of items (0-1000). To iterate over more than 1000 items,  use \"cursor\". Example: \"150\".
     * @param {Array.<String>} opts.eventTypes List of event types to filter by.
     * @param {Boolean} opts.skipCount If true, total number of items will not be calculated, which speeds up execution time. (default to null)
     * @param {module:model/String} opts.sortOrder Sort direction. Example: \"asc\". (default to null)
     * @param {Array.<module:model/String>} opts.accessPermissions Access permission in. Example: \"Read-Only\".
     * @param {Array.<String>} opts.deviceIds List of device IDs to filter by
     * @param {Date} opts.eventTimeGte Return events generated after or at this time. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.productIds List of product IDs to filter by. Example: \"02\".
     * @param {String} opts.eventTimeBetween Return events created within this range (inclusive). Example: \"1514978764288-1514978999999\".
     * @param {module:model/String} opts.sortBy The column to sort the results by. Example: \"id\". (default to null)
     * @param {Date} opts.eventTimeLt Return events generated before this time. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.vendorIds List of vendor IDs to filter by.
     * @param {Boolean} opts.tenant Indicates a tenant scope request
     * @param {Array.<String>} opts.groupIds List of Group IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Date} opts.eventTimeGt Return events generated after this time. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.eventIds List of event IDs to filter by
     * @param {Date} opts.eventTimeLte Return events generated before or at this time. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.siteIds List of Site IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.accountIds List of Account IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.serviceClasses List of service classes to filter by. Example: \"02\".
     * @param {module:api/DeviceControlApi~webApiDeviceControlEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceControlSchemasDeviceEventResponseSchemaMany200}
     */
    this.webApiDeviceControlEventsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'cursor': opts['cursor'],
        'query': opts['query'],
        'countOnly': opts['countOnly'],
        'limit': opts['limit'],
        'skip': opts['skip'],
        'skipCount': opts['skipCount'],
        'sortOrder': opts['sortOrder'],
        'eventTime__gte': opts['eventTimeGte'],
        'eventTime__between': opts['eventTimeBetween'],
        'sortBy': opts['sortBy'],
        'eventTime__lt': opts['eventTimeLt'],
        'tenant': opts['tenant'],
        'eventTime__gt': opts['eventTimeGt'],
        'eventTime__lte': opts['eventTimeLte'],
      };
      var collectionQueryParams = {
        'agentIds': {
          value: opts['agentIds'],
          collectionFormat: 'csv'
        },
        'uids': {
          value: opts['uids'],
          collectionFormat: 'csv'
        },
        'interfaces': {
          value: opts['interfaces'],
          collectionFormat: 'csv'
        },
        'deviceClasses': {
          value: opts['deviceClasses'],
          collectionFormat: 'csv'
        },
        'ids': {
          value: opts['ids'],
          collectionFormat: 'csv'
        },
        'eventTypes': {
          value: opts['eventTypes'],
          collectionFormat: 'csv'
        },
        'access_permissions': {
          value: opts['accessPermissions'],
          collectionFormat: 'csv'
        },
        'deviceIds': {
          value: opts['deviceIds'],
          collectionFormat: 'csv'
        },
        'productIds': {
          value: opts['productIds'],
          collectionFormat: 'csv'
        },
        'vendorIds': {
          value: opts['vendorIds'],
          collectionFormat: 'csv'
        },
        'groupIds': {
          value: opts['groupIds'],
          collectionFormat: 'csv'
        },
        'eventIds': {
          value: opts['eventIds'],
          collectionFormat: 'csv'
        },
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
        'serviceClasses': {
          value: opts['serviceClasses'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeviceControlSchemasDeviceEventResponseSchemaMany200;

      return this.apiClient.callApi(
        '/web/api/v2.1/device-control/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiDeviceControlExportGet operation.
     * @callback module:api/DeviceControlApi~webApiDeviceControlExportGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export Rules
     * Export Device Control rules to a CSV file.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.createdAtGt Return device rules created after this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.versions Return device rules with the filtered versions.
     * @param {Array.<String>} opts.uids Return device rules with the filtered uId.
     * @param {Array.<module:model/String>} opts.actions Return device rules with the filtered action. Example: \"Allow\".
     * @param {Array.<String>} opts.deviceNames Return device rules with the filtered device names.
     * @param {Array.<module:model/String>} opts.interfaces Return device rules with the filtered interface. Example: \"USB\".
     * @param {Array.<String>} opts.deviceClasses Return device rules with the filtered device class. Example: \"02h\".
     * @param {String} opts.query A free-text search term, will match applicable attributes.
     * @param {Array.<String>} opts.ids List of ids to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Date} opts.createdAtLt Return device rules created before this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Date} opts.createdAtLte Return device rules created before or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<module:model/String>} opts.accessPermissions Access permission in. Example: \"Read-Only\".
     * @param {Array.<module:model/String>} opts.scopes Return only device rules in this scope. Example: \"site\".
     * @param {Array.<module:model/String>} opts.statuses Return device rules with the filtered status. Example: \"Enabled\".
     * @param {Array.<String>} opts.deviceIds Return device rules with the filtered device id. Example: \"02\".
     * @param {Array.<String>} opts.productIds Return device rules with the filtered product id. Example: \"02\".
     * @param {String} opts.ruleName Return device rules with the filtered rule name.
     * @param {Array.<String>} opts.bluetoothAddresses Return device rules with the filtered bluetooth addresses.
     * @param {Array.<String>} opts.vendorIds Return device rules with the filtered vendor id.
     * @param {Boolean} opts.tenant Indicates a tenant scope request
     * @param {String} opts.createdAtBetween Return device rules created within this range (inclusive). Example: \"1514978764288-1514978999999\".
     * @param {Array.<String>} opts.groupIds List of Group IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.gattServices Return device rules with the filtered GATT services.
     * @param {Date} opts.createdAtGte Return device rules created after or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.siteIds List of Site IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.accountIds List of Account IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.deviceInformationServiceInfoKeys Return device rules with the filtered device information service info keys.
     * @param {Array.<String>} opts.manufacturerNames Return device rules with the filtered manufacturer names.
     * @param {Array.<String>} opts.serviceClasses Return device rules with the filtered service class. Example: \"02\".
     * @param {Array.<String>} opts.minorClasses Return device rules with the filtered minor classes.
     * @param {module:api/DeviceControlApi~webApiDeviceControlExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webApiDeviceControlExportGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'createdAt__gt': opts['createdAtGt'],
        'query': opts['query'],
        'createdAt__lt': opts['createdAtLt'],
        'createdAt__lte': opts['createdAtLte'],
        'ruleName': opts['ruleName'],
        'tenant': opts['tenant'],
        'createdAt__between': opts['createdAtBetween'],
        'createdAt__gte': opts['createdAtGte'],
      };
      var collectionQueryParams = {
        'versions': {
          value: opts['versions'],
          collectionFormat: 'csv'
        },
        'uids': {
          value: opts['uids'],
          collectionFormat: 'csv'
        },
        'actions': {
          value: opts['actions'],
          collectionFormat: 'csv'
        },
        'deviceNames': {
          value: opts['deviceNames'],
          collectionFormat: 'csv'
        },
        'interfaces': {
          value: opts['interfaces'],
          collectionFormat: 'csv'
        },
        'deviceClasses': {
          value: opts['deviceClasses'],
          collectionFormat: 'csv'
        },
        'ids': {
          value: opts['ids'],
          collectionFormat: 'csv'
        },
        'accessPermissions': {
          value: opts['accessPermissions'],
          collectionFormat: 'csv'
        },
        'scopes': {
          value: opts['scopes'],
          collectionFormat: 'csv'
        },
        'statuses': {
          value: opts['statuses'],
          collectionFormat: 'csv'
        },
        'deviceIds': {
          value: opts['deviceIds'],
          collectionFormat: 'csv'
        },
        'productIds': {
          value: opts['productIds'],
          collectionFormat: 'csv'
        },
        'bluetoothAddresses': {
          value: opts['bluetoothAddresses'],
          collectionFormat: 'csv'
        },
        'vendorIds': {
          value: opts['vendorIds'],
          collectionFormat: 'csv'
        },
        'groupIds': {
          value: opts['groupIds'],
          collectionFormat: 'csv'
        },
        'gattServices': {
          value: opts['gattServices'],
          collectionFormat: 'csv'
        },
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
        'deviceInformationServiceInfoKeys': {
          value: opts['deviceInformationServiceInfoKeys'],
          collectionFormat: 'csv'
        },
        'manufacturerNames': {
          value: opts['manufacturerNames'],
          collectionFormat: 'csv'
        },
        'serviceClasses': {
          value: opts['serviceClasses'],
          collectionFormat: 'csv'
        },
        'minorClasses': {
          value: opts['minorClasses'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/web/api/v2.1/device-control/export', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiDeviceControlGet operation.
     * @callback module:api/DeviceControlApi~webApiDeviceControlGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceControlSchemasDeviceSchemaMany200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Device Rules
     * Get the Device Control rules of a specified Account, Site, Group or Global (tenant) that match the filter.
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor Cursor position returned by the last request. Use to iterate over more than 1000 items. Example: \"YWdlbnRfaWQ6NTgwMjkzODE=\". (default to null)
     * @param {Date} opts.createdAtGt Return device rules created after this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.versions Return device rules with the filtered versions.
     * @param {Array.<String>} opts.uids Return device rules with the filtered uId.
     * @param {Array.<module:model/String>} opts.actions Return device rules with the filtered action. Example: \"Allow\".
     * @param {Array.<String>} opts.deviceNames Return device rules with the filtered device names.
     * @param {Array.<module:model/String>} opts.interfaces Return device rules with the filtered interface. Example: \"USB\".
     * @param {Array.<String>} opts.deviceClasses Return device rules with the filtered device class. Example: \"02h\".
     * @param {String} opts.query A free-text search term, will match applicable attributes.
     * @param {Array.<String>} opts.ids List of ids to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Boolean} opts.countOnly If true, only total number of items will be returned, without any of the actual objects. (default to false)
     * @param {Date} opts.createdAtLt Return device rules created before this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Number} opts.limit Limit number of returned items (1-1000). Example: \"10\". (default to 10)
     * @param {Number} opts.skip Skip first number of items (0-1000). To iterate over more than 1000 items,  use \"cursor\". Example: \"150\".
     * @param {Boolean} opts.skipCount If true, total number of items will not be calculated, which speeds up execution time. (default to null)
     * @param {module:model/String} opts.sortOrder Sort direction. Example: \"asc\". (default to null)
     * @param {Date} opts.createdAtLte Return device rules created before or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<module:model/String>} opts.accessPermissions Access permission in. Example: \"Read-Only\".
     * @param {Array.<module:model/String>} opts.scopes Return only device rules in this scope. Example: \"site\".
     * @param {Array.<module:model/String>} opts.statuses Return device rules with the filtered status. Example: \"Enabled\".
     * @param {Array.<String>} opts.deviceIds Return device rules with the filtered device id. Example: \"02\".
     * @param {Array.<String>} opts.productIds Return device rules with the filtered product id. Example: \"02\".
     * @param {Boolean} opts.disablePagination If true, all rules for requested scope will be returned
     * @param {String} opts.ruleName Return device rules with the filtered rule name.
     * @param {module:model/String} opts.sortBy The column to sort the results by. Example: \"id\". (default to null)
     * @param {Array.<String>} opts.bluetoothAddresses Return device rules with the filtered bluetooth addresses.
     * @param {Array.<String>} opts.vendorIds Return device rules with the filtered vendor id.
     * @param {Boolean} opts.tenant Indicates a tenant scope request
     * @param {String} opts.createdAtBetween Return device rules created within this range (inclusive). Example: \"1514978764288-1514978999999\".
     * @param {Array.<String>} opts.groupIds List of Group IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.gattServices Return device rules with the filtered GATT services.
     * @param {Date} opts.createdAtGte Return device rules created after or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.siteIds List of Site IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.accountIds List of Account IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.deviceInformationServiceInfoKeys Return device rules with the filtered device information service info keys.
     * @param {Array.<String>} opts.manufacturerNames Return device rules with the filtered manufacturer names.
     * @param {Array.<String>} opts.serviceClasses Return device rules with the filtered service class. Example: \"02\".
     * @param {Array.<String>} opts.minorClasses Return device rules with the filtered minor classes.
     * @param {module:api/DeviceControlApi~webApiDeviceControlGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceControlSchemasDeviceSchemaMany200}
     */
    this.webApiDeviceControlGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'cursor': opts['cursor'],
        'createdAt__gt': opts['createdAtGt'],
        'query': opts['query'],
        'countOnly': opts['countOnly'],
        'createdAt__lt': opts['createdAtLt'],
        'limit': opts['limit'],
        'skip': opts['skip'],
        'skipCount': opts['skipCount'],
        'sortOrder': opts['sortOrder'],
        'createdAt__lte': opts['createdAtLte'],
        'disablePagination': opts['disablePagination'],
        'ruleName': opts['ruleName'],
        'sortBy': opts['sortBy'],
        'tenant': opts['tenant'],
        'createdAt__between': opts['createdAtBetween'],
        'createdAt__gte': opts['createdAtGte'],
      };
      var collectionQueryParams = {
        'versions': {
          value: opts['versions'],
          collectionFormat: 'csv'
        },
        'uids': {
          value: opts['uids'],
          collectionFormat: 'csv'
        },
        'actions': {
          value: opts['actions'],
          collectionFormat: 'csv'
        },
        'deviceNames': {
          value: opts['deviceNames'],
          collectionFormat: 'csv'
        },
        'interfaces': {
          value: opts['interfaces'],
          collectionFormat: 'csv'
        },
        'deviceClasses': {
          value: opts['deviceClasses'],
          collectionFormat: 'csv'
        },
        'ids': {
          value: opts['ids'],
          collectionFormat: 'csv'
        },
        'accessPermissions': {
          value: opts['accessPermissions'],
          collectionFormat: 'csv'
        },
        'scopes': {
          value: opts['scopes'],
          collectionFormat: 'csv'
        },
        'statuses': {
          value: opts['statuses'],
          collectionFormat: 'csv'
        },
        'deviceIds': {
          value: opts['deviceIds'],
          collectionFormat: 'csv'
        },
        'productIds': {
          value: opts['productIds'],
          collectionFormat: 'csv'
        },
        'bluetoothAddresses': {
          value: opts['bluetoothAddresses'],
          collectionFormat: 'csv'
        },
        'vendorIds': {
          value: opts['vendorIds'],
          collectionFormat: 'csv'
        },
        'groupIds': {
          value: opts['groupIds'],
          collectionFormat: 'csv'
        },
        'gattServices': {
          value: opts['gattServices'],
          collectionFormat: 'csv'
        },
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
        'deviceInformationServiceInfoKeys': {
          value: opts['deviceInformationServiceInfoKeys'],
          collectionFormat: 'csv'
        },
        'manufacturerNames': {
          value: opts['manufacturerNames'],
          collectionFormat: 'csv'
        },
        'serviceClasses': {
          value: opts['serviceClasses'],
          collectionFormat: 'csv'
        },
        'minorClasses': {
          value: opts['minorClasses'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeviceControlSchemasDeviceSchemaMany200;

      return this.apiClient.callApi(
        '/web/api/v2.1/device-control', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiDeviceControlMoveRulesPost operation.
     * @callback module:api/DeviceControlApi~webApiDeviceControlMoveRulesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AffectedResultsSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move rules
     * You can move a set of Device Control rules to other Accounts, Sites, or Groups. This command removes the rule from the source and copies to the targets.   Define the rules to copy with the filters. To get the values for devices, run \"unscoped\". To get Account IDs, run \"accounts\". To get Site IDs, run \"sites\".  Device Control requires Control SKU. Linux Agents do not support Device Control.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeviceControlSchemasCopyRuleSchema} opts.body 
     * @param {module:api/DeviceControlApi~webApiDeviceControlMoveRulesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AffectedResultsSchema200}
     */
    this.webApiDeviceControlMoveRulesPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AffectedResultsSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/device-control/move-rules', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiDeviceControlPost operation.
     * @callback module:api/DeviceControlApi~webApiDeviceControlPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceControlSchemasDeviceSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Device Control Rule
     * Use this command to create a new Device Control rule. These rules allow or block devices, based on device identifiers. Rules apply to a scope: Global (tenant), Account, Site, or Group. To learn details of the fields, see https://support.sentinelone.com/hc/en-us/articles/360023338494. <br>Recommended: Before you begin, see Device Control Known Limitations: https://support.sentinelone.com/hc/en-us/articles/360021104114.<br>Device Control requires Control SKU. Linux Agents do not support Device Control.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeviceControlSchemasPostDeviceSchema} opts.body 
     * @param {module:api/DeviceControlApi~webApiDeviceControlPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceControlSchemasDeviceSchema200}
     */
    this.webApiDeviceControlPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeviceControlSchemasDeviceSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/device-control', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiDeviceControlReorderPut operation.
     * @callback module:api/DeviceControlApi~webApiDeviceControlReorderPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reorder Rules
     * When an external device connects to an endpoint, the SentinelOne Agent looks at the rules based on their order in the Device Control policy, from the top to the bottom. When the Agent finds a rule that matches the device identifiers of a connected device, that rule is applied. The Agent does not continue to the lower rules in the list.  Use this command to change the order of rules for a specific scope.   Device Control requires Control SKU. Linux Agents do not support Device Control.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeviceControlSchemasReorderSchema} opts.body 
     * @param {module:api/DeviceControlApi~webApiDeviceControlReorderPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiDeviceControlReorderPut = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/device-control/reorder', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiDeviceControlruleIdPut operation.
     * @callback module:api/DeviceControlApi~webApiDeviceControlruleIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceControlSchemasDeviceSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Device Rule
     * Change the Device Control rule that matches the filter. To learn more about the fields, see https://support.sentinelone.com/hc/en-us/articles/360023338494.
     * @param {String} ruleId Rule ID. Example: \"225494730938493804\".
     * @param {Object} opts Optional parameters
     * @param {module:model/DeviceControlSchemasPutDeviceSchema} opts.body 
     * @param {module:api/DeviceControlApi~webApiDeviceControlruleIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceControlSchemasDeviceSchema200}
     */
    this.webApiDeviceControlruleIdPut = function(ruleId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling webApiDeviceControlruleIdPut");
      }


      var pathParams = {
        'rule_id': ruleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeviceControlSchemasDeviceSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/device-control/{rule_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
