/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AffectedResultsSchema200', 'model/LocationsSchemasDeleteLocationsSchema', 'model/LocationsSchemasLocationViewSchema200', 'model/LocationsSchemasLocationViewSchemaMany200', 'model/LocationsSchemasNewLocationSchema', 'model/LocationsSchemasUpdateLocationSchema', 'model/NoDataSchema400', 'model/NoDataSchema401', 'model/NoDataSchema403', 'model/NoDataSchema404'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AffectedResultsSchema200'), require('../model/LocationsSchemasDeleteLocationsSchema'), require('../model/LocationsSchemasLocationViewSchema200'), require('../model/LocationsSchemasLocationViewSchemaMany200'), require('../model/LocationsSchemasNewLocationSchema'), require('../model/LocationsSchemasUpdateLocationSchema'), require('../model/NoDataSchema400'), require('../model/NoDataSchema401'), require('../model/NoDataSchema403'), require('../model/NoDataSchema404'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.LocationsApi = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.AffectedResultsSchema200, root.S1MgmtApi.LocationsSchemasDeleteLocationsSchema, root.S1MgmtApi.LocationsSchemasLocationViewSchema200, root.S1MgmtApi.LocationsSchemasLocationViewSchemaMany200, root.S1MgmtApi.LocationsSchemasNewLocationSchema, root.S1MgmtApi.LocationsSchemasUpdateLocationSchema, root.S1MgmtApi.NoDataSchema400, root.S1MgmtApi.NoDataSchema401, root.S1MgmtApi.NoDataSchema403, root.S1MgmtApi.NoDataSchema404);
  }
}(this, function(ApiClient, AffectedResultsSchema200, LocationsSchemasDeleteLocationsSchema, LocationsSchemasLocationViewSchema200, LocationsSchemasLocationViewSchemaMany200, LocationsSchemasNewLocationSchema, LocationsSchemasUpdateLocationSchema, NoDataSchema400, NoDataSchema401, NoDataSchema403, NoDataSchema404) {
  'use strict';

  /**
   * Locations service.
   * @module api/LocationsApi
   * @version 2.1
   */

  /**
   * Constructs a new LocationsApi. 
   * @alias module:api/LocationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the webApiLocationsDelete operation.
     * @callback module:api/LocationsApi~webApiLocationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AffectedResultsSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Locations
     * Delete location definitions of a given location. To get location IDs, run \"locations\".
     * @param {Object} opts Optional parameters
     * @param {module:model/LocationsSchemasDeleteLocationsSchema} opts.body 
     * @param {module:api/LocationsApi~webApiLocationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AffectedResultsSchema200}
     */
    this.webApiLocationsDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AffectedResultsSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/locations', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiLocationsGet operation.
     * @callback module:api/LocationsApi~webApiLocationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocationsSchemasLocationViewSchemaMany200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Locations
     * Get the locations of Agents in a given scope that match the filter.  Agent locations are based on endpoint network parameters (IP, DNS, NIC, Registry Key, or SentinelOne connection set for all true, at least one true, or none true and applied to a Site, Account, or Global). Agents detect their location settings and apply Firewall Control rules that have Location Aware parameters that match the Agent location. Agents can be in multiple locations at the same time. If an Agent that supports Locations does not detect that it is in a defined location, it uses the Firewall rules assigned to the Fallback location. <br>Use this command with a filter for \"hasFirewallRules\" to find Locations that do not have matching Firewall Control rules. The response to this request includes the ID of the location, which you can use in other commands.<br>Firewall Control and Location Awareness require Control SKU.
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor Cursor position returned by the last request. Use to iterate over more than 1000 items. Example: \"YWdlbnRfaWQ6NTgwMjkzODE=\". (default to null)
     * @param {Array.<String>} opts.nameContains Free-text filter by location name (supports multiple values). Example: \"office\".
     * @param {Array.<String>} opts.registryKeyContains Free-text filter by registry key (supports multiple values). Example: \"system\\software,sentinel\".
     * @param {Array.<String>} opts.ids Filter results by location IDs. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.creatorContains Free-text filter by creator of the location (supports multiple values). Example: \"max,mike\".
     * @param {Boolean} opts.countOnly If true, only total number of items will be returned, without any of the actual objects. (default to false)
     * @param {Number} opts.limit Limit number of returned items (1-1000). Example: \"10\". (default to 10)
     * @param {Number} opts.skip Skip first number of items (0-1000). To iterate over more than 1000 items,  use \"cursor\". Example: \"150\".
     * @param {Boolean} opts.skipCount If true, total number of items will not be calculated, which speeds up execution time. (default to null)
     * @param {module:model/String} opts.sortOrder Sort direction. Example: \"asc\". (default to null)
     * @param {Array.<module:model/String>} opts.scopes Filter results by scope. Example: \"site\".
     * @param {Boolean} opts.hasFirewallRules Filter by locations with/without firewall rules associated to them
     * @param {module:model/String} opts.sortBy The column to sort the results by. Example: \"id\". (default to null)
     * @param {Array.<String>} opts.groupIds List of Group IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.siteIds List of Site IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.accountIds List of Account IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.descriptionContains Free-text filter by description (supports multiple values). Example: \"out of office\".
     * @param {Array.<String>} opts.hostnameContains Free-text filter by hostname (supports multiple values). Example: \"sentinelone.com,localhost\".
     * @param {Array.<String>} opts.scopeNameContains Free-text filter by scope name (supports multiple values). Example: \"my_group,my_site\".
     * @param {Array.<String>} opts.ipAddressContains Free-text filter by IP address (supports multiple values). Example: \"29.213.22.17\".
     * @param {module:api/LocationsApi~webApiLocationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocationsSchemasLocationViewSchemaMany200}
     */
    this.webApiLocationsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'cursor': opts['cursor'],
        'countOnly': opts['countOnly'],
        'limit': opts['limit'],
        'skip': opts['skip'],
        'skipCount': opts['skipCount'],
        'sortOrder': opts['sortOrder'],
        'hasFirewallRules': opts['hasFirewallRules'],
        'sortBy': opts['sortBy'],
      };
      var collectionQueryParams = {
        'name__contains': {
          value: opts['nameContains'],
          collectionFormat: 'csv'
        },
        'registryKey__contains': {
          value: opts['registryKeyContains'],
          collectionFormat: 'csv'
        },
        'ids': {
          value: opts['ids'],
          collectionFormat: 'csv'
        },
        'creator__contains': {
          value: opts['creatorContains'],
          collectionFormat: 'csv'
        },
        'scopes': {
          value: opts['scopes'],
          collectionFormat: 'csv'
        },
        'groupIds': {
          value: opts['groupIds'],
          collectionFormat: 'csv'
        },
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
        'description__contains': {
          value: opts['descriptionContains'],
          collectionFormat: 'csv'
        },
        'hostname__contains': {
          value: opts['hostnameContains'],
          collectionFormat: 'csv'
        },
        'scopeName__contains': {
          value: opts['scopeNameContains'],
          collectionFormat: 'csv'
        },
        'ipAddress__contains': {
          value: opts['ipAddressContains'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = LocationsSchemasLocationViewSchemaMany200;

      return this.apiClient.callApi(
        '/web/api/v2.1/locations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiLocationsPost operation.
     * @callback module:api/LocationsApi~webApiLocationsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocationsSchemasLocationViewSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Location
     * Create a location that defines parameters of Agents in a scope filter. Parameters include: <br>* ipAddresses - The Agent compares the endpoint active IPv4 or IPv6 addresses to the IP addresses, ranges, and CIDRs defined for the location. <br>* dnsServers - The Agent compares the configured DNS servers of the endpoint to the DNS servers defined for the location.<br>* dnsLookup - The Agent resolves the FQDN of the endpoint to IPv4 or IPv6 addresses and compares them to the addresses configured in the location setting.<br>* networkInterfaces - The Agent determines if the endpoint is connected to the network over a wireless connection. If one connected interface is wireless, the endpoint is considered wireless.<br>* serverConnectivity - The Agent reports if it is connected to its Management.<br>* registryKeys - The Agent compares the endpoint registry keys in HKEY_LOCAL_MACHINE\\SOFTWARE with the registry key of the location definition. <br>When you set a location parameter, also set the operator to ALL, NONE, or at least 1. <br>The serverConnectivity parameter takes \"enabled\" (true or false) and \"value\" (connected or disconnected). <br>The networkInterfaces parameter takes \"enabled\" (true or false) and \"value\" (wired or wireless).
     * @param {Object} opts Optional parameters
     * @param {module:model/LocationsSchemasNewLocationSchema} opts.body 
     * @param {module:api/LocationsApi~webApiLocationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocationsSchemasLocationViewSchema200}
     */
    this.webApiLocationsPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LocationsSchemasLocationViewSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/locations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiLocationslocationIdPut operation.
     * @callback module:api/LocationsApi~webApiLocationslocationIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocationsSchemasLocationViewSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Location
     * Change the parameter values of a location definition. See Create Location.
     * @param {String} locationId Location ID. Example: \"225494730938493804\".
     * @param {Object} opts Optional parameters
     * @param {module:model/LocationsSchemasUpdateLocationSchema} opts.body 
     * @param {module:api/LocationsApi~webApiLocationslocationIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocationsSchemasLocationViewSchema200}
     */
    this.webApiLocationslocationIdPut = function(locationId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling webApiLocationslocationIdPut");
      }


      var pathParams = {
        'location_id': locationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LocationsSchemasLocationViewSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/locations/{location_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
