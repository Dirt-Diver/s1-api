/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/V21ModelsCreatePolicyRequest', 'model/V21ModelsEmptyResponse', 'model/V21ModelsEndpointActionRequest', 'model/V21ModelsGetAvailablePackagesResponse', 'model/V21ModelsGetPoliciesResponse', 'model/V21ModelsHasPoliciesRequest', 'model/V21ModelsHasPoliciesResponse', 'model/V21ModelsOsCountResult', 'model/V21ModelsReorderPolicyRequest', 'model/V21ModelsScopeInheritanceRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/V21ModelsCreatePolicyRequest'), require('../model/V21ModelsEmptyResponse'), require('../model/V21ModelsEndpointActionRequest'), require('../model/V21ModelsGetAvailablePackagesResponse'), require('../model/V21ModelsGetPoliciesResponse'), require('../model/V21ModelsHasPoliciesRequest'), require('../model/V21ModelsHasPoliciesResponse'), require('../model/V21ModelsOsCountResult'), require('../model/V21ModelsReorderPolicyRequest'), require('../model/V21ModelsScopeInheritanceRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.AutoUpgradePolicyApi = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.V21ModelsCreatePolicyRequest, root.S1MgmtApi.V21ModelsEmptyResponse, root.S1MgmtApi.V21ModelsEndpointActionRequest, root.S1MgmtApi.V21ModelsGetAvailablePackagesResponse, root.S1MgmtApi.V21ModelsGetPoliciesResponse, root.S1MgmtApi.V21ModelsHasPoliciesRequest, root.S1MgmtApi.V21ModelsHasPoliciesResponse, root.S1MgmtApi.V21ModelsOsCountResult, root.S1MgmtApi.V21ModelsReorderPolicyRequest, root.S1MgmtApi.V21ModelsScopeInheritanceRequest);
  }
}(this, function(ApiClient, V21ModelsCreatePolicyRequest, V21ModelsEmptyResponse, V21ModelsEndpointActionRequest, V21ModelsGetAvailablePackagesResponse, V21ModelsGetPoliciesResponse, V21ModelsHasPoliciesRequest, V21ModelsHasPoliciesResponse, V21ModelsOsCountResult, V21ModelsReorderPolicyRequest, V21ModelsScopeInheritanceRequest) {
  'use strict';

  /**
   * AutoUpgradePolicy service.
   * @module api/AutoUpgradePolicyApi
   * @version 2.1
   */

  /**
   * Constructs a new AutoUpgradePolicyApi. 
   * @alias module:api/AutoUpgradePolicyApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the webApiUpgradePolicyAvailablePackagesGet operation.
     * @callback module:api/AutoUpgradePolicyApi~webApiUpgradePolicyAvailablePackagesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V21ModelsGetAvailablePackagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Available Packages
     * Get Available Packages
     * @param {String} scopeLevel Scope level, one of 'account', 'group', 'site' or 'tenant'
     * @param {String} osType OS type, one of 'linux', 'macos' or 'windows'
     * @param {Object} opts Optional parameters
     * @param {String} opts.scopeId Scope ID
     * @param {String} opts.displayNameContains Partially match the name of the package, e.g. '22.1 GA'
     * @param {module:api/AutoUpgradePolicyApi~webApiUpgradePolicyAvailablePackagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V21ModelsGetAvailablePackagesResponse}
     */
    this.webApiUpgradePolicyAvailablePackagesGet = function(scopeLevel, osType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'scopeLevel' is set
      if (scopeLevel === undefined || scopeLevel === null) {
        throw new Error("Missing the required parameter 'scopeLevel' when calling webApiUpgradePolicyAvailablePackagesGet");
      }

      // verify the required parameter 'osType' is set
      if (osType === undefined || osType === null) {
        throw new Error("Missing the required parameter 'osType' when calling webApiUpgradePolicyAvailablePackagesGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'scopeLevel': scopeLevel,
        'scopeId': opts['scopeId'],
        'osType': osType,
        'displayName__contains': opts['displayNameContains'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = V21ModelsGetAvailablePackagesResponse;

      return this.apiClient.callApi(
        '/web/api/v2.1/upgrade-policy/available-packages', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUpgradePolicyHasPolicyPost operation.
     * @callback module:api/AutoUpgradePolicyApi~webApiUpgradePolicyHasPolicyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V21ModelsHasPoliciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Has Policy
     * Has policy
     * @param {module:model/V21ModelsHasPoliciesRequest} payload Policy payload
     * @param {module:api/AutoUpgradePolicyApi~webApiUpgradePolicyHasPolicyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V21ModelsHasPoliciesResponse}
     */
    this.webApiUpgradePolicyHasPolicyPost = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling webApiUpgradePolicyHasPolicyPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V21ModelsHasPoliciesResponse;

      return this.apiClient.callApi(
        '/web/api/v2.1/upgrade-policy/has-policy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUpgradePolicyParentPoliciesGet operation.
     * @callback module:api/AutoUpgradePolicyApi~webApiUpgradePolicyParentPoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V21ModelsGetPoliciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Parent Policies
     * Get paginated and ordered parent policies by a given scope
     * @param {String} scopeLevel Scope level, one of 'account', 'group', 'site' or 'tenant'
     * @param {String} osType OS type, one of 'linux', 'macos' or 'windows'
     * @param {Number} limit Limit number of returned items. Should be more than 1. Example: '10'.
     * @param {Number} skip Skip first number of items. Example: '0'.
     * @param {String} sortBy The column to sort the results by. Example: 'priority'.
     * @param {String} sortOrder Sort direction. Could be 'asc' or 'desc'.
     * @param {Object} opts Optional parameters
     * @param {String} opts.scopeId Scope ID
     * @param {module:api/AutoUpgradePolicyApi~webApiUpgradePolicyParentPoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V21ModelsGetPoliciesResponse}
     */
    this.webApiUpgradePolicyParentPoliciesGet = function(scopeLevel, osType, limit, skip, sortBy, sortOrder, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'scopeLevel' is set
      if (scopeLevel === undefined || scopeLevel === null) {
        throw new Error("Missing the required parameter 'scopeLevel' when calling webApiUpgradePolicyParentPoliciesGet");
      }

      // verify the required parameter 'osType' is set
      if (osType === undefined || osType === null) {
        throw new Error("Missing the required parameter 'osType' when calling webApiUpgradePolicyParentPoliciesGet");
      }

      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling webApiUpgradePolicyParentPoliciesGet");
      }

      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling webApiUpgradePolicyParentPoliciesGet");
      }

      // verify the required parameter 'sortBy' is set
      if (sortBy === undefined || sortBy === null) {
        throw new Error("Missing the required parameter 'sortBy' when calling webApiUpgradePolicyParentPoliciesGet");
      }

      // verify the required parameter 'sortOrder' is set
      if (sortOrder === undefined || sortOrder === null) {
        throw new Error("Missing the required parameter 'sortOrder' when calling webApiUpgradePolicyParentPoliciesGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'scopeLevel': scopeLevel,
        'scopeId': opts['scopeId'],
        'osType': osType,
        'limit': limit,
        'skip': skip,
        'sortBy': sortBy,
        'sortOrder': sortOrder,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = V21ModelsGetPoliciesResponse;

      return this.apiClient.callApi(
        '/web/api/v2.1/upgrade-policy/parent-policies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUpgradePolicyPoliciesCountGet operation.
     * @callback module:api/AutoUpgradePolicyApi~webApiUpgradePolicyPoliciesCountGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V21ModelsOsCountResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Policies OS Count
     * Get the number of policies for each OS, for a given scope level and id
     * @param {String} scopeLevel Scope level, one of 'account', 'group', 'site' or 'tenant'
     * @param {Object} opts Optional parameters
     * @param {String} opts.scopeId Scope ID
     * @param {module:api/AutoUpgradePolicyApi~webApiUpgradePolicyPoliciesCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V21ModelsOsCountResult}
     */
    this.webApiUpgradePolicyPoliciesCountGet = function(scopeLevel, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'scopeLevel' is set
      if (scopeLevel === undefined || scopeLevel === null) {
        throw new Error("Missing the required parameter 'scopeLevel' when calling webApiUpgradePolicyPoliciesCountGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'scopeLevel': scopeLevel,
        'scopeId': opts['scopeId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = V21ModelsOsCountResult;

      return this.apiClient.callApi(
        '/web/api/v2.1/upgrade-policy/policies-count', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUpgradePolicyPoliciesGet operation.
     * @callback module:api/AutoUpgradePolicyApi~webApiUpgradePolicyPoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V21ModelsGetPoliciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Policies
     * Get paginated and ordered policies by a given scope
     * @param {String} scopeLevel Scope level, one of 'account', 'group', 'site' or 'tenant'
     * @param {String} osType OS type, one of 'linux', 'macos' or 'windows'
     * @param {Number} limit Limit number of returned items. Should be more than 1. Example: '10'
     * @param {Number} skip Skip first number of items. Example: '0'.
     * @param {String} sortBy The column to sort the results by. Example: 'priority'.
     * @param {String} sortOrder Sort direction. Could be 'asc' or 'desc'.
     * @param {Object} opts Optional parameters
     * @param {String} opts.scopeId Scope ID
     * @param {module:api/AutoUpgradePolicyApi~webApiUpgradePolicyPoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V21ModelsGetPoliciesResponse}
     */
    this.webApiUpgradePolicyPoliciesGet = function(scopeLevel, osType, limit, skip, sortBy, sortOrder, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'scopeLevel' is set
      if (scopeLevel === undefined || scopeLevel === null) {
        throw new Error("Missing the required parameter 'scopeLevel' when calling webApiUpgradePolicyPoliciesGet");
      }

      // verify the required parameter 'osType' is set
      if (osType === undefined || osType === null) {
        throw new Error("Missing the required parameter 'osType' when calling webApiUpgradePolicyPoliciesGet");
      }

      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling webApiUpgradePolicyPoliciesGet");
      }

      // verify the required parameter 'skip' is set
      if (skip === undefined || skip === null) {
        throw new Error("Missing the required parameter 'skip' when calling webApiUpgradePolicyPoliciesGet");
      }

      // verify the required parameter 'sortBy' is set
      if (sortBy === undefined || sortBy === null) {
        throw new Error("Missing the required parameter 'sortBy' when calling webApiUpgradePolicyPoliciesGet");
      }

      // verify the required parameter 'sortOrder' is set
      if (sortOrder === undefined || sortOrder === null) {
        throw new Error("Missing the required parameter 'sortOrder' when calling webApiUpgradePolicyPoliciesGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'scopeLevel': scopeLevel,
        'scopeId': opts['scopeId'],
        'osType': osType,
        'limit': limit,
        'skip': skip,
        'sortBy': sortBy,
        'sortOrder': sortOrder,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = V21ModelsGetPoliciesResponse;

      return this.apiClient.callApi(
        '/web/api/v2.1/upgrade-policy/policies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUpgradePolicyPoliciesPost operation.
     * @callback module:api/AutoUpgradePolicyApi~webApiUpgradePolicyPoliciesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V21ModelsEmptyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate Policies
     * Deactivate all policies
     * @param {String} scopeLevel Scope level, one of 'account', 'group', 'site' or 'tenant'
     * @param {String} osType OS type, one of 'linux', 'macos' or 'windows'
     * @param {Object} opts Optional parameters
     * @param {String} opts.scopeId Scope ID
     * @param {module:api/AutoUpgradePolicyApi~webApiUpgradePolicyPoliciesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V21ModelsEmptyResponse}
     */
    this.webApiUpgradePolicyPoliciesPost = function(scopeLevel, osType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'scopeLevel' is set
      if (scopeLevel === undefined || scopeLevel === null) {
        throw new Error("Missing the required parameter 'scopeLevel' when calling webApiUpgradePolicyPoliciesPost");
      }

      // verify the required parameter 'osType' is set
      if (osType === undefined || osType === null) {
        throw new Error("Missing the required parameter 'osType' when calling webApiUpgradePolicyPoliciesPost");
      }


      var pathParams = {
      };
      var queryParams = {
        'scopeLevel': scopeLevel,
        'scopeId': opts['scopeId'],
        'osType': osType,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = [];
      var returnType = V21ModelsEmptyResponse;

      return this.apiClient.callApi(
        '/web/api/v2.1/upgrade-policy/policies', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUpgradePolicyPolicyPolicyidPost operation.
     * @callback module:api/AutoUpgradePolicyApi~webApiUpgradePolicyPolicyPolicyidPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V21ModelsEmptyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Policy Action
     * Perform action on a certain policy
     * @param {module:model/V21ModelsEndpointActionRequest} payload Policy payload
     * @param {String} policyid Policy id
     * @param {module:api/AutoUpgradePolicyApi~webApiUpgradePolicyPolicyPolicyidPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V21ModelsEmptyResponse}
     */
    this.webApiUpgradePolicyPolicyPolicyidPost = function(payload, policyid, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling webApiUpgradePolicyPolicyPolicyidPost");
      }

      // verify the required parameter 'policyid' is set
      if (policyid === undefined || policyid === null) {
        throw new Error("Missing the required parameter 'policyid' when calling webApiUpgradePolicyPolicyPolicyidPost");
      }


      var pathParams = {
      };
      var queryParams = {
        'policyid': policyid,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = V21ModelsEmptyResponse;

      return this.apiClient.callApi(
        '/web/api/v2.1/upgrade-policy/policy/:policyid', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUpgradePolicyPolicyPolicyidPut operation.
     * @callback module:api/AutoUpgradePolicyApi~webApiUpgradePolicyPolicyPolicyidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V21ModelsEmptyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Policy
     * Update existing policy
     * @param {module:model/V21ModelsCreatePolicyRequest} payload Policy payload
     * @param {String} policyid Policy id
     * @param {module:api/AutoUpgradePolicyApi~webApiUpgradePolicyPolicyPolicyidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V21ModelsEmptyResponse}
     */
    this.webApiUpgradePolicyPolicyPolicyidPut = function(payload, policyid, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling webApiUpgradePolicyPolicyPolicyidPut");
      }

      // verify the required parameter 'policyid' is set
      if (policyid === undefined || policyid === null) {
        throw new Error("Missing the required parameter 'policyid' when calling webApiUpgradePolicyPolicyPolicyidPut");
      }


      var pathParams = {
      };
      var queryParams = {
        'policyid': policyid,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = V21ModelsEmptyResponse;

      return this.apiClient.callApi(
        '/web/api/v2.1/upgrade-policy/policy/:policyid', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUpgradePolicyPolicyPost operation.
     * @callback module:api/AutoUpgradePolicyApi~webApiUpgradePolicyPolicyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V21ModelsEmptyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Policy
     * Add policy
     * @param {module:model/V21ModelsCreatePolicyRequest} payload Policy payload
     * @param {module:api/AutoUpgradePolicyApi~webApiUpgradePolicyPolicyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V21ModelsEmptyResponse}
     */
    this.webApiUpgradePolicyPolicyPost = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling webApiUpgradePolicyPolicyPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = V21ModelsEmptyResponse;

      return this.apiClient.callApi(
        '/web/api/v2.1/upgrade-policy/policy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUpgradePolicyReorderPut operation.
     * @callback module:api/AutoUpgradePolicyApi~webApiUpgradePolicyReorderPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V21ModelsEmptyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reorder Policies
     * Reorder policies
     * @param {module:model/V21ModelsReorderPolicyRequest} payload Policy payload
     * @param {module:api/AutoUpgradePolicyApi~webApiUpgradePolicyReorderPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V21ModelsEmptyResponse}
     */
    this.webApiUpgradePolicyReorderPut = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling webApiUpgradePolicyReorderPut");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = V21ModelsEmptyResponse;

      return this.apiClient.callApi(
        '/web/api/v2.1/upgrade-policy/reorder', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiUpgradePolicySetInheritingPut operation.
     * @callback module:api/AutoUpgradePolicyApi~webApiUpgradePolicySetInheritingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V21ModelsEmptyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Scope Inheriting
     * Set Scope Inheriting
     * @param {module:model/V21ModelsScopeInheritanceRequest} payload payload
     * @param {module:api/AutoUpgradePolicyApi~webApiUpgradePolicySetInheritingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V21ModelsEmptyResponse}
     */
    this.webApiUpgradePolicySetInheritingPut = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling webApiUpgradePolicySetInheritingPut");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = V21ModelsEmptyResponse;

      return this.apiClient.callApi(
        '/web/api/v2.1/upgrade-policy/set-inheriting', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
