/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/NoDataSchema400', 'model/NoDataSchema401', 'model/NoDataSchema404', 'model/RawDataSchema200', 'model/ReportsInsightData200', 'model/ReportsReportDataSchemaMany200', 'model/ReportsReportDeleteSchema', 'model/ReportsReportTaskDataSchema200', 'model/ReportsReportTaskDataSchemaMany200', 'model/ReportsReportTaskDeleteSchema', 'model/ReportsReportTasksPostSchema', 'model/ReportsReportTasksPutSchema', 'model/SuccessResponseSchema200'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/NoDataSchema400'), require('../model/NoDataSchema401'), require('../model/NoDataSchema404'), require('../model/RawDataSchema200'), require('../model/ReportsInsightData200'), require('../model/ReportsReportDataSchemaMany200'), require('../model/ReportsReportDeleteSchema'), require('../model/ReportsReportTaskDataSchema200'), require('../model/ReportsReportTaskDataSchemaMany200'), require('../model/ReportsReportTaskDeleteSchema'), require('../model/ReportsReportTasksPostSchema'), require('../model/ReportsReportTasksPutSchema'), require('../model/SuccessResponseSchema200'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.ReportsApi = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.NoDataSchema400, root.S1MgmtApi.NoDataSchema401, root.S1MgmtApi.NoDataSchema404, root.S1MgmtApi.RawDataSchema200, root.S1MgmtApi.ReportsInsightData200, root.S1MgmtApi.ReportsReportDataSchemaMany200, root.S1MgmtApi.ReportsReportDeleteSchema, root.S1MgmtApi.ReportsReportTaskDataSchema200, root.S1MgmtApi.ReportsReportTaskDataSchemaMany200, root.S1MgmtApi.ReportsReportTaskDeleteSchema, root.S1MgmtApi.ReportsReportTasksPostSchema, root.S1MgmtApi.ReportsReportTasksPutSchema, root.S1MgmtApi.SuccessResponseSchema200);
  }
}(this, function(ApiClient, NoDataSchema400, NoDataSchema401, NoDataSchema404, RawDataSchema200, ReportsInsightData200, ReportsReportDataSchemaMany200, ReportsReportDeleteSchema, ReportsReportTaskDataSchema200, ReportsReportTaskDataSchemaMany200, ReportsReportTaskDeleteSchema, ReportsReportTasksPostSchema, ReportsReportTasksPutSchema, SuccessResponseSchema200) {
  'use strict';

  /**
   * Reports service.
   * @module api/ReportsApi
   * @version 2.1
   */

  /**
   * Constructs a new ReportsApi. 
   * @alias module:api/ReportsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the webApiReportTasksGet operation.
     * @callback module:api/ReportsApi~webApiReportTasksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportsReportTaskDataSchemaMany200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Report Tasks
     * Get the tasks that were done to generate reports and to schedule future reports. Best Practice: Use a filter. Each task includes many lines of data and can quickly fill the page limit. Use this command to get the ID of a report task to use in other commands.
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor Cursor position returned by the last request. Use to iterate over more than 1000 items. Example: \"YWdlbnRfaWQ6NTgwMjkzODE=\". (default to null)
     * @param {String} opts.query Query
     * @param {Array.<String>} opts.ids Id in. Example: \"225494730938493804,225494730938493915\".
     * @param {Boolean} opts.countOnly If true, only total number of items will be returned, without any of the actual objects. (default to false)
     * @param {Number} opts.limit Limit number of returned items (1-1000). Example: \"10\". (default to 10)
     * @param {Number} opts.skip Skip first number of items (0-1000). To iterate over more than 1000 items,  use \"cursor\". Example: \"150\".
     * @param {String} opts.id Id. Example: \"225494730938493804\".
     * @param {Boolean} opts.skipCount If true, total number of items will not be calculated, which speeds up execution time. (default to null)
     * @param {String} opts.creatorId Creator id. Example: \"225494730938493804\".
     * @param {module:model/String} opts.sortOrder Sort direction. Example: \"asc\". (default to null)
     * @param {Date} opts.createdAtLte Created at lte. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {module:model/String} opts.scheduleType Report type. Example: \"manually\".
     * @param {module:model/String} opts.sortBy The column to sort the results by. Example: \"id\". (default to null)
     * @param {module:model/String} opts.frequency Frequency. Example: \"manually\".
     * @param {module:model/String} opts.scope Scope. Example: \"group\".
     * @param {Date} opts.createdAtGte Created at gte. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.siteIds List of Site IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.accountIds List of Account IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {String} opts.name Name
     * @param {String} opts.day Day
     * @param {String} opts.creatorName Creator name
     * @param {module:api/ReportsApi~webApiReportTasksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportsReportTaskDataSchemaMany200}
     */
    this.webApiReportTasksGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'cursor': opts['cursor'],
        'query': opts['query'],
        'countOnly': opts['countOnly'],
        'limit': opts['limit'],
        'skip': opts['skip'],
        'id': opts['id'],
        'skipCount': opts['skipCount'],
        'creatorId': opts['creatorId'],
        'sortOrder': opts['sortOrder'],
        'createdAt__lte': opts['createdAtLte'],
        'scheduleType': opts['scheduleType'],
        'sortBy': opts['sortBy'],
        'frequency': opts['frequency'],
        'scope': opts['scope'],
        'createdAt__gte': opts['createdAtGte'],
        'name': opts['name'],
        'day': opts['day'],
        'creatorName': opts['creatorName'],
      };
      var collectionQueryParams = {
        'ids': {
          value: opts['ids'],
          collectionFormat: 'csv'
        },
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ReportsReportTaskDataSchemaMany200;

      return this.apiClient.callApi(
        '/web/api/v2.1/report-tasks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiReportTasksPost operation.
     * @callback module:api/ReportsApi~webApiReportTasksPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Report Task
     * Create a task to generate a report immediately, one time in the future, or on a schedule. Best Practice: Get Report Tasks first, to have a basis for a new task.
     * @param {Object} opts Optional parameters
     * @param {module:model/ReportsReportTasksPostSchema} opts.body 
     * @param {module:api/ReportsApi~webApiReportTasksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiReportTasksPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/report-tasks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiReportTaskstaskIdPut operation.
     * @callback module:api/ReportsApi~webApiReportTaskstaskIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportsReportTaskDataSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Report Task
     * Update the report task of the given ID. To get the task ID, and the data to change, run Get Report Tasks.
     * @param {String} taskId Task ID. Example: \"225494730938493804\".
     * @param {Object} opts Optional parameters
     * @param {module:model/ReportsReportTasksPutSchema} opts.body 
     * @param {module:api/ReportsApi~webApiReportTaskstaskIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportsReportTaskDataSchema200}
     */
    this.webApiReportTaskstaskIdPut = function(taskId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling webApiReportTaskstaskIdPut");
      }


      var pathParams = {
        'task_id': taskId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReportsReportTaskDataSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/report-tasks/{task_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiReportsDeleteReportsPost operation.
     * @callback module:api/ReportsApi~webApiReportsDeleteReportsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Reports
     * Delete the reports that match the filter. To delete a specific report, use its ID (see Get Reports).
     * @param {Object} opts Optional parameters
     * @param {module:model/ReportsReportDeleteSchema} opts.body 
     * @param {module:api/ReportsApi~webApiReportsDeleteReportsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webApiReportsDeleteReportsPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/web/api/v2.1/reports/delete-reports', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiReportsDeleteTasksPost operation.
     * @callback module:api/ReportsApi~webApiReportsDeleteTasksPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Report Tasks
     * You can schedule a report to be generated on a routine. Use this command to remove a task to generate a report in the future. To get an ID to delete a specific task, see Get Report Tasks.
     * @param {Object} opts Optional parameters
     * @param {module:model/ReportsReportTaskDeleteSchema} opts.body 
     * @param {module:api/ReportsApi~webApiReportsDeleteTasksPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webApiReportsDeleteTasksPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/web/api/v2.1/reports/delete-tasks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiReportsGet operation.
     * @callback module:api/ReportsApi~webApiReportsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportsReportDataSchemaMany200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Reports
     * Get the reports that match the filter and the data of the reports. Use this command to get the ID of reports to use in other commands. Other data in the response: schedule, Insight Type, name and ID of the user who created the report, the date range, and more.
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor Cursor position returned by the last request. Use to iterate over more than 1000 items. Example: \"YWdlbnRfaWQ6NTgwMjkzODE=\". (default to null)
     * @param {String} opts.query Query
     * @param {Array.<String>} opts.ids Id in. Example: \"225494730938493804,225494730938493915\".
     * @param {Boolean} opts.countOnly If true, only total number of items will be returned, without any of the actual objects. (default to false)
     * @param {Date} opts.fromDate From date. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Date} opts.toDate To date. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Number} opts.limit Limit number of returned items (1-1000). Example: \"10\". (default to 10)
     * @param {Number} opts.skip Skip first number of items (0-1000). To iterate over more than 1000 items,  use \"cursor\". Example: \"150\".
     * @param {String} opts.id Id. Example: \"225494730938493804\".
     * @param {String} opts.interval Interval
     * @param {Boolean} opts.skipCount If true, total number of items will not be calculated, which speeds up execution time. (default to null)
     * @param {module:model/String} opts.sortOrder Sort direction. Example: \"asc\". (default to null)
     * @param {Date} opts.createdAtLte Created at lte. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {module:model/String} opts.scheduleType Report type. Example: \"manually\".
     * @param {module:model/String} opts.sortBy The column to sort the results by. Example: \"id\". (default to null)
     * @param {String} opts.taskId Task id. Example: \"225494730938493804\".
     * @param {module:model/String} opts.frequency Frequency. Example: \"manually\".
     * @param {Array.<String>} opts.groupIds List of Group IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {module:model/String} opts.scope Scope. Example: \"group\".
     * @param {Date} opts.createdAtGte Created at gte. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.siteIds List of Site IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.accountIds List of Account IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {String} opts.name Name
     * @param {module:api/ReportsApi~webApiReportsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportsReportDataSchemaMany200}
     */
    this.webApiReportsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'cursor': opts['cursor'],
        'query': opts['query'],
        'countOnly': opts['countOnly'],
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate'],
        'limit': opts['limit'],
        'skip': opts['skip'],
        'id': opts['id'],
        'interval': opts['interval'],
        'skipCount': opts['skipCount'],
        'sortOrder': opts['sortOrder'],
        'createdAt__lte': opts['createdAtLte'],
        'scheduleType': opts['scheduleType'],
        'sortBy': opts['sortBy'],
        'taskId': opts['taskId'],
        'frequency': opts['frequency'],
        'scope': opts['scope'],
        'createdAt__gte': opts['createdAtGte'],
        'name': opts['name'],
      };
      var collectionQueryParams = {
        'ids': {
          value: opts['ids'],
          collectionFormat: 'csv'
        },
        'groupIds': {
          value: opts['groupIds'],
          collectionFormat: 'csv'
        },
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ReportsReportDataSchemaMany200;

      return this.apiClient.callApi(
        '/web/api/v2.1/reports', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiReportsInsightsTypesGet operation.
     * @callback module:api/ReportsApi~webApiReportsInsightsTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportsInsightData200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Insight Reports
     * Get the Insight Report types. These reports show high-level and detailed information on the state of your endpoint security. Reports include statistics, trends, and summaries with easy to read and actionable information about your network. Use this command to see the predefined reports. This command does not give data for specific reports.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.accountIds List of Account IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.groupIds List of Group IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Boolean} opts.forceUpdate Force update (default to false)
     * @param {Array.<String>} opts.siteIds List of Site IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {module:api/ReportsApi~webApiReportsInsightsTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportsInsightData200}
     */
    this.webApiReportsInsightsTypesGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'forceUpdate': opts['forceUpdate'],
      };
      var collectionQueryParams = {
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
        'groupIds': {
          value: opts['groupIds'],
          collectionFormat: 'csv'
        },
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ReportsInsightData200;

      return this.apiClient.callApi(
        '/web/api/v2.1/reports/insights/types', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiReportsreportIdreportFormatGet operation.
     * @callback module:api/ReportsApi~webApiReportsreportIdreportFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Report
     * When the Management generates a report, it is uploaded to the Management Console. Use this command to get the report as a PDF or HTML file. To get the ID of the report, see Get Reports.
     * @param {String} reportId Report ID. Example: \"225494730938493804\".
     * @param {module:model/String} reportFormat Report format. Example: \"pdf\".
     * @param {module:api/ReportsApi~webApiReportsreportIdreportFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webApiReportsreportIdreportFormatGet = function(reportId, reportFormat, callback) {
      var postBody = null;

      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling webApiReportsreportIdreportFormatGet");
      }

      // verify the required parameter 'reportFormat' is set
      if (reportFormat === undefined || reportFormat === null) {
        throw new Error("Missing the required parameter 'reportFormat' when calling webApiReportsreportIdreportFormatGet");
      }


      var pathParams = {
        'report_id': reportId,
        'report_format': reportFormat
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/web/api/v2.1/reports/{report_id}/{report_format}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiSentinelonerssGet operation.
     * @callback module:api/ReportsApi~webApiSentinelonerssGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RawDataSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * S1 RSS Feed
     * Get the SentinelOne RSS feed. In the SentinelOne Management Console, we show the feed contents in the Dashboard.
     * @param {module:api/ReportsApi~webApiSentinelonerssGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RawDataSchema200}
     */
    this.webApiSentinelonerssGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RawDataSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/sentinelonerss', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
