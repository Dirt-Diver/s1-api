/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DownloadResultsSchema200', 'model/NoDataSchema400', 'model/NoDataSchema401', 'model/NoDataSchema403', 'model/NoDataSchema404', 'model/RemoteOpsSchemasGetForensicsTaskResultDataSchema200', 'model/RemoteOpsSchemasStartCollectionResponseDataSchema202', 'model/RemoteOpsSchemasStartCollectionSchema', 'model/V21ForensicsSchemaArtifactTypesResponseSchemaMany200', 'model/V21ForensicsSchemaCollectionProfileRequestSchema', 'model/V21ForensicsSchemaCollectionProfileResultSchema200', 'model/V21ForensicsSchemaCollectionProfileResultSchemaMany200', 'model/V21ForensicsSchemaDeleteProfilesRequestSchema', 'model/V21ForensicsSchemaGetCollectionProfileResultSchemaMany200', 'model/V21ForensicsSchemaIsCollectionFileResponseSchema200', 'model/V21ForensicsSchemaPutCollectionProfileRequestSchema'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DownloadResultsSchema200'), require('../model/NoDataSchema400'), require('../model/NoDataSchema401'), require('../model/NoDataSchema403'), require('../model/NoDataSchema404'), require('../model/RemoteOpsSchemasGetForensicsTaskResultDataSchema200'), require('../model/RemoteOpsSchemasStartCollectionResponseDataSchema202'), require('../model/RemoteOpsSchemasStartCollectionSchema'), require('../model/V21ForensicsSchemaArtifactTypesResponseSchemaMany200'), require('../model/V21ForensicsSchemaCollectionProfileRequestSchema'), require('../model/V21ForensicsSchemaCollectionProfileResultSchema200'), require('../model/V21ForensicsSchemaCollectionProfileResultSchemaMany200'), require('../model/V21ForensicsSchemaDeleteProfilesRequestSchema'), require('../model/V21ForensicsSchemaGetCollectionProfileResultSchemaMany200'), require('../model/V21ForensicsSchemaIsCollectionFileResponseSchema200'), require('../model/V21ForensicsSchemaPutCollectionProfileRequestSchema'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.RemoteOpsForensicsApi = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.DownloadResultsSchema200, root.S1MgmtApi.NoDataSchema400, root.S1MgmtApi.NoDataSchema401, root.S1MgmtApi.NoDataSchema403, root.S1MgmtApi.NoDataSchema404, root.S1MgmtApi.RemoteOpsSchemasGetForensicsTaskResultDataSchema200, root.S1MgmtApi.RemoteOpsSchemasStartCollectionResponseDataSchema202, root.S1MgmtApi.RemoteOpsSchemasStartCollectionSchema, root.S1MgmtApi.V21ForensicsSchemaArtifactTypesResponseSchemaMany200, root.S1MgmtApi.V21ForensicsSchemaCollectionProfileRequestSchema, root.S1MgmtApi.V21ForensicsSchemaCollectionProfileResultSchema200, root.S1MgmtApi.V21ForensicsSchemaCollectionProfileResultSchemaMany200, root.S1MgmtApi.V21ForensicsSchemaDeleteProfilesRequestSchema, root.S1MgmtApi.V21ForensicsSchemaGetCollectionProfileResultSchemaMany200, root.S1MgmtApi.V21ForensicsSchemaIsCollectionFileResponseSchema200, root.S1MgmtApi.V21ForensicsSchemaPutCollectionProfileRequestSchema);
  }
}(this, function(ApiClient, DownloadResultsSchema200, NoDataSchema400, NoDataSchema401, NoDataSchema403, NoDataSchema404, RemoteOpsSchemasGetForensicsTaskResultDataSchema200, RemoteOpsSchemasStartCollectionResponseDataSchema202, RemoteOpsSchemasStartCollectionSchema, V21ForensicsSchemaArtifactTypesResponseSchemaMany200, V21ForensicsSchemaCollectionProfileRequestSchema, V21ForensicsSchemaCollectionProfileResultSchema200, V21ForensicsSchemaCollectionProfileResultSchemaMany200, V21ForensicsSchemaDeleteProfilesRequestSchema, V21ForensicsSchemaGetCollectionProfileResultSchemaMany200, V21ForensicsSchemaIsCollectionFileResponseSchema200, V21ForensicsSchemaPutCollectionProfileRequestSchema) {
  'use strict';

  /**
   * RemoteOpsForensics service.
   * @module api/RemoteOpsForensicsApi
   * @version 2.1
   */

  /**
   * Constructs a new RemoteOpsForensicsApi. 
   * @alias module:api/RemoteOpsForensicsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the webApiRemoteOpsForensicsArtifactTypesGet operation.
     * @callback module:api/RemoteOpsForensicsApi~webApiRemoteOpsForensicsArtifactTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V21ForensicsSchemaArtifactTypesResponseSchemaMany200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of supported artifact types
     * Return a complete list of supported artifact types
     * @param {module:api/RemoteOpsForensicsApi~webApiRemoteOpsForensicsArtifactTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V21ForensicsSchemaArtifactTypesResponseSchemaMany200}
     */
    this.webApiRemoteOpsForensicsArtifactTypesGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = V21ForensicsSchemaArtifactTypesResponseSchemaMany200;

      return this.apiClient.callApi(
        '/web/api/v2.1/remote-ops/forensics/artifact-types', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRemoteOpsForensicsCollectionFileUrlGet operation.
     * @callback module:api/RemoteOpsForensicsApi~webApiRemoteOpsForensicsCollectionFileUrlGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DownloadResultsSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns collection file download pre-signed url
     * Returns collection file download pre-signed url
     * @param {String} signature Signature
     * @param {String} siteId Site id. Example: \"225494730938493804\".
     * @param {String} uploadedTimestamp Uploaded timestamp
     * @param {String} signatureType Signature type
     * @param {String} agentId Agent id. Example: \"225494730938493804\".
     * @param {module:api/RemoteOpsForensicsApi~webApiRemoteOpsForensicsCollectionFileUrlGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DownloadResultsSchema200}
     */
    this.webApiRemoteOpsForensicsCollectionFileUrlGet = function(signature, siteId, uploadedTimestamp, signatureType, agentId, callback) {
      var postBody = null;

      // verify the required parameter 'signature' is set
      if (signature === undefined || signature === null) {
        throw new Error("Missing the required parameter 'signature' when calling webApiRemoteOpsForensicsCollectionFileUrlGet");
      }

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling webApiRemoteOpsForensicsCollectionFileUrlGet");
      }

      // verify the required parameter 'uploadedTimestamp' is set
      if (uploadedTimestamp === undefined || uploadedTimestamp === null) {
        throw new Error("Missing the required parameter 'uploadedTimestamp' when calling webApiRemoteOpsForensicsCollectionFileUrlGet");
      }

      // verify the required parameter 'signatureType' is set
      if (signatureType === undefined || signatureType === null) {
        throw new Error("Missing the required parameter 'signatureType' when calling webApiRemoteOpsForensicsCollectionFileUrlGet");
      }

      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling webApiRemoteOpsForensicsCollectionFileUrlGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'signature': signature,
        'siteId': siteId,
        'uploadedTimestamp': uploadedTimestamp,
        'signatureType': signatureType,
        'agentId': agentId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DownloadResultsSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/remote-ops/forensics/collection-file-url', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRemoteOpsForensicsCollectionProfilesDelete operation.
     * @callback module:api/RemoteOpsForensicsApi~webApiRemoteOpsForensicsCollectionProfilesDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V21ForensicsSchemaCollectionProfileResultSchemaMany200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Collection profiles
     * Delete multiple Forensics Collection profiles. The profiles that are not possible to delete (e.g. bundled profiles by S1, non-existing or user does not have proper permissions) are skipped. Contents of successfully deleted profiles are returned in response.
     * @param {Object} opts Optional parameters
     * @param {module:model/V21ForensicsSchemaDeleteProfilesRequestSchema} opts.body 
     * @param {module:api/RemoteOpsForensicsApi~webApiRemoteOpsForensicsCollectionProfilesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V21ForensicsSchemaCollectionProfileResultSchemaMany200}
     */
    this.webApiRemoteOpsForensicsCollectionProfilesDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V21ForensicsSchemaCollectionProfileResultSchemaMany200;

      return this.apiClient.callApi(
        '/web/api/v2.1/remote-ops/forensics/collection-profiles', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRemoteOpsForensicsCollectionProfilesGet operation.
     * @callback module:api/RemoteOpsForensicsApi~webApiRemoteOpsForensicsCollectionProfilesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V21ForensicsSchemaGetCollectionProfileResultSchemaMany200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of available Collection profiles
     * Get list of available Forensics collection profiles. The list may be narrowed by specifying filter parameter. Profiles are inherited between scopes in both upward and downward directions, e.g. profiles on parent Account and Tenant scopes are returned when querying for a Site scope, and profiles on a Site scopes are returned when querying its parent Account. Bundled profiles are available regardless of requested scqpe. If scope is not specified in filter, the scopes of the requesting user are considered.
     * @param {Object} opts Optional parameters
     * @param {String} opts.query Keyword to search in Collection profile name / description
     * @param {Number} opts.limit Limit number of returned items (1-1000). Example: \"10\". (default to 10)
     * @param {Array.<String>} opts.siteIds List of Site IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Boolean} opts.countOnly If true, only total number of items will be returned, without any of the actual objects. (default to false)
     * @param {Boolean} opts.skipCount If true, total number of items will not be calculated, which speeds up execution time. (default to null)
     * @param {Array.<module:model/String>} opts.osTypes Os types. Example: \"linux\".
     * @param {String} opts.cursor Cursor position returned by the last request. Use to iterate over more than 1000 items. Example: \"YWdlbnRfaWQ6NTgwMjkzODE=\". (default to null)
     * @param {module:model/String} opts.sortOrder Sort direction. Example: \"asc\". (default to null)
     * @param {Array.<String>} opts.accountIds List of Account IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.ids A list of collection profiles IDs. Example: \"225494730938493804,225494730938493915\".
     * @param {module:model/String} opts.sortBy The column to sort the results by. Example: \"id\". (default to null)
     * @param {Number} opts.skip Skip first number of items (0-1000). To iterate over more than 1000 items,  use \"cursor\". Example: \"150\".
     * @param {module:api/RemoteOpsForensicsApi~webApiRemoteOpsForensicsCollectionProfilesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V21ForensicsSchemaGetCollectionProfileResultSchemaMany200}
     */
    this.webApiRemoteOpsForensicsCollectionProfilesGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'query': opts['query'],
        'limit': opts['limit'],
        'countOnly': opts['countOnly'],
        'skipCount': opts['skipCount'],
        'cursor': opts['cursor'],
        'sortOrder': opts['sortOrder'],
        'sortBy': opts['sortBy'],
        'skip': opts['skip'],
      };
      var collectionQueryParams = {
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
        'osTypes': {
          value: opts['osTypes'],
          collectionFormat: 'csv'
        },
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
        'ids': {
          value: opts['ids'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = V21ForensicsSchemaGetCollectionProfileResultSchemaMany200;

      return this.apiClient.callApi(
        '/web/api/v2.1/remote-ops/forensics/collection-profiles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRemoteOpsForensicsCollectionProfilesPost operation.
     * @callback module:api/RemoteOpsForensicsApi~webApiRemoteOpsForensicsCollectionProfilesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V21ForensicsSchemaCollectionProfileResultSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new Collection profile
     * Create a Forensics Collection profile with provided artifacts on the specified scope. The profile name must be unique inside the scope, if the name already exists, Bad request error is returned.
     * @param {Object} opts Optional parameters
     * @param {module:model/V21ForensicsSchemaCollectionProfileRequestSchema} opts.body 
     * @param {module:api/RemoteOpsForensicsApi~webApiRemoteOpsForensicsCollectionProfilesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V21ForensicsSchemaCollectionProfileResultSchema200}
     */
    this.webApiRemoteOpsForensicsCollectionProfilesPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V21ForensicsSchemaCollectionProfileResultSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/remote-ops/forensics/collection-profiles', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRemoteOpsForensicsCollectionProfilesprofileIdGet operation.
     * @callback module:api/RemoteOpsForensicsApi~webApiRemoteOpsForensicsCollectionProfilesprofileIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V21ForensicsSchemaCollectionProfileResultSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Collection profile by ID
     * Get contents of an existing Forensics Collection profile, including specification of artifacts to be collected and profile metadata.
     * @param {String} profileId Profile ID. Example: \"225494730938493804\".
     * @param {module:api/RemoteOpsForensicsApi~webApiRemoteOpsForensicsCollectionProfilesprofileIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V21ForensicsSchemaCollectionProfileResultSchema200}
     */
    this.webApiRemoteOpsForensicsCollectionProfilesprofileIdGet = function(profileId, callback) {
      var postBody = null;

      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling webApiRemoteOpsForensicsCollectionProfilesprofileIdGet");
      }


      var pathParams = {
        'profile_id': profileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = V21ForensicsSchemaCollectionProfileResultSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/remote-ops/forensics/collection-profiles/{profile_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRemoteOpsForensicsCollectionProfilesprofileIdPut operation.
     * @callback module:api/RemoteOpsForensicsApi~webApiRemoteOpsForensicsCollectionProfilesprofileIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V21ForensicsSchemaCollectionProfileResultSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Collection profile by ID
     * Update contents of an existing Forensics Collection profile. All the profile data should be specified, even if the values are not changed. It's not allowed to change scope of profile. The namemust be unique inside the scope, if different profile with specified name already exists, Bad requesterror is returned and no profile data is changed.
     * @param {String} profileId Profile ID. Example: \"225494730938493804\".
     * @param {Object} opts Optional parameters
     * @param {module:model/V21ForensicsSchemaPutCollectionProfileRequestSchema} opts.body 
     * @param {module:api/RemoteOpsForensicsApi~webApiRemoteOpsForensicsCollectionProfilesprofileIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V21ForensicsSchemaCollectionProfileResultSchema200}
     */
    this.webApiRemoteOpsForensicsCollectionProfilesprofileIdPut = function(profileId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling webApiRemoteOpsForensicsCollectionProfilesprofileIdPut");
      }


      var pathParams = {
        'profile_id': profileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V21ForensicsSchemaCollectionProfileResultSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/remote-ops/forensics/collection-profiles/{profile_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRemoteOpsForensicsIsCollectionFileGet operation.
     * @callback module:api/RemoteOpsForensicsApi~webApiRemoteOpsForensicsIsCollectionFileGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V21ForensicsSchemaIsCollectionFileResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if collection file exists for given storyline
     * Check if collection file exists for given storyline
     * @param {String} storyline Storyline ID
     * @param {String} agentId Agent's ID. Example: \"225494730938493804\".
     * @param {module:api/RemoteOpsForensicsApi~webApiRemoteOpsForensicsIsCollectionFileGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V21ForensicsSchemaIsCollectionFileResponseSchema200}
     */
    this.webApiRemoteOpsForensicsIsCollectionFileGet = function(storyline, agentId, callback) {
      var postBody = null;

      // verify the required parameter 'storyline' is set
      if (storyline === undefined || storyline === null) {
        throw new Error("Missing the required parameter 'storyline' when calling webApiRemoteOpsForensicsIsCollectionFileGet");
      }

      // verify the required parameter 'agentId' is set
      if (agentId === undefined || agentId === null) {
        throw new Error("Missing the required parameter 'agentId' when calling webApiRemoteOpsForensicsIsCollectionFileGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'storyline': storyline,
        'agentId': agentId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = V21ForensicsSchemaIsCollectionFileResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/remote-ops/forensics/is-collection-file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRemoteOpsForensicsStartCollectionPost operation.
     * @callback module:api/RemoteOpsForensicsApi~webApiRemoteOpsForensicsStartCollectionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoteOpsSchemasStartCollectionResponseDataSchema202} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start collection of Forensics artifacts according to specified profile
     * Start collection of Forensics artifacts according to specified profile
     * @param {Object} opts Optional parameters
     * @param {module:model/RemoteOpsSchemasStartCollectionSchema} opts.body 
     * @param {module:api/RemoteOpsForensicsApi~webApiRemoteOpsForensicsStartCollectionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoteOpsSchemasStartCollectionResponseDataSchema202}
     */
    this.webApiRemoteOpsForensicsStartCollectionPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RemoteOpsSchemasStartCollectionResponseDataSchema202;

      return this.apiClient.callApi(
        '/web/api/v2.1/remote-ops/forensics/start-collection', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRemoteOpsForensicsTaskResultGet operation.
     * @callback module:api/RemoteOpsForensicsApi~webApiRemoteOpsForensicsTaskResultGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoteOpsSchemasGetForensicsTaskResultDataSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return result of collection task
     * Return result of collection task
     * @param {String} taskId Task id. Example: \"225494730938493804\".
     * @param {module:api/RemoteOpsForensicsApi~webApiRemoteOpsForensicsTaskResultGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoteOpsSchemasGetForensicsTaskResultDataSchema200}
     */
    this.webApiRemoteOpsForensicsTaskResultGet = function(taskId, callback) {
      var postBody = null;

      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling webApiRemoteOpsForensicsTaskResultGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'taskId': taskId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RemoteOpsSchemasGetForensicsTaskResultDataSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/remote-ops/forensics/task-result', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
