/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AffectedResultsSchema200', 'model/NoDataSchema400', 'model/NoDataSchema401', 'model/NoDataSchema403', 'model/NoDataSchema404', 'model/PoliciesSchemasRevertPolicySchema', 'model/SitesDuplicateSiteSchema', 'model/SitesGetSiteApprovalResponse200', 'model/SitesPostSiteSchema', 'model/SitesPutSiteApprovalJsonSchema', 'model/SitesPutSiteApprovalResponse200', 'model/SitesReactivateSiteSchema', 'model/SitesRegenerateKeySchema200', 'model/SitesSiteBulkPutSchema', 'model/SitesSiteDataWithUserSchema', 'model/SitesSitePutSchema', 'model/SitesSiteResponseSchema200', 'model/SitesSiteSchema200', 'model/SitesSiteTokenGenerationSchema200', 'model/SitesSiteViewSchema200', 'model/SitesSiteWithUserSchema200', 'model/SuccessResponseSchema200'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AffectedResultsSchema200'), require('../model/NoDataSchema400'), require('../model/NoDataSchema401'), require('../model/NoDataSchema403'), require('../model/NoDataSchema404'), require('../model/PoliciesSchemasRevertPolicySchema'), require('../model/SitesDuplicateSiteSchema'), require('../model/SitesGetSiteApprovalResponse200'), require('../model/SitesPostSiteSchema'), require('../model/SitesPutSiteApprovalJsonSchema'), require('../model/SitesPutSiteApprovalResponse200'), require('../model/SitesReactivateSiteSchema'), require('../model/SitesRegenerateKeySchema200'), require('../model/SitesSiteBulkPutSchema'), require('../model/SitesSiteDataWithUserSchema'), require('../model/SitesSitePutSchema'), require('../model/SitesSiteResponseSchema200'), require('../model/SitesSiteSchema200'), require('../model/SitesSiteTokenGenerationSchema200'), require('../model/SitesSiteViewSchema200'), require('../model/SitesSiteWithUserSchema200'), require('../model/SuccessResponseSchema200'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.SitesApi = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.AffectedResultsSchema200, root.S1MgmtApi.NoDataSchema400, root.S1MgmtApi.NoDataSchema401, root.S1MgmtApi.NoDataSchema403, root.S1MgmtApi.NoDataSchema404, root.S1MgmtApi.PoliciesSchemasRevertPolicySchema, root.S1MgmtApi.SitesDuplicateSiteSchema, root.S1MgmtApi.SitesGetSiteApprovalResponse200, root.S1MgmtApi.SitesPostSiteSchema, root.S1MgmtApi.SitesPutSiteApprovalJsonSchema, root.S1MgmtApi.SitesPutSiteApprovalResponse200, root.S1MgmtApi.SitesReactivateSiteSchema, root.S1MgmtApi.SitesRegenerateKeySchema200, root.S1MgmtApi.SitesSiteBulkPutSchema, root.S1MgmtApi.SitesSiteDataWithUserSchema, root.S1MgmtApi.SitesSitePutSchema, root.S1MgmtApi.SitesSiteResponseSchema200, root.S1MgmtApi.SitesSiteSchema200, root.S1MgmtApi.SitesSiteTokenGenerationSchema200, root.S1MgmtApi.SitesSiteViewSchema200, root.S1MgmtApi.SitesSiteWithUserSchema200, root.S1MgmtApi.SuccessResponseSchema200);
  }
}(this, function(ApiClient, AffectedResultsSchema200, NoDataSchema400, NoDataSchema401, NoDataSchema403, NoDataSchema404, PoliciesSchemasRevertPolicySchema, SitesDuplicateSiteSchema, SitesGetSiteApprovalResponse200, SitesPostSiteSchema, SitesPutSiteApprovalJsonSchema, SitesPutSiteApprovalResponse200, SitesReactivateSiteSchema, SitesRegenerateKeySchema200, SitesSiteBulkPutSchema, SitesSiteDataWithUserSchema, SitesSitePutSchema, SitesSiteResponseSchema200, SitesSiteSchema200, SitesSiteTokenGenerationSchema200, SitesSiteViewSchema200, SitesSiteWithUserSchema200, SuccessResponseSchema200) {
  'use strict';

  /**
   * Sites service.
   * @module api/SitesApi
   * @version 2.1
   */

  /**
   * Constructs a new SitesApi. 
   * @alias module:api/SitesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the webApiExportSitesGet operation.
     * @callback module:api/SitesApi~webApiExportSitesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export Sites
     * Export Sites data to a CSV, for Sites that match the filter.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.nameContains Free-text filter by site name (supports multiple values)
     * @param {String} opts.accountId Account id. Example: \"225494730938493804\".
     * @param {Boolean} opts.availableMoveSites Only return sites the user can move agents to
     * @param {Boolean} opts.healthStatus Health status
     * @param {Date} opts.updatedAt Timestamp of last update. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<module:model/String>} opts.features If sent return only sites that support this features. Example: \"firewall-control\".
     * @param {Date} opts.expiration Expiration. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {module:model/String} opts.siteType Site type. Example: \"Trial\".
     * @param {Boolean} opts.adminOnly Show sites the user has Admin privileges to
     * @param {String} opts.query Full text search for fields: name, account_name, description. (Note: on single-account consoles account name will not be matched)
     * @param {Boolean} opts.isDefault Is default
     * @param {module:model/String} opts.state Site state. Example: \"active\".
     * @param {Number} opts.activeLicenses Active licenses
     * @param {Number} opts.totalLicenses Total licenses
     * @param {Array.<String>} opts.states List of states to filter
     * @param {String} opts.externalId Id in a CRM external system
     * @param {module:model/String} opts.suite [DEPRECATED] Use sku instead. Example: \"Core\".
     * @param {Array.<String>} opts.accountNameContains Free-text filter by account name (supports multiple values)
     * @param {String} opts.registrationToken Registration token. Example: \"eyJ1cmwiOiAiaHR0cHM6Ly9jb25zb2xlLnNlbnRpbmVsb25lLm5ldCIsICJzaXRlX2tleSI6ICIwNzhkYjliMWUyOTA1Y2NhIn0=\".
     * @param {String} opts.module Module. Example: \"star,rso\".
     * @param {String} opts.description The description for the Site
     * @param {String} opts.name Name. Example: \"My Site\".
     * @param {Array.<String>} opts.accountIds List of Account IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.siteIds List of Site IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Date} opts.createdAt Timestamp of site creation. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {String} opts.sku Sku. Example: \"core\".
     * @param {Array.<String>} opts.descriptionContains Free-text filter by site description (supports multiple values)
     * @param {module:api/SitesApi~webApiExportSitesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webApiExportSitesGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'accountId': opts['accountId'],
        'availableMoveSites': opts['availableMoveSites'],
        'healthStatus': opts['healthStatus'],
        'updatedAt': opts['updatedAt'],
        'expiration': opts['expiration'],
        'siteType': opts['siteType'],
        'adminOnly': opts['adminOnly'],
        'query': opts['query'],
        'isDefault': opts['isDefault'],
        'state': opts['state'],
        'activeLicenses': opts['activeLicenses'],
        'totalLicenses': opts['totalLicenses'],
        'externalId': opts['externalId'],
        'suite': opts['suite'],
        'registrationToken': opts['registrationToken'],
        'module': opts['module'],
        'description': opts['description'],
        'name': opts['name'],
        'createdAt': opts['createdAt'],
        'sku': opts['sku'],
      };
      var collectionQueryParams = {
        'name__contains': {
          value: opts['nameContains'],
          collectionFormat: 'csv'
        },
        'features': {
          value: opts['features'],
          collectionFormat: 'csv'
        },
        'states': {
          value: opts['states'],
          collectionFormat: 'csv'
        },
        'accountName__contains': {
          value: opts['accountNameContains'],
          collectionFormat: 'csv'
        },
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
        'description__contains': {
          value: opts['descriptionContains'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/web/api/v2.1/export/sites', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiSiteWithAdminPost operation.
     * @callback module:api/SitesApi~webApiSiteWithAdminPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SitesSiteWithUserSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Site and User
     * Create a Site and an Admin role user. This requires an Admin role with a Global scope or Account scope that has permissions over the Account to which the Site will belong. <br>You must have a license for a new Site. <br>In the body of this request, include the policy and user properties.
     * @param {Object} opts Optional parameters
     * @param {module:model/SitesSiteDataWithUserSchema} opts.body 
     * @param {module:api/SitesApi~webApiSiteWithAdminPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SitesSiteWithUserSchema200}
     */
    this.webApiSiteWithAdminPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SitesSiteWithUserSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/site-with-admin', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiSitesDuplicateSitePost operation.
     * @callback module:api/SitesApi~webApiSitesDuplicateSitePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SitesSiteSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create duplicate site
     * [DEPRECATED] Create duplicate site.
     * @param {Object} opts Optional parameters
     * @param {module:model/SitesDuplicateSiteSchema} opts.body 
     * @param {module:api/SitesApi~webApiSitesDuplicateSitePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SitesSiteSchema200}
     */
    this.webApiSitesDuplicateSitePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SitesSiteSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/sites/duplicate-site', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiSitesGet operation.
     * @callback module:api/SitesApi~webApiSitesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SitesSiteResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sites
     * Get the Sites that match the filters. <br>The response includes the IDs of Sites, which you can use in other commands.
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor Cursor position returned by the last request. Use to iterate over more than 1000 items. Example: \"YWdlbnRfaWQ6NTgwMjkzODE=\". (default to null)
     * @param {Array.<String>} opts.nameContains Free-text filter by site name (supports multiple values)
     * @param {String} opts.accountId Account id. Example: \"225494730938493804\".
     * @param {Boolean} opts.availableMoveSites Only return sites the user can move agents to
     * @param {Boolean} opts.healthStatus Health status
     * @param {Date} opts.updatedAt Timestamp of last update. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<module:model/String>} opts.features If sent return only sites that support this features. Example: \"firewall-control\".
     * @param {Date} opts.expiration Expiration. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {module:model/String} opts.siteType Site type. Example: \"Trial\".
     * @param {Boolean} opts.adminOnly Show sites the user has Admin privileges to
     * @param {String} opts.query Full text search for fields: name, account_name, description. (Note: on single-account consoles account name will not be matched)
     * @param {Boolean} opts.isDefault Is default
     * @param {Boolean} opts.countOnly If true, only total number of items will be returned, without any of the actual objects. (default to false)
     * @param {Number} opts.limit Limit number of returned items (1-1000). Example: \"10\". (default to 10)
     * @param {module:model/String} opts.state Site state. Example: \"active\".
     * @param {Number} opts.skip Skip first number of items (0-1000). To iterate over more than 1000 items,  use \"cursor\". Example: \"150\".
     * @param {Boolean} opts.skipCount If true, total number of items will not be calculated, which speeds up execution time. (default to null)
     * @param {Number} opts.activeLicenses Active licenses
     * @param {module:model/String} opts.sortOrder Sort direction. Example: \"asc\". (default to null)
     * @param {Number} opts.totalLicenses Total licenses
     * @param {Array.<String>} opts.states List of states to filter
     * @param {String} opts.externalId Id in a CRM external system
     * @param {module:model/String} opts.suite [DEPRECATED] Use sku instead. Example: \"Core\".
     * @param {Array.<String>} opts.accountNameContains Free-text filter by account name (supports multiple values)
     * @param {String} opts.registrationToken Registration token. Example: \"eyJ1cmwiOiAiaHR0cHM6Ly9jb25zb2xlLnNlbnRpbmVsb25lLm5ldCIsICJzaXRlX2tleSI6ICIwNzhkYjliMWUyOTA1Y2NhIn0=\".
     * @param {module:model/String} opts.sortBy The column to sort the results by. Example: \"id\". (default to null)
     * @param {String} opts.module Module. Example: \"star,rso\".
     * @param {String} opts.description The description for the Site
     * @param {Array.<String>} opts.siteIds List of Site IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.accountIds List of Account IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {String} opts.name Name. Example: \"My Site\".
     * @param {Date} opts.createdAt Timestamp of site creation. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {String} opts.sku Sku. Example: \"core\".
     * @param {Array.<String>} opts.descriptionContains Free-text filter by site description (supports multiple values)
     * @param {module:api/SitesApi~webApiSitesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SitesSiteResponseSchema200}
     */
    this.webApiSitesGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'cursor': opts['cursor'],
        'accountId': opts['accountId'],
        'availableMoveSites': opts['availableMoveSites'],
        'healthStatus': opts['healthStatus'],
        'updatedAt': opts['updatedAt'],
        'expiration': opts['expiration'],
        'siteType': opts['siteType'],
        'adminOnly': opts['adminOnly'],
        'query': opts['query'],
        'isDefault': opts['isDefault'],
        'countOnly': opts['countOnly'],
        'limit': opts['limit'],
        'state': opts['state'],
        'skip': opts['skip'],
        'skipCount': opts['skipCount'],
        'activeLicenses': opts['activeLicenses'],
        'sortOrder': opts['sortOrder'],
        'totalLicenses': opts['totalLicenses'],
        'externalId': opts['externalId'],
        'suite': opts['suite'],
        'registrationToken': opts['registrationToken'],
        'sortBy': opts['sortBy'],
        'module': opts['module'],
        'description': opts['description'],
        'name': opts['name'],
        'createdAt': opts['createdAt'],
        'sku': opts['sku'],
      };
      var collectionQueryParams = {
        'name__contains': {
          value: opts['nameContains'],
          collectionFormat: 'csv'
        },
        'features': {
          value: opts['features'],
          collectionFormat: 'csv'
        },
        'states': {
          value: opts['states'],
          collectionFormat: 'csv'
        },
        'accountName__contains': {
          value: opts['accountNameContains'],
          collectionFormat: 'csv'
        },
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
        'description__contains': {
          value: opts['descriptionContains'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SitesSiteResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/sites', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiSitesPost operation.
     * @callback module:api/SitesApi~webApiSitesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SitesSiteSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Site
     * Create a Site. This requires an Admin role with a Global scope or Account scope that has permissions over the Account to which the Site will belong. <br>You must have a license for a new Site. <br>In the body of this request, include the policy. 
     * @param {Object} opts Optional parameters
     * @param {module:model/SitesPostSiteSchema} opts.body 
     * @param {module:api/SitesApi~webApiSitesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SitesSiteSchema200}
     */
    this.webApiSitesPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SitesSiteSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/sites', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiSitesUpdateBulkPut operation.
     * @callback module:api/SitesApi~webApiSitesUpdateBulkPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AffectedResultsSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Sites
     * Change the properties of the Sites given by IDs. <br>To get the IDs, run 'sites'.
     * @param {Object} opts Optional parameters
     * @param {module:model/SitesSiteBulkPutSchema} opts.body 
     * @param {module:api/SitesApi~webApiSitesUpdateBulkPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AffectedResultsSchema200}
     */
    this.webApiSitesUpdateBulkPut = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AffectedResultsSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/sites/update-bulk', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiSitessiteIdDelete operation.
     * @callback module:api/SitesApi~webApiSitessiteIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Site
     * Delete the Site of the given ID. To get the ID, run \"sites\". <br>You must have an Admin role with scope access that includes the Site.
     * @param {String} siteId Site ID. Example: \"225494730938493804\".
     * @param {module:api/SitesApi~webApiSitessiteIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiSitessiteIdDelete = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling webApiSitessiteIdDelete");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/sites/{site_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiSitessiteIdExpireNowPost operation.
     * @callback module:api/SitesApi~webApiSitessiteIdExpireNowPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SitesSiteSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Expire Site
     * Expire the Site of the given ID (run \"sites\" to get the ID). <br>You must have an Admin role with scope access that includes this Site.
     * @param {String} siteId Site ID. Example: \"225494730938493804\".
     * @param {module:api/SitesApi~webApiSitessiteIdExpireNowPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SitesSiteSchema200}
     */
    this.webApiSitessiteIdExpireNowPost = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling webApiSitessiteIdExpireNowPost");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SitesSiteSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/sites/{site_id}/expire-now', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiSitessiteIdGet operation.
     * @callback module:api/SitesApi~webApiSitessiteIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SitesSiteViewSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Site by ID
     * Get the data of the Site of the ID. To get the ID, run \"sites\". <br>The response shows the Site expiration date, SKU, licenses (total and active), token, Account name and ID, who and when it was created and changed, and its status.
     * @param {String} siteId Site ID. Example: \"225494730938493804\".
     * @param {module:api/SitesApi~webApiSitessiteIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SitesSiteViewSchema200}
     */
    this.webApiSitessiteIdGet = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling webApiSitessiteIdGet");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SitesSiteViewSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/sites/{site_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiSitessiteIdLocalAuthorizationGet operation.
     * @callback module:api/SitesApi~webApiSitessiteIdLocalAuthorizationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SitesGetSiteApprovalResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get local upgrade site authorization
     * Get the time when authorization of local upgrades expires, and the number of Agents authorized for local upgrade, in this Site.
     * @param {String} siteId Site ID. Example: \"225494730938493804\".
     * @param {module:api/SitesApi~webApiSitessiteIdLocalAuthorizationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SitesGetSiteApprovalResponse200}
     */
    this.webApiSitessiteIdLocalAuthorizationGet = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling webApiSitessiteIdLocalAuthorizationGet");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SitesGetSiteApprovalResponse200;

      return this.apiClient.callApi(
        '/web/api/v2.1/sites/{site_id}/local-authorization', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiSitessiteIdLocalAuthorizationPut operation.
     * @callback module:api/SitesApi~webApiSitessiteIdLocalAuthorizationPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SitesPutSiteApprovalResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit local upgrade site authorization
     * Edit when authorization of local upgrades expires. Returns the number of Agents authorized for local upgrade, in this Site.
     * @param {String} siteId Site ID. Example: \"225494730938493804\".
     * @param {Object} opts Optional parameters
     * @param {module:model/SitesPutSiteApprovalJsonSchema} opts.body 
     * @param {module:api/SitesApi~webApiSitessiteIdLocalAuthorizationPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SitesPutSiteApprovalResponse200}
     */
    this.webApiSitessiteIdLocalAuthorizationPut = function(siteId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling webApiSitessiteIdLocalAuthorizationPut");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SitesPutSiteApprovalResponse200;

      return this.apiClient.callApi(
        '/web/api/v2.1/sites/{site_id}/local-authorization', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiSitessiteIdLocalUpgradeApprovedAgentsCsvGet operation.
     * @callback module:api/SitesApi~webApiSitessiteIdLocalUpgradeApprovedAgentsCsvGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SitesGetSiteApprovalResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a CSV file of local upgrade site authorization data
     * Get a CSV file containing the Agents authorized for local upgrade, in this Site.
     * @param {String} siteId Site ID. Example: \"225494730938493804\".
     * @param {module:api/SitesApi~webApiSitessiteIdLocalUpgradeApprovedAgentsCsvGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SitesGetSiteApprovalResponse200}
     */
    this.webApiSitessiteIdLocalUpgradeApprovedAgentsCsvGet = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling webApiSitessiteIdLocalUpgradeApprovedAgentsCsvGet");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SitesGetSiteApprovalResponse200;

      return this.apiClient.callApi(
        '/web/api/v2.1/sites/{site_id}/local-upgrade-approved-agents-csv', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiSitessiteIdPut operation.
     * @callback module:api/SitesApi~webApiSitessiteIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SitesSiteSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Site
     * Change the policy and properties of the Site given by ID. <br>To get the ID, run 'sites'.
     * @param {String} siteId Site ID. Example: \"225494730938493804\".
     * @param {Object} opts Optional parameters
     * @param {module:model/SitesSitePutSchema} opts.body 
     * @param {module:api/SitesApi~webApiSitessiteIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SitesSiteSchema200}
     */
    this.webApiSitessiteIdPut = function(siteId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling webApiSitessiteIdPut");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SitesSiteSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/sites/{site_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiSitessiteIdReactivatePut operation.
     * @callback module:api/SitesApi~webApiSitessiteIdReactivatePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reactivate Site
     * Reactivate an expired Site. <br>You must have an Admin role with scope access that includes this Site, and you must have a license for the Site. <br>To get the site_id, run \"sites\".
     * @param {String} siteId Site ID. Example: \"225494730938493804\".
     * @param {Object} opts Optional parameters
     * @param {module:model/SitesReactivateSiteSchema} opts.body 
     * @param {module:api/SitesApi~webApiSitessiteIdReactivatePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiSitessiteIdReactivatePut = function(siteId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling webApiSitessiteIdReactivatePut");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/sites/{site_id}/reactivate', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiSitessiteIdRegenerateKeyPut operation.
     * @callback module:api/SitesApi~webApiSitessiteIdRegenerateKeyPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SitesRegenerateKeySchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerate Site Key
     * Regenerate the key for the given Site. <br>To get the site_id, use \"sites\".
     * @param {String} siteId Site ID. Example: \"225494730938493804\".
     * @param {module:api/SitesApi~webApiSitessiteIdRegenerateKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SitesRegenerateKeySchema200}
     */
    this.webApiSitessiteIdRegenerateKeyPut = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling webApiSitessiteIdRegenerateKeyPut");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SitesRegenerateKeySchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/sites/{site_id}/regenerate-key', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiSitessiteIdRevertPolicyPut operation.
     * @callback module:api/SitesApi~webApiSitessiteIdRevertPolicyPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revert Policy
     * When a Site is created through the Console, it gets the Global policy. <br>If you change the policy and later want it set to the Global policy, use this command. <br>The site_id is required. You can get it from \"sites\".
     * @param {String} siteId Site ID. Example: \"225494730938493804\".
     * @param {Object} opts Optional parameters
     * @param {module:model/PoliciesSchemasRevertPolicySchema} opts.body 
     * @param {module:api/SitesApi~webApiSitessiteIdRevertPolicyPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiSitessiteIdRevertPolicyPut = function(siteId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling webApiSitessiteIdRevertPolicyPut");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/sites/{site_id}/revert-policy', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiSitessiteIdTokenGet operation.
     * @callback module:api/SitesApi~webApiSitessiteIdTokenGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SitesSiteTokenGenerationSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Site registration token by ID
     * Get the registration token of the Site of the ID.
     * @param {String} siteId Site ID. Example: \"225494730938493804\".
     * @param {module:api/SitesApi~webApiSitessiteIdTokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SitesSiteTokenGenerationSchema200}
     */
    this.webApiSitessiteIdTokenGet = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling webApiSitessiteIdTokenGet");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SitesSiteTokenGenerationSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/sites/{site_id}/token', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
