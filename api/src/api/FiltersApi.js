/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FiltersFiltersDeepVisibilityFilterViewSchema200', 'model/FiltersFiltersFilterViewSchema200', 'model/FiltersFiltersFilterViewSchemaMany200', 'model/FiltersFiltersNewDeepVisibilityFilterSchema', 'model/FiltersFiltersNewFilterSchema', 'model/FiltersFiltersUpdateFilterSchema', 'model/FiltersSchemasCsvFilterViewSchema200', 'model/NoDataSchema400', 'model/NoDataSchema401', 'model/NoDataSchema403', 'model/NoDataSchema404', 'model/SuccessResponseSchema200'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FiltersFiltersDeepVisibilityFilterViewSchema200'), require('../model/FiltersFiltersFilterViewSchema200'), require('../model/FiltersFiltersFilterViewSchemaMany200'), require('../model/FiltersFiltersNewDeepVisibilityFilterSchema'), require('../model/FiltersFiltersNewFilterSchema'), require('../model/FiltersFiltersUpdateFilterSchema'), require('../model/FiltersSchemasCsvFilterViewSchema200'), require('../model/NoDataSchema400'), require('../model/NoDataSchema401'), require('../model/NoDataSchema403'), require('../model/NoDataSchema404'), require('../model/SuccessResponseSchema200'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.FiltersApi = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.FiltersFiltersDeepVisibilityFilterViewSchema200, root.S1MgmtApi.FiltersFiltersFilterViewSchema200, root.S1MgmtApi.FiltersFiltersFilterViewSchemaMany200, root.S1MgmtApi.FiltersFiltersNewDeepVisibilityFilterSchema, root.S1MgmtApi.FiltersFiltersNewFilterSchema, root.S1MgmtApi.FiltersFiltersUpdateFilterSchema, root.S1MgmtApi.FiltersSchemasCsvFilterViewSchema200, root.S1MgmtApi.NoDataSchema400, root.S1MgmtApi.NoDataSchema401, root.S1MgmtApi.NoDataSchema403, root.S1MgmtApi.NoDataSchema404, root.S1MgmtApi.SuccessResponseSchema200);
  }
}(this, function(ApiClient, FiltersFiltersDeepVisibilityFilterViewSchema200, FiltersFiltersFilterViewSchema200, FiltersFiltersFilterViewSchemaMany200, FiltersFiltersNewDeepVisibilityFilterSchema, FiltersFiltersNewFilterSchema, FiltersFiltersUpdateFilterSchema, FiltersSchemasCsvFilterViewSchema200, NoDataSchema400, NoDataSchema401, NoDataSchema403, NoDataSchema404, SuccessResponseSchema200) {
  'use strict';

  /**
   * Filters service.
   * @module api/FiltersApi
   * @version 2.1
   */

  /**
   * Constructs a new FiltersApi. 
   * @alias module:api/FiltersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the webApiFiltersCsvFilterPost operation.
     * @callback module:api/FiltersApi~webApiFiltersCsvFilterPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FiltersSchemasCsvFilterViewSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload CSV file
     * Upload CSV file
     * @param {Boolean} excludeHeader Set to True to exclude the column header
     * @param {String} agentFilterField The property of the endpoint to filter by
     * @param {File} file File
     * @param {module:api/FiltersApi~webApiFiltersCsvFilterPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FiltersSchemasCsvFilterViewSchema200}
     */
    this.webApiFiltersCsvFilterPost = function(excludeHeader, agentFilterField, file, callback) {
      var postBody = null;

      // verify the required parameter 'excludeHeader' is set
      if (excludeHeader === undefined || excludeHeader === null) {
        throw new Error("Missing the required parameter 'excludeHeader' when calling webApiFiltersCsvFilterPost");
      }

      // verify the required parameter 'agentFilterField' is set
      if (agentFilterField === undefined || agentFilterField === null) {
        throw new Error("Missing the required parameter 'agentFilterField' when calling webApiFiltersCsvFilterPost");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling webApiFiltersCsvFilterPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'excludeHeader': excludeHeader,
        'agentFilterField': agentFilterField,
        'file': file
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = FiltersSchemasCsvFilterViewSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/filters/csv-filter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiFiltersDvGet operation.
     * @callback module:api/FiltersApi~webApiFiltersDvGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Deep Visibility Filters
     * Get saved Deep Visibility queries with full data. See Save Deep Visibility Filters.The response includes the ID of the filter, which you can use in other commands. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor Cursor position returned by the last request. Use to iterate over more than 1000 items. Example: \"YWdlbnRfaWQ6NTgwMjkzODE=\". (default to null)
     * @param {Number} opts.skip Skip first number of items (0-1000). To iterate over more than 1000 items,  use \"cursor\". Example: \"150\".
     * @param {Array.<String>} opts.siteIds List of Site IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.accountIds List of Account IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Boolean} opts.skipCount If true, total number of items will not be calculated, which speeds up execution time. (default to null)
     * @param {Boolean} opts.includeParents Return filters from parent scope levels (Default: false) (default to false)
     * @param {Boolean} opts.includeChildren Return filters from children scope levels (Default: false) (default to false)
     * @param {module:model/String} opts.sortOrder Sort direction. Example: \"asc\". (default to null)
     * @param {Array.<String>} opts.ids A list of Filter IDs. Example: \"225494730938493804,225494730938493915\".
     * @param {module:model/String} opts.sortBy The column to sort the results by. Example: \"id\". (default to null)
     * @param {Boolean} opts.includeGlobal [DEPRECATED] Return global filters even when specific sites are selected (default to false)
     * @param {String} opts.query Text query for filter's name. Example: \"MyFilter\".
     * @param {Array.<String>} opts.groupIds List of Group IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Boolean} opts.countOnly If true, only total number of items will be returned, without any of the actual objects. (default to false)
     * @param {Number} opts.limit Limit number of returned items (1-1000). Example: \"10\". (default to 10)
     * @param {module:api/FiltersApi~webApiFiltersDvGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webApiFiltersDvGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'cursor': opts['cursor'],
        'skip': opts['skip'],
        'skipCount': opts['skipCount'],
        'includeParents': opts['includeParents'],
        'includeChildren': opts['includeChildren'],
        'sortOrder': opts['sortOrder'],
        'sortBy': opts['sortBy'],
        'includeGlobal': opts['includeGlobal'],
        'query': opts['query'],
        'countOnly': opts['countOnly'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
        'ids': {
          value: opts['ids'],
          collectionFormat: 'csv'
        },
        'groupIds': {
          value: opts['groupIds'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/web/api/v2.1/filters/dv', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiFiltersDvPost operation.
     * @callback module:api/FiltersApi~webApiFiltersDvPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save Deep Visibility Filter
     * Save a Deep Visibility query with data as a filter, to get notifications of specific events sent to named recipients on a given frequency. The recipients must be Console users with permissions on the scope of the query. Notifications are sent through email: you must have an SMTP server configured in the SentinelOne solution (/settings/smtp see Set SMTP Settings).  Deep Visibility requires a Complete SKU.
     * @param {Object} opts Optional parameters
     * @param {module:model/FiltersFiltersNewDeepVisibilityFilterSchema} opts.body 
     * @param {module:api/FiltersApi~webApiFiltersDvPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webApiFiltersDvPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/web/api/v2.1/filters/dv', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiFiltersDvfilterIdDelete operation.
     * @callback module:api/FiltersApi~webApiFiltersDvfilterIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Deep Visibility Filter
     * Delete a saved Deep Visibility query.
     * @param {String} filterId Filter ID. Example: \"225494730938493804\".
     * @param {module:api/FiltersApi~webApiFiltersDvfilterIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiFiltersDvfilterIdDelete = function(filterId, callback) {
      var postBody = null;

      // verify the required parameter 'filterId' is set
      if (filterId === undefined || filterId === null) {
        throw new Error("Missing the required parameter 'filterId' when calling webApiFiltersDvfilterIdDelete");
      }


      var pathParams = {
        'filter_id': filterId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/filters/dv/{filter_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiFiltersDvfilterIdPut operation.
     * @callback module:api/FiltersApi~webApiFiltersDvfilterIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FiltersFiltersDeepVisibilityFilterViewSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Deep Visibility Filter
     * Change a saved Deep Visibility filter. To get the ID and fields to change, run Get Deep Visibility Filters.
     * @param {String} filterId Filter ID. Example: \"225494730938493804\".
     * @param {Object} opts Optional parameters
     * @param {module:model/FiltersFiltersNewDeepVisibilityFilterSchema} opts.body 
     * @param {module:api/FiltersApi~webApiFiltersDvfilterIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FiltersFiltersDeepVisibilityFilterViewSchema200}
     */
    this.webApiFiltersDvfilterIdPut = function(filterId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'filterId' is set
      if (filterId === undefined || filterId === null) {
        throw new Error("Missing the required parameter 'filterId' when calling webApiFiltersDvfilterIdPut");
      }


      var pathParams = {
        'filter_id': filterId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FiltersFiltersDeepVisibilityFilterViewSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/filters/dv/{filter_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiFiltersGet operation.
     * @callback module:api/FiltersApi~webApiFiltersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FiltersFiltersFilterViewSchemaMany200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Filters
     * Get the list of saved filters. See Save Filter. The response includes the ID of the filter, which you can use in other commands.
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor Cursor position returned by the last request. Use to iterate over more than 1000 items. Example: \"YWdlbnRfaWQ6NTgwMjkzODE=\". (default to null)
     * @param {Number} opts.skip Skip first number of items (0-1000). To iterate over more than 1000 items,  use \"cursor\". Example: \"150\".
     * @param {Array.<String>} opts.siteIds List of Site IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.accountIds List of Account IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Boolean} opts.skipCount If true, total number of items will not be calculated, which speeds up execution time. (default to null)
     * @param {Boolean} opts.includeParents Return filters from parent scope levels (Default: false) (default to false)
     * @param {Boolean} opts.includeChildren Return filters from children scope levels (Default: false) (default to false)
     * @param {module:model/String} opts.sortOrder Sort direction. Example: \"asc\". (default to null)
     * @param {Array.<String>} opts.ids A list of Filter IDs. Example: \"225494730938493804,225494730938493915\".
     * @param {module:model/String} opts.sortBy The column to sort the results by. Example: \"id\". (default to null)
     * @param {Boolean} opts.includeGlobal [DEPRECATED] Return global filters even when specific sites are selected (default to false)
     * @param {String} opts.query Text query for filter's name. Example: \"MyFilter\".
     * @param {Boolean} opts.countOnly If true, only total number of items will be returned, without any of the actual objects. (default to false)
     * @param {Number} opts.limit Limit number of returned items (1-1000). Example: \"10\". (default to 10)
     * @param {module:api/FiltersApi~webApiFiltersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FiltersFiltersFilterViewSchemaMany200}
     */
    this.webApiFiltersGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'cursor': opts['cursor'],
        'skip': opts['skip'],
        'skipCount': opts['skipCount'],
        'includeParents': opts['includeParents'],
        'includeChildren': opts['includeChildren'],
        'sortOrder': opts['sortOrder'],
        'sortBy': opts['sortBy'],
        'includeGlobal': opts['includeGlobal'],
        'query': opts['query'],
        'countOnly': opts['countOnly'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
        'ids': {
          value: opts['ids'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = FiltersFiltersFilterViewSchemaMany200;

      return this.apiClient.callApi(
        '/web/api/v2.1/filters', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiFiltersPost operation.
     * @callback module:api/FiltersApi~webApiFiltersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FiltersFiltersFilterViewSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save Filter
     * Save a new filter to get a list of matching endpoints. When you save a filter, you can run actions on the Agents as a set of objects or create a dynamic group (automatically adds new Agents that match the filter and drops Agents if they change to not match).  For example, you can save a filter with {\"data\":{\"filterFields\":{\"infected\":true}}} to run kill and quarantine commands on all the Agents at once, or to create a group that holds currently infected endpoints. Best Practice: Set a scope for the new Saved Filter. Run \"accounts\", \"sites\", or \"groups\" to get the IDs for the scope.
     * @param {Object} opts Optional parameters
     * @param {module:model/FiltersFiltersNewFilterSchema} opts.body 
     * @param {module:api/FiltersApi~webApiFiltersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FiltersFiltersFilterViewSchema200}
     */
    this.webApiFiltersPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FiltersFiltersFilterViewSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/filters', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiFiltersfilterIdDelete operation.
     * @callback module:api/FiltersApi~webApiFiltersfilterIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Filter
     * Delete a saved filter.
     * @param {String} filterId Filter ID. Example: \"225494730938493804\".
     * @param {module:api/FiltersApi~webApiFiltersfilterIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiFiltersfilterIdDelete = function(filterId, callback) {
      var postBody = null;

      // verify the required parameter 'filterId' is set
      if (filterId === undefined || filterId === null) {
        throw new Error("Missing the required parameter 'filterId' when calling webApiFiltersfilterIdDelete");
      }


      var pathParams = {
        'filter_id': filterId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/filters/{filter_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiFiltersfilterIdPut operation.
     * @callback module:api/FiltersApi~webApiFiltersfilterIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FiltersFiltersFilterViewSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Filter
     * Update an existing filter
     * @param {String} filterId Filter ID. Example: \"225494730938493804\".
     * @param {Object} opts Optional parameters
     * @param {module:model/FiltersFiltersUpdateFilterSchema} opts.body 
     * @param {module:api/FiltersApi~webApiFiltersfilterIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FiltersFiltersFilterViewSchema200}
     */
    this.webApiFiltersfilterIdPut = function(filterId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'filterId' is set
      if (filterId === undefined || filterId === null) {
        throw new Error("Missing the required parameter 'filterId' when calling webApiFiltersfilterIdPut");
      }


      var pathParams = {
        'filter_id': filterId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FiltersFiltersFilterViewSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/filters/{filter_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
