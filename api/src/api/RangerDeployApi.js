/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/NoDataSchema400', 'model/NoDataSchema401', 'model/NoDataSchema403', 'model/NoDataSchema404', 'model/RangerAutoDeploySchemasCredGroupsDetailsGetSchema200', 'model/RangerAutoDeploySchemasCredGroupsDetailsGetSchemaMany200', 'model/RangerAutoDeploySchemasCredGroupsDetailsPostSchema', 'model/RangerAutoDeploySchemasCredGroupsGetSchema200', 'model/RangerAutoDeploySchemasCredGroupsGetSchemaMany200', 'model/RangerAutoDeploySchemasCredGroupsPostSchema', 'model/RangerAutoDeploySchemasCredPutDetailsSchema', 'model/SuccessResponseSchema200'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/NoDataSchema400'), require('../model/NoDataSchema401'), require('../model/NoDataSchema403'), require('../model/NoDataSchema404'), require('../model/RangerAutoDeploySchemasCredGroupsDetailsGetSchema200'), require('../model/RangerAutoDeploySchemasCredGroupsDetailsGetSchemaMany200'), require('../model/RangerAutoDeploySchemasCredGroupsDetailsPostSchema'), require('../model/RangerAutoDeploySchemasCredGroupsGetSchema200'), require('../model/RangerAutoDeploySchemasCredGroupsGetSchemaMany200'), require('../model/RangerAutoDeploySchemasCredGroupsPostSchema'), require('../model/RangerAutoDeploySchemasCredPutDetailsSchema'), require('../model/SuccessResponseSchema200'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.RangerDeployApi = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.NoDataSchema400, root.S1MgmtApi.NoDataSchema401, root.S1MgmtApi.NoDataSchema403, root.S1MgmtApi.NoDataSchema404, root.S1MgmtApi.RangerAutoDeploySchemasCredGroupsDetailsGetSchema200, root.S1MgmtApi.RangerAutoDeploySchemasCredGroupsDetailsGetSchemaMany200, root.S1MgmtApi.RangerAutoDeploySchemasCredGroupsDetailsPostSchema, root.S1MgmtApi.RangerAutoDeploySchemasCredGroupsGetSchema200, root.S1MgmtApi.RangerAutoDeploySchemasCredGroupsGetSchemaMany200, root.S1MgmtApi.RangerAutoDeploySchemasCredGroupsPostSchema, root.S1MgmtApi.RangerAutoDeploySchemasCredPutDetailsSchema, root.S1MgmtApi.SuccessResponseSchema200);
  }
}(this, function(ApiClient, NoDataSchema400, NoDataSchema401, NoDataSchema403, NoDataSchema404, RangerAutoDeploySchemasCredGroupsDetailsGetSchema200, RangerAutoDeploySchemasCredGroupsDetailsGetSchemaMany200, RangerAutoDeploySchemasCredGroupsDetailsPostSchema, RangerAutoDeploySchemasCredGroupsGetSchema200, RangerAutoDeploySchemasCredGroupsGetSchemaMany200, RangerAutoDeploySchemasCredGroupsPostSchema, RangerAutoDeploySchemasCredPutDetailsSchema, SuccessResponseSchema200) {
  'use strict';

  /**
   * RangerDeploy service.
   * @module api/RangerDeployApi
   * @version 2.1
   */

  /**
   * Constructs a new RangerDeployApi. 
   * @alias module:api/RangerDeployApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the webApiRangerCredGroupsDetailsGet operation.
     * @callback module:api/RangerDeployApi~webApiRangerCredGroupsDetailsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RangerAutoDeploySchemasCredGroupsDetailsGetSchemaMany200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Cred group details
     * Get the data for each row in the Cred Groups details table.
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor Cursor position returned by the last request. Use to iterate over more than 1000 items. Example: \"YWdlbnRfaWQ6NTgwMjkzODE=\". (default to null)
     * @param {String} opts.titleLike Like filter by title
     * @param {Array.<String>} opts.credGroupIds A list of ids to get
     * @param {Number} opts.skip Skip first number of items (0-1000). To iterate over more than 1000 items,  use \"cursor\". Example: \"150\".
     * @param {Array.<String>} opts.siteIds Single Site ID to filter by. Example: \"225494730938493804\".
     * @param {Array.<String>} opts.accountIds Single Account ID to filter by. Example: \"225494730938493804\".
     * @param {Boolean} opts.skipCount If true, total number of items will not be calculated, which speeds up execution time. (default to null)
     * @param {module:model/String} opts.sortOrder Sort direction. Example: \"asc\". (default to null)
     * @param {module:model/String} opts.sortBy The column to sort the results by. Example: \"id\". (default to null)
     * @param {Array.<String>} opts.ids A list of ids to get
     * @param {String} opts.title Exact filter by title
     * @param {Boolean} opts.countOnly If true, only total number of items will be returned, without any of the actual objects. (default to false)
     * @param {String} opts.credTypeLike The type of the cred group
     * @param {Number} opts.limit Limit number of returned items (1-1000). Example: \"10\". (default to 10)
     * @param {module:api/RangerDeployApi~webApiRangerCredGroupsDetailsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RangerAutoDeploySchemasCredGroupsDetailsGetSchemaMany200}
     */
    this.webApiRangerCredGroupsDetailsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'cursor': opts['cursor'],
        'titleLike': opts['titleLike'],
        'skip': opts['skip'],
        'skipCount': opts['skipCount'],
        'sortOrder': opts['sortOrder'],
        'sortBy': opts['sortBy'],
        'title': opts['title'],
        'countOnly': opts['countOnly'],
        'credTypeLike': opts['credTypeLike'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
        'credGroupIds': {
          value: opts['credGroupIds'],
          collectionFormat: 'csv'
        },
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
        'ids': {
          value: opts['ids'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RangerAutoDeploySchemasCredGroupsDetailsGetSchemaMany200;

      return this.apiClient.callApi(
        '/web/api/v2.1/ranger/cred-groups/details', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRangerCredGroupsDetailsPost operation.
     * @callback module:api/RangerDeployApi~webApiRangerCredGroupsDetailsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add cred details
     * Add cred details to a cred group.
     * @param {Object} opts Optional parameters
     * @param {module:model/RangerAutoDeploySchemasCredGroupsDetailsPostSchema} opts.body 
     * @param {module:api/RangerDeployApi~webApiRangerCredGroupsDetailsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiRangerCredGroupsDetailsPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/ranger/cred-groups/details', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRangerCredGroupsDetailsdetailIdDelete operation.
     * @callback module:api/RangerDeployApi~webApiRangerCredGroupsDetailsdetailIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Cred Group Detail
     * Delete cred group detail value.
     * @param {String} detailId Cred group detail ID. Example: \"225494730938493804\".
     * @param {module:api/RangerDeployApi~webApiRangerCredGroupsDetailsdetailIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiRangerCredGroupsDetailsdetailIdDelete = function(detailId, callback) {
      var postBody = null;

      // verify the required parameter 'detailId' is set
      if (detailId === undefined || detailId === null) {
        throw new Error("Missing the required parameter 'detailId' when calling webApiRangerCredGroupsDetailsdetailIdDelete");
      }


      var pathParams = {
        'detail_id': detailId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/ranger/cred-groups/details/{detail_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRangerCredGroupsDetailsdetailIdPut operation.
     * @callback module:api/RangerDeployApi~webApiRangerCredGroupsDetailsdetailIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RangerAutoDeploySchemasCredGroupsDetailsGetSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Cred Group Details
     * Update cred group values.
     * @param {String} detailId Cred group detail ID. Example: \"225494730938493804\".
     * @param {Object} opts Optional parameters
     * @param {module:model/RangerAutoDeploySchemasCredPutDetailsSchema} opts.body 
     * @param {module:api/RangerDeployApi~webApiRangerCredGroupsDetailsdetailIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RangerAutoDeploySchemasCredGroupsDetailsGetSchema200}
     */
    this.webApiRangerCredGroupsDetailsdetailIdPut = function(detailId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'detailId' is set
      if (detailId === undefined || detailId === null) {
        throw new Error("Missing the required parameter 'detailId' when calling webApiRangerCredGroupsDetailsdetailIdPut");
      }


      var pathParams = {
        'detail_id': detailId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RangerAutoDeploySchemasCredGroupsDetailsGetSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/ranger/cred-groups/details/{detail_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRangerCredGroupsGet operation.
     * @callback module:api/RangerDeployApi~webApiRangerCredGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RangerAutoDeploySchemasCredGroupsGetSchemaMany200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Cred groups
     * Get the data for each row in the Cred Groups table.
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor Cursor position returned by the last request. Use to iterate over more than 1000 items. Example: \"YWdlbnRfaWQ6NTgwMjkzODE=\". (default to null)
     * @param {module:model/String} opts.targetOs The os type for this cred group. Example: \"windows\".
     * @param {Number} opts.skip Skip first number of items (0-1000). To iterate over more than 1000 items,  use \"cursor\". Example: \"150\".
     * @param {Array.<String>} opts.siteIds Single Site ID to filter by. Example: \"225494730938493804\".
     * @param {Array.<String>} opts.accountIds Single Account ID to filter by. Example: \"225494730938493804\".
     * @param {Boolean} opts.skipCount If true, total number of items will not be calculated, which speeds up execution time. (default to null)
     * @param {String} opts.groupName Group name being searched
     * @param {module:model/String} opts.sortOrder Sort direction. Example: \"asc\". (default to null)
     * @param {Number} opts.totalDetailsGt Get creds with total details greater than the supplied number
     * @param {module:model/String} opts.sortBy The column to sort the results by. Example: \"id\". (default to null)
     * @param {String} opts.groupNameLike Group name being searched
     * @param {Array.<String>} opts.ids A list of ids to get
     * @param {Boolean} opts.countOnly If true, only total number of items will be returned, without any of the actual objects. (default to false)
     * @param {Number} opts.limit Limit number of returned items (1-1000). Example: \"10\". (default to 10)
     * @param {module:api/RangerDeployApi~webApiRangerCredGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RangerAutoDeploySchemasCredGroupsGetSchemaMany200}
     */
    this.webApiRangerCredGroupsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'cursor': opts['cursor'],
        'targetOs': opts['targetOs'],
        'skip': opts['skip'],
        'skipCount': opts['skipCount'],
        'groupName': opts['groupName'],
        'sortOrder': opts['sortOrder'],
        'totalDetails__gt': opts['totalDetailsGt'],
        'sortBy': opts['sortBy'],
        'groupNameLike': opts['groupNameLike'],
        'countOnly': opts['countOnly'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
        'ids': {
          value: opts['ids'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RangerAutoDeploySchemasCredGroupsGetSchemaMany200;

      return this.apiClient.callApi(
        '/web/api/v2.1/ranger/cred-groups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRangerCredGroupsPost operation.
     * @callback module:api/RangerDeployApi~webApiRangerCredGroupsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RangerAutoDeploySchemasCredGroupsGetSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Cred Group
     * Create a new Cred Group.
     * @param {Object} opts Optional parameters
     * @param {module:model/RangerAutoDeploySchemasCredGroupsPostSchema} opts.body 
     * @param {module:api/RangerDeployApi~webApiRangerCredGroupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RangerAutoDeploySchemasCredGroupsGetSchema200}
     */
    this.webApiRangerCredGroupsPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RangerAutoDeploySchemasCredGroupsGetSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/ranger/cred-groups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRangerCredGroupscredGroupIdDelete operation.
     * @callback module:api/RangerDeployApi~webApiRangerCredGroupscredGroupIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Cred Group
     * Delete cred group value.
     * @param {String} credGroupId Cred group ID. Example: \"225494730938493804\".
     * @param {module:api/RangerDeployApi~webApiRangerCredGroupscredGroupIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponseSchema200}
     */
    this.webApiRangerCredGroupscredGroupIdDelete = function(credGroupId, callback) {
      var postBody = null;

      // verify the required parameter 'credGroupId' is set
      if (credGroupId === undefined || credGroupId === null) {
        throw new Error("Missing the required parameter 'credGroupId' when calling webApiRangerCredGroupscredGroupIdDelete");
      }


      var pathParams = {
        'cred_group_id': credGroupId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SuccessResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/ranger/cred-groups/{cred_group_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
