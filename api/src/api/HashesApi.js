/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/HashesSchemasHashClassificationSchema200', 'model/HashesSchemasHashReputationSchema200', 'model/HashesSchemasHashVerdictSchema200', 'model/NoDataSchema401', 'model/NoDataSchema404'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/HashesSchemasHashClassificationSchema200'), require('../model/HashesSchemasHashReputationSchema200'), require('../model/HashesSchemasHashVerdictSchema200'), require('../model/NoDataSchema401'), require('../model/NoDataSchema404'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.HashesApi = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.HashesSchemasHashClassificationSchema200, root.S1MgmtApi.HashesSchemasHashReputationSchema200, root.S1MgmtApi.HashesSchemasHashVerdictSchema200, root.S1MgmtApi.NoDataSchema401, root.S1MgmtApi.NoDataSchema404);
  }
}(this, function(ApiClient, HashesSchemasHashClassificationSchema200, HashesSchemasHashReputationSchema200, HashesSchemasHashVerdictSchema200, NoDataSchema401, NoDataSchema404) {
  'use strict';

  /**
   * Hashes service.
   * @module api/HashesApi
   * @version 2.1
   */

  /**
   * Constructs a new HashesApi. 
   * @alias module:api/HashesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the webApiHasheshashClassificationGet operation.
     * @callback module:api/HashesApi~webApiHasheshashClassificationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HashesSchemasHashClassificationSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Hash classification
     * [DEPRECATED] Returns hash classification.
     * @param {String} hash Hash
     * @param {module:api/HashesApi~webApiHasheshashClassificationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HashesSchemasHashClassificationSchema200}
     */
    this.webApiHasheshashClassificationGet = function(hash, callback) {
      var postBody = null;

      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling webApiHasheshashClassificationGet");
      }


      var pathParams = {
        'hash': hash
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = HashesSchemasHashClassificationSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/hashes/{hash}/classification', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiHasheshashReputationGet operation.
     * @callback module:api/HashesApi~webApiHasheshashReputationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HashesSchemasHashReputationSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Hash Reputation Rank
     * [DEPRECATED] Please use the /verdict endpoint.  Get the reputation rank of the of a hash, given the required SHA1. To get a hash, run \"threats\" (best if filtered for a Group or Site) and take the fileContentHash value.  Rank is a number measured on a scale of 1-10, where 10 is definitely malicious and 1 is definitely not malicious. 5-10 shows a status of malicious. 1-4 shows a status of not malicious. 0 is status unknown. Example response for a malicious hash looks like this: {\"data\": {\"rank\": \"5\"}}.  Important: This endpoint only returns the rank of the hash if it is known to the management (stored in mgmt DB). For unknown hashes it returns an empty response {\"data\": {}}
     * @param {String} hash Hash
     * @param {module:api/HashesApi~webApiHasheshashReputationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HashesSchemasHashReputationSchema200}
     */
    this.webApiHasheshashReputationGet = function(hash, callback) {
      var postBody = null;

      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling webApiHasheshashReputationGet");
      }


      var pathParams = {
        'hash': hash
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = HashesSchemasHashReputationSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/hashes/{hash}/reputation', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiHasheshashVerdictGet operation.
     * @callback module:api/HashesApi~webApiHasheshashVerdictGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HashesSchemasHashVerdictSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Hash Reputation verdict
     * Get the verdict of the of a hash, given the required SHA1.  A hash, either malicious or non-malicious, means it has been marked as such by the Reputation's sources.  An unknown answer is given for hashes that are not yet known by Reputation.
     * @param {String} hash Hash
     * @param {module:api/HashesApi~webApiHasheshashVerdictGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HashesSchemasHashVerdictSchema200}
     */
    this.webApiHasheshashVerdictGet = function(hash, callback) {
      var postBody = null;

      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling webApiHasheshashVerdictGet");
      }


      var pathParams = {
        'hash': hash
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = HashesSchemasHashVerdictSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/hashes/{hash}/verdict', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
