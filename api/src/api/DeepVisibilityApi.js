/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityApiRequestSchema', 'model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityEventEntitySchemaMany200', 'model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityFileDownloadLinkSchema200', 'model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityPQRequestSchema', 'model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityPowerQueriesResponseSchema200', 'model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryIdRequestSchema', 'model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryIdSchema200', 'model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryStatusResponseSchema200', 'model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilitySuccessSchema200', 'model/NoDataSchema400', 'model/NoDataSchema401', 'model/NoDataSchema404'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityApiRequestSchema'), require('../model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityEventEntitySchemaMany200'), require('../model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityFileDownloadLinkSchema200'), require('../model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityPQRequestSchema'), require('../model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityPowerQueriesResponseSchema200'), require('../model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryIdRequestSchema'), require('../model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryIdSchema200'), require('../model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryStatusResponseSchema200'), require('../model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilitySuccessSchema200'), require('../model/NoDataSchema400'), require('../model/NoDataSchema401'), require('../model/NoDataSchema404'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.DeepVisibilityApi = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityApiRequestSchema, root.S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityEventEntitySchemaMany200, root.S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityFileDownloadLinkSchema200, root.S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityPQRequestSchema, root.S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityPowerQueriesResponseSchema200, root.S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryIdRequestSchema, root.S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryIdSchema200, root.S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryStatusResponseSchema200, root.S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilitySuccessSchema200, root.S1MgmtApi.NoDataSchema400, root.S1MgmtApi.NoDataSchema401, root.S1MgmtApi.NoDataSchema404);
  }
}(this, function(ApiClient, DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityApiRequestSchema, DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityEventEntitySchemaMany200, DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityFileDownloadLinkSchema200, DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityPQRequestSchema, DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityPowerQueriesResponseSchema200, DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryIdRequestSchema, DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryIdSchema200, DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryStatusResponseSchema200, DeepVisibilityDeepVisibilityV2SchemasDeepVisibilitySuccessSchema200, NoDataSchema400, NoDataSchema401, NoDataSchema404) {
  'use strict';

  /**
   * DeepVisibility service.
   * @module api/DeepVisibilityApi
   * @version 2.1
   */

  /**
   * Constructs a new DeepVisibilityApi. 
   * @alias module:api/DeepVisibilityApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the webApiDvCancelQueryPost operation.
     * @callback module:api/DeepVisibilityApi~webApiDvCancelQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilitySuccessSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel Running Query
     * Stop a Deep Visibility Query by queryId. The body is {\"queryID\":\"string_ID\"}. Get the ID of the Deep Visibility query or Power Query from \"init-query\". See \"Create Query and get QueryId\".<br> Deep Visibility requires Complete SKU.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryIdRequestSchema} opts.body 
     * @param {module:api/DeepVisibilityApi~webApiDvCancelQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilitySuccessSchema200}
     */
    this.webApiDvCancelQueryPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeepVisibilityDeepVisibilityV2SchemasDeepVisibilitySuccessSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/dv/cancel-query', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiDvEventsGet operation.
     * @callback module:api/DeepVisibilityApi~webApiDvEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityEventEntitySchemaMany200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Events
     * Get all Deep Visibility events from a queryId. You can use this command to send a sub-query, a new query to run on these events. Get the ID from \"init-query\". See \"Create Query and get QueryId\". <br>For complete documentation, see Query Syntax in the Knowledge Base (support.sentinelone.com) or the Console Help.
     * @param {String} queryId QueryId obtained when creating a query under Create Query. Example: \"q1xx2xx3\".
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor Cursor position returned by the last request. Should be used instead of skip. cursor currently supports sort by with createdAt, pid, processStartTime (default to null)
     * @param {Number} opts.skip Skip first number of items (0-1000). To iterate over more than 1000 items,  use \"cursor\". Example: \"150\".
     * @param {String} opts.subQuery Create a sub query to run on the data that was already pulled
     * @param {module:model/String} opts.sortOrder Event sorting order. Example: \"asc\". (default to null)
     * @param {String} opts.sortBy Events sorted by field. Example: \"createdAt\".
     * @param {Number} opts.limit Limit number of returned items (1-1000). Example: \"10\". (default to 10)
     * @param {module:api/DeepVisibilityApi~webApiDvEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityEventEntitySchemaMany200}
     */
    this.webApiDvEventsGet = function(queryId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'queryId' is set
      if (queryId === undefined || queryId === null) {
        throw new Error("Missing the required parameter 'queryId' when calling webApiDvEventsGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'cursor': opts['cursor'],
        'queryId': queryId,
        'skip': opts['skip'],
        'subQuery': opts['subQuery'],
        'sortOrder': opts['sortOrder'],
        'sortBy': opts['sortBy'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityEventEntitySchemaMany200;

      return this.apiClient.callApi(
        '/web/api/v2.1/dv/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiDvEventsPqPingGet operation.
     * @callback module:api/DeepVisibilityApi~webApiDvEventsPqPingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityPowerQueriesResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ping a Power Query if results haven't been retrieved
     * Ping a Deep Visibility Power Query using the queryId if results have not returned from an initial Power Query or a previous ping
     * @param {Object} opts Optional parameters
     * @param {String} opts.queryId QueryId query param
     * @param {module:api/DeepVisibilityApi~webApiDvEventsPqPingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityPowerQueriesResponseSchema200}
     */
    this.webApiDvEventsPqPingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'queryId': opts['queryId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityPowerQueriesResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/dv/events/pq-ping', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiDvEventsPqPost operation.
     * @callback module:api/DeepVisibilityApi~webApiDvEventsPqPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityPowerQueriesResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Power Query and Get QueryId
     * Start a Deep Visibility Power Query, get back status and potential results (ping afterwards using the queryId if query has not finished)
     * @param {Object} opts Optional parameters
     * @param {module:model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityPQRequestSchema} opts.body 
     * @param {module:api/DeepVisibilityApi~webApiDvEventsPqPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityPowerQueriesResponseSchema200}
     */
    this.webApiDvEventsPqPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityPowerQueriesResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/dv/events/pq', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiDvEventseventTypeGet operation.
     * @callback module:api/DeepVisibilityApi~webApiDvEventseventTypeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityEventEntitySchemaMany200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Events By Type
     * Get Deep Visibility results from the query that matches the given event type. Valid values for Event Type:<br> Process Exit<br> Process Modification<br> Process Creation<br> Duplicate Process Handle<br> Duplicate Thread Handle<br> Open Remote Process Handle<br> Remote Thread Creation<br> Remote Process Termination<br> Command Script<br> IP Connect<br> IP Listen<br> File Modification<br> File Creation<br> File Scan<br> File Deletion<br> File Rename<br> Pre Execution Detection<br> Login<br> Logout<br> GET<br> OPTIONS<br> POST<br> PUT<br> DELETE<br> CONNECT<br> HEAD<br> DNS Resolved<br> DNS Unresolved<br> Task Register<br> Task Update<br> Task Start<br> Task Trigger<br> Task Delete<br> Registry Key Create<br> Registry Key Rename<br> Registry Key Delete<br> Registry Key Export<br> Registry Key Security Changed<br> Registry Key Import<br> Registry Value Modified<br> Registry Value Create<br> Registry Value Delete<br> Behavioral Indicators<br> Module Load
     * @param {String} eventType Event type for Autocomplete
     * @param {String} queryId QueryId obtained when creating a query under Create Query. Example: \"q1xx2xx3\".
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor Cursor position returned by the last request. Should be used instead of skip. cursor currently supports sort by with createdAt, pid, processStartTime (default to null)
     * @param {Number} opts.skip Skip first number of items (0-1000). To iterate over more than 1000 items,  use \"cursor\". Example: \"150\".
     * @param {String} opts.subQuery Create a sub query to run on the data that was already pulled
     * @param {module:model/String} opts.sortOrder Event sorting order. Example: \"asc\". (default to null)
     * @param {String} opts.sortBy Events sorted by field. Example: \"createdAt\".
     * @param {Number} opts.limit Limit number of returned items (1-1000). Example: \"10\". (default to 10)
     * @param {module:api/DeepVisibilityApi~webApiDvEventseventTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityEventEntitySchemaMany200}
     */
    this.webApiDvEventseventTypeGet = function(eventType, queryId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventType' is set
      if (eventType === undefined || eventType === null) {
        throw new Error("Missing the required parameter 'eventType' when calling webApiDvEventseventTypeGet");
      }

      // verify the required parameter 'queryId' is set
      if (queryId === undefined || queryId === null) {
        throw new Error("Missing the required parameter 'queryId' when calling webApiDvEventseventTypeGet");
      }


      var pathParams = {
        'event_type': eventType
      };
      var queryParams = {
        'cursor': opts['cursor'],
        'queryId': queryId,
        'skip': opts['skip'],
        'subQuery': opts['subQuery'],
        'sortOrder': opts['sortOrder'],
        'sortBy': opts['sortBy'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityEventEntitySchemaMany200;

      return this.apiClient.callApi(
        '/web/api/v2.1/dv/events/{event_type}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiDvFetchFileGet operation.
     * @callback module:api/DeepVisibilityApi~webApiDvFetchFileGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityFileDownloadLinkSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download source process file
     * Download the source process file associated with a Deep Visibility event.
     * @param {String} downloadToken Download token
     * @param {module:api/DeepVisibilityApi~webApiDvFetchFileGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityFileDownloadLinkSchema200}
     */
    this.webApiDvFetchFileGet = function(downloadToken, callback) {
      var postBody = null;

      // verify the required parameter 'downloadToken' is set
      if (downloadToken === undefined || downloadToken === null) {
        throw new Error("Missing the required parameter 'downloadToken' when calling webApiDvFetchFileGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'downloadToken': downloadToken,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityFileDownloadLinkSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/dv/fetch-file', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiDvInitQueryPost operation.
     * @callback module:api/DeepVisibilityApi~webApiDvInitQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryIdSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Query and Get QueryId
     * Start a Deep Visibility Query and get the queryId. You can use the queryId for other commands, such as Get Events and Get Query Status. For complete query syntax, see Query Syntax in the Knowledge Base (support.sentinelone.com) or the Console Help. SentinelOne Deep Visibility extends the ActiveEDR capabilities, with full visibility into endpoint data and threat hunting.  Its kernel-based monitoring searches across endpoints for all indicators of compromise (IOC). <br>Rate limit: 1 call per minute for each different user token. <br>Note: From Management version Rio (February 2022) the default of \"isVerbose\" is \"false\" instead of \"true\".<br>Deep Visibility requires Complete SKU.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityApiRequestSchema} opts.body 
     * @param {module:api/DeepVisibilityApi~webApiDvInitQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryIdSchema200}
     */
    this.webApiDvInitQueryPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryIdSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/dv/init-query', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiDvProcessStateGet operation.
     * @callback module:api/DeepVisibilityApi~webApiDvProcessStateGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Process State
     * Get details of all Deep Visibility processes from a queryId.To get the ID from \"init-query\". See \"Create Query and get QueryId\".
     * @param {String} queryId QueryId obtained when creating a query under Create Query. Example: \"q1xx2xx3\".
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor Cursor position returned by the last request. Use to iterate over more than 1000 items. Example: \"YWdlbnRfaWQ6NTgwMjkzODE=\". (default to null)
     * @param {Number} opts.skip Skip first number of items (0-1000). To iterate over more than 1000 items,  use \"cursor\". Example: \"150\".
     * @param {module:model/String} opts.sortOrder Event sorting order. Example: \"asc\". (default to null)
     * @param {String} opts.sortBy Events sorted by field. Example: \"SrcProcStartTime\".
     * @param {Number} opts.limit Limit number of returned items (1-1000). Example: \"10\". (default to 10)
     * @param {module:api/DeepVisibilityApi~webApiDvProcessStateGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webApiDvProcessStateGet = function(queryId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'queryId' is set
      if (queryId === undefined || queryId === null) {
        throw new Error("Missing the required parameter 'queryId' when calling webApiDvProcessStateGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'cursor': opts['cursor'],
        'queryId': queryId,
        'skip': opts['skip'],
        'sortOrder': opts['sortOrder'],
        'sortBy': opts['sortBy'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/web/api/v2.1/dv/process-state', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiDvQueryStatusGet operation.
     * @callback module:api/DeepVisibilityApi~webApiDvQueryStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryStatusResponseSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Query Status
     * Get that status of a Deep Visibility Query. When the status is FINISHED, you can get the results with the queryId in \"Get Events\".<br>Deep Visibility requires Complete SKU.<br>Rate limit: 1 call per second for each different user token. <br>responseState can return these values: EMPTY_RESULTS, EVENTS_RUNNING, FAILED, FAILED_CLIENT, FINISHED, PLANNING, PROCESS_RUNNING, QUERY_CANCEL, QUERY_EXPIRED, QUERY_NOT_FOUND, QUERY_RUNNING, RUNNING, TIMED_OUT.
     * @param {String} queryId QueryId obtained when creating a query under Create Query. Example: \"q1xx2xx3\".
     * @param {module:api/DeepVisibilityApi~webApiDvQueryStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryStatusResponseSchema200}
     */
    this.webApiDvQueryStatusGet = function(queryId, callback) {
      var postBody = null;

      // verify the required parameter 'queryId' is set
      if (queryId === undefined || queryId === null) {
        throw new Error("Missing the required parameter 'queryId' when calling webApiDvQueryStatusGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'queryId': queryId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryStatusResponseSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/dv/query-status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
