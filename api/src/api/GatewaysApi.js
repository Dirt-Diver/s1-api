/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AffectedResultsSchema200', 'model/NoDataSchema400', 'model/NoDataSchema401', 'model/NoDataSchema403', 'model/RangerGatewaySchemaGatewayViewSchema200', 'model/RangerGatewaySchemaGatewayViewSchemaMany200', 'model/RangerGatewaySchemaPostUpdateGatewayData', 'model/RangerGatewaySchemaPutGatewayData'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AffectedResultsSchema200'), require('../model/NoDataSchema400'), require('../model/NoDataSchema401'), require('../model/NoDataSchema403'), require('../model/RangerGatewaySchemaGatewayViewSchema200'), require('../model/RangerGatewaySchemaGatewayViewSchemaMany200'), require('../model/RangerGatewaySchemaPostUpdateGatewayData'), require('../model/RangerGatewaySchemaPutGatewayData'));
  } else {
    // Browser globals (root is window)
    if (!root.S1MgmtApi) {
      root.S1MgmtApi = {};
    }
    root.S1MgmtApi.GatewaysApi = factory(root.S1MgmtApi.ApiClient, root.S1MgmtApi.AffectedResultsSchema200, root.S1MgmtApi.NoDataSchema400, root.S1MgmtApi.NoDataSchema401, root.S1MgmtApi.NoDataSchema403, root.S1MgmtApi.RangerGatewaySchemaGatewayViewSchema200, root.S1MgmtApi.RangerGatewaySchemaGatewayViewSchemaMany200, root.S1MgmtApi.RangerGatewaySchemaPostUpdateGatewayData, root.S1MgmtApi.RangerGatewaySchemaPutGatewayData);
  }
}(this, function(ApiClient, AffectedResultsSchema200, NoDataSchema400, NoDataSchema401, NoDataSchema403, RangerGatewaySchemaGatewayViewSchema200, RangerGatewaySchemaGatewayViewSchemaMany200, RangerGatewaySchemaPostUpdateGatewayData, RangerGatewaySchemaPutGatewayData) {
  'use strict';

  /**
   * Gateways service.
   * @module api/GatewaysApi
   * @version 2.1
   */

  /**
   * Constructs a new GatewaysApi. 
   * @alias module:api/GatewaysApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the webApiRangerGatewaysGet operation.
     * @callback module:api/GatewaysApi~webApiRangerGatewaysGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RangerGatewaySchemaGatewayViewSchemaMany200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Gateways
     * Get the gateways in your deployment that match the filter from a Ranger scan.   Ranger requires a Ranger license.
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor Cursor position returned by the last request. Use to iterate over more than 1000 items. Example: \"YWdlbnRfaWQ6NTgwMjkzODE=\". (default to null)
     * @param {Number} opts.numberOfAgentsGte Agent count (more than or equal)
     * @param {Number} opts.numberOfRangersLte Ranger count (less than or equal)
     * @param {Date} opts.createdAtGt Gateway created after this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {String} opts.numberOfRangersBetween The number of non decommissioned agents in this network. Example: \"2-8\".
     * @param {Boolean} opts.snmpScan SNMP scan enabled
     * @param {Boolean} opts.icmpScan ICMP scan enabled
     * @param {String} opts.externalIp Search external ip using a CIDR expression or exact IP
     * @param {Boolean} opts.scanOnlyLocalSubnets Allow remote tasks form this network
     * @param {Number} opts.connectedRangersGt Total agents (more than)
     * @param {Array.<Number>} opts.udpPortsContains Free-text filter by udp port (supports multiple values). Example: \"137,2002\".
     * @param {String} opts.connectedRangersBetween The total of non decommissioned agents in the account. Example: \"2-8\".
     * @param {Date} opts.updatedAtLt Gateway updated before this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Boolean} opts.archived Archived network
     * @param {Array.<String>} opts.ids List of gateway ids. Example: \"225494730938493804,225494730938493915\".
     * @param {String} opts.query Free text query
     * @param {Boolean} opts.countOnly If true, only total number of items will be returned, without any of the actual objects. (default to false)
     * @param {Number} opts.numberOfRangersGt Ranger count (more than)
     * @param {Number} opts.agentPercentageLt Agent percentage (less than)
     * @param {Number} opts.limit Limit number of returned items (1-1000). Example: \"10\". (default to 10)
     * @param {Number} opts.totalAgentsLte Total agents (less than or equal)
     * @param {Number} opts.connectedRangersGte Total agents (more than or equal)
     * @param {Date} opts.createdAtLt Gateway created before this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {String} opts.agentPercentageBetween Percentage of agents of the account in this network calculated as numberOfAgents/totalAgents * 100. Example: \"70-80\".
     * @param {Date} opts.updatedAtGte Gateway updated after or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Boolean} opts.smbScan SMB scan enabled
     * @param {Array.<String>} opts.externalIpContains Free-text filter by visible IP (supports multiple values). Example: \"192.168.0.1/24,10.1\".
     * @param {Number} opts.skip Skip first number of items (0-1000). To iterate over more than 1000 items,  use \"cursor\". Example: \"150\".
     * @param {Number} opts.agentPercentageGt Agent percentage (more than)
     * @param {Boolean} opts.skipCount If true, total number of items will not be calculated, which speeds up execution time. (default to null)
     * @param {module:model/String} opts.sortOrder Sort direction. Example: \"asc\". (default to null)
     * @param {Date} opts.updatedAtGt Gateway updated after this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Number} opts.connectedRangersLte Total agents (less than or equal)
     * @param {Number} opts.numberOfRangersLt Ranger count (less than)
     * @param {Array.<String>} opts.manufacturerContains Free-text filter by manufacturer (supports multiple values). Example: \"Company\".
     * @param {Array.<String>} opts.networkNameContains Free-text filter by network name (supports multiple values). Example: \"Network1\".
     * @param {Date} opts.createdAtLte Gateway created before or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Boolean} opts.rdnsScan RDNS scan enabled
     * @param {Number} opts.totalAgentsGte Total agents (more than or equal)
     * @param {Number} opts.agentPercentageLte Agent percentage (less than or equal)
     * @param {String} opts.allowScan Do we allow scanning in this network
     * @param {Number} opts.numberOfAgentsLt Agent count (less than)
     * @param {Boolean} opts._new True if this is network was first seen some days ago, 3 by default
     * @param {String} opts.totalAgentsBetween The total of non decommissioned agents in the account. Example: \"2-8\".
     * @param {Array.<Number>} opts.tcpPortsContains Free-text filter by tcp port (supports multiple values). Example: \"80,24\".
     * @param {Number} opts.totalAgentsLt Total agents (less than)
     * @param {module:model/String} opts.sortBy The column to sort the results by. Example: \"id\". (default to null)
     * @param {Number} opts.numberOfAgentsLte Agent count (less than or equal)
     * @param {Date} opts.updatedAtLte Gateway updated before or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {String} opts.createdAtBetween Date range for creation time (format: <from_timestamp>-<to_timestamp>, inclusive). Example: \"1514978890136-1514978650130\".
     * @param {Array.<String>} opts.ipContains Free-text filter by IP Address (supports multiple values). Example: \"192.168.0.1/24,10.1\".
     * @param {String} opts.numberOfAgentsBetween The number of non decommissioned agents in this network. Example: \"2-8\".
     * @param {String} opts.ip Search ip using a CIDR expression exact IP
     * @param {String} opts.manufacturer The gateway manufacturer obtained from the mac address
     * @param {String} opts.updatedAtBetween Date range for update time (format: <from_timestamp>-<to_timestamp>, inclusive). Example: \"1514978890136-1514978650130\".
     * @param {Date} opts.createdAtGte Gateway created after or at this timestamp. Example: \"2018-02-27T04:49:26.257525Z\".
     * @param {Array.<String>} opts.siteIds List of Site IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Array.<String>} opts.accountIds List of Account IDs to filter by. Example: \"225494730938493804,225494730938493915\".
     * @param {Number} opts.numberOfAgentsGt Agent count (more than)
     * @param {Number} opts.numberOfRangersGte Ranger count (more than or equal)
     * @param {Array.<String>} opts.macAddressContains Free-text filter by mac address (supports multiple values). Example: \"aa:ee:b1\".
     * @param {String} opts.macAddress The gateway mac address
     * @param {Number} opts.agentPercentageGte Agent percentage (more than or equal)
     * @param {Boolean} opts.mdnsScan MDNS scan enabled
     * @param {Number} opts.connectedRangersLt Total agents (less than)
     * @param {Number} opts.totalAgentsGt Total agents (more than)
     * @param {module:api/GatewaysApi~webApiRangerGatewaysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RangerGatewaySchemaGatewayViewSchemaMany200}
     */
    this.webApiRangerGatewaysGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'cursor': opts['cursor'],
        'numberOfAgents__gte': opts['numberOfAgentsGte'],
        'numberOfRangers__lte': opts['numberOfRangersLte'],
        'createdAt__gt': opts['createdAtGt'],
        'numberOfRangers__between': opts['numberOfRangersBetween'],
        'snmpScan': opts['snmpScan'],
        'icmpScan': opts['icmpScan'],
        'externalIp': opts['externalIp'],
        'scanOnlyLocalSubnets': opts['scanOnlyLocalSubnets'],
        'connectedRangers__gt': opts['connectedRangersGt'],
        'connectedRangers__between': opts['connectedRangersBetween'],
        'updatedAt__lt': opts['updatedAtLt'],
        'archived': opts['archived'],
        'query': opts['query'],
        'countOnly': opts['countOnly'],
        'numberOfRangers__gt': opts['numberOfRangersGt'],
        'agentPercentage__lt': opts['agentPercentageLt'],
        'limit': opts['limit'],
        'totalAgents__lte': opts['totalAgentsLte'],
        'connectedRangers__gte': opts['connectedRangersGte'],
        'createdAt__lt': opts['createdAtLt'],
        'agentPercentage__between': opts['agentPercentageBetween'],
        'updatedAt__gte': opts['updatedAtGte'],
        'smbScan': opts['smbScan'],
        'skip': opts['skip'],
        'agentPercentage__gt': opts['agentPercentageGt'],
        'skipCount': opts['skipCount'],
        'sortOrder': opts['sortOrder'],
        'updatedAt__gt': opts['updatedAtGt'],
        'connectedRangers__lte': opts['connectedRangersLte'],
        'numberOfRangers__lt': opts['numberOfRangersLt'],
        'createdAt__lte': opts['createdAtLte'],
        'rdnsScan': opts['rdnsScan'],
        'totalAgents__gte': opts['totalAgentsGte'],
        'agentPercentage__lte': opts['agentPercentageLte'],
        'allowScan': opts['allowScan'],
        'numberOfAgents__lt': opts['numberOfAgentsLt'],
        'new': opts['_new'],
        'totalAgents__between': opts['totalAgentsBetween'],
        'totalAgents__lt': opts['totalAgentsLt'],
        'sortBy': opts['sortBy'],
        'numberOfAgents__lte': opts['numberOfAgentsLte'],
        'updatedAt__lte': opts['updatedAtLte'],
        'createdAt__between': opts['createdAtBetween'],
        'numberOfAgents__between': opts['numberOfAgentsBetween'],
        'ip': opts['ip'],
        'manufacturer': opts['manufacturer'],
        'updatedAt__between': opts['updatedAtBetween'],
        'createdAt__gte': opts['createdAtGte'],
        'numberOfAgents__gt': opts['numberOfAgentsGt'],
        'numberOfRangers__gte': opts['numberOfRangersGte'],
        'macAddress': opts['macAddress'],
        'agentPercentage__gte': opts['agentPercentageGte'],
        'mdnsScan': opts['mdnsScan'],
        'connectedRangers__lt': opts['connectedRangersLt'],
        'totalAgents__gt': opts['totalAgentsGt'],
      };
      var collectionQueryParams = {
        'udpPorts__contains': {
          value: opts['udpPortsContains'],
          collectionFormat: 'csv'
        },
        'ids': {
          value: opts['ids'],
          collectionFormat: 'csv'
        },
        'externalIp__contains': {
          value: opts['externalIpContains'],
          collectionFormat: 'csv'
        },
        'manufacturer__contains': {
          value: opts['manufacturerContains'],
          collectionFormat: 'csv'
        },
        'networkName__contains': {
          value: opts['networkNameContains'],
          collectionFormat: 'csv'
        },
        'tcpPorts__contains': {
          value: opts['tcpPortsContains'],
          collectionFormat: 'csv'
        },
        'ip__contains': {
          value: opts['ipContains'],
          collectionFormat: 'csv'
        },
        'siteIds': {
          value: opts['siteIds'],
          collectionFormat: 'csv'
        },
        'accountIds': {
          value: opts['accountIds'],
          collectionFormat: 'csv'
        },
        'macAddress__contains': {
          value: opts['macAddressContains'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RangerGatewaySchemaGatewayViewSchemaMany200;

      return this.apiClient.callApi(
        '/web/api/v2.1/ranger/gateways', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRangerGatewaysUpdatePost operation.
     * @callback module:api/GatewaysApi~webApiRangerGatewaysUpdatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AffectedResultsSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Gateways
     * Change the status of filtered gateways discovered by Ranger. You can set the archived status, whether the network behind the gateway may be scanned by Ranger, and whether Ranger will scan only local networks.
     * @param {Object} opts Optional parameters
     * @param {module:model/RangerGatewaySchemaPostUpdateGatewayData} opts.body 
     * @param {module:api/GatewaysApi~webApiRangerGatewaysUpdatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AffectedResultsSchema200}
     */
    this.webApiRangerGatewaysUpdatePost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AffectedResultsSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/ranger/gateways/update', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webApiRangerGatewaysgatewayIdPut operation.
     * @callback module:api/GatewaysApi~webApiRangerGatewaysgatewayIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RangerGatewaySchemaGatewayViewSchema200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Gateway
     * Change the Ranger scan configuration for a gateway that Ranger discovered
     * @param {String} gatewayId Gateway ID. Example: \"225494730938493804\".
     * @param {Object} opts Optional parameters
     * @param {module:model/RangerGatewaySchemaPutGatewayData} opts.body 
     * @param {module:api/GatewaysApi~webApiRangerGatewaysgatewayIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RangerGatewaySchemaGatewayViewSchema200}
     */
    this.webApiRangerGatewaysgatewayIdPut = function(gatewayId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'gatewayId' is set
      if (gatewayId === undefined || gatewayId === null) {
        throw new Error("Missing the required parameter 'gatewayId' when calling webApiRangerGatewaysgatewayIdPut");
      }


      var pathParams = {
        'gateway_id': gatewayId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiTokenAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RangerGatewaySchemaGatewayViewSchema200;

      return this.apiClient.callApi(
        '/web/api/v2.1/ranger/gateways/{gateway_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
