/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.SystemApi();
  });

  describe('(package)', function() {
    describe('SystemApi', function() {
      describe('webApiSystemConfigurationGet', function() {
        it('should call webApiSystemConfigurationGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSystemConfigurationGet call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.siteIds = ["siteIds_example"];

          instance.webApiSystemConfigurationGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SystemSystemConfigurationSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SystemSystemConfigurationSchema200Data);
                  expect(data.data.rememberMeLengthRange).to.be.a(S1MgmtApi.SystemSystemConfigurationSchema200DataRememberMeLengthRange);
                    expect(data.data.rememberMeLengthRange.min).to.be.a('number');
                expect(data.data.rememberMeLengthRange.min).to.be(60);
                expect(data.data.rememberMeLengthRange.max).to.be.a('number');
                expect(data.data.rememberMeLengthRange.max).to.be(1440);
              expect(data.data.accessibleUrl).to.be.a('string');
              expect(data.data.accessibleUrl).to.be("");
              expect(data.data.cloudIntelligenceOn).to.be.a('boolean');
              expect(data.data.cloudIntelligenceOn).to.be(false);
              expect(data.data.advancedModeAllowChanges).to.be.a('boolean');
              expect(data.data.advancedModeAllowChanges).to.be(false);
              expect(data.data.maxCoreLicenses).to.be.a('number');
              expect(data.data.maxCoreLicenses).to.be(0);
              expect(data.data.region).to.be.a('string');
              expect(data.data.region).to.be("");
              expect(data.data.globalSalesforceId).to.be.a('string');
              expect(data.data.globalSalesforceId).to.be("");
              expect(data.data.advancedMode).to.be.a('boolean');
              expect(data.data.advancedMode).to.be(false);
              expect(data.data.earlyAccess).to.be.a('boolean');
              expect(data.data.earlyAccess).to.be(false);
              expect(data.data.unlimitedComplete).to.be.a('boolean');
              expect(data.data.unlimitedComplete).to.be(false);
              expect(data.data.cloudLastConnectionTime).to.be.a(Date);
              expect(data.data.cloudLastConnectionTime).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.unlimitedControl).to.be.a('boolean');
              expect(data.data.unlimitedControl).to.be(false);
              expect(data.data.allowDuplicateSite).to.be.a('boolean');
              expect(data.data.allowDuplicateSite).to.be(false);
              expect(data.data.globalSharedConsole).to.be.a('boolean');
              expect(data.data.globalSharedConsole).to.be(false);
              expect(data.data.scalyrUrl).to.be.a('string');
              expect(data.data.scalyrUrl).to.be("");
              expect(data.data.maxControlLicenses).to.be.a('number');
              expect(data.data.maxControlLicenses).to.be(0);
              expect(data.data.maxCompleteLicenses).to.be.a('number');
              expect(data.data.maxCompleteLicenses).to.be(0);
              expect(data.data.rememberMeLength).to.be.a('number');
              expect(data.data.rememberMeLength).to.be(0);
              expect(data.data.licenses).to.be.a(S1MgmtApi.SystemSystemConfigurationSchema200DataLicenses);
                    {
                  let dataCtr = data.data.licenses.modules;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesModules);
                    expect(data.displayName).to.be.a('string');
                    expect(data.displayName).to.be("");
                    expect(data.majorVersion).to.be.a('number');
                    expect(data.majorVersion).to.be(0);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
    
                          }
                }
                {
                  let dataCtr = data.data.licenses.settings;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesSettings);
                    expect(data.settingGroup).to.be.a('string');
                    expect(data.settingGroup).to.be("");
                    expect(data.setting).to.be.a(Object);
                    expect(data.setting).to.be();
                    expect(data.groupName).to.be.a(Object);
                    expect(data.groupName).to.be();
                    expect(data.settingGroupDisplayName).to.be.a('string');
                    expect(data.settingGroupDisplayName).to.be("");
                    expect(data.displayName).to.be.a('string');
                    expect(data.displayName).to.be("");
    
                          }
                }
                {
                  let dataCtr = data.data.licenses.bundles;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesBundles);
                    expect(data.minorVersion).to.be.a('number');
                    expect(data.minorVersion).to.be(0);
                    expect(data.majorVersion).to.be.a('number');
                    expect(data.majorVersion).to.be(0);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data.surfaces;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesSurfaces);
                        expect(data.count).to.be.a('number');
                        expect(data.count).to.be(0);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
        
                              }
                    }
                    expect(data.totalSurfaces).to.be.a('number');
                    expect(data.totalSurfaces).to.be(0);
                    expect(data.displayName).to.be.a('string');
                    expect(data.displayName).to.be("");
    
                          }
                }
              {
                let dataCtr = data.data.allowedDomains;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.SystemSystemConfigurationSchema200DataAllowedDomains);
                  expect(data.inherited).to.be.a('boolean');
                  expect(data.inherited).to.be(false);
                  expect(data.domain).to.be.a('string');
                  expect(data.domain).to.be("");
  
                        }
              }
              expect(data.data.passwordExpiration).to.be.a('number');
              expect(data.data.passwordExpiration).to.be(60);
              expect(data.data.uiInactivityTimeoutSeconds).to.be.a(Object);
              expect(data.data.uiInactivityTimeoutSeconds).to.be();
              {
                let dataCtr = data.data.earlyAccessPlatforms;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("sdk");
                }
              }
              expect(data.data.globalTwoFaEnabled).to.be.a('boolean');
              expect(data.data.globalTwoFaEnabled).to.be(false);
              expect(data.data.unlimitedCore).to.be.a('boolean');
              expect(data.data.unlimitedCore).to.be(false);
              expect(data.data.tfaEnrollmentExpiration).to.be.a(Object);
              expect(data.data.tfaEnrollmentExpiration).to.be();
              expect(data.data.uiInactivityTimeoutSecondsRange).to.be.a(S1MgmtApi.SystemSystemConfigurationSchema200DataUiInactivityTimeoutSecondsRange);
                    expect(data.data.uiInactivityTimeoutSecondsRange.min).to.be.a('number');
                expect(data.data.uiInactivityTimeoutSecondsRange.min).to.be(300);
                expect(data.data.uiInactivityTimeoutSecondsRange.max).to.be.a('number');
                expect(data.data.uiInactivityTimeoutSecondsRange.max).to.be(600);
              expect(data.data.passwordExpirationRange).to.be.a(S1MgmtApi.SystemSystemConfigurationSchema200DataPasswordExpirationRange);
                    expect(data.data.passwordExpirationRange.min).to.be.a('number');
                expect(data.data.passwordExpirationRange.min).to.be(30);
                expect(data.data.passwordExpirationRange.max).to.be.a('number');
                expect(data.data.passwordExpirationRange.max).to.be(180);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSystemConfigurationPut', function() {
        it('should call webApiSystemConfigurationPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSystemConfigurationPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.SystemPutSystemConfiguration();
          opts.body.filter = new S1MgmtApi.SystemPutSystemConfigurationFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.SystemPutSystemConfigurationData();
          opts.body.data.passwordExpiration = 60;
          opts.body.data.uiInactivityTimeoutSeconds = ;
          opts.body.data.rememberMeLength = 10080;
          opts.body.data.accessibleUrl = "";
          opts.body.data.earlyAccessPlatforms = ["sdk"];
          opts.body.data.globalTwoFaEnabled = false;
          opts.body.data.earlyAccess = false;
          opts.body.data.cloudIntelligenceOn = false;
          opts.body.data.allowedDomains = [new S1MgmtApi.SystemSystemConfigurationSchema200DataAllowedDomains()];
          opts.body.data.allowedDomains[0].inherited = false;
          opts.body.data.allowedDomains[0].domain = "";
          opts.body.data.cloudLastConnectionTime = 2018-02-27T04:49:26.257525Z;
          opts.body.data.tfaEnrollmentExpiration = ;
          opts.body.data.allowDuplicateSite = false;
          opts.body.data.advancedMode = false;

          instance.webApiSystemConfigurationPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SystemSystemConfigurationSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SystemSystemConfigurationSchema200Data);
                  expect(data.data.rememberMeLengthRange).to.be.a(S1MgmtApi.SystemSystemConfigurationSchema200DataRememberMeLengthRange);
                    expect(data.data.rememberMeLengthRange.min).to.be.a('number');
                expect(data.data.rememberMeLengthRange.min).to.be(60);
                expect(data.data.rememberMeLengthRange.max).to.be.a('number');
                expect(data.data.rememberMeLengthRange.max).to.be(1440);
              expect(data.data.accessibleUrl).to.be.a('string');
              expect(data.data.accessibleUrl).to.be("");
              expect(data.data.cloudIntelligenceOn).to.be.a('boolean');
              expect(data.data.cloudIntelligenceOn).to.be(false);
              expect(data.data.advancedModeAllowChanges).to.be.a('boolean');
              expect(data.data.advancedModeAllowChanges).to.be(false);
              expect(data.data.maxCoreLicenses).to.be.a('number');
              expect(data.data.maxCoreLicenses).to.be(0);
              expect(data.data.region).to.be.a('string');
              expect(data.data.region).to.be("");
              expect(data.data.globalSalesforceId).to.be.a('string');
              expect(data.data.globalSalesforceId).to.be("");
              expect(data.data.advancedMode).to.be.a('boolean');
              expect(data.data.advancedMode).to.be(false);
              expect(data.data.earlyAccess).to.be.a('boolean');
              expect(data.data.earlyAccess).to.be(false);
              expect(data.data.unlimitedComplete).to.be.a('boolean');
              expect(data.data.unlimitedComplete).to.be(false);
              expect(data.data.cloudLastConnectionTime).to.be.a(Date);
              expect(data.data.cloudLastConnectionTime).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.unlimitedControl).to.be.a('boolean');
              expect(data.data.unlimitedControl).to.be(false);
              expect(data.data.allowDuplicateSite).to.be.a('boolean');
              expect(data.data.allowDuplicateSite).to.be(false);
              expect(data.data.globalSharedConsole).to.be.a('boolean');
              expect(data.data.globalSharedConsole).to.be(false);
              expect(data.data.scalyrUrl).to.be.a('string');
              expect(data.data.scalyrUrl).to.be("");
              expect(data.data.maxControlLicenses).to.be.a('number');
              expect(data.data.maxControlLicenses).to.be(0);
              expect(data.data.maxCompleteLicenses).to.be.a('number');
              expect(data.data.maxCompleteLicenses).to.be(0);
              expect(data.data.rememberMeLength).to.be.a('number');
              expect(data.data.rememberMeLength).to.be(0);
              expect(data.data.licenses).to.be.a(S1MgmtApi.SystemSystemConfigurationSchema200DataLicenses);
                    {
                  let dataCtr = data.data.licenses.modules;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesModules);
                    expect(data.displayName).to.be.a('string');
                    expect(data.displayName).to.be("");
                    expect(data.majorVersion).to.be.a('number');
                    expect(data.majorVersion).to.be(0);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
    
                          }
                }
                {
                  let dataCtr = data.data.licenses.settings;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesSettings);
                    expect(data.settingGroup).to.be.a('string');
                    expect(data.settingGroup).to.be("");
                    expect(data.setting).to.be.a(Object);
                    expect(data.setting).to.be();
                    expect(data.groupName).to.be.a(Object);
                    expect(data.groupName).to.be();
                    expect(data.settingGroupDisplayName).to.be.a('string');
                    expect(data.settingGroupDisplayName).to.be("");
                    expect(data.displayName).to.be.a('string');
                    expect(data.displayName).to.be("");
    
                          }
                }
                {
                  let dataCtr = data.data.licenses.bundles;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesBundles);
                    expect(data.minorVersion).to.be.a('number');
                    expect(data.minorVersion).to.be(0);
                    expect(data.majorVersion).to.be.a('number');
                    expect(data.majorVersion).to.be(0);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data.surfaces;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesSurfaces);
                        expect(data.count).to.be.a('number');
                        expect(data.count).to.be(0);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
        
                              }
                    }
                    expect(data.totalSurfaces).to.be.a('number');
                    expect(data.totalSurfaces).to.be(0);
                    expect(data.displayName).to.be.a('string');
                    expect(data.displayName).to.be("");
    
                          }
                }
              {
                let dataCtr = data.data.allowedDomains;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.SystemSystemConfigurationSchema200DataAllowedDomains);
                  expect(data.inherited).to.be.a('boolean');
                  expect(data.inherited).to.be(false);
                  expect(data.domain).to.be.a('string');
                  expect(data.domain).to.be("");
  
                        }
              }
              expect(data.data.passwordExpiration).to.be.a('number');
              expect(data.data.passwordExpiration).to.be(60);
              expect(data.data.uiInactivityTimeoutSeconds).to.be.a(Object);
              expect(data.data.uiInactivityTimeoutSeconds).to.be();
              {
                let dataCtr = data.data.earlyAccessPlatforms;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("sdk");
                }
              }
              expect(data.data.globalTwoFaEnabled).to.be.a('boolean');
              expect(data.data.globalTwoFaEnabled).to.be(false);
              expect(data.data.unlimitedCore).to.be.a('boolean');
              expect(data.data.unlimitedCore).to.be(false);
              expect(data.data.tfaEnrollmentExpiration).to.be.a(Object);
              expect(data.data.tfaEnrollmentExpiration).to.be();
              expect(data.data.uiInactivityTimeoutSecondsRange).to.be.a(S1MgmtApi.SystemSystemConfigurationSchema200DataUiInactivityTimeoutSecondsRange);
                    expect(data.data.uiInactivityTimeoutSecondsRange.min).to.be.a('number');
                expect(data.data.uiInactivityTimeoutSecondsRange.min).to.be(300);
                expect(data.data.uiInactivityTimeoutSecondsRange.max).to.be.a('number');
                expect(data.data.uiInactivityTimeoutSecondsRange.max).to.be(600);
              expect(data.data.passwordExpirationRange).to.be.a(S1MgmtApi.SystemSystemConfigurationSchema200DataPasswordExpirationRange);
                    expect(data.data.passwordExpirationRange.min).to.be.a('number');
                expect(data.data.passwordExpirationRange.min).to.be(30);
                expect(data.data.passwordExpirationRange.max).to.be.a('number');
                expect(data.data.passwordExpirationRange.max).to.be(180);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSystemEnvGet', function() {
        it('should call webApiSystemEnvGet successfully', function(done) {
          // TODO: uncomment webApiSystemEnvGet call and complete the assertions
          /*

          instance.webApiSystemEnvGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SystemSystemEnvSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SystemSystemEnvSchema200Data);
                  expect(data.data.url).to.be.a('string');
              expect(data.data.url).to.be("");
              expect(data.data.env).to.be.a('string');
              expect(data.data.env).to.be("");
              expect(data.data.isProd).to.be.a('boolean');
              expect(data.data.isProd).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSystemInfoGet', function() {
        it('should call webApiSystemInfoGet successfully', function(done) {
          // TODO: uncomment webApiSystemInfoGet call and complete the assertions
          /*

          instance.webApiSystemInfoGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SystemSystemInfoSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SystemSystemInfoSchema200Data);
                  expect(data.data.build).to.be.a('string');
              expect(data.data.build).to.be("");
              expect(data.data.version).to.be.a('string');
              expect(data.data.version).to.be("");
              expect(data.data.release).to.be.a('string');
              expect(data.data.release).to.be("");
              expect(data.data.patch).to.be.a('string');
              expect(data.data.patch).to.be("");
              expect(data.data.latestAgentVersion).to.be.a('string');
              expect(data.data.latestAgentVersion).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSystemStatusCacheGet', function() {
        it('should call webApiSystemStatusCacheGet successfully', function(done) {
          // TODO: uncomment webApiSystemStatusCacheGet call and complete the assertions
          /*

          instance.webApiSystemStatusCacheGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SystemSystemStatusSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SystemSystemStatusSchema200Data);
                  expect(data.data.health).to.be.a('string');
              expect(data.data.health).to.be("ok");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSystemStatusDbGet', function() {
        it('should call webApiSystemStatusDbGet successfully', function(done) {
          // TODO: uncomment webApiSystemStatusDbGet call and complete the assertions
          /*

          instance.webApiSystemStatusDbGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SystemSystemStatusSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SystemSystemStatusSchema200Data);
                  expect(data.data.health).to.be.a('string');
              expect(data.data.health).to.be("ok");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSystemStatusGet', function() {
        it('should call webApiSystemStatusGet successfully', function(done) {
          // TODO: uncomment webApiSystemStatusGet call and complete the assertions
          /*

          instance.webApiSystemStatusGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SystemSystemStatusSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SystemSystemStatusSchema200Data);
                  expect(data.data.health).to.be.a('string');
              expect(data.data.health).to.be("ok");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
