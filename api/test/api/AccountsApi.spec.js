/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.AccountsApi();
  });

  describe('(package)', function() {
    describe('AccountsApi', function() {
      describe('webApiAccountsGet', function() {
        it('should call webApiAccountsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiAccountsGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "null";
          opts.features = ["features_example"];
          opts.updatedAt = new Date("2013-10-20T19:20:30+01:00");
          opts.expiration = new Date("2013-10-20T19:20:30+01:00");
          opts.query = "query_example";
          opts.ids = ["ids_example"];
          opts.isDefault = true;
          opts.countOnly = false;
          opts.limit = 10;
          opts.skip = 56;
          opts.skipCount = null;
          opts.activeLicenses = 56;
          opts.sortOrder = "null";
          opts.accountType = "accountType_example";
          opts.totalLicenses = 56;
          opts.usageType = "usageType_example";
          opts.states = ["states_example"];
          opts.billingMode = "billingMode_example";
          opts.sortBy = "null";
          opts.name = "name_example";
          opts.accountIds = ["accountIds_example"];
          opts.createdAt = new Date("2013-10-20T19:20:30+01:00");

          instance.webApiAccountsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AccountsSchemasAccountViewSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.AccountsSchemasAccountViewSchemaMany200Data);
                expect(data.numberOfSites).to.be.a('number');
                expect(data.numberOfSites).to.be(0);
                expect(data.coreSites).to.be.a('number');
                expect(data.coreSites).to.be(0);
                expect(data.completeSites).to.be.a('number');
                expect(data.completeSites).to.be(0);
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.totalComplete).to.be.a('number');
                expect(data.totalComplete).to.be(0);
                expect(data.expiration).to.be.a(Date);
                expect(data.expiration).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.isDefault).to.be.a('boolean');
                expect(data.isDefault).to.be(false);
                expect(data.controlSites).to.be.a('number');
                expect(data.controlSites).to.be(0);
                expect(data.agentsInCoreSku).to.be.a('number');
                expect(data.agentsInCoreSku).to.be(0);
                expect(data.state).to.be.a('string');
                expect(data.state).to.be("active");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("182483948009279264");
                expect(data.creatorId).to.be.a('string');
                expect(data.creatorId).to.be("225494730938493804");
                expect(data.accountType).to.be.a('string');
                expect(data.accountType).to.be("");
                expect(data.unlimitedComplete).to.be.a('boolean');
                expect(data.unlimitedComplete).to.be(false);
                expect(data.salesforceId).to.be.a('string');
                expect(data.salesforceId).to.be("");
                expect(data.unlimitedControl).to.be.a('boolean');
                expect(data.unlimitedControl).to.be(false);
                expect(data.totalControl).to.be.a('number');
                expect(data.totalControl).to.be(0);
                {
                  let dataCtr = data.skus;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.AccountsSchemasAccountViewSchemaMany200Skus);
                    expect(data.unlimited).to.be.a('boolean');
                    expect(data.unlimited).to.be(false);
                    expect(data.totalLicenses).to.be.a('number');
                    expect(data.totalLicenses).to.be(0);
                    expect(data.agentsInSku).to.be.a('number');
                    expect(data.agentsInSku).to.be(0);
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("Core");
    
                          }
                }
                expect(data.totalLicenses).to.be.a('number');
                expect(data.totalLicenses).to.be(0);
                expect(data.usageType).to.be.a('string');
                expect(data.usageType).to.be("customer");
                expect(data.totalCore).to.be.a('number');
                expect(data.totalCore).to.be(0);
                expect(data.billingMode).to.be.a('string');
                expect(data.billingMode).to.be("subscription");
                expect(data.agentsInCompleteSku).to.be.a('number');
                expect(data.agentsInCompleteSku).to.be(0);
                expect(data.externalId).to.be.a('string');
                expect(data.externalId).to.be("");
                expect(data.unlimitedExpiration).to.be.a('boolean');
                expect(data.unlimitedExpiration).to.be(false);
                expect(data.licenses).to.be.a(S1MgmtApi.AccountsSchemasAccountViewSchemaMany200Licenses);
                      {
                    let dataCtr = data.licenses.modules;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesModules);
                      expect(data.displayName).to.be.a('string');
                      expect(data.displayName).to.be("");
                      expect(data.majorVersion).to.be.a('number');
                      expect(data.majorVersion).to.be(0);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
      
                            }
                  }
                  {
                    let dataCtr = data.licenses.settings;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesSettings);
                      expect(data.settingGroup).to.be.a('string');
                      expect(data.settingGroup).to.be("");
                      expect(data.setting).to.be.a(Object);
                      expect(data.setting).to.be();
                      expect(data.groupName).to.be.a(Object);
                      expect(data.groupName).to.be();
                      expect(data.settingGroupDisplayName).to.be.a('string');
                      expect(data.settingGroupDisplayName).to.be("");
                      expect(data.displayName).to.be.a('string');
                      expect(data.displayName).to.be("");
      
                            }
                  }
                  {
                    let dataCtr = data.licenses.bundles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesBundles);
                      expect(data.minorVersion).to.be.a('number');
                      expect(data.minorVersion).to.be(0);
                      expect(data.majorVersion).to.be.a('number');
                      expect(data.majorVersion).to.be(0);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      {
                        let dataCtr = data.surfaces;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesSurfaces);
                          expect(data.count).to.be.a('number');
                          expect(data.count).to.be(0);
                          expect(data.name).to.be.a('string');
                          expect(data.name).to.be("");
          
                                }
                      }
                      expect(data.totalSurfaces).to.be.a('number');
                      expect(data.totalSurfaces).to.be(0);
                      expect(data.displayName).to.be.a('string');
                      expect(data.displayName).to.be("");
      
                            }
                  }
                expect(data.activeAgents).to.be.a('number');
                expect(data.activeAgents).to.be(0);
                expect(data.agentsInControlSku).to.be.a('number');
                expect(data.agentsInControlSku).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("My Account");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.creator).to.be.a('string');
                expect(data.creator).to.be("");
                expect(data.unlimitedCore).to.be.a('boolean');
                expect(data.unlimitedCore).to.be(false);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiAccountsPost', function() {
        it('should call webApiAccountsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiAccountsPost call
          /*
          var opts = {};
          opts.body = new S1MgmtApi.AccountsSchemasPostAccountSchema();
          opts.body.data = new S1MgmtApi.AccountsSchemasPostAccountSchemaData();
          opts.body.data.externalId = "";
          opts.body.data.name = "";
          opts.body.data.unlimitedExpiration = false;
          opts.body.data.licenses = new S1MgmtApi.AccountsSchemasPostAccountSchemaDataLicenses();
          opts.body.data.licenses.modules = [new S1MgmtApi.SitesSitePutSchemaDataLicensesModules()];
          opts.body.data.licenses.modules[0].name = "";
          opts.body.data.licenses.settings = [new S1MgmtApi.AccountsSchemasPostAccountSchemaDataLicensesSettings()];
          opts.body.data.licenses.settings[0].setting = "";
          opts.body.data.licenses.settings[0].groupName = "";
          opts.body.data.licenses.bundles = [new S1MgmtApi.SitesSitePutSchemaDataLicensesBundles()];
          opts.body.data.licenses.bundles[0].surfaces = [new S1MgmtApi.SitesSitePutSchemaDataLicensesSurfaces()];
          opts.body.data.licenses.bundles[0].surfaces[0].count = 0;
          opts.body.data.licenses.bundles[0].surfaces[0].name = "";
          opts.body.data.licenses.bundles[0].majorVersion = 0;
          opts.body.data.licenses.bundles[0].name = "";
          opts.body.data.accountType = "Trial";
          opts.body.data.policy = new S1MgmtApi.AccountsSchemasPostAccountSchemaDataPolicy();
          opts.body.data.policy.autoMitigationAction = "";
          opts.body.data.policy.mitigationMode = "detect";
          opts.body.data.policy.iocAttributes = new S1MgmtApi.SitesSitePutSchemaDataPolicyIocAttributes();
          opts.body.data.policy.iocAttributes.smartFileMonitoring = false;
          opts.body.data.policy.iocAttributes.windowsEventLogs = false;
          opts.body.data.policy.iocAttributes.autoInstallBrowserExtensions = false;
          opts.body.data.policy.iocAttributes.dataMasking = false;
          opts.body.data.policy.iocAttributes.dllModuleLoad = false;
          opts.body.data.policy.iocAttributes.dns = false;
          opts.body.data.policy.iocAttributes.crossProcess = false;
          opts.body.data.policy.iocAttributes.registry = false;
          opts.body.data.policy.iocAttributes.driver = false;
          opts.body.data.policy.iocAttributes.fds = false;
          opts.body.data.policy.iocAttributes.windowsEventLogsExtended = false;
          opts.body.data.policy.iocAttributes.file = false;
          opts.body.data.policy.iocAttributes.namedPipeExtended = false;
          opts.body.data.policy.iocAttributes.url = false;
          opts.body.data.policy.iocAttributes.behavioralIndicators = false;
          opts.body.data.policy.iocAttributes.process = false;
          opts.body.data.policy.iocAttributes.commandScripts = false;
          opts.body.data.policy.iocAttributes.namedPipe = false;
          opts.body.data.policy.iocAttributes.ip = false;
          opts.body.data.policy.iocAttributes.login = false;
          opts.body.data.policy.iocAttributes.scheduledTask = false;
          opts.body.data.policy.researchOn = false;
          opts.body.data.policy.autoFileUpload = new S1MgmtApi.SitesSitePutSchemaDataPolicyAutoFileUpload();
          opts.body.data.policy.autoFileUpload.maxDailyFileUploadLimit = 0;
          opts.body.data.policy.autoFileUpload.includeBenignFiles = false;
          opts.body.data.policy.autoFileUpload.maxLocalDiskUsageLimit = 0;
          opts.body.data.policy.autoFileUpload.maxLocalDiskUsage = 0;
          opts.body.data.policy.autoFileUpload.enabled = false;
          opts.body.data.policy.autoFileUpload.maxFileSizeLimit = 0;
          opts.body.data.policy.autoFileUpload.maxFileSize = 0;
          opts.body.data.policy.autoFileUpload.maxDailyFileUpload = 0;
          opts.body.data.policy.mitigationModeSuspicious = "detect";
          opts.body.data.policy.updatedAt = 2018-02-27T04:49:26.257525Z;
          opts.body.data.policy.antiTamperingOn = false;
          opts.body.data.policy.identityReportInterval = 0;
          opts.body.data.policy.monitorOnExecute = false;
          opts.body.data.policy.userId = "225494730938493804";
          opts.body.data.policy.driverBlocking = false;
          opts.body.data.policy.identityEndpointReporting = "disabled";
          opts.body.data.policy.isDefault = false;
          opts.body.data.policy.ioc = false;
          opts.body.data.policy.agentUiOn = false;
          opts.body.data.policy.monitorOnWrite = false;
          opts.body.data.policy.identityUpdateInterval = 0;
          opts.body.data.policy.iocSupported = false;
          opts.body.data.policy.identityThrottlingInterval = 0;
          opts.body.data.policy.agentLoggingOn = false;
          opts.body.data.policy.unsignedDriverBlockingOn = false;
          opts.body.data.policy.agentUi = new S1MgmtApi.SitesSitePutSchemaDataPolicyAgentUi();
          opts.body.data.policy.agentUi.threatPopUpNotifications = false;
          opts.body.data.policy.agentUi.contactFreeText = "";
          opts.body.data.policy.agentUi.contactEmail = "";
          opts.body.data.policy.agentUi.maxEventAgeDays = 0;
          opts.body.data.policy.agentUi.showAgentWarnings = false;
          opts.body.data.policy.agentUi.contactPhoneNumber = "";
          opts.body.data.policy.agentUi.showDeviceTab = false;
          opts.body.data.policy.agentUi.devicePopUpNotifications = false;
          opts.body.data.policy.agentUi.showSupport = false;
          opts.body.data.policy.agentUi.showQuarantineTab = false;
          opts.body.data.policy.agentUi.contactCompany = "";
          opts.body.data.policy.agentUi.showSuspicious = false;
          opts.body.data.policy.agentUi.contactOther = "";
          opts.body.data.policy.agentUi.contactDirectMessage = "";
          opts.body.data.policy.agentUi.contactSupportWebsite = "";
          opts.body.data.policy.agentUi.agentUiOn = false;
          opts.body.data.policy.userFullName = "";
          opts.body.data.policy.signedDriverBlockingOn = false;
          opts.body.data.policy.allowRemoteShell = false;
          opts.body.data.policy.isDvPolicyPerEventType = false;
          opts.body.data.policy.removeMacros = false;
          opts.body.data.policy.scanNewAgents = false;
          opts.body.data.policy.snapshotsOn = false;
          opts.body.data.policy.engines = new S1MgmtApi.SitesSitePutSchemaDataPolicyEngines();
          opts.body.data.policy.engines.lateralMovement = "on";
          opts.body.data.policy.engines.preExecutionSuspicious = "on";
          opts.body.data.policy.engines.preExecution = "on";
          opts.body.data.policy.engines.dataFiles = "on";
          opts.body.data.policy.engines.pup = "on";
          opts.body.data.policy.engines.executables = "on";
          opts.body.data.policy.engines.penetration = "on";
          opts.body.data.policy.engines.applicationControl = "on";
          opts.body.data.policy.engines.reputation = "on";
          opts.body.data.policy.engines.exploits = "on";
          opts.body.data.policy.engines.remoteShell = "on";
          opts.body.data.policy.remoteOpsForensics = new S1MgmtApi.SitesSitePutSchemaDataPolicyRemoteOpsForensics();
          opts.body.data.policy.remoteOpsForensics.parsedArtifactsDestination = "local";
          opts.body.data.policy.remoteOpsForensics.maximumFileSizeUpload = "0";
          opts.body.data.policy.remoteOpsForensics.maximumDailyUpload = "0";
          opts.body.data.policy.remoteOpsForensics.maximumFileSizeUploadLimit = "0";
          opts.body.data.policy.remoteOpsForensics.enabled = false;
          opts.body.data.policy.remoteOpsForensics.cpuLimit = 0;
          opts.body.data.policy.remoteOpsForensics.maximumDailyUploadLimit = "0";
          opts.body.data.policy.forensicsAutoTriggering = new S1MgmtApi.SitesSitePutSchemaDataPolicyForensicsAutoTriggering();
          opts.body.data.policy.forensicsAutoTriggering.windowsProfileId = "";
          opts.body.data.policy.forensicsAutoTriggering.linuxEnabled = false;
          opts.body.data.policy.forensicsAutoTriggering.macosProfileName = "";
          opts.body.data.policy.forensicsAutoTriggering.macosProfileId = "";
          opts.body.data.policy.forensicsAutoTriggering.windowsProfileName = "";
          opts.body.data.policy.forensicsAutoTriggering.linuxProfileName = "";
          opts.body.data.policy.forensicsAutoTriggering.windowsEnabled = false;
          opts.body.data.policy.forensicsAutoTriggering.linuxProfileId = "";
          opts.body.data.policy.forensicsAutoTriggering.macosEnabled = false;
          opts.body.data.policy.identityOn = false;
          opts.body.data.policy.cloudValidationOn = ;
          opts.body.data.policy.autoImmuneOn = false;
          opts.body.data.policy.agentNotification = false;
          opts.body.data.policy.createdAt = 2018-02-27T04:49:26.257525Z;
          opts.body.data.policy.networkQuarantineOn = false;
          opts.body.data.policy.autoDecommissionDays = 0;
          opts.body.data.policy.remoteScriptOrchestration = new S1MgmtApi.SitesSitePutSchemaDataPolicyRemoteScriptOrchestration();
          opts.body.data.policy.remoteScriptOrchestration.alwaysUploadStreamToCloud = false;
          opts.body.data.policy.remoteScriptOrchestration.maxLocalPackageDiskUsageLimit = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxDailyFileUploadLimit = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxLocalPackageDiskUsage = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxDailyFileDownloadLimit = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxFileSizeLimit = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxDailyFileDownload = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxFileSize = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxDailyFileUpload = "0";
          opts.body.data.policy.autoDecommissionOn = false;
          opts.body.data.policy.dvAttributesPerEventType = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventType();
          opts.body.data.policy.dvAttributesPerEventType.smartFileMonitoring = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeSmartFileMonitoring();
          opts.body.data.policy.dvAttributesPerEventType.smartFileMonitoring.smartFileMonitoring = false;
          opts.body.data.policy.dvAttributesPerEventType.windowsEventLogs = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeWindowsEventLogs();
          opts.body.data.policy.dvAttributesPerEventType.windowsEventLogs.dvEventTypeWindowsEventLogCreation = false;
          opts.body.data.policy.dvAttributesPerEventType.autoInstallBrowserExtensions = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeAutoInstallBrowserExtensions();
          opts.body.data.policy.dvAttributesPerEventType.autoInstallBrowserExtensions.autoInstallBrowserExtensions = false;
          opts.body.data.policy.dvAttributesPerEventType.dataMasking = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeDataMasking();
          opts.body.data.policy.dvAttributesPerEventType.dataMasking.dataMasking = false;
          opts.body.data.policy.dvAttributesPerEventType.dllModuleLoad = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeDllModuleLoad();
          opts.body.data.policy.dvAttributesPerEventType.dllModuleLoad.dvEventTypeDllModuleLoad = false;
          opts.body.data.policy.dvAttributesPerEventType.dns = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeDns();
          opts.body.data.policy.dvAttributesPerEventType.dns.dvEventTypeDns = false;
          opts.body.data.policy.dvAttributesPerEventType.crossProcess = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeCrossProcess();
          opts.body.data.policy.dvAttributesPerEventType.crossProcess.dvEventTypeCrossProcessOpenProcess = false;
          opts.body.data.policy.dvAttributesPerEventType.crossProcess.dvEventTypeCrossProcessRemoteThread = false;
          opts.body.data.policy.dvAttributesPerEventType.crossProcess.dvEventTypeCrossProcessDuplicateProcess = false;
          opts.body.data.policy.dvAttributesPerEventType.crossProcess.dvEventTypeCrossProcessDuplicateThread = false;
          opts.body.data.policy.dvAttributesPerEventType.registry = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeRegistry();
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeySecurityChanged = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryValueDeleted = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryValueModified = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeyRename = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeyCreated = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryValueCreated = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeyImport = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeyDelete = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeyExport = false;
          opts.body.data.policy.dvAttributesPerEventType.driver = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeDriver();
          opts.body.data.policy.dvAttributesPerEventType.driver.dvEventTypeDriverLoad = false;
          opts.body.data.policy.dvAttributesPerEventType.windowsEventLogsExtended = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeWindowsEventLogsExtended();
          opts.body.data.policy.dvAttributesPerEventType.windowsEventLogsExtended.windowsEventLogsExtended = false;
          opts.body.data.policy.dvAttributesPerEventType.file = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeFile();
          opts.body.data.policy.dvAttributesPerEventType.file.dvEventTypeFileModification = false;
          opts.body.data.policy.dvAttributesPerEventType.file.dvEventTypeFileCreation = false;
          opts.body.data.policy.dvAttributesPerEventType.file.dvEventTypeFileRename = false;
          opts.body.data.policy.dvAttributesPerEventType.file.dvEventTypeFileDeletion = false;
          opts.body.data.policy.dvAttributesPerEventType.file.fullDiskScan = false;
          opts.body.data.policy.dvAttributesPerEventType.namedPipeExtended = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeNamedPipeExtended();
          opts.body.data.policy.dvAttributesPerEventType.namedPipeExtended.namedPipeExtended = false;
          opts.body.data.policy.dvAttributesPerEventType.url = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeUrl();
          opts.body.data.policy.dvAttributesPerEventType.url.dvEventTypeUrl = false;
          opts.body.data.policy.dvAttributesPerEventType.behavioralIndicators = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeBehavioralIndicators();
          opts.body.data.policy.dvAttributesPerEventType.behavioralIndicators.dvEventTypeBehavioralIndicators = false;
          opts.body.data.policy.dvAttributesPerEventType.process = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeProcess();
          opts.body.data.policy.dvAttributesPerEventType.process.dvEventTypeProcessModification = false;
          opts.body.data.policy.dvAttributesPerEventType.process.dvEventTypeProcessExit = false;
          opts.body.data.policy.dvAttributesPerEventType.process.dvEventTypeProcessCreation = false;
          opts.body.data.policy.dvAttributesPerEventType.commandScripts = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeCommandScripts();
          opts.body.data.policy.dvAttributesPerEventType.commandScripts.dvEventTypeCommandScripts = false;
          opts.body.data.policy.dvAttributesPerEventType.namedPipe = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeNamedPipe();
          opts.body.data.policy.dvAttributesPerEventType.namedPipe.dvEventTypeNamedPipeConnection = false;
          opts.body.data.policy.dvAttributesPerEventType.namedPipe.dvEventTypeNamedPipeCreation = false;
          opts.body.data.policy.dvAttributesPerEventType.ip = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeIp();
          opts.body.data.policy.dvAttributesPerEventType.ip.dvEventTypeIpConnect = false;
          opts.body.data.policy.dvAttributesPerEventType.ip.dvEventTypeIpListen = false;
          opts.body.data.policy.dvAttributesPerEventType.login = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeLogin();
          opts.body.data.policy.dvAttributesPerEventType.login.dvEventTypeLoginLoggedOut = false;
          opts.body.data.policy.dvAttributesPerEventType.login.dvEventTypeLoginLoggedIn = false;
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeScheduledTask();
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask.dvEventTypeScheduledTaskDelete = false;
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask.dvEventTypeScheduledTaskUpdate = false;
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask.dvEventTypeScheduledTaskRegister = false;
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask.dvEventTypeScheduledTaskTrigger = false;
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask.dvEventTypeScheduledTaskStart = false;
          opts.body.data.expiration = 2018-02-27T04:49:26.257525Z;
          opts.body.data.skus = [new S1MgmtApi.AccountsSchemasPostAccountSchemaDataSkus()];
          opts.body.data.skus[0].unlimited = false;
          opts.body.data.skus[0].totalLicenses = 0;
          opts.body.data.skus[0].type = "Core";
          opts.body.data.usageType = "customer";
          opts.body.data.inherits = false;
          opts.body.data.billingMode = "subscription";

          instance.webApiAccountsPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiAccountsaccountIdExpireNowPost', function() {
        it('should call webApiAccountsaccountIdExpireNowPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiAccountsaccountIdExpireNowPost call and complete the assertions
          /*
          var accountId = "accountId_example";

          instance.webApiAccountsaccountIdExpireNowPost(accountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AccountsSchemasAccountGetSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AccountsSchemasAccountGetSchema200Data);
                  expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.expiration).to.be.a(Date);
              expect(data.data.expiration).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.isDefault).to.be.a('boolean');
              expect(data.data.isDefault).to.be(false);
              expect(data.data.state).to.be.a('string');
              expect(data.data.state).to.be("active");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("182483948009279264");
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              expect(data.data.accountType).to.be.a('string');
              expect(data.data.accountType).to.be("");
              expect(data.data.salesforceId).to.be.a('string');
              expect(data.data.salesforceId).to.be("");
              {
                let dataCtr = data.data.skus;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.AccountsSchemasAccountViewSchemaMany200Skus);
                  expect(data.unlimited).to.be.a('boolean');
                  expect(data.unlimited).to.be(false);
                  expect(data.totalLicenses).to.be.a('number');
                  expect(data.totalLicenses).to.be(0);
                  expect(data.agentsInSku).to.be.a('number');
                  expect(data.agentsInSku).to.be(0);
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("Core");
  
                        }
              }
              expect(data.data.totalLicenses).to.be.a('number');
              expect(data.data.totalLicenses).to.be(0);
              expect(data.data.usageType).to.be.a('string');
              expect(data.data.usageType).to.be("customer");
              expect(data.data.billingMode).to.be.a('string');
              expect(data.data.billingMode).to.be("subscription");
              expect(data.data.externalId).to.be.a('string');
              expect(data.data.externalId).to.be("");
              expect(data.data.unlimitedExpiration).to.be.a(Object);
              expect(data.data.unlimitedExpiration).to.be();
              expect(data.data.licenses).to.be.a(S1MgmtApi.AccountsSchemasAccountViewSchemaMany200Licenses);
                    {
                  let dataCtr = data.data.licenses.modules;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesModules);
                    expect(data.displayName).to.be.a('string');
                    expect(data.displayName).to.be("");
                    expect(data.majorVersion).to.be.a('number');
                    expect(data.majorVersion).to.be(0);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
    
                          }
                }
                {
                  let dataCtr = data.data.licenses.settings;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesSettings);
                    expect(data.settingGroup).to.be.a('string');
                    expect(data.settingGroup).to.be("");
                    expect(data.setting).to.be.a(Object);
                    expect(data.setting).to.be();
                    expect(data.groupName).to.be.a(Object);
                    expect(data.groupName).to.be();
                    expect(data.settingGroupDisplayName).to.be.a('string');
                    expect(data.settingGroupDisplayName).to.be("");
                    expect(data.displayName).to.be.a('string');
                    expect(data.displayName).to.be("");
    
                          }
                }
                {
                  let dataCtr = data.data.licenses.bundles;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesBundles);
                    expect(data.minorVersion).to.be.a('number');
                    expect(data.minorVersion).to.be(0);
                    expect(data.majorVersion).to.be.a('number');
                    expect(data.majorVersion).to.be(0);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data.surfaces;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesSurfaces);
                        expect(data.count).to.be.a('number');
                        expect(data.count).to.be(0);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
        
                              }
                    }
                    expect(data.totalSurfaces).to.be.a('number');
                    expect(data.totalSurfaces).to.be(0);
                    expect(data.displayName).to.be.a('string');
                    expect(data.displayName).to.be("");
    
                          }
                }
              expect(data.data.activeAgents).to.be.a('number');
              expect(data.data.activeAgents).to.be(0);
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("My Account");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiAccountsaccountIdGet', function() {
        it('should call webApiAccountsaccountIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiAccountsaccountIdGet call and complete the assertions
          /*
          var accountId = "accountId_example";

          instance.webApiAccountsaccountIdGet(accountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AccountsSchemasAccountViewSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AccountsSchemasAccountViewSchema200Data);
                  expect(data.data.numberOfSites).to.be.a('number');
              expect(data.data.numberOfSites).to.be(0);
              expect(data.data.coreSites).to.be.a('number');
              expect(data.data.coreSites).to.be(0);
              expect(data.data.completeSites).to.be.a('number');
              expect(data.data.completeSites).to.be(0);
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.totalComplete).to.be.a('number');
              expect(data.data.totalComplete).to.be(0);
              expect(data.data.expiration).to.be.a(Date);
              expect(data.data.expiration).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.isDefault).to.be.a('boolean');
              expect(data.data.isDefault).to.be(false);
              expect(data.data.controlSites).to.be.a('number');
              expect(data.data.controlSites).to.be(0);
              expect(data.data.agentsInCoreSku).to.be.a('number');
              expect(data.data.agentsInCoreSku).to.be(0);
              expect(data.data.state).to.be.a('string');
              expect(data.data.state).to.be("active");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("182483948009279264");
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              expect(data.data.accountType).to.be.a('string');
              expect(data.data.accountType).to.be("");
              expect(data.data.unlimitedComplete).to.be.a('boolean');
              expect(data.data.unlimitedComplete).to.be(false);
              expect(data.data.salesforceId).to.be.a('string');
              expect(data.data.salesforceId).to.be("");
              expect(data.data.unlimitedControl).to.be.a('boolean');
              expect(data.data.unlimitedControl).to.be(false);
              expect(data.data.totalControl).to.be.a('number');
              expect(data.data.totalControl).to.be(0);
              {
                let dataCtr = data.data.skus;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.AccountsSchemasAccountViewSchemaMany200Skus);
                  expect(data.unlimited).to.be.a('boolean');
                  expect(data.unlimited).to.be(false);
                  expect(data.totalLicenses).to.be.a('number');
                  expect(data.totalLicenses).to.be(0);
                  expect(data.agentsInSku).to.be.a('number');
                  expect(data.agentsInSku).to.be(0);
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("Core");
  
                        }
              }
              expect(data.data.totalLicenses).to.be.a('number');
              expect(data.data.totalLicenses).to.be(0);
              expect(data.data.usageType).to.be.a('string');
              expect(data.data.usageType).to.be("customer");
              expect(data.data.totalCore).to.be.a('number');
              expect(data.data.totalCore).to.be(0);
              expect(data.data.billingMode).to.be.a('string');
              expect(data.data.billingMode).to.be("subscription");
              expect(data.data.agentsInCompleteSku).to.be.a('number');
              expect(data.data.agentsInCompleteSku).to.be(0);
              expect(data.data.externalId).to.be.a('string');
              expect(data.data.externalId).to.be("");
              expect(data.data.unlimitedExpiration).to.be.a('boolean');
              expect(data.data.unlimitedExpiration).to.be(false);
              expect(data.data.licenses).to.be.a(S1MgmtApi.AccountsSchemasAccountViewSchemaMany200Licenses);
                    {
                  let dataCtr = data.data.licenses.modules;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesModules);
                    expect(data.displayName).to.be.a('string');
                    expect(data.displayName).to.be("");
                    expect(data.majorVersion).to.be.a('number');
                    expect(data.majorVersion).to.be(0);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
    
                          }
                }
                {
                  let dataCtr = data.data.licenses.settings;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesSettings);
                    expect(data.settingGroup).to.be.a('string');
                    expect(data.settingGroup).to.be("");
                    expect(data.setting).to.be.a(Object);
                    expect(data.setting).to.be();
                    expect(data.groupName).to.be.a(Object);
                    expect(data.groupName).to.be();
                    expect(data.settingGroupDisplayName).to.be.a('string');
                    expect(data.settingGroupDisplayName).to.be("");
                    expect(data.displayName).to.be.a('string');
                    expect(data.displayName).to.be("");
    
                          }
                }
                {
                  let dataCtr = data.data.licenses.bundles;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesBundles);
                    expect(data.minorVersion).to.be.a('number');
                    expect(data.minorVersion).to.be(0);
                    expect(data.majorVersion).to.be.a('number');
                    expect(data.majorVersion).to.be(0);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data.surfaces;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesSurfaces);
                        expect(data.count).to.be.a('number');
                        expect(data.count).to.be(0);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
        
                              }
                    }
                    expect(data.totalSurfaces).to.be.a('number');
                    expect(data.totalSurfaces).to.be(0);
                    expect(data.displayName).to.be.a('string');
                    expect(data.displayName).to.be("");
    
                          }
                }
              expect(data.data.activeAgents).to.be.a('number');
              expect(data.data.activeAgents).to.be(0);
              expect(data.data.agentsInControlSku).to.be.a('number');
              expect(data.data.agentsInControlSku).to.be(0);
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("My Account");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("");
              expect(data.data.unlimitedCore).to.be.a('boolean');
              expect(data.data.unlimitedCore).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiAccountsaccountIdPut', function() {
        it('should call webApiAccountsaccountIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiAccountsaccountIdPut call and complete the assertions
          /*
          var accountId = "accountId_example";
          var opts = {};
          opts.body = new S1MgmtApi.AccountsSchemasAccountPutSchema();
          opts.body.data = new S1MgmtApi.AccountsSchemasAccountPutSchemaData();
          opts.body.data.externalId = "";
          opts.body.data.name = "";
          opts.body.data.unlimitedExpiration = false;
          opts.body.data.licenses = new S1MgmtApi.AccountsSchemasAccountPutSchemaDataLicenses();
          opts.body.data.licenses.modules = [new S1MgmtApi.SitesSitePutSchemaDataLicensesModules()];
          opts.body.data.licenses.modules[0].name = "";
          opts.body.data.licenses.settings = [new S1MgmtApi.AccountsSchemasPostAccountSchemaDataLicensesSettings()];
          opts.body.data.licenses.settings[0].setting = "";
          opts.body.data.licenses.settings[0].groupName = "";
          opts.body.data.licenses.bundles = [new S1MgmtApi.SitesSitePutSchemaDataLicensesBundles()];
          opts.body.data.licenses.bundles[0].surfaces = [new S1MgmtApi.SitesSitePutSchemaDataLicensesSurfaces()];
          opts.body.data.licenses.bundles[0].surfaces[0].count = 0;
          opts.body.data.licenses.bundles[0].surfaces[0].name = "";
          opts.body.data.licenses.bundles[0].majorVersion = 0;
          opts.body.data.licenses.bundles[0].name = "";
          opts.body.data.accountType = "Trial";
          opts.body.data.policy = new S1MgmtApi.SitesSitePutSchemaDataPolicy();
          opts.body.data.policy.autoMitigationAction = "";
          opts.body.data.policy.mitigationMode = "detect";
          opts.body.data.policy.iocAttributes = new S1MgmtApi.SitesSitePutSchemaDataPolicyIocAttributes();
          opts.body.data.policy.iocAttributes.smartFileMonitoring = false;
          opts.body.data.policy.iocAttributes.windowsEventLogs = false;
          opts.body.data.policy.iocAttributes.autoInstallBrowserExtensions = false;
          opts.body.data.policy.iocAttributes.dataMasking = false;
          opts.body.data.policy.iocAttributes.dllModuleLoad = false;
          opts.body.data.policy.iocAttributes.dns = false;
          opts.body.data.policy.iocAttributes.crossProcess = false;
          opts.body.data.policy.iocAttributes.registry = false;
          opts.body.data.policy.iocAttributes.driver = false;
          opts.body.data.policy.iocAttributes.fds = false;
          opts.body.data.policy.iocAttributes.windowsEventLogsExtended = false;
          opts.body.data.policy.iocAttributes.file = false;
          opts.body.data.policy.iocAttributes.namedPipeExtended = false;
          opts.body.data.policy.iocAttributes.url = false;
          opts.body.data.policy.iocAttributes.behavioralIndicators = false;
          opts.body.data.policy.iocAttributes.process = false;
          opts.body.data.policy.iocAttributes.commandScripts = false;
          opts.body.data.policy.iocAttributes.namedPipe = false;
          opts.body.data.policy.iocAttributes.ip = false;
          opts.body.data.policy.iocAttributes.login = false;
          opts.body.data.policy.iocAttributes.scheduledTask = false;
          opts.body.data.policy.researchOn = false;
          opts.body.data.policy.autoFileUpload = new S1MgmtApi.SitesSitePutSchemaDataPolicyAutoFileUpload();
          opts.body.data.policy.autoFileUpload.maxDailyFileUploadLimit = 0;
          opts.body.data.policy.autoFileUpload.includeBenignFiles = false;
          opts.body.data.policy.autoFileUpload.maxLocalDiskUsageLimit = 0;
          opts.body.data.policy.autoFileUpload.maxLocalDiskUsage = 0;
          opts.body.data.policy.autoFileUpload.enabled = false;
          opts.body.data.policy.autoFileUpload.maxFileSizeLimit = 0;
          opts.body.data.policy.autoFileUpload.maxFileSize = 0;
          opts.body.data.policy.autoFileUpload.maxDailyFileUpload = 0;
          opts.body.data.policy.mitigationModeSuspicious = "detect";
          opts.body.data.policy.updatedAt = 2018-02-27T04:49:26.257525Z;
          opts.body.data.policy.antiTamperingOn = false;
          opts.body.data.policy.identityReportInterval = 0;
          opts.body.data.policy.monitorOnExecute = false;
          opts.body.data.policy.userId = "225494730938493804";
          opts.body.data.policy.driverBlocking = false;
          opts.body.data.policy.identityEndpointReporting = "disabled";
          opts.body.data.policy.isDefault = false;
          opts.body.data.policy.ioc = false;
          opts.body.data.policy.agentUiOn = false;
          opts.body.data.policy.monitorOnWrite = false;
          opts.body.data.policy.identityUpdateInterval = 0;
          opts.body.data.policy.iocSupported = false;
          opts.body.data.policy.identityThrottlingInterval = 0;
          opts.body.data.policy.agentLoggingOn = false;
          opts.body.data.policy.unsignedDriverBlockingOn = false;
          opts.body.data.policy.agentUi = new S1MgmtApi.SitesSitePutSchemaDataPolicyAgentUi();
          opts.body.data.policy.agentUi.threatPopUpNotifications = false;
          opts.body.data.policy.agentUi.contactFreeText = "";
          opts.body.data.policy.agentUi.contactEmail = "";
          opts.body.data.policy.agentUi.maxEventAgeDays = 0;
          opts.body.data.policy.agentUi.showAgentWarnings = false;
          opts.body.data.policy.agentUi.contactPhoneNumber = "";
          opts.body.data.policy.agentUi.showDeviceTab = false;
          opts.body.data.policy.agentUi.devicePopUpNotifications = false;
          opts.body.data.policy.agentUi.showSupport = false;
          opts.body.data.policy.agentUi.showQuarantineTab = false;
          opts.body.data.policy.agentUi.contactCompany = "";
          opts.body.data.policy.agentUi.showSuspicious = false;
          opts.body.data.policy.agentUi.contactOther = "";
          opts.body.data.policy.agentUi.contactDirectMessage = "";
          opts.body.data.policy.agentUi.contactSupportWebsite = "";
          opts.body.data.policy.agentUi.agentUiOn = false;
          opts.body.data.policy.userFullName = "";
          opts.body.data.policy.signedDriverBlockingOn = false;
          opts.body.data.policy.allowRemoteShell = false;
          opts.body.data.policy.isDvPolicyPerEventType = false;
          opts.body.data.policy.removeMacros = false;
          opts.body.data.policy.scanNewAgents = false;
          opts.body.data.policy.snapshotsOn = false;
          opts.body.data.policy.engines = new S1MgmtApi.SitesSitePutSchemaDataPolicyEngines();
          opts.body.data.policy.engines.lateralMovement = "on";
          opts.body.data.policy.engines.preExecutionSuspicious = "on";
          opts.body.data.policy.engines.preExecution = "on";
          opts.body.data.policy.engines.dataFiles = "on";
          opts.body.data.policy.engines.pup = "on";
          opts.body.data.policy.engines.executables = "on";
          opts.body.data.policy.engines.penetration = "on";
          opts.body.data.policy.engines.applicationControl = "on";
          opts.body.data.policy.engines.reputation = "on";
          opts.body.data.policy.engines.exploits = "on";
          opts.body.data.policy.engines.remoteShell = "on";
          opts.body.data.policy.remoteOpsForensics = new S1MgmtApi.SitesSitePutSchemaDataPolicyRemoteOpsForensics();
          opts.body.data.policy.remoteOpsForensics.parsedArtifactsDestination = "local";
          opts.body.data.policy.remoteOpsForensics.maximumFileSizeUpload = "0";
          opts.body.data.policy.remoteOpsForensics.maximumDailyUpload = "0";
          opts.body.data.policy.remoteOpsForensics.maximumFileSizeUploadLimit = "0";
          opts.body.data.policy.remoteOpsForensics.enabled = false;
          opts.body.data.policy.remoteOpsForensics.cpuLimit = 0;
          opts.body.data.policy.remoteOpsForensics.maximumDailyUploadLimit = "0";
          opts.body.data.policy.forensicsAutoTriggering = new S1MgmtApi.SitesSitePutSchemaDataPolicyForensicsAutoTriggering();
          opts.body.data.policy.forensicsAutoTriggering.windowsProfileId = "";
          opts.body.data.policy.forensicsAutoTriggering.linuxEnabled = false;
          opts.body.data.policy.forensicsAutoTriggering.macosProfileName = "";
          opts.body.data.policy.forensicsAutoTriggering.macosProfileId = "";
          opts.body.data.policy.forensicsAutoTriggering.windowsProfileName = "";
          opts.body.data.policy.forensicsAutoTriggering.linuxProfileName = "";
          opts.body.data.policy.forensicsAutoTriggering.windowsEnabled = false;
          opts.body.data.policy.forensicsAutoTriggering.linuxProfileId = "";
          opts.body.data.policy.forensicsAutoTriggering.macosEnabled = false;
          opts.body.data.policy.identityOn = false;
          opts.body.data.policy.cloudValidationOn = ;
          opts.body.data.policy.autoImmuneOn = false;
          opts.body.data.policy.agentNotification = false;
          opts.body.data.policy.createdAt = 2018-02-27T04:49:26.257525Z;
          opts.body.data.policy.networkQuarantineOn = false;
          opts.body.data.policy.autoDecommissionDays = 0;
          opts.body.data.policy.remoteScriptOrchestration = new S1MgmtApi.SitesSitePutSchemaDataPolicyRemoteScriptOrchestration();
          opts.body.data.policy.remoteScriptOrchestration.alwaysUploadStreamToCloud = false;
          opts.body.data.policy.remoteScriptOrchestration.maxLocalPackageDiskUsageLimit = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxDailyFileUploadLimit = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxLocalPackageDiskUsage = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxDailyFileDownloadLimit = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxFileSizeLimit = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxDailyFileDownload = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxFileSize = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxDailyFileUpload = "0";
          opts.body.data.policy.autoDecommissionOn = false;
          opts.body.data.policy.dvAttributesPerEventType = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventType();
          opts.body.data.policy.dvAttributesPerEventType.smartFileMonitoring = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeSmartFileMonitoring();
          opts.body.data.policy.dvAttributesPerEventType.smartFileMonitoring.smartFileMonitoring = false;
          opts.body.data.policy.dvAttributesPerEventType.windowsEventLogs = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeWindowsEventLogs();
          opts.body.data.policy.dvAttributesPerEventType.windowsEventLogs.dvEventTypeWindowsEventLogCreation = false;
          opts.body.data.policy.dvAttributesPerEventType.autoInstallBrowserExtensions = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeAutoInstallBrowserExtensions();
          opts.body.data.policy.dvAttributesPerEventType.autoInstallBrowserExtensions.autoInstallBrowserExtensions = false;
          opts.body.data.policy.dvAttributesPerEventType.dataMasking = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeDataMasking();
          opts.body.data.policy.dvAttributesPerEventType.dataMasking.dataMasking = false;
          opts.body.data.policy.dvAttributesPerEventType.dllModuleLoad = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeDllModuleLoad();
          opts.body.data.policy.dvAttributesPerEventType.dllModuleLoad.dvEventTypeDllModuleLoad = false;
          opts.body.data.policy.dvAttributesPerEventType.dns = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeDns();
          opts.body.data.policy.dvAttributesPerEventType.dns.dvEventTypeDns = false;
          opts.body.data.policy.dvAttributesPerEventType.crossProcess = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeCrossProcess();
          opts.body.data.policy.dvAttributesPerEventType.crossProcess.dvEventTypeCrossProcessOpenProcess = false;
          opts.body.data.policy.dvAttributesPerEventType.crossProcess.dvEventTypeCrossProcessRemoteThread = false;
          opts.body.data.policy.dvAttributesPerEventType.crossProcess.dvEventTypeCrossProcessDuplicateProcess = false;
          opts.body.data.policy.dvAttributesPerEventType.crossProcess.dvEventTypeCrossProcessDuplicateThread = false;
          opts.body.data.policy.dvAttributesPerEventType.registry = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeRegistry();
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeySecurityChanged = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryValueDeleted = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryValueModified = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeyRename = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeyCreated = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryValueCreated = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeyImport = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeyDelete = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeyExport = false;
          opts.body.data.policy.dvAttributesPerEventType.driver = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeDriver();
          opts.body.data.policy.dvAttributesPerEventType.driver.dvEventTypeDriverLoad = false;
          opts.body.data.policy.dvAttributesPerEventType.windowsEventLogsExtended = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeWindowsEventLogsExtended();
          opts.body.data.policy.dvAttributesPerEventType.windowsEventLogsExtended.windowsEventLogsExtended = false;
          opts.body.data.policy.dvAttributesPerEventType.file = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeFile();
          opts.body.data.policy.dvAttributesPerEventType.file.dvEventTypeFileModification = false;
          opts.body.data.policy.dvAttributesPerEventType.file.dvEventTypeFileCreation = false;
          opts.body.data.policy.dvAttributesPerEventType.file.dvEventTypeFileRename = false;
          opts.body.data.policy.dvAttributesPerEventType.file.dvEventTypeFileDeletion = false;
          opts.body.data.policy.dvAttributesPerEventType.file.fullDiskScan = false;
          opts.body.data.policy.dvAttributesPerEventType.namedPipeExtended = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeNamedPipeExtended();
          opts.body.data.policy.dvAttributesPerEventType.namedPipeExtended.namedPipeExtended = false;
          opts.body.data.policy.dvAttributesPerEventType.url = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeUrl();
          opts.body.data.policy.dvAttributesPerEventType.url.dvEventTypeUrl = false;
          opts.body.data.policy.dvAttributesPerEventType.behavioralIndicators = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeBehavioralIndicators();
          opts.body.data.policy.dvAttributesPerEventType.behavioralIndicators.dvEventTypeBehavioralIndicators = false;
          opts.body.data.policy.dvAttributesPerEventType.process = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeProcess();
          opts.body.data.policy.dvAttributesPerEventType.process.dvEventTypeProcessModification = false;
          opts.body.data.policy.dvAttributesPerEventType.process.dvEventTypeProcessExit = false;
          opts.body.data.policy.dvAttributesPerEventType.process.dvEventTypeProcessCreation = false;
          opts.body.data.policy.dvAttributesPerEventType.commandScripts = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeCommandScripts();
          opts.body.data.policy.dvAttributesPerEventType.commandScripts.dvEventTypeCommandScripts = false;
          opts.body.data.policy.dvAttributesPerEventType.namedPipe = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeNamedPipe();
          opts.body.data.policy.dvAttributesPerEventType.namedPipe.dvEventTypeNamedPipeConnection = false;
          opts.body.data.policy.dvAttributesPerEventType.namedPipe.dvEventTypeNamedPipeCreation = false;
          opts.body.data.policy.dvAttributesPerEventType.ip = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeIp();
          opts.body.data.policy.dvAttributesPerEventType.ip.dvEventTypeIpConnect = false;
          opts.body.data.policy.dvAttributesPerEventType.ip.dvEventTypeIpListen = false;
          opts.body.data.policy.dvAttributesPerEventType.login = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeLogin();
          opts.body.data.policy.dvAttributesPerEventType.login.dvEventTypeLoginLoggedOut = false;
          opts.body.data.policy.dvAttributesPerEventType.login.dvEventTypeLoginLoggedIn = false;
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeScheduledTask();
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask.dvEventTypeScheduledTaskDelete = false;
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask.dvEventTypeScheduledTaskUpdate = false;
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask.dvEventTypeScheduledTaskRegister = false;
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask.dvEventTypeScheduledTaskTrigger = false;
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask.dvEventTypeScheduledTaskStart = false;
          opts.body.data.salesforceId = "";
          opts.body.data.expiration = 2018-02-27T04:49:26.257525Z;
          opts.body.data.skus = [new S1MgmtApi.AccountsSchemasPostAccountSchemaDataSkus()];
          opts.body.data.skus[0].unlimited = false;
          opts.body.data.skus[0].totalLicenses = 0;
          opts.body.data.skus[0].type = "Core";
          opts.body.data.usageType = "customer";
          opts.body.data.inherits = false;
          opts.body.data.billingMode = "subscription";

          instance.webApiAccountsaccountIdPut(accountId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AccountsSchemasAccountGetSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AccountsSchemasAccountGetSchema200Data);
                  expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.expiration).to.be.a(Date);
              expect(data.data.expiration).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.isDefault).to.be.a('boolean');
              expect(data.data.isDefault).to.be(false);
              expect(data.data.state).to.be.a('string');
              expect(data.data.state).to.be("active");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("182483948009279264");
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              expect(data.data.accountType).to.be.a('string');
              expect(data.data.accountType).to.be("");
              expect(data.data.salesforceId).to.be.a('string');
              expect(data.data.salesforceId).to.be("");
              {
                let dataCtr = data.data.skus;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.AccountsSchemasAccountViewSchemaMany200Skus);
                  expect(data.unlimited).to.be.a('boolean');
                  expect(data.unlimited).to.be(false);
                  expect(data.totalLicenses).to.be.a('number');
                  expect(data.totalLicenses).to.be(0);
                  expect(data.agentsInSku).to.be.a('number');
                  expect(data.agentsInSku).to.be(0);
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("Core");
  
                        }
              }
              expect(data.data.totalLicenses).to.be.a('number');
              expect(data.data.totalLicenses).to.be(0);
              expect(data.data.usageType).to.be.a('string');
              expect(data.data.usageType).to.be("customer");
              expect(data.data.billingMode).to.be.a('string');
              expect(data.data.billingMode).to.be("subscription");
              expect(data.data.externalId).to.be.a('string');
              expect(data.data.externalId).to.be("");
              expect(data.data.unlimitedExpiration).to.be.a(Object);
              expect(data.data.unlimitedExpiration).to.be();
              expect(data.data.licenses).to.be.a(S1MgmtApi.AccountsSchemasAccountViewSchemaMany200Licenses);
                    {
                  let dataCtr = data.data.licenses.modules;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesModules);
                    expect(data.displayName).to.be.a('string');
                    expect(data.displayName).to.be("");
                    expect(data.majorVersion).to.be.a('number');
                    expect(data.majorVersion).to.be(0);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
    
                          }
                }
                {
                  let dataCtr = data.data.licenses.settings;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesSettings);
                    expect(data.settingGroup).to.be.a('string');
                    expect(data.settingGroup).to.be("");
                    expect(data.setting).to.be.a(Object);
                    expect(data.setting).to.be();
                    expect(data.groupName).to.be.a(Object);
                    expect(data.groupName).to.be();
                    expect(data.settingGroupDisplayName).to.be.a('string');
                    expect(data.settingGroupDisplayName).to.be("");
                    expect(data.displayName).to.be.a('string');
                    expect(data.displayName).to.be("");
    
                          }
                }
                {
                  let dataCtr = data.data.licenses.bundles;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesBundles);
                    expect(data.minorVersion).to.be.a('number');
                    expect(data.minorVersion).to.be(0);
                    expect(data.majorVersion).to.be.a('number');
                    expect(data.majorVersion).to.be(0);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data.surfaces;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesSurfaces);
                        expect(data.count).to.be.a('number');
                        expect(data.count).to.be(0);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
        
                              }
                    }
                    expect(data.totalSurfaces).to.be.a('number');
                    expect(data.totalSurfaces).to.be(0);
                    expect(data.displayName).to.be.a('string');
                    expect(data.displayName).to.be("");
    
                          }
                }
              expect(data.data.activeAgents).to.be.a('number');
              expect(data.data.activeAgents).to.be(0);
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("My Account");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiAccountsaccountIdReactivatePut', function() {
        it('should call webApiAccountsaccountIdReactivatePut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiAccountsaccountIdReactivatePut call and complete the assertions
          /*
          var accountId = "accountId_example";
          var opts = {};
          opts.body = new S1MgmtApi.AccountsSchemasReactivateAccountSchema();
          opts.body.data = new S1MgmtApi.AccountsSchemasReactivateAccountSchemaData();
          opts.body.data.expiration = 2018-02-27T04:49:26.257525Z;
          opts.body.data.unlimited = false;

          instance.webApiAccountsaccountIdReactivatePut(accountId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiAccountsaccountIdRevertPolicyPut', function() {
        it('should call webApiAccountsaccountIdRevertPolicyPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiAccountsaccountIdRevertPolicyPut call and complete the assertions
          /*
          var accountId = "accountId_example";
          var opts = {};
          opts.body = new S1MgmtApi.PoliciesSchemasRevertPolicySchema();
          opts.body.data = new S1MgmtApi.PoliciesSchemasRevertPolicySchemaData();
          opts.body.data.id = "225494730938493804";

          instance.webApiAccountsaccountIdRevertPolicyPut(accountId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiAccountsaccountIdUninstallPasswordGeneratePost', function() {
        it('should call webApiAccountsaccountIdUninstallPasswordGeneratePost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiAccountsaccountIdUninstallPasswordGeneratePost call and complete the assertions
          /*
          var accountId = "accountId_example";
          var opts = {};
          opts.body = new S1MgmtApi.AccountsSchemasUninstallPasswordGenerateRequestSchema();
          opts.body.data = new S1MgmtApi.AccountsSchemasUninstallPasswordGenerateRequestSchemaData();
          opts.body.data.expiration = "";

          instance.webApiAccountsaccountIdUninstallPasswordGeneratePost(accountId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AccountsSchemasUninstallPasswordMetadataResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AccountsSchemasUninstallPasswordMetadataResponseSchema200Data);
                  expect(data.data.version).to.be.a('number');
              expect(data.data.version).to.be(0);
              expect(data.data.createdAt).to.be.a('string');
              expect(data.data.createdAt).to.be("");
              expect(data.data.generatedById).to.be.a('number');
              expect(data.data.generatedById).to.be(0);
              expect(data.data.expiration).to.be.a('string');
              expect(data.data.expiration).to.be("");
              expect(data.data.revokedByName).to.be.a('string');
              expect(data.data.revokedByName).to.be("");
              expect(data.data.revokedById).to.be.a('number');
              expect(data.data.revokedById).to.be(0);
              expect(data.data.lastRevoked).to.be.a('string');
              expect(data.data.lastRevoked).to.be("");
              expect(data.data.generatedByName).to.be.a('string');
              expect(data.data.generatedByName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiAccountsaccountIdUninstallPasswordMetadataGet', function() {
        it('should call webApiAccountsaccountIdUninstallPasswordMetadataGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiAccountsaccountIdUninstallPasswordMetadataGet call and complete the assertions
          /*
          var accountId = "accountId_example";

          instance.webApiAccountsaccountIdUninstallPasswordMetadataGet(accountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AccountsSchemasUninstallPasswordMetadataResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AccountsSchemasUninstallPasswordMetadataResponseSchema200Data);
                  expect(data.data.version).to.be.a('number');
              expect(data.data.version).to.be(0);
              expect(data.data.createdAt).to.be.a('string');
              expect(data.data.createdAt).to.be("");
              expect(data.data.generatedById).to.be.a('number');
              expect(data.data.generatedById).to.be(0);
              expect(data.data.expiration).to.be.a('string');
              expect(data.data.expiration).to.be("");
              expect(data.data.revokedByName).to.be.a('string');
              expect(data.data.revokedByName).to.be("");
              expect(data.data.revokedById).to.be.a('number');
              expect(data.data.revokedById).to.be(0);
              expect(data.data.lastRevoked).to.be.a('string');
              expect(data.data.lastRevoked).to.be("");
              expect(data.data.generatedByName).to.be.a('string');
              expect(data.data.generatedByName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiAccountsaccountIdUninstallPasswordRevokePost', function() {
        it('should call webApiAccountsaccountIdUninstallPasswordRevokePost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiAccountsaccountIdUninstallPasswordRevokePost call and complete the assertions
          /*
          var accountId = "accountId_example";

          instance.webApiAccountsaccountIdUninstallPasswordRevokePost(accountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AccountsSchemasUninstallPasswordMetadataResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AccountsSchemasUninstallPasswordMetadataResponseSchema200Data);
                  expect(data.data.version).to.be.a('number');
              expect(data.data.version).to.be(0);
              expect(data.data.createdAt).to.be.a('string');
              expect(data.data.createdAt).to.be("");
              expect(data.data.generatedById).to.be.a('number');
              expect(data.data.generatedById).to.be(0);
              expect(data.data.expiration).to.be.a('string');
              expect(data.data.expiration).to.be("");
              expect(data.data.revokedByName).to.be.a('string');
              expect(data.data.revokedByName).to.be("");
              expect(data.data.revokedById).to.be.a('number');
              expect(data.data.revokedById).to.be(0);
              expect(data.data.lastRevoked).to.be.a('string');
              expect(data.data.lastRevoked).to.be("");
              expect(data.data.generatedByName).to.be.a('string');
              expect(data.data.generatedByName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiAccountsaccountIdUninstallPasswordViewGet', function() {
        it('should call webApiAccountsaccountIdUninstallPasswordViewGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiAccountsaccountIdUninstallPasswordViewGet call and complete the assertions
          /*
          var accountId = "accountId_example";

          instance.webApiAccountsaccountIdUninstallPasswordViewGet(accountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AccountsSchemasUninstallPasswordGenerateResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AccountsSchemasUninstallPasswordGenerateResponseSchema200Data);
                  expect(data.data.password).to.be.a('string');
              expect(data.data.password).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiExportAccountsGet', function() {
        it('should call webApiExportAccountsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiExportAccountsGet call
          /*
          var opts = {};
          opts.name = "name_example";
          opts.accountIds = ["accountIds_example"];
          opts.query = "query_example";
          opts.createdAt = new Date("2013-10-20T19:20:30+01:00");
          opts.activeLicenses = 56;
          opts.states = ["states_example"];
          opts.updatedAt = new Date("2013-10-20T19:20:30+01:00");
          opts.accountType = "accountType_example";
          opts.features = ["features_example"];
          opts.expiration = new Date("2013-10-20T19:20:30+01:00");
          opts.totalLicenses = 56;
          opts.usageType = "usageType_example";
          opts.ids = ["ids_example"];
          opts.isDefault = true;
          opts.billingMode = "billingMode_example";

          instance.webApiExportAccountsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
