/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.MarketplaceApi();
  });

  describe('(package)', function() {
    describe('MarketplaceApi', function() {
      describe('webApiPrivateSingularityMarketplaceAvailabilityGet', function() {
        it('should call webApiPrivateSingularityMarketplaceAvailabilityGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateSingularityMarketplaceAvailabilityGet call and complete the assertions
          /*
          var opts = {};
          opts.siteIds = ["siteIds_example"];
          opts.tenant = true;
          opts.groupIds = ["groupIds_example"];
          opts.scopes = ["scopes_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiPrivateSingularityMarketplaceAvailabilityGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21MarketplaceSchemaAvailabilityResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21MarketplaceSchemaAvailabilityResponseSchema200Data);
                  expect(data.data.showSingularityMarketplaceButton).to.be.a(S1MgmtApi.V21MarketplaceSchemaAvailabilityResponseSchema200DataShowSingularityMarketplaceButton);
                    expect(data.data.showSingularityMarketplaceButton.show).to.be.a('boolean');
                expect(data.data.showSingularityMarketplaceButton.show).to.be(false);
                expect(data.data.showSingularityMarketplaceButton.message).to.be.a('string');
                expect(data.data.showSingularityMarketplaceButton.message).to.be("");
              expect(data.data.showNotification).to.be.a('boolean');
              expect(data.data.showNotification).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSingularityMarketplaceApplicationsCatalogGet', function() {
        it('should call webApiSingularityMarketplaceApplicationsCatalogGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSingularityMarketplaceApplicationsCatalogGet call and complete the assertions
          /*
          var opts = {};
          opts.categoryContains = ["categoryContains_example"];
          opts.descriptionContains = ["descriptionContains_example"];
          opts.query = ["query_example"];
          opts.nameContains = ["nameContains_example"];
          opts.id = ["id_example"];

          instance.webApiSingularityMarketplaceApplicationsCatalogGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21MarketplaceSchemaApplicationsCatalogResponseSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21MarketplaceSchemaApplicationsCatalogResponseSchemaMany200Data);
                expect(data.deletedAt).to.be.a('string');
                expect(data.deletedAt).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.externalUrl).to.be.a('string');
                expect(data.externalUrl).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.key).to.be.a('string');
                expect(data.key).to.be("");
                expect(data.summary).to.be.a('string');
                expect(data.summary).to.be("");
                expect(data.viewPolicy).to.be.a('string');
                expect(data.viewPolicy).to.be("");
                expect(data.icon).to.be.a('string');
                expect(data.icon).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.category).to.be.a('string');
                expect(data.category).to.be("");
                expect(data.installed).to.be.a('boolean');
                expect(data.installed).to.be(false);
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
                expect(data.createdAt).to.be.a('string');
                expect(data.createdAt).to.be("2018-02-27T04:49:26.257525Z");
                expect(data.oauthUrl).to.be.a('string');
                expect(data.oauthUrl).to.be("");
                expect(data.retryPolicy).to.be.a('number');
                expect(data.retryPolicy).to.be(0);
                expect(data.updatedAt).to.be.a('string');
                expect(data.updatedAt).to.be("2018-02-27T04:49:26.257525Z");
                expect(data.availablePlugins).to.be.a('string');
                expect(data.availablePlugins).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSingularityMarketplaceApplicationsCatalogapplicationCatalogIdConfigGet', function() {
        it('should call webApiSingularityMarketplaceApplicationsCatalogapplicationCatalogIdConfigGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSingularityMarketplaceApplicationsCatalogapplicationCatalogIdConfigGet call and complete the assertions
          /*
          var applicationCatalogId = "applicationCatalogId_example";

          instance.webApiSingularityMarketplaceApplicationsCatalogapplicationCatalogIdConfigGet(applicationCatalogId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21MarketplaceSchemaApplicationCatalogConfigResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21MarketplaceSchemaApplicationCatalogConfigResponseSchema200Data);
                  {
                let dataCtr = data.data.fields;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.V21MarketplaceSchemaApplicationCatalogConfigResponseSchema200DataFields);
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("");
                  expect(data.placeHolder).to.be.a('string');
                  expect(data.placeHolder).to.be("");
                  expect(data.defaultValue).to.be.a('string');
                  expect(data.defaultValue).to.be("");
                  expect(data.label).to.be.a('string');
                  expect(data.label).to.be("");
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("");
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("");
                  {
                    let dataCtr = data._enum;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.required).to.be.a('boolean');
                  expect(data.required).to.be(false);
  
                        }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSingularityMarketplaceApplicationsDelete', function() {
        it('should call webApiSingularityMarketplaceApplicationsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSingularityMarketplaceApplicationsDelete call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21MarketplaceSchemaApplicationDeleteSchema();
          opts.body.filter = new S1MgmtApi.V21MarketplaceSchemaApplicationDeleteSchemaFilter();
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.applicationCatalogId = ["225494730938493804","225494730938493915"];
          opts.body.filter.query = ["Service Pack 1"];
          opts.body.filter.creatorContains = ["Service Pack 1"];
          opts.body.filter.nameContains = ["Service Pack 1"];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.scopes = ["global"];
          opts.body.filter.id = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiSingularityMarketplaceApplicationsDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSingularityMarketplaceApplicationsGet', function() {
        it('should call webApiSingularityMarketplaceApplicationsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSingularityMarketplaceApplicationsGet call and complete the assertions
          /*
          var opts = {};
          opts.siteIds = ["siteIds_example"];
          opts.disablePagination = true;
          opts.limit = 10;
          opts.sortOrder = "null";
          opts.sortBy = "null";
          opts.applicationCatalogId = ["applicationCatalogId_example"];
          opts.query = ["query_example"];
          opts.cursor = "null";
          opts.skip = 56;
          opts.creatorContains = ["creatorContains_example"];
          opts.nameContains = ["nameContains_example"];
          opts.groupIds = ["groupIds_example"];
          opts.scopes = ["scopes_example"];
          opts.skipCount = null;
          opts.countOnly = false;
          opts.id = ["id_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiSingularityMarketplaceApplicationsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21MarketplaceSchemaApplicationViewSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.V21MarketplaceSchemaApplicationViewSchemaMany200Pagination);
                  expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
              expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21MarketplaceSchemaApplicationViewSchemaMany200Data);
                expect(data.applicationCatalogId).to.be.a('string');
                expect(data.applicationCatalogId).to.be("225494730938493804");
                expect(data.hasAlert).to.be.a('boolean');
                expect(data.hasAlert).to.be(false);
                {
                  let dataCtr = data.scopes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.V21MarketplaceSchemaApplicationViewSchemaMany200Scopes);
                    expect(data.accountId).to.be.a('string');
                    expect(data.accountId).to.be("225494730938493804");
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("225494730938493804");
                    expect(data.lastEntityCreatedAt).to.be.a('string');
                    expect(data.lastEntityCreatedAt).to.be("2018-02-27T04:49:26.257525Z");
                    expect(data.alertMessage).to.be.a('string');
                    expect(data.alertMessage).to.be("");
                    expect(data.scopeLevel).to.be.a('string');
                    expect(data.scopeLevel).to.be("global");
                    expect(data.creatorId).to.be.a('string');
                    expect(data.creatorId).to.be("225494730938493804");
                    expect(data.siteId).to.be.a('string');
                    expect(data.siteId).to.be("225494730938493804");
                    expect(data.desiredStatus).to.be.a('string');
                    expect(data.desiredStatus).to.be("draft");
                    expect(data.scopeId).to.be.a('string');
                    expect(data.scopeId).to.be("225494730938493804");
                    expect(data.creator).to.be.a('string');
                    expect(data.creator).to.be("");
                    expect(data.site).to.be.a('string');
                    expect(data.site).to.be("");
                    expect(data.modifier).to.be.a('string');
                    expect(data.modifier).to.be("");
                    expect(data.status).to.be.a('string');
                    expect(data.status).to.be("active");
                    expect(data.groupId).to.be.a('string');
                    expect(data.groupId).to.be("225494730938493804");
                    expect(data.group).to.be.a('string');
                    expect(data.group).to.be("");
                    expect(data.modifierId).to.be.a('string');
                    expect(data.modifierId).to.be("225494730938493804");
                    expect(data.hasAlert).to.be.a('boolean');
                    expect(data.hasAlert).to.be(false);
                    expect(data.account).to.be.a('string');
                    expect(data.account).to.be("");
                    expect(data.retryUntil).to.be.a(Date);
                    expect(data.retryUntil).to.be(new Date());
                    expect(data.createdAt).to.be.a('string');
                    expect(data.createdAt).to.be("2018-02-27T04:49:26.257525Z");
                    expect(data.updatedAt).to.be.a('string');
                    expect(data.updatedAt).to.be("2018-02-27T04:49:26.257525Z");
    
                          }
                }
                expect(data.icon).to.be.a('string');
                expect(data.icon).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.lastInstalledAt).to.be.a('string');
                expect(data.lastInstalledAt).to.be("2018-02-27T04:49:26.257525Z");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSingularityMarketplaceApplicationsPost', function() {
        it('should call webApiSingularityMarketplaceApplicationsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSingularityMarketplaceApplicationsPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21MarketplaceSchemaPostApplicationSchema();
          opts.body.filter = new S1MgmtApi.V21MarketplaceSchemaPostApplicationSchemaFilter();
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.applicationCatalogId = "225494730938493804";
          opts.body.filter.tenant = false;
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.V21MarketplaceSchemaPostApplicationSchemaData();
          opts.body.data.configurations = [new S1MgmtApi.V21MarketplaceSchemaPostApplicationSchemaDataConfigurations()];
          opts.body.data.configurations[0].id = "";
          opts.body.data.configurations[0].value = "";

          instance.webApiSingularityMarketplaceApplicationsPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSingularityMarketplaceApplicationsPut', function() {
        it('should call webApiSingularityMarketplaceApplicationsPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSingularityMarketplaceApplicationsPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21MarketplaceSchemaApplicationUpdateConfigSchema();
          opts.body.filter = new S1MgmtApi.V21MarketplaceSchemaApplicationUpdateConfigSchemaFilter();
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.V21MarketplaceSchemaPostApplicationSchemaData();
          opts.body.data.configurations = [new S1MgmtApi.V21MarketplaceSchemaPostApplicationSchemaDataConfigurations()];
          opts.body.data.configurations[0].id = "";
          opts.body.data.configurations[0].value = "";

          instance.webApiSingularityMarketplaceApplicationsPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSingularityMarketplaceApplicationsapplicationIdConfigGet', function() {
        it('should call webApiSingularityMarketplaceApplicationsapplicationIdConfigGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSingularityMarketplaceApplicationsapplicationIdConfigGet call and complete the assertions
          /*
          var applicationId = "applicationId_example";

          instance.webApiSingularityMarketplaceApplicationsapplicationIdConfigGet(applicationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21MarketplaceSchemaApplicationConfigResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21MarketplaceSchemaApplicationConfigResponseSchema200Data);
                  expect(data.data.accountId).to.be.a('string');
              expect(data.data.accountId).to.be("225494730938493804");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.lastEntityCreatedAt).to.be.a('string');
              expect(data.data.lastEntityCreatedAt).to.be("2018-02-27T04:49:26.257525Z");
              {
                let dataCtr = data.data.fields;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.V21MarketplaceSchemaApplicationCatalogConfigResponseSchema200DataFields);
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("");
                  expect(data.placeHolder).to.be.a('string');
                  expect(data.placeHolder).to.be("");
                  expect(data.defaultValue).to.be.a('string');
                  expect(data.defaultValue).to.be("");
                  expect(data.label).to.be.a('string');
                  expect(data.label).to.be("");
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("");
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("");
                  {
                    let dataCtr = data._enum;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.required).to.be.a('boolean');
                  expect(data.required).to.be(false);
  
                        }
              }
              expect(data.data.alertMessage).to.be.a('string');
              expect(data.data.alertMessage).to.be("");
              expect(data.data.scopeLevel).to.be.a('string');
              expect(data.data.scopeLevel).to.be("global");
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              expect(data.data.siteId).to.be.a('string');
              expect(data.data.siteId).to.be("225494730938493804");
              expect(data.data.desiredStatus).to.be.a('string');
              expect(data.data.desiredStatus).to.be("draft");
              expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("");
              expect(data.data.site).to.be.a('string');
              expect(data.data.site).to.be("");
              expect(data.data.modifier).to.be.a('string');
              expect(data.data.modifier).to.be("");
              expect(data.data.status).to.be.a('string');
              expect(data.data.status).to.be("active");
              expect(data.data.groupId).to.be.a('string');
              expect(data.data.groupId).to.be("225494730938493804");
              expect(data.data.group).to.be.a('string');
              expect(data.data.group).to.be("");
              expect(data.data.modifierId).to.be.a('string');
              expect(data.data.modifierId).to.be("225494730938493804");
              expect(data.data.hasAlert).to.be.a('boolean');
              expect(data.data.hasAlert).to.be(false);
              expect(data.data.account).to.be.a('string');
              expect(data.data.account).to.be("");
              expect(data.data.retryUntil).to.be.a(Date);
              expect(data.data.retryUntil).to.be(new Date());
              expect(data.data.createdAt).to.be.a('string');
              expect(data.data.createdAt).to.be("2018-02-27T04:49:26.257525Z");
              expect(data.data.updatedAt).to.be.a('string');
              expect(data.data.updatedAt).to.be("2018-02-27T04:49:26.257525Z");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSingularityMarketplaceApplicationsmodePost', function() {
        it('should call webApiSingularityMarketplaceApplicationsmodePost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSingularityMarketplaceApplicationsmodePost call and complete the assertions
          /*
          var mode = "mode_example";
          var opts = {};
          opts.body = new S1MgmtApi.V21MarketplaceSchemaEnableDisableApplicationSchema();
          opts.body.filter = new S1MgmtApi.V21MarketplaceSchemaEnableDisableApplicationSchemaFilter();
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.applicationId = "225494730938493804";
          opts.body.filter.tenant = false;
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiSingularityMarketplaceApplicationsmodePost(mode, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
