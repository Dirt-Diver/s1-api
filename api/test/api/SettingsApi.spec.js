/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.SettingsApi();
  });

  describe('(package)', function() {
    describe('SettingsApi', function() {
      describe('webApiSettingsActiveDirectoryGet', function() {
        it('should call webApiSettingsActiveDirectoryGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsActiveDirectoryGet call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.siteIds = ["siteIds_example"];

          instance.webApiSettingsActiveDirectoryGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsAdSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsAdSettingsSchema200Data);
                  expect(data.data.ssl).to.be.a('boolean');
              expect(data.data.ssl).to.be(false);
              expect(data.data.username).to.be.a('string');
              expect(data.data.username).to.be("");
              expect(data.data.port).to.be.a('number');
              expect(data.data.port).to.be(0);
              expect(data.data.rootDn).to.be.a('string');
              expect(data.data.rootDn).to.be("");
              expect(data.data.enabled).to.be.a('boolean');
              expect(data.data.enabled).to.be(false);
              expect(data.data.host).to.be.a('string');
              expect(data.data.host).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsActiveDirectoryPut', function() {
        it('should call webApiSettingsActiveDirectoryPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsActiveDirectoryPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.SettingsAdSettingsPutSchema();
          opts.body.data = new S1MgmtApi.SettingsAdSettingsPutSchemaData();
          opts.body.data.ssl = false;
          opts.body.data.username = "";
          opts.body.data.port = 0;
          opts.body.data.rootDn = "";
          opts.body.data.enabled = false;
          opts.body.data.host = "";
          opts.body.data.password = "";

          instance.webApiSettingsActiveDirectoryPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsAdSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsAdSettingsSchema200Data);
                  expect(data.data.ssl).to.be.a('boolean');
              expect(data.data.ssl).to.be(false);
              expect(data.data.username).to.be.a('string');
              expect(data.data.username).to.be("");
              expect(data.data.port).to.be.a('number');
              expect(data.data.port).to.be(0);
              expect(data.data.rootDn).to.be.a('string');
              expect(data.data.rootDn).to.be("");
              expect(data.data.enabled).to.be.a('boolean');
              expect(data.data.enabled).to.be(false);
              expect(data.data.host).to.be.a('string');
              expect(data.data.host).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsActiveDirectoryScopeMappingGet', function() {
        it('should call webApiSettingsActiveDirectoryScopeMappingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsActiveDirectoryScopeMappingGet call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.siteIds = ["siteIds_example"];

          instance.webApiSettingsActiveDirectoryScopeMappingGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsAdFqdnsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsAdFqdnsSchema200Data);
                  {
                let dataCtr = data.data.viewer;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.data.admin;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsActiveDirectoryScopeMappingPut', function() {
        it('should call webApiSettingsActiveDirectoryScopeMappingPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsActiveDirectoryScopeMappingPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.SettingsAdFqdnsPutSchema();
          opts.body.filter = new S1MgmtApi.GroupsPutRanksSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.SettingsAdFqdnsPutSchemaData();
          opts.body.data.viewer = [""];
          opts.body.data.admin = [""];

          instance.webApiSettingsActiveDirectoryScopeMappingPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsAdFqdnsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsAdFqdnsSchema200Data);
                  {
                let dataCtr = data.data.viewer;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.data.admin;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsActiveDirectoryTestPost', function() {
        it('should call webApiSettingsActiveDirectoryTestPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsActiveDirectoryTestPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.SettingsAdSettingsPutSchema();
          opts.body.data = new S1MgmtApi.SettingsAdSettingsPutSchemaData();
          opts.body.data.ssl = false;
          opts.body.data.username = "";
          opts.body.data.port = 0;
          opts.body.data.rootDn = "";
          opts.body.data.enabled = false;
          opts.body.data.host = "";
          opts.body.data.password = "";

          instance.webApiSettingsActiveDirectoryTestPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsTestAdSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsTestSmtpSettingsSchema200Data);
                  expect(data.data.status).to.be.a('boolean');
              expect(data.data.status).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsMicrosoftGet', function() {
        it('should call webApiSettingsMicrosoftGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsMicrosoftGet call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.siteIds = ["siteIds_example"];

          instance.webApiSettingsMicrosoftGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsMicrosoftSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsMicrosoftSettingsSchema200Data);
                  expect(data.data.url).to.be.a('string');
              expect(data.data.url).to.be("");
              expect(data.data.inherits).to.be.a('boolean');
              expect(data.data.inherits).to.be(false);
              expect(data.data.enabled).to.be.a('boolean');
              expect(data.data.enabled).to.be(false);
              expect(data.data.expiryDate).to.be.a(Date);
              expect(data.data.expiryDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsMicrosoftPut', function() {
        it('should call webApiSettingsMicrosoftPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsMicrosoftPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.SettingsMicrosoftSettingsPutSchema();
          opts.body.filter = new S1MgmtApi.GroupsPutRanksSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.SettingsMicrosoftSettingsPutSchemaData();
          opts.body.data.url = "";
          opts.body.data.inherits = false;
          opts.body.data.enabled = false;
          opts.body.data.expiryDate = new Date();

          instance.webApiSettingsMicrosoftPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsMicrosoftSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsMicrosoftSettingsSchema200Data);
                  expect(data.data.url).to.be.a('string');
              expect(data.data.url).to.be("");
              expect(data.data.inherits).to.be.a('boolean');
              expect(data.data.inherits).to.be(false);
              expect(data.data.enabled).to.be.a('boolean');
              expect(data.data.enabled).to.be(false);
              expect(data.data.expiryDate).to.be.a(Date);
              expect(data.data.expiryDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsMicrosoftTestPost', function() {
        it('should call webApiSettingsMicrosoftTestPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsMicrosoftTestPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.SettingsMicrosoftSettingsPutSchema();
          opts.body.filter = new S1MgmtApi.GroupsPutRanksSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.SettingsMicrosoftSettingsPutSchemaData();
          opts.body.data.url = "";
          opts.body.data.inherits = false;
          opts.body.data.enabled = false;
          opts.body.data.expiryDate = new Date();

          instance.webApiSettingsMicrosoftTestPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsTestMicrosoftSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsTestMicrosoftSettingsSchema200Data);
                  expect(data.data.reason).to.be.a('string');
              expect(data.data.reason).to.be("");
              expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsNotificationsCancelPendingEmailsPost', function() {
        it('should call webApiSettingsNotificationsCancelPendingEmailsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsNotificationsCancelPendingEmailsPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.NotificationsSchemasCancelPendingEmailNotificationsPostSchema();
          opts.body.filter = new S1MgmtApi.GroupsPutRanksSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];

          instance.webApiSettingsNotificationsCancelPendingEmailsPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.NotificationsSchemasCancelPendingEmailNotificationsReturnSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.NotificationsSchemasCancelPendingEmailNotificationsReturnSchema200Data);
                  expect(data.data.canceled).to.be.a('number');
              expect(data.data.canceled).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsNotificationsGet', function() {
        it('should call webApiSettingsNotificationsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsNotificationsGet call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.siteIds = ["siteIds_example"];

          instance.webApiSettingsNotificationsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.NotificationsSchemasNotificationsSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.NotificationsSchemasNotificationsSettingsSchema200Data);
                  expect(data.data.configurations).to.be.a(S1MgmtApi.NotificationsSchemasNotificationsSettingsSchema200DataConfigurations);
                    expect(data.data.configurations.sms).to.be.a('string');
                expect(data.data.configurations.sms).to.be("");
                expect(data.data.configurations.syslog).to.be.a('string');
                expect(data.data.configurations.syslog).to.be("");
                expect(data.data.configurations.email).to.be.a('string');
                expect(data.data.configurations.email).to.be("");
              expect(data.data.notifications).to.be.a(S1MgmtApi.NotificationsSchemasNotificationsSettingsSchema200DataNotifications);
                    expect(data.data.notifications.malware).to.be.a(Object);
                expect(data.data.notifications.malware).to.be();
                expect(data.data.notifications.operations).to.be.a(Object);
                expect(data.data.notifications.operations).to.be();
                expect(data.data.notifications.firewallcontrol).to.be.a(Object);
                expect(data.data.notifications.firewallcontrol).to.be();
                expect(data.data.notifications.threatmanagement).to.be.a(Object);
                expect(data.data.notifications.threatmanagement).to.be();
                expect(data.data.notifications.devicecontrol).to.be.a(Object);
                expect(data.data.notifications.devicecontrol).to.be();
                expect(data.data.notifications.activedirectory).to.be.a(Object);
                expect(data.data.notifications.activedirectory).to.be();
                expect(data.data.notifications.mitigation).to.be.a(Object);
                expect(data.data.notifications.mitigation).to.be();
                expect(data.data.notifications.locations).to.be.a(Object);
                expect(data.data.notifications.locations).to.be();
                expect(data.data.notifications.whitelistblacklist).to.be.a(Object);
                expect(data.data.notifications.whitelistblacklist).to.be();
                expect(data.data.notifications.endpointtagging).to.be.a(Object);
                expect(data.data.notifications.endpointtagging).to.be();
                expect(data.data.notifications.administrative).to.be.a(Object);
                expect(data.data.notifications.administrative).to.be();
                expect(data.data.notifications.customrules).to.be.a(Object);
                expect(data.data.notifications.customrules).to.be();
                expect(data.data.notifications.remoteshell).to.be.a(Object);
                expect(data.data.notifications.remoteshell).to.be();
                expect(data.data.notifications.ranger).to.be.a(Object);
                expect(data.data.notifications.ranger).to.be();
              expect(data.data.lastModified).to.be.a(S1MgmtApi.NotificationsSchemasNotificationsSettingsSchema200DataLastModified);
                    expect(data.data.lastModified.updatedBy).to.be.a('string');
                expect(data.data.lastModified.updatedBy).to.be("");
                expect(data.data.lastModified.updatedAt).to.be.a(Date);
                expect(data.data.lastModified.updatedAt).to.be(2018-02-27T04:49:26.257525Z);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsNotificationsPut', function() {
        it('should call webApiSettingsNotificationsPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsNotificationsPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.NotificationsSchemasNotificationSettingsPutSchema();
          opts.body.filter = new S1MgmtApi.GroupsPutRanksSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.NotificationsSchemasNotificationSettingsPutSchemaData();
          opts.body.data.configurations = new S1MgmtApi.NotificationsSchemasNotificationsSettingsSchema200DataConfigurations();
          opts.body.data.configurations.sms = "";
          opts.body.data.configurations.syslog = "";
          opts.body.data.configurations.email = "";
          opts.body.data.notifications = new S1MgmtApi.NotificationsSchemasNotificationsSettingsSchema200DataNotifications();
          opts.body.data.notifications.malware = ;
          opts.body.data.notifications.operations = ;
          opts.body.data.notifications.firewallcontrol = ;
          opts.body.data.notifications.threatmanagement = ;
          opts.body.data.notifications.devicecontrol = ;
          opts.body.data.notifications.activedirectory = ;
          opts.body.data.notifications.mitigation = ;
          opts.body.data.notifications.locations = ;
          opts.body.data.notifications.whitelistblacklist = ;
          opts.body.data.notifications.endpointtagging = ;
          opts.body.data.notifications.administrative = ;
          opts.body.data.notifications.customrules = ;
          opts.body.data.notifications.remoteshell = ;
          opts.body.data.notifications.ranger = ;
          opts.body.data.lastModified = new S1MgmtApi.NotificationsSchemasNotificationsSettingsSchema200DataLastModified();
          opts.body.data.lastModified.updatedBy = "";
          opts.body.data.lastModified.updatedAt = 2018-02-27T04:49:26.257525Z;

          instance.webApiSettingsNotificationsPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.NotificationsSchemasNotificationsSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.NotificationsSchemasNotificationsSettingsSchema200Data);
                  expect(data.data.configurations).to.be.a(S1MgmtApi.NotificationsSchemasNotificationsSettingsSchema200DataConfigurations);
                    expect(data.data.configurations.sms).to.be.a('string');
                expect(data.data.configurations.sms).to.be("");
                expect(data.data.configurations.syslog).to.be.a('string');
                expect(data.data.configurations.syslog).to.be("");
                expect(data.data.configurations.email).to.be.a('string');
                expect(data.data.configurations.email).to.be("");
              expect(data.data.notifications).to.be.a(S1MgmtApi.NotificationsSchemasNotificationsSettingsSchema200DataNotifications);
                    expect(data.data.notifications.malware).to.be.a(Object);
                expect(data.data.notifications.malware).to.be();
                expect(data.data.notifications.operations).to.be.a(Object);
                expect(data.data.notifications.operations).to.be();
                expect(data.data.notifications.firewallcontrol).to.be.a(Object);
                expect(data.data.notifications.firewallcontrol).to.be();
                expect(data.data.notifications.threatmanagement).to.be.a(Object);
                expect(data.data.notifications.threatmanagement).to.be();
                expect(data.data.notifications.devicecontrol).to.be.a(Object);
                expect(data.data.notifications.devicecontrol).to.be();
                expect(data.data.notifications.activedirectory).to.be.a(Object);
                expect(data.data.notifications.activedirectory).to.be();
                expect(data.data.notifications.mitigation).to.be.a(Object);
                expect(data.data.notifications.mitigation).to.be();
                expect(data.data.notifications.locations).to.be.a(Object);
                expect(data.data.notifications.locations).to.be();
                expect(data.data.notifications.whitelistblacklist).to.be.a(Object);
                expect(data.data.notifications.whitelistblacklist).to.be();
                expect(data.data.notifications.endpointtagging).to.be.a(Object);
                expect(data.data.notifications.endpointtagging).to.be();
                expect(data.data.notifications.administrative).to.be.a(Object);
                expect(data.data.notifications.administrative).to.be();
                expect(data.data.notifications.customrules).to.be.a(Object);
                expect(data.data.notifications.customrules).to.be();
                expect(data.data.notifications.remoteshell).to.be.a(Object);
                expect(data.data.notifications.remoteshell).to.be();
                expect(data.data.notifications.ranger).to.be.a(Object);
                expect(data.data.notifications.ranger).to.be();
              expect(data.data.lastModified).to.be.a(S1MgmtApi.NotificationsSchemasNotificationsSettingsSchema200DataLastModified);
                    expect(data.data.lastModified.updatedBy).to.be.a('string');
                expect(data.data.lastModified.updatedBy).to.be("");
                expect(data.data.lastModified.updatedAt).to.be.a(Date);
                expect(data.data.lastModified.updatedAt).to.be(2018-02-27T04:49:26.257525Z);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsRecipientsGet', function() {
        it('should call webApiSettingsRecipientsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsRecipientsGet call and complete the assertions
          /*
          var opts = {};
          opts.name = "name_example";
          opts.accountIds = ["accountIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.sms = "sms_example";
          opts.query = "query_example";
          opts.email = "email_example";

          instance.webApiSettingsRecipientsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsNotificationRecipientsListSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsNotificationRecipientsListSchema200Data);
                  {
                let dataCtr = data.data.recipients;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.SettingsNotificationRecipientsListSchema200DataRecipients);
                  expect(data.sms).to.be.a('string');
                  expect(data.sms).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.email).to.be.a('string');
                  expect(data.email).to.be("admin@sentinelone.com");
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("225494730938493804");
  
                        }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsRecipientsPut', function() {
        it('should call webApiSettingsRecipientsPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsRecipientsPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.SettingsNotificationRecipientSettingsPutSchema();
          opts.body.filter = new S1MgmtApi.GroupsPutRanksSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.SettingsNotificationRecipientSettingsPutSchemaData();
          opts.body.data.sms = "";
          opts.body.data.name = "";
          opts.body.data.email = "admin@sentinelone.com";
          opts.body.data.id = "225494730938493804";

          instance.webApiSettingsRecipientsPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsNotificationRecipientSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsNotificationRecipientSettingsSchema200Data);
                  expect(data.data.sms).to.be.a('string');
              expect(data.data.sms).to.be("");
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.email).to.be.a('string');
              expect(data.data.email).to.be("admin@sentinelone.com");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsRecipientsrecipientIdDelete', function() {
        it('should call webApiSettingsRecipientsrecipientIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsRecipientsrecipientIdDelete call and complete the assertions
          /*
          var recipientId = "recipientId_example";

          instance.webApiSettingsRecipientsrecipientIdDelete(recipientId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsSmsGet', function() {
        it('should call webApiSettingsSmsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsSmsGet call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.siteIds = ["siteIds_example"];

          instance.webApiSettingsSmsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsSmsSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsSmsSettingsSchema200Data);
                  expect(data.data.enabled).to.be.a('boolean');
              expect(data.data.enabled).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsSmsPut', function() {
        it('should call webApiSettingsSmsPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsSmsPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.SettingsSmsSettingsPutSchema();
          opts.body.filter = new S1MgmtApi.GroupsPutRanksSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.SettingsSmsSettingsPutSchemaData();
          opts.body.data.enabled = false;

          instance.webApiSettingsSmsPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsSmsSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsSmsSettingsSchema200Data);
                  expect(data.data.enabled).to.be.a('boolean');
              expect(data.data.enabled).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsSmtpGet', function() {
        it('should call webApiSettingsSmtpGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsSmtpGet call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.siteIds = ["siteIds_example"];

          instance.webApiSettingsSmtpGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsSmtpSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsSmtpSettingsSchema200Data);
                  expect(data.data.username).to.be.a('string');
              expect(data.data.username).to.be("");
              expect(data.data.host).to.be.a('string');
              expect(data.data.host).to.be("");
              expect(data.data.port).to.be.a('number');
              expect(data.data.port).to.be(0);
              expect(data.data.noReplyEmail).to.be.a('string');
              expect(data.data.noReplyEmail).to.be("admin@sentinelone.com");
              expect(data.data.encryption).to.be.a('string');
              expect(data.data.encryption).to.be("ssl");
              expect(data.data.enabled).to.be.a('boolean');
              expect(data.data.enabled).to.be(false);
              expect(data.data.inherits).to.be.a('boolean');
              expect(data.data.inherits).to.be(false);
              expect(data.data.password).to.be.a('string');
              expect(data.data.password).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsSmtpPut', function() {
        it('should call webApiSettingsSmtpPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsSmtpPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.SettingsSmtpSettingsPutSchema();
          opts.body.filter = new S1MgmtApi.GroupsPutRanksSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.SettingsSmtpSettingsPutSchemaData();
          opts.body.data.username = "";
          opts.body.data.host = "";
          opts.body.data.port = 0;
          opts.body.data.noReplyEmail = "admin@sentinelone.com";
          opts.body.data.encryption = "ssl";
          opts.body.data.enabled = false;
          opts.body.data.inherits = false;
          opts.body.data.password = "";

          instance.webApiSettingsSmtpPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsSmtpSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsSmtpSettingsSchema200Data);
                  expect(data.data.username).to.be.a('string');
              expect(data.data.username).to.be("");
              expect(data.data.host).to.be.a('string');
              expect(data.data.host).to.be("");
              expect(data.data.port).to.be.a('number');
              expect(data.data.port).to.be(0);
              expect(data.data.noReplyEmail).to.be.a('string');
              expect(data.data.noReplyEmail).to.be("admin@sentinelone.com");
              expect(data.data.encryption).to.be.a('string');
              expect(data.data.encryption).to.be("ssl");
              expect(data.data.enabled).to.be.a('boolean');
              expect(data.data.enabled).to.be(false);
              expect(data.data.inherits).to.be.a('boolean');
              expect(data.data.inherits).to.be(false);
              expect(data.data.password).to.be.a('string');
              expect(data.data.password).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsSmtpTestPost', function() {
        it('should call webApiSettingsSmtpTestPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsSmtpTestPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.SettingsSmtpSettingsTestSchema();
          opts.body.filter = new S1MgmtApi.GroupsPutRanksSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.SettingsSmtpSettingsTestSchemaData();
          opts.body.data.username = "";
          opts.body.data.host = "";
          opts.body.data.port = 0;
          opts.body.data.noReplyEmail = "admin@sentinelone.com";
          opts.body.data.encryption = "ssl";
          opts.body.data.enabled = false;
          opts.body.data.inherits = false;
          opts.body.data.password = "";

          instance.webApiSettingsSmtpTestPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsTestSmtpSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsTestSmtpSettingsSchema200Data);
                  expect(data.data.status).to.be.a('boolean');
              expect(data.data.status).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsSsoGet', function() {
        it('should call webApiSettingsSsoGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsSsoGet call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.siteIds = ["siteIds_example"];

          instance.webApiSettingsSsoGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsSsoSettingFields200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsSsoSettingFields200Data);
                  expect(data.data.defaultUserRole).to.be.a('string');
              expect(data.data.defaultUserRole).to.be("Admin");
              expect(data.data.ssoElevatedSessionReauthType).to.be.a('string');
              expect(data.data.ssoElevatedSessionReauthType).to.be("totp");
              expect(data.data.autoProvisioning).to.be.a('boolean');
              expect(data.data.autoProvisioning).to.be(false);
              expect(data.data.ssoElevatedSessionReauthTypeEnabled).to.be.a('boolean');
              expect(data.data.ssoElevatedSessionReauthTypeEnabled).to.be(false);
              expect(data.data.spEntityId).to.be.a('string');
              expect(data.data.spEntityId).to.be("");
              {
                let dataCtr = data.data.domains;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.idpEntityId).to.be.a('string');
              expect(data.data.idpEntityId).to.be("");
              expect(data.data.idpSsoUrl).to.be.a('string');
              expect(data.data.idpSsoUrl).to.be("");
              expect(data.data.ssoInheritableDomains).to.be.a(Object);
              expect(data.data.ssoInheritableDomains).to.be({"account":["sentinelone.com"]});
              expect(data.data.enabled).to.be.a('boolean');
              expect(data.data.enabled).to.be(false);
              expect(data.data.signRequest).to.be.a('boolean');
              expect(data.data.signRequest).to.be(false);
              expect(data.data.defaultUserRoleId).to.be.a('string');
              expect(data.data.defaultUserRoleId).to.be("225494730938493804");
              expect(data.data.spAcsUrl).to.be.a('string');
              expect(data.data.spAcsUrl).to.be("");
              expect(data.data.ssoPropagateDomainsToChildren).to.be.a('boolean');
              expect(data.data.ssoPropagateDomainsToChildren).to.be(false);
              {
                let dataCtr = data.data.ssoInheritDomainsFrom;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("group");
                }
              }
              expect(data.data.idpCertName).to.be.a('string');
              expect(data.data.idpCertName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsSsoPut', function() {
        it('should call webApiSettingsSsoPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsSsoPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.SettingsSsoSettingsPutSchema();
          opts.body.filter = new S1MgmtApi.GroupsPutRanksSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.SettingsSsoSettingsPutSchemaData();
          opts.body.data.defaultUserRole = "Admin";
          opts.body.data.ssoElevatedSessionReauthType = "totp";
          opts.body.data.autoProvisioning = false;
          opts.body.data.idpCertContent = "QmFzZTY0IGVuY29kZWQgZXhhbXBsZQ==";
          opts.body.data.domains = ["sentinelone.com"];
          opts.body.data.idpEntityId = "";
          opts.body.data.idpSsoUrl = "";
          opts.body.data.signRequest = false;
          opts.body.data.enabled = false;
          opts.body.data.defaultUserRoleId = "225494730938493804";
          opts.body.data.ssoPropagateDomainsToChildren = false;
          opts.body.data.ssoInheritDomainsFrom = ["account","tenant"];
          opts.body.data.idpCertName = "";

          instance.webApiSettingsSsoPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsSsoSettingFields200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsSsoSettingFields200Data);
                  expect(data.data.defaultUserRole).to.be.a('string');
              expect(data.data.defaultUserRole).to.be("Admin");
              expect(data.data.ssoElevatedSessionReauthType).to.be.a('string');
              expect(data.data.ssoElevatedSessionReauthType).to.be("totp");
              expect(data.data.autoProvisioning).to.be.a('boolean');
              expect(data.data.autoProvisioning).to.be(false);
              expect(data.data.ssoElevatedSessionReauthTypeEnabled).to.be.a('boolean');
              expect(data.data.ssoElevatedSessionReauthTypeEnabled).to.be(false);
              expect(data.data.spEntityId).to.be.a('string');
              expect(data.data.spEntityId).to.be("");
              {
                let dataCtr = data.data.domains;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.idpEntityId).to.be.a('string');
              expect(data.data.idpEntityId).to.be("");
              expect(data.data.idpSsoUrl).to.be.a('string');
              expect(data.data.idpSsoUrl).to.be("");
              expect(data.data.ssoInheritableDomains).to.be.a(Object);
              expect(data.data.ssoInheritableDomains).to.be({"account":["sentinelone.com"]});
              expect(data.data.enabled).to.be.a('boolean');
              expect(data.data.enabled).to.be(false);
              expect(data.data.signRequest).to.be.a('boolean');
              expect(data.data.signRequest).to.be(false);
              expect(data.data.defaultUserRoleId).to.be.a('string');
              expect(data.data.defaultUserRoleId).to.be("225494730938493804");
              expect(data.data.spAcsUrl).to.be.a('string');
              expect(data.data.spAcsUrl).to.be("");
              expect(data.data.ssoPropagateDomainsToChildren).to.be.a('boolean');
              expect(data.data.ssoPropagateDomainsToChildren).to.be(false);
              {
                let dataCtr = data.data.ssoInheritDomainsFrom;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("group");
                }
              }
              expect(data.data.idpCertName).to.be.a('string');
              expect(data.data.idpCertName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsSsoSpCertDownloadGet', function() {
        it('should call webApiSettingsSsoSpCertDownloadGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsSsoSpCertDownloadGet call
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.siteIds = ["siteIds_example"];

          instance.webApiSettingsSsoSpCertDownloadGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsSsoSpCertGet', function() {
        it('should call webApiSettingsSsoSpCertGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsSsoSpCertGet call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.siteIds = ["siteIds_example"];

          instance.webApiSettingsSsoSpCertGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsSsoSpCertificate200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsSsoSpCertificate200Data);
                  expect(data.data.expiresAt).to.be.a(Date);
              expect(data.data.expiresAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.issuedAt).to.be.a(Date);
              expect(data.data.issuedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.fileName).to.be.a('string');
              expect(data.data.fileName).to.be("");
              expect(data.data.pem).to.be.a('string');
              expect(data.data.pem).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsSsoTestPost', function() {
        it('should call webApiSettingsSsoTestPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsSsoTestPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.SettingsSsoSettingsPutSchema();
          opts.body.filter = new S1MgmtApi.GroupsPutRanksSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.SettingsSsoSettingsPutSchemaData();
          opts.body.data.defaultUserRole = "Admin";
          opts.body.data.ssoElevatedSessionReauthType = "totp";
          opts.body.data.autoProvisioning = false;
          opts.body.data.idpCertContent = "QmFzZTY0IGVuY29kZWQgZXhhbXBsZQ==";
          opts.body.data.domains = ["sentinelone.com"];
          opts.body.data.idpEntityId = "";
          opts.body.data.idpSsoUrl = "";
          opts.body.data.signRequest = false;
          opts.body.data.enabled = false;
          opts.body.data.defaultUserRoleId = "225494730938493804";
          opts.body.data.ssoPropagateDomainsToChildren = false;
          opts.body.data.ssoInheritDomainsFrom = ["account","tenant"];
          opts.body.data.idpCertName = "";

          instance.webApiSettingsSsoTestPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsSsoTestFields200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsSsoTestFields200Data);
                  expect(data.data.redirectUrl).to.be.a('string');
              expect(data.data.redirectUrl).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsSyslogGet', function() {
        it('should call webApiSettingsSyslogGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsSyslogGet call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.siteIds = ["siteIds_example"];

          instance.webApiSettingsSyslogGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsSyslogSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsSyslogSettingsSchema200Data);
                  expect(data.data.ssl).to.be.a('boolean');
              expect(data.data.ssl).to.be(false);
              expect(data.data.port).to.be.a('number');
              expect(data.data.port).to.be(0);
              expect(data.data.clientKeyContent).to.be.a('string');
              expect(data.data.clientKeyContent).to.be("QmFzZTY0IGVuY29kZWQgZXhhbXBsZQ==");
              expect(data.data.serverCertContent).to.be.a('string');
              expect(data.data.serverCertContent).to.be("QmFzZTY0IGVuY29kZWQgZXhhbXBsZQ==");
              expect(data.data.token).to.be.a('string');
              expect(data.data.token).to.be("");
              expect(data.data.enabled).to.be.a('boolean');
              expect(data.data.enabled).to.be(false);
              expect(data.data.clientCertName).to.be.a('string');
              expect(data.data.clientCertName).to.be("");
              expect(data.data.clientKeyName).to.be.a('string');
              expect(data.data.clientKeyName).to.be("");
              expect(data.data.serverCertName).to.be.a('string');
              expect(data.data.serverCertName).to.be("");
              expect(data.data.host).to.be.a('string');
              expect(data.data.host).to.be("");
              expect(data.data.format).to.be.a('string');
              expect(data.data.format).to.be("cef");
              expect(data.data.clientCertContent).to.be.a('string');
              expect(data.data.clientCertContent).to.be("QmFzZTY0IGVuY29kZWQgZXhhbXBsZQ==");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsSyslogPut', function() {
        it('should call webApiSettingsSyslogPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsSyslogPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.SettingsSyslogSettingsPutSchema();
          opts.body.filter = new S1MgmtApi.GroupsPutRanksSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.SettingsSyslogSettingsPutSchemaData();
          opts.body.data.ssl = false;
          opts.body.data.port = 0;
          opts.body.data.clientKeyContent = "QmFzZTY0IGVuY29kZWQgZXhhbXBsZQ==";
          opts.body.data.serverCertContent = "QmFzZTY0IGVuY29kZWQgZXhhbXBsZQ==";
          opts.body.data.token = "";
          opts.body.data.enabled = false;
          opts.body.data.clientCertName = "";
          opts.body.data.clientKeyName = "";
          opts.body.data.serverCertName = "";
          opts.body.data.host = "";
          opts.body.data.format = "cef";
          opts.body.data.clientCertContent = "QmFzZTY0IGVuY29kZWQgZXhhbXBsZQ==";

          instance.webApiSettingsSyslogPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsSyslogSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsSyslogSettingsSchema200Data);
                  expect(data.data.ssl).to.be.a('boolean');
              expect(data.data.ssl).to.be(false);
              expect(data.data.port).to.be.a('number');
              expect(data.data.port).to.be(0);
              expect(data.data.clientKeyContent).to.be.a('string');
              expect(data.data.clientKeyContent).to.be("QmFzZTY0IGVuY29kZWQgZXhhbXBsZQ==");
              expect(data.data.serverCertContent).to.be.a('string');
              expect(data.data.serverCertContent).to.be("QmFzZTY0IGVuY29kZWQgZXhhbXBsZQ==");
              expect(data.data.token).to.be.a('string');
              expect(data.data.token).to.be("");
              expect(data.data.enabled).to.be.a('boolean');
              expect(data.data.enabled).to.be(false);
              expect(data.data.clientCertName).to.be.a('string');
              expect(data.data.clientCertName).to.be("");
              expect(data.data.clientKeyName).to.be.a('string');
              expect(data.data.clientKeyName).to.be("");
              expect(data.data.serverCertName).to.be.a('string');
              expect(data.data.serverCertName).to.be("");
              expect(data.data.host).to.be.a('string');
              expect(data.data.host).to.be("");
              expect(data.data.format).to.be.a('string');
              expect(data.data.format).to.be("cef");
              expect(data.data.clientCertContent).to.be.a('string');
              expect(data.data.clientCertContent).to.be("QmFzZTY0IGVuY29kZWQgZXhhbXBsZQ==");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSettingsSyslogTestPost', function() {
        it('should call webApiSettingsSyslogTestPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiSettingsSyslogTestPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.SettingsSyslogSettingsPutSchema();
          opts.body.filter = new S1MgmtApi.GroupsPutRanksSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.SettingsSyslogSettingsPutSchemaData();
          opts.body.data.ssl = false;
          opts.body.data.port = 0;
          opts.body.data.clientKeyContent = "QmFzZTY0IGVuY29kZWQgZXhhbXBsZQ==";
          opts.body.data.serverCertContent = "QmFzZTY0IGVuY29kZWQgZXhhbXBsZQ==";
          opts.body.data.token = "";
          opts.body.data.enabled = false;
          opts.body.data.clientCertName = "";
          opts.body.data.clientKeyName = "";
          opts.body.data.serverCertName = "";
          opts.body.data.host = "";
          opts.body.data.format = "cef";
          opts.body.data.clientCertContent = "QmFzZTY0IGVuY29kZWQgZXhhbXBsZQ==";

          instance.webApiSettingsSyslogTestPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SettingsTestSyslogSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SettingsTestSmtpSettingsSchema200Data);
                  expect(data.data.status).to.be.a('boolean');
              expect(data.data.status).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
