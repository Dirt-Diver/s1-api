/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.RemoteOpsForensicsApi();
  });

  describe('(package)', function() {
    describe('RemoteOpsForensicsApi', function() {
      describe('webApiRemoteOpsForensicsArtifactTypesGet', function() {
        it('should call webApiRemoteOpsForensicsArtifactTypesGet successfully', function(done) {
          // TODO: uncomment webApiRemoteOpsForensicsArtifactTypesGet call and complete the assertions
          /*

          instance.webApiRemoteOpsForensicsArtifactTypesGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ForensicsSchemaArtifactTypesResponseSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21ForensicsSchemaArtifactTypesResponseSchemaMany200Data);
                expect(data.artifactType).to.be.a('string');
                expect(data.artifactType).to.be("");
                {
                  let dataCtr = data.osTypes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("linux");
                  }
                }
                expect(data.category).to.be.a('string');
                expect(data.category).to.be("");
                {
                  let dataCtr = data.parameters;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.V21ForensicsSchemaArtifactTypesResponseSchemaMany200Parameters);
                    expect(data.key).to.be.a('string');
                    expect(data.key).to.be("");
                    expect(data._default).to.be.a('string');
                    expect(data._default).to.be("");
                    expect(data.example).to.be.a('string');
                    expect(data.example).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("str");
    
                          }
                }
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.version).to.be.a('number');
                expect(data.version).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteOpsForensicsCollectionFileUrlGet', function() {
        it('should call webApiRemoteOpsForensicsCollectionFileUrlGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteOpsForensicsCollectionFileUrlGet call and complete the assertions
          /*
          var signature = "signature_example";
          var siteId = "siteId_example";
          var uploadedTimestamp = "uploadedTimestamp_example";
          var signatureType = "signatureType_example";
          var agentId = "agentId_example";

          instance.webApiRemoteOpsForensicsCollectionFileUrlGet(signature, siteId, uploadedTimestamp, signatureType, agentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.DownloadResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.DownloadResultsSchema200Data);
                  expect(data.data.fileName).to.be.a('string');
              expect(data.data.fileName).to.be("");
              expect(data.data.downloadUrl).to.be.a('string');
              expect(data.data.downloadUrl).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteOpsForensicsCollectionProfilesDelete', function() {
        it('should call webApiRemoteOpsForensicsCollectionProfilesDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteOpsForensicsCollectionProfilesDelete call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21ForensicsSchemaDeleteProfilesRequestSchema();
          opts.body.filter = new S1MgmtApi.V21ForensicsSchemaDeleteProfilesRequestSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.ids = ["225494730938493804"];
          opts.body.data = ;

          instance.webApiRemoteOpsForensicsCollectionProfilesDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ForensicsSchemaCollectionProfileResultSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21ForensicsSchemaCollectionProfileResultSchemaMany200Data);
                expect(data.isBundled).to.be.a('boolean');
                expect(data.isBundled).to.be(false);
                expect(data.scopeLevel).to.be.a('string');
                expect(data.scopeLevel).to.be("tenant");
                {
                  let dataCtr = data.artifacts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.V21ForensicsSchemaCollectionProfileResultSchema200DataArtifacts);
                    expect(data.artifactType).to.be.a('string');
                    expect(data.artifactType).to.be("users");
                    expect(data.osType).to.be.a('string');
                    expect(data.osType).to.be("windows");
                    expect(data.parameters).to.be.a(Object);
                    expect(data.parameters).to.be({});
    
                          }
                }
                {
                  let dataCtr = data.osTypes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("linux");
                  }
                }
                expect(data.scopePath).to.be.a('string');
                expect(data.scopePath).to.be("");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.scopeName).to.be.a('string');
                expect(data.scopeName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.creator).to.be.a('string');
                expect(data.creator).to.be("");
                expect(data.version).to.be.a('string');
                expect(data.version).to.be("");
                expect(data.scopeId).to.be.a('string');
                expect(data.scopeId).to.be("225494730938493804");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("forensicsProfile");
                expect(data.updater).to.be.a('string');
                expect(data.updater).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteOpsForensicsCollectionProfilesGet', function() {
        it('should call webApiRemoteOpsForensicsCollectionProfilesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteOpsForensicsCollectionProfilesGet call and complete the assertions
          /*
          var opts = {};
          opts.query = "query_example";
          opts.limit = 10;
          opts.siteIds = ["siteIds_example"];
          opts.countOnly = false;
          opts.skipCount = null;
          opts.osTypes = ["osTypes_example"];
          opts.cursor = "null";
          opts.sortOrder = "null";
          opts.accountIds = ["accountIds_example"];
          opts.ids = ["ids_example"];
          opts.sortBy = "null";
          opts.skip = 56;

          instance.webApiRemoteOpsForensicsCollectionProfilesGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ForensicsSchemaGetCollectionProfileResultSchemaMany200);
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21ForensicsSchemaGetCollectionProfileResultSchemaMany200Data);
                expect(data.isBundled).to.be.a('boolean');
                expect(data.isBundled).to.be(false);
                expect(data.scopeLevel).to.be.a('string');
                expect(data.scopeLevel).to.be("tenant");
                {
                  let dataCtr = data.osTypes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("linux");
                  }
                }
                expect(data.scopePath).to.be.a('string');
                expect(data.scopePath).to.be("");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.creatorId).to.be.a('string');
                expect(data.creatorId).to.be("225494730938493804");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.scopeName).to.be.a('string');
                expect(data.scopeName).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.creator).to.be.a('string');
                expect(data.creator).to.be("");
                expect(data.version).to.be.a('string');
                expect(data.version).to.be("");
                expect(data.scopeId).to.be.a('string');
                expect(data.scopeId).to.be("225494730938493804");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("forensicsProfile");
                expect(data.updaterId).to.be.a('string');
                expect(data.updaterId).to.be("225494730938493804");
                expect(data.updater).to.be.a('string');
                expect(data.updater).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteOpsForensicsCollectionProfilesPost', function() {
        it('should call webApiRemoteOpsForensicsCollectionProfilesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteOpsForensicsCollectionProfilesPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21ForensicsSchemaCollectionProfileRequestSchema();
          opts.body.data = new S1MgmtApi.V21ForensicsSchemaCollectionProfileRequestSchemaData();
          opts.body.data.scopeLevel = "tenant";
          opts.body.data.artifacts = [new S1MgmtApi.V21ForensicsSchemaCollectionProfileResultSchema200DataArtifacts()];
          opts.body.data.artifacts[0].artifactType = "users";
          opts.body.data.artifacts[0].osType = "windows";
          opts.body.data.artifacts[0].parameters = {};
          opts.body.data.name = "";
          opts.body.data.description = "";
          opts.body.data.scopeId = "225494730938493804";

          instance.webApiRemoteOpsForensicsCollectionProfilesPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ForensicsSchemaCollectionProfileResultSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21ForensicsSchemaCollectionProfileResultSchema200Data);
                  expect(data.data.isBundled).to.be.a('boolean');
              expect(data.data.isBundled).to.be(false);
              expect(data.data.scopeLevel).to.be.a('string');
              expect(data.data.scopeLevel).to.be("tenant");
              {
                let dataCtr = data.data.artifacts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.V21ForensicsSchemaCollectionProfileResultSchema200DataArtifacts);
                  expect(data.artifactType).to.be.a('string');
                  expect(data.artifactType).to.be("users");
                  expect(data.osType).to.be.a('string');
                  expect(data.osType).to.be("windows");
                  expect(data.parameters).to.be.a(Object);
                  expect(data.parameters).to.be({});
  
                        }
              }
              {
                let dataCtr = data.data.osTypes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("linux");
                }
              }
              expect(data.data.scopePath).to.be.a('string');
              expect(data.data.scopePath).to.be("");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.scopeName).to.be.a('string');
              expect(data.data.scopeName).to.be("");
              expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("");
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("");
              expect(data.data.version).to.be.a('string');
              expect(data.data.version).to.be("");
              expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.type).to.be.a('string');
              expect(data.data.type).to.be("forensicsProfile");
              expect(data.data.updater).to.be.a('string');
              expect(data.data.updater).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteOpsForensicsCollectionProfilesprofileIdGet', function() {
        it('should call webApiRemoteOpsForensicsCollectionProfilesprofileIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteOpsForensicsCollectionProfilesprofileIdGet call and complete the assertions
          /*
          var profileId = "profileId_example";

          instance.webApiRemoteOpsForensicsCollectionProfilesprofileIdGet(profileId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ForensicsSchemaCollectionProfileResultSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21ForensicsSchemaCollectionProfileResultSchema200Data);
                  expect(data.data.isBundled).to.be.a('boolean');
              expect(data.data.isBundled).to.be(false);
              expect(data.data.scopeLevel).to.be.a('string');
              expect(data.data.scopeLevel).to.be("tenant");
              {
                let dataCtr = data.data.artifacts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.V21ForensicsSchemaCollectionProfileResultSchema200DataArtifacts);
                  expect(data.artifactType).to.be.a('string');
                  expect(data.artifactType).to.be("users");
                  expect(data.osType).to.be.a('string');
                  expect(data.osType).to.be("windows");
                  expect(data.parameters).to.be.a(Object);
                  expect(data.parameters).to.be({});
  
                        }
              }
              {
                let dataCtr = data.data.osTypes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("linux");
                }
              }
              expect(data.data.scopePath).to.be.a('string');
              expect(data.data.scopePath).to.be("");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.scopeName).to.be.a('string');
              expect(data.data.scopeName).to.be("");
              expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("");
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("");
              expect(data.data.version).to.be.a('string');
              expect(data.data.version).to.be("");
              expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.type).to.be.a('string');
              expect(data.data.type).to.be("forensicsProfile");
              expect(data.data.updater).to.be.a('string');
              expect(data.data.updater).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteOpsForensicsCollectionProfilesprofileIdPut', function() {
        it('should call webApiRemoteOpsForensicsCollectionProfilesprofileIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteOpsForensicsCollectionProfilesprofileIdPut call and complete the assertions
          /*
          var profileId = "profileId_example";
          var opts = {};
          opts.body = new S1MgmtApi.V21ForensicsSchemaPutCollectionProfileRequestSchema();
          opts.body.data = new S1MgmtApi.V21ForensicsSchemaPutCollectionProfileRequestSchemaData();
          opts.body.data.name = "";
          opts.body.data.artifacts = [new S1MgmtApi.V21ForensicsSchemaCollectionProfileResultSchema200DataArtifacts()];
          opts.body.data.artifacts[0].artifactType = "users";
          opts.body.data.artifacts[0].osType = "windows";
          opts.body.data.artifacts[0].parameters = {};
          opts.body.data.description = "";

          instance.webApiRemoteOpsForensicsCollectionProfilesprofileIdPut(profileId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ForensicsSchemaCollectionProfileResultSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21ForensicsSchemaCollectionProfileResultSchema200Data);
                  expect(data.data.isBundled).to.be.a('boolean');
              expect(data.data.isBundled).to.be(false);
              expect(data.data.scopeLevel).to.be.a('string');
              expect(data.data.scopeLevel).to.be("tenant");
              {
                let dataCtr = data.data.artifacts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.V21ForensicsSchemaCollectionProfileResultSchema200DataArtifacts);
                  expect(data.artifactType).to.be.a('string');
                  expect(data.artifactType).to.be("users");
                  expect(data.osType).to.be.a('string');
                  expect(data.osType).to.be("windows");
                  expect(data.parameters).to.be.a(Object);
                  expect(data.parameters).to.be({});
  
                        }
              }
              {
                let dataCtr = data.data.osTypes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("linux");
                }
              }
              expect(data.data.scopePath).to.be.a('string');
              expect(data.data.scopePath).to.be("");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.scopeName).to.be.a('string');
              expect(data.data.scopeName).to.be("");
              expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("");
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("");
              expect(data.data.version).to.be.a('string');
              expect(data.data.version).to.be("");
              expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.type).to.be.a('string');
              expect(data.data.type).to.be("forensicsProfile");
              expect(data.data.updater).to.be.a('string');
              expect(data.data.updater).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteOpsForensicsIsCollectionFileGet', function() {
        it('should call webApiRemoteOpsForensicsIsCollectionFileGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteOpsForensicsIsCollectionFileGet call and complete the assertions
          /*
          var storyline = "storyline_example";
          var agentId = "agentId_example";

          instance.webApiRemoteOpsForensicsIsCollectionFileGet(storyline, agentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ForensicsSchemaIsCollectionFileResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21ForensicsSchemaIsCollectionFileResponseSchema200Data);
                  expect(data.data.agentId).to.be.a('string');
              expect(data.data.agentId).to.be("225494730938493804");
              expect(data.data.uploadedTimestamp).to.be.a('string');
              expect(data.data.uploadedTimestamp).to.be("");
              expect(data.data.signature).to.be.a('string');
              expect(data.data.signature).to.be("");
              expect(data.data.signatureType).to.be.a('string');
              expect(data.data.signatureType).to.be("");
              expect(data.data.siteId).to.be.a('string');
              expect(data.data.siteId).to.be("225494730938493804");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteOpsForensicsStartCollectionPost', function() {
        it('should call webApiRemoteOpsForensicsStartCollectionPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteOpsForensicsStartCollectionPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.RemoteOpsSchemasStartCollectionSchema();
          opts.body.filter = new S1MgmtApi.RemoteOpsSchemasStartCollectionSchemaFilter();
          opts.body.filter.agentVersionsNin = ["2.0.0.0","2.1.5.144"];
          opts.body.filter.registeredAtBetween = "1514978764288-1514978999999";
          opts.body.filter.registeredAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.adComputerQueryContains = ["DC=sentinelone","Windows"];
          opts.body.filter.mitigationModeSuspicious = "detect";
          opts.body.filter.hasLocalConfiguration = false;
          opts.body.filter.adUserQueryContains = ["DC=sentinelone","John"];
          opts.body.filter.query = "Linux";
          opts.body.filter.cloudProvider = [""];
          opts.body.filter.coreCountGt = 0;
          opts.body.filter.decommissionedAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.registeredAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.totalMemoryGt = 0;
          opts.body.filter.updatedAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.hasContainerizedWorkload = false;
          opts.body.filter.cloudImageContains = [""];
          opts.body.filter.threatCreatedAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.appsVulnerabilityStatusesNin = ["patch_required"];
          opts.body.filter.scanStatusesNin = ["started","aborted"];
          opts.body.filter.adComputerMemberContains = ["DC=sentinelone"];
          opts.body.filter.coreCountLte = 0;
          opts.body.filter.rangerVersions = ["2.0.0.0","2.1.5.144"];
          opts.body.filter.machineTypes = ["laptop","desktop"];
          opts.body.filter.coreCountGte = 0;
          opts.body.filter.locationIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.locationIdsNin = ["225494730938493804","225494730938493915"];
          opts.body.filter.gatewayIp = "192.168.0.1";
          opts.body.filter.updatedAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.missingPermissionsNin = ["user_action_needed_bluetooth_per","user_action_needed_fda_helper"];
          opts.body.filter.migrationStatus = "N/A";
          opts.body.filter.threatRebootRequired = [false];
          opts.body.filter.serialNumberContains = [""];
          opts.body.filter.decommissionedAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.lastSuccessfulScanDateBetween = "1514978764288-1514978999999";
          opts.body.filter.lastActiveDateLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.lastActiveDateBetween = "1514978764288-1514978999999";
          opts.body.filter.networkQuarantineEnabled = [false];
          opts.body.filter.cloudTagsContains = [""];
          opts.body.filter.threatCreatedAtBetween = "1514978764288-1514978999999";
          opts.body.filter.encryptedApplications = false;
          opts.body.filter.isUninstalled = [true,false];
          opts.body.filter.networkInterfacePhysicalContains = ["aa:0f",":41:"];
          opts.body.filter.agentVersionGte = "2.5.1.1320";
          opts.body.filter.lastSuccessfulScanDateGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.operationalStates = [""];
          opts.body.filter.adUserNameContains = ["DC=sentinelone"];
          opts.body.filter.osTypesNin = ["windows"];
          opts.body.filter.csvFilterId = "225494730938493804";
          opts.body.filter.isActive = false;
          opts.body.filter.mitigationMode = "detect";
          opts.body.filter.awsSubnetIdsContains = [""];
          opts.body.filter.agentVersionLte = "2.5.1.1320";
          opts.body.filter.updatedAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.osVersionContains = ["Service Pack 1"];
          opts.body.filter.externalIpContains = ["205","127.0"];
          opts.body.filter.awsSecurityGroupsContains = [""];
          opts.body.filter.k8sNodeNameContains = [""];
          opts.body.filter.agentVersionBetween = "2.0.0.0-2.1.5.144";
          opts.body.filter.activeThreats = 3;
          opts.body.filter.hasTags = false;
          opts.body.filter.agentNamespaceContains = [""];
          opts.body.filter.cpuCountLt = 0;
          opts.body.filter.registeredAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.networkInterfaceInetContains = ["192","10.0.0"];
          opts.body.filter.computerNameContains = ["john-office","WIN"];
          opts.body.filter.cloudNetworkContains = [""];
          opts.body.filter.remoteOpsForensicsSupported = false;
          opts.body.filter.remoteProfilingStates = [""];
          opts.body.filter.filteredGroupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.agentPodNameContains = [""];
          opts.body.filter.userActionsNeededNin = ["reboot_needed","upgrade_needed"];
          opts.body.filter.rangerStatuses = ["NotApplicable"];
          opts.body.filter.computerNameLike = "Lab1";
          opts.body.filter.externalIdContains = ["Tag#1 - monitoring","Performance machine"];
          opts.body.filter.createdAtBetween = "1514978890136-1514978650130";
          opts.body.filter.consoleMigrationStatusesNin = ["N/A"];
          opts.body.filter.cpuIdContains = ["Intel","AMD"];
          opts.body.filter.coreCountBetween = "2-8";
          opts.body.filter.isUpToDate = false;
          opts.body.filter.threatCreatedAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.rangerStatus = "NotApplicable";
          opts.body.filter.totalMemoryBetween = "4-8";
          opts.body.filter.lastSuccessfulScanDateLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.domains = ["mybusiness.net","workgroup"];
          opts.body.filter.awsRoleContains = [""];
          opts.body.filter.lastLoggedInUserNameContains = ["admin","johnd1"];
          opts.body.filter.cpuCountGt = 0;
          opts.body.filter.cloudAccountContains = [""];
          opts.body.filter.clusterNameContains = [""];
          opts.body.filter.scanStatuses = ["started","aborted"];
          opts.body.filter.updatedAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.liveUpdateIdContains = [""];
          opts.body.filter.computerName = "My Office Desktop";
          opts.body.filter.uuid = "ff819e70af13be381993075eb0ce5f2f6de05be2";
          opts.body.filter.osTypes = ["windows"];
          opts.body.filter.appsVulnerabilityStatuses = ["patch_required"];
          opts.body.filter.lastActiveDateGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.threatContentHash = "cf23df2207d99a74fbe169e3eba035e633b65d94";
          opts.body.filter.remoteProfilingStatesNin = [""];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.scanStatus = "none";
          opts.body.filter.filteredSiteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.userActionsNeeded = ["reboot_needed","upgrade_needed"];
          opts.body.filter.registeredAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.osArch = "32 bit";
          opts.body.filter.adComputerNameContains = ["DC=sentinelone"];
          opts.body.filter.totalMemoryGte = 0;
          opts.body.filter.threatHidden = false;
          opts.body.filter.lastActiveDateGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.threatCreatedAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.cpuCountGte = 0;
          opts.body.filter.cloudInstanceIdContains = [""];
          opts.body.filter.agentVersions = ["2.0.0.0","2.1.5.144"];
          opts.body.filter.adQueryContains = ["DC=sentinelone"];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.locationEnabled = [false];
          opts.body.filter.cloudProviderNin = [""];
          opts.body.filter.isPendingUninstall = false;
          opts.body.filter.k8sNodeLabelsContains = [""];
          opts.body.filter.decommissionedAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.tagsData = "{"key1": ["value1_1", "value1_2"], "key2__nin": ["value2"]}";
          opts.body.filter.agentVersionGt = "2.5.1.1320";
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.threatMitigationStatus = "mitigated";
          opts.body.filter.lastSuccessfulScanDateGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.firewallEnabled = [false];
          opts.body.filter.decommissionedAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.decommissionedAtBetween = "1514978890136-1514978650130";
          opts.body.filter.domainsNin = ["mybusiness.net","workgroup"];
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.gcpServiceAccountContains = [""];
          opts.body.filter.threatResolved = false;
          opts.body.filter.cloudLocationContains = [""];
          opts.body.filter.lastActiveDateLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.networkStatuses = ["connected","connecting"];
          opts.body.filter.k8sTypeContains = [""];
          opts.body.filter.networkInterfaceGatewayMacAddressContains = ["aa:0f",":41:"];
          opts.body.filter.cpuCountBetween = "2-8";
          opts.body.filter.operationalStatesNin = [""];
          opts.body.filter.totalMemoryLt = 0;
          opts.body.filter.k8sVersionContains = [""];
          opts.body.filter.installerTypes = [".msi"];
          opts.body.filter.adUserMemberContains = ["DC=sentinelone"];
          opts.body.filter.infected = false;
          opts.body.filter.coreCountLt = 0;
          opts.body.filter.missingPermissions = ["user_action_needed_bluetooth_per","user_action_needed_fda_helper"];
          opts.body.filter.installerTypesNin = [".msi"];
          opts.body.filter.machineTypesNin = ["laptop","desktop"];
          opts.body.filter.filterId = "225494730938493804";
          opts.body.filter.isDecommissioned = [true,false];
          opts.body.filter.agentVersionLt = "2.5.1.1320";
          opts.body.filter.rangerStatusesNin = ["NotApplicable"];
          opts.body.filter.cloudInstanceSizeContains = [""];
          opts.body.filter.rangerVersionsNin = ["2.0.0.0","2.1.5.144"];
          opts.body.filter.rsoLevel = "none";
          opts.body.filter.cpuCountLte = 0;
          opts.body.filter.updatedAtBetween = "1514978890136-1514978650130";
          opts.body.filter.consoleMigrationStatuses = ["N/A"];
          opts.body.filter.azureResourceGroupContains = [""];
          opts.body.filter.threatCreatedAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.uuidContains = ["e92-01928","b055"];
          opts.body.filter.networkStatusesNin = ["connected","connecting"];
          opts.body.filter.totalMemoryLte = 0;
          opts.body.filter.activeThreatsGt = 5;
          opts.body.filter.lastSuccessfulScanDateLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.adQuery = "CN=Managers,DC=sentinelone,DC=com";
          opts.body.filter.uuids = ["ff819e70af13be381993075eb0ce5f2f6de05b11","ff819e70af13be381993075eb0ce5f2f6de05c22"];
          opts.body.data = new S1MgmtApi.RemoteOpsSchemasStartCollectionSchemaData();
          opts.body.data.description = "";
          opts.body.data.destination = new S1MgmtApi.RemoteOpsSchemasStartCollectionSchemaDataDestination();
          opts.body.data.destination.password = "";
          opts.body.data.destination.passwordFromScope = new S1MgmtApi.AgentsSchemasStartRemoteShellSchemaDataPasswordFromScope();
          opts.body.data.destination.passwordFromScope.scopeId = "225494730938493804";
          opts.body.data.destination.passwordFromScope.scopeLevel = "tenant";
          opts.body.data.destination.profileId = "225494730938493804";
          opts.body.data.tag = "";
          opts.body.data.collectionProfileId = "225494730938493804";

          instance.webApiRemoteOpsForensicsStartCollectionPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.RemoteOpsSchemasStartCollectionResponseDataSchema202);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.RemoteOpsSchemasStartCollectionResponseDataSchema202Data);
                  expect(data.data.parentTaskId).to.be.a('string');
              expect(data.data.parentTaskId).to.be("");
              expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);
              expect(data.data.skipped).to.be.a(S1MgmtApi.RemoteOpsSchemasStartCollectionResponseDataSchema202DataSkipped);
                    expect(data.data.skipped.notEnabledFeature).to.be.a('number');
                expect(data.data.skipped.notEnabledFeature).to.be(0);
                expect(data.data.skipped.notApplicableScope).to.be.a('number');
                expect(data.data.skipped.notApplicableScope).to.be(0);
                expect(data.data.skipped.notAvailable).to.be.a('number');
                expect(data.data.skipped.notAvailable).to.be(0);
                expect(data.data.skipped.other).to.be.a('number');
                expect(data.data.skipped.other).to.be(0);
                expect(data.data.skipped.notApplicableOs).to.be.a('number');
                expect(data.data.skipped.notApplicableOs).to.be(0);
                expect(data.data.skipped.notSupported).to.be.a('number');
                expect(data.data.skipped.notSupported).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteOpsForensicsTaskResultGet', function() {
        it('should call webApiRemoteOpsForensicsTaskResultGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteOpsForensicsTaskResultGet call and complete the assertions
          /*
          var taskId = "taskId_example";

          instance.webApiRemoteOpsForensicsTaskResultGet(taskId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.RemoteOpsSchemasGetForensicsTaskResultDataSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.RemoteOpsSchemasGetForensicsTaskResultDataSchema200Data);
                  expect(data.data.collectionProfile).to.be.a(S1MgmtApi.RemoteOpsSchemasGetForensicsTaskResultDataSchema200DataCollectionProfile);
                    expect(data.data.collectionProfile.name).to.be.a('string');
                expect(data.data.collectionProfile.name).to.be("");
                expect(data.data.collectionProfile.id).to.be.a('string');
                expect(data.data.collectionProfile.id).to.be("225494730938493804");
              expect(data.data.skylightParentTaskResultsUrl).to.be.a('string');
              expect(data.data.skylightParentTaskResultsUrl).to.be("");
              expect(data.data.collection).to.be.a(S1MgmtApi.RemoteOpsSchemasGetForensicsTaskResultDataSchema200DataCollection);
                    expect(data.data.collection.description).to.be.a('string');
                expect(data.data.collection.description).to.be("");
                expect(data.data.collection.tag).to.be.a('string');
                expect(data.data.collection.tag).to.be("");
                {
                  let dataCtr = data.data.collection.artifacts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.RemoteOpsSchemasGetForensicsTaskResultDataSchema200DataCollectionArtifacts);
                    expect(data.parameters).to.be.a(Object);
                    expect(data.parameters).to.be();
                    expect(data.detailedStatus).to.be.a('string');
                    expect(data.detailedStatus).to.be("");
                    expect(data.osType).to.be.a('string');
                    expect(data.osType).to.be("");
                    expect(data.artifactType).to.be.a('string');
                    expect(data.artifactType).to.be("");
                    expect(data.status).to.be.a('string');
                    expect(data.status).to.be("");
    
                          }
                }
              expect(data.data.skylightResultsUrl).to.be.a('string');
              expect(data.data.skylightResultsUrl).to.be("");
              expect(data.data.skylightResultsStatus).to.be.a(S1MgmtApi.RemoteOpsSchemasGetForensicsTaskResultDataSchema200DataSkylightResultsStatus);
                    expect(data.data.skylightResultsStatus.errorMessage).to.be.a('string');
                expect(data.data.skylightResultsStatus.errorMessage).to.be("");
                expect(data.data.skylightResultsStatus.hasFailures).to.be.a('boolean');
                expect(data.data.skylightResultsStatus.hasFailures).to.be(false);
                expect(data.data.skylightResultsStatus.isEmpty).to.be.a('boolean');
                expect(data.data.skylightResultsStatus.isEmpty).to.be(false);
              expect(data.data.destination).to.be.a(S1MgmtApi.RemoteOpsSchemasGetForensicsTaskResultDataSchema200DataDestination);
                    expect(data.data.destination.profileId).to.be.a('string');
                expect(data.data.destination.profileId).to.be("225494730938493804");
              expect(data.data.collectionFile).to.be.a(S1MgmtApi.RemoteOpsSchemasGetForensicsTaskResultDataSchema200DataCollectionFile);
                    expect(data.data.collectionFile.signature).to.be.a('string');
                expect(data.data.collectionFile.signature).to.be("");
                expect(data.data.collectionFile.siteId).to.be.a('string');
                expect(data.data.collectionFile.siteId).to.be("225494730938493804");
                expect(data.data.collectionFile.uploadedTimestamp).to.be.a('string');
                expect(data.data.collectionFile.uploadedTimestamp).to.be("");
                expect(data.data.collectionFile.signatureType).to.be.a('string');
                expect(data.data.collectionFile.signatureType).to.be("");
                expect(data.data.collectionFile.agentId).to.be.a('string');
                expect(data.data.collectionFile.agentId).to.be("225494730938493804");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
