/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.AgentsApi();
  });

  describe('(package)', function() {
    describe('AgentsApi', function() {
      describe('webApiAgentsApplicationsGet', function() {
        it('should call webApiAgentsApplicationsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiAgentsApplicationsGet call and complete the assertions
          /*
          var ids = ["ids_example"];

          instance.webApiAgentsApplicationsGet(ids, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AgentsSchemasAgentApplicationsSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.AgentsSchemasAgentApplicationsSchemaMany200Data);
                expect(data.publisher).to.be.a('string');
                expect(data.publisher).to.be("");
                expect(data.installedDate).to.be.a(Date);
                expect(data.installedDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.version).to.be.a('string');
                expect(data.version).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.size).to.be.a('number');
                expect(data.size).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiAgentsCountGet', function() {
        it('should call webApiAgentsCountGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiAgentsCountGet call and complete the assertions
          /*
          var opts = {};
          opts.agentVersionsNin = ["agentVersionsNin_example"];
          opts.registeredAtBetween = "registeredAtBetween_example";
          opts.registeredAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.adComputerQueryContains = ["adComputerQueryContains_example"];
          opts.mitigationModeSuspicious = "mitigationModeSuspicious_example";
          opts.hasLocalConfiguration = true;
          opts.adUserQueryContains = ["adUserQueryContains_example"];
          opts.query = "query_example";
          opts.cloudProvider = ["cloudProvider_example"];
          opts.coreCountGt = 56;
          opts.decommissionedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.registeredAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.totalMemoryGt = 56;
          opts.updatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.hasContainerizedWorkload = true;
          opts.cloudImageContains = ["cloudImageContains_example"];
          opts.threatCreatedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.appsVulnerabilityStatusesNin = ["appsVulnerabilityStatusesNin_example"];
          opts.scanStatusesNin = ["scanStatusesNin_example"];
          opts.adComputerMemberContains = ["adComputerMemberContains_example"];
          opts.coreCountLte = 56;
          opts.rangerVersions = ["rangerVersions_example"];
          opts.machineTypes = ["machineTypes_example"];
          opts.coreCountGte = 56;
          opts.locationIds = ["locationIds_example"];
          opts.locationIdsNin = ["locationIdsNin_example"];
          opts.gatewayIp = "gatewayIp_example";
          opts.updatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.groupIds = ["groupIds_example"];
          opts.missingPermissionsNin = ["missingPermissionsNin_example"];
          opts.migrationStatus = "migrationStatus_example";
          opts.threatRebootRequired = [true];
          opts.serialNumberContains = ["serialNumberContains_example"];
          opts.decommissionedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.lastSuccessfulScanDateBetween = "lastSuccessfulScanDateBetween_example";
          opts.lastActiveDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.lastActiveDateBetween = "lastActiveDateBetween_example";
          opts.networkQuarantineEnabled = [true];
          opts.cloudTagsContains = ["cloudTagsContains_example"];
          opts.threatCreatedAtBetween = "threatCreatedAtBetween_example";
          opts.encryptedApplications = true;
          opts.isUninstalled = [true];
          opts.networkInterfacePhysicalContains = ["networkInterfacePhysicalContains_example"];
          opts.agentVersionGte = "agentVersionGte_example";
          opts.lastSuccessfulScanDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.operationalStates = ["operationalStates_example"];
          opts.adUserNameContains = ["adUserNameContains_example"];
          opts.osTypesNin = ["osTypesNin_example"];
          opts.csvFilterId = "csvFilterId_example";
          opts.isActive = true;
          opts.mitigationMode = "mitigationMode_example";
          opts.awsSubnetIdsContains = ["awsSubnetIdsContains_example"];
          opts.agentVersionLte = "agentVersionLte_example";
          opts.updatedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.osVersionContains = ["osVersionContains_example"];
          opts.externalIpContains = ["externalIpContains_example"];
          opts.awsSecurityGroupsContains = ["awsSecurityGroupsContains_example"];
          opts.k8sNodeNameContains = ["k8sNodeNameContains_example"];
          opts.agentVersionBetween = "agentVersionBetween_example";
          opts.activeThreats = 56;
          opts.hasTags = true;
          opts.agentNamespaceContains = ["agentNamespaceContains_example"];
          opts.cpuCountLt = 56;
          opts.registeredAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.networkInterfaceInetContains = ["networkInterfaceInetContains_example"];
          opts.computerNameContains = ["computerNameContains_example"];
          opts.cloudNetworkContains = ["cloudNetworkContains_example"];
          opts.remoteOpsForensicsSupported = true;
          opts.remoteProfilingStates = ["remoteProfilingStates_example"];
          opts.filteredGroupIds = ["filteredGroupIds_example"];
          opts.agentPodNameContains = ["agentPodNameContains_example"];
          opts.userActionsNeededNin = ["userActionsNeededNin_example"];
          opts.rangerStatuses = ["rangerStatuses_example"];
          opts.computerNameLike = "computerNameLike_example";
          opts.externalIdContains = ["externalIdContains_example"];
          opts.createdAtBetween = "createdAtBetween_example";
          opts.consoleMigrationStatusesNin = ["consoleMigrationStatusesNin_example"];
          opts.cpuIdContains = ["cpuIdContains_example"];
          opts.coreCountBetween = "coreCountBetween_example";
          opts.isUpToDate = true;
          opts.threatCreatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.rangerStatus = "rangerStatus_example";
          opts.totalMemoryBetween = "totalMemoryBetween_example";
          opts.lastSuccessfulScanDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.domains = ["domains_example"];
          opts.awsRoleContains = ["awsRoleContains_example"];
          opts.lastLoggedInUserNameContains = ["lastLoggedInUserNameContains_example"];
          opts.cpuCountGt = 56;
          opts.cloudAccountContains = ["cloudAccountContains_example"];
          opts.clusterNameContains = ["clusterNameContains_example"];
          opts.scanStatuses = ["scanStatuses_example"];
          opts.updatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.ids = ["ids_example"];
          opts.liveUpdateIdContains = ["liveUpdateIdContains_example"];
          opts.computerName = "computerName_example";
          opts.uuid = "uuid_example";
          opts.osTypes = ["osTypes_example"];
          opts.appsVulnerabilityStatuses = ["appsVulnerabilityStatuses_example"];
          opts.lastActiveDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.threatContentHash = "threatContentHash_example";
          opts.remoteProfilingStatesNin = ["remoteProfilingStatesNin_example"];
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.scanStatus = "scanStatus_example";
          opts.filteredSiteIds = ["filteredSiteIds_example"];
          opts.userActionsNeeded = ["userActionsNeeded_example"];
          opts.registeredAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.osArch = "osArch_example";
          opts.adComputerNameContains = ["adComputerNameContains_example"];
          opts.totalMemoryGte = 56;
          opts.threatHidden = true;
          opts.lastActiveDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.threatCreatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.cpuCountGte = 56;
          opts.cloudInstanceIdContains = ["cloudInstanceIdContains_example"];
          opts.agentVersions = ["agentVersions_example"];
          opts.adQueryContains = ["adQueryContains_example"];
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.accountIds = ["accountIds_example"];
          opts.locationEnabled = [true];
          opts.cloudProviderNin = ["cloudProviderNin_example"];
          opts.isPendingUninstall = true;
          opts.k8sNodeLabelsContains = ["k8sNodeLabelsContains_example"];
          opts.decommissionedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.tagsData = "tagsData_example";
          opts.agentVersionGt = "agentVersionGt_example";
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.threatMitigationStatus = "threatMitigationStatus_example";
          opts.lastSuccessfulScanDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.firewallEnabled = [true];
          opts.decommissionedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.decommissionedAtBetween = "decommissionedAtBetween_example";
          opts.domainsNin = ["domainsNin_example"];
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.gcpServiceAccountContains = ["gcpServiceAccountContains_example"];
          opts.threatResolved = true;
          opts.cloudLocationContains = ["cloudLocationContains_example"];
          opts.lastActiveDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.networkStatuses = ["networkStatuses_example"];
          opts.k8sTypeContains = ["k8sTypeContains_example"];
          opts.networkInterfaceGatewayMacAddressContains = ["networkInterfaceGatewayMacAddressContains_example"];
          opts.cpuCountBetween = "cpuCountBetween_example";
          opts.operationalStatesNin = ["operationalStatesNin_example"];
          opts.totalMemoryLt = 56;
          opts.k8sVersionContains = ["k8sVersionContains_example"];
          opts.installerTypes = ["installerTypes_example"];
          opts.adUserMemberContains = ["adUserMemberContains_example"];
          opts.infected = true;
          opts.coreCountLt = 56;
          opts.missingPermissions = ["missingPermissions_example"];
          opts.installerTypesNin = ["installerTypesNin_example"];
          opts.machineTypesNin = ["machineTypesNin_example"];
          opts.filterId = "filterId_example";
          opts.isDecommissioned = [true];
          opts.agentVersionLt = "agentVersionLt_example";
          opts.rangerStatusesNin = ["rangerStatusesNin_example"];
          opts.cloudInstanceSizeContains = ["cloudInstanceSizeContains_example"];
          opts.rangerVersionsNin = ["rangerVersionsNin_example"];
          opts.rsoLevel = "rsoLevel_example";
          opts.cpuCountLte = 56;
          opts.updatedAtBetween = "updatedAtBetween_example";
          opts.consoleMigrationStatuses = ["consoleMigrationStatuses_example"];
          opts.azureResourceGroupContains = ["azureResourceGroupContains_example"];
          opts.threatCreatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.uuidContains = ["uuidContains_example"];
          opts.networkStatusesNin = ["networkStatusesNin_example"];
          opts.totalMemoryLte = 56;
          opts.activeThreatsGt = 56;
          opts.lastSuccessfulScanDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.adQuery = "adQuery_example";
          opts.uuids = ["uuids_example"];

          instance.webApiAgentsCountGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AgentsSchemasAgentsCountSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AgentsSchemasAgentsCountSchema200Data);
                  expect(data.data.total).to.be.a('number');
              expect(data.data.total).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiAgentsGet', function() {
        it('should call webApiAgentsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiAgentsGet call and complete the assertions
          /*
          var opts = {};
          opts.agentVersionsNin = ["agentVersionsNin_example"];
          opts.registeredAtBetween = "registeredAtBetween_example";
          opts.registeredAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.adComputerQueryContains = ["adComputerQueryContains_example"];
          opts.mitigationModeSuspicious = "mitigationModeSuspicious_example";
          opts.hasLocalConfiguration = true;
          opts.adUserQueryContains = ["adUserQueryContains_example"];
          opts.query = "query_example";
          opts.cloudProvider = ["cloudProvider_example"];
          opts.coreCountGt = 56;
          opts.decommissionedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.registeredAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.totalMemoryGt = 56;
          opts.skip = 56;
          opts.updatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.hasContainerizedWorkload = true;
          opts.cloudImageContains = ["cloudImageContains_example"];
          opts.threatCreatedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.appsVulnerabilityStatusesNin = ["appsVulnerabilityStatusesNin_example"];
          opts.scanStatusesNin = ["scanStatusesNin_example"];
          opts.adComputerMemberContains = ["adComputerMemberContains_example"];
          opts.coreCountLte = 56;
          opts.rangerVersions = ["rangerVersions_example"];
          opts.machineTypes = ["machineTypes_example"];
          opts.coreCountGte = 56;
          opts.locationIds = ["locationIds_example"];
          opts.locationIdsNin = ["locationIdsNin_example"];
          opts.gatewayIp = "gatewayIp_example";
          opts.updatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.groupIds = ["groupIds_example"];
          opts.missingPermissionsNin = ["missingPermissionsNin_example"];
          opts.migrationStatus = "migrationStatus_example";
          opts.threatRebootRequired = [true];
          opts.serialNumberContains = ["serialNumberContains_example"];
          opts.decommissionedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.lastSuccessfulScanDateBetween = "lastSuccessfulScanDateBetween_example";
          opts.lastActiveDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.lastActiveDateBetween = "lastActiveDateBetween_example";
          opts.networkQuarantineEnabled = [true];
          opts.cloudTagsContains = ["cloudTagsContains_example"];
          opts.threatCreatedAtBetween = "threatCreatedAtBetween_example";
          opts.encryptedApplications = true;
          opts.isUninstalled = [true];
          opts.networkInterfacePhysicalContains = ["networkInterfacePhysicalContains_example"];
          opts.agentVersionGte = "agentVersionGte_example";
          opts.lastSuccessfulScanDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.operationalStates = ["operationalStates_example"];
          opts.adUserNameContains = ["adUserNameContains_example"];
          opts.osTypesNin = ["osTypesNin_example"];
          opts.csvFilterId = "csvFilterId_example";
          opts.cursor = "null";
          opts.isActive = true;
          opts.mitigationMode = "mitigationMode_example";
          opts.awsSubnetIdsContains = ["awsSubnetIdsContains_example"];
          opts.agentVersionLte = "agentVersionLte_example";
          opts.updatedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.osVersionContains = ["osVersionContains_example"];
          opts.externalIpContains = ["externalIpContains_example"];
          opts.awsSecurityGroupsContains = ["awsSecurityGroupsContains_example"];
          opts.k8sNodeNameContains = ["k8sNodeNameContains_example"];
          opts.agentVersionBetween = "agentVersionBetween_example";
          opts.sortOrder = "null";
          opts.activeThreats = 56;
          opts.hasTags = true;
          opts.agentNamespaceContains = ["agentNamespaceContains_example"];
          opts.cpuCountLt = 56;
          opts.registeredAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.networkInterfaceInetContains = ["networkInterfaceInetContains_example"];
          opts.computerNameContains = ["computerNameContains_example"];
          opts.cloudNetworkContains = ["cloudNetworkContains_example"];
          opts.remoteOpsForensicsSupported = true;
          opts.remoteProfilingStates = ["remoteProfilingStates_example"];
          opts.filteredGroupIds = ["filteredGroupIds_example"];
          opts.agentPodNameContains = ["agentPodNameContains_example"];
          opts.userActionsNeededNin = ["userActionsNeededNin_example"];
          opts.rangerStatuses = ["rangerStatuses_example"];
          opts.computerNameLike = "computerNameLike_example";
          opts.externalIdContains = ["externalIdContains_example"];
          opts.createdAtBetween = "createdAtBetween_example";
          opts.consoleMigrationStatusesNin = ["consoleMigrationStatusesNin_example"];
          opts.cpuIdContains = ["cpuIdContains_example"];
          opts.coreCountBetween = "coreCountBetween_example";
          opts.isUpToDate = true;
          opts.threatCreatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.rangerStatus = "rangerStatus_example";
          opts.totalMemoryBetween = "totalMemoryBetween_example";
          opts.lastSuccessfulScanDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.domains = ["domains_example"];
          opts.awsRoleContains = ["awsRoleContains_example"];
          opts.lastLoggedInUserNameContains = ["lastLoggedInUserNameContains_example"];
          opts.cpuCountGt = 56;
          opts.cloudAccountContains = ["cloudAccountContains_example"];
          opts.clusterNameContains = ["clusterNameContains_example"];
          opts.scanStatuses = ["scanStatuses_example"];
          opts.updatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.ids = ["ids_example"];
          opts.countOnly = false;
          opts.liveUpdateIdContains = ["liveUpdateIdContains_example"];
          opts.limit = 10;
          opts.computerName = "computerName_example";
          opts.uuid = "uuid_example";
          opts.osTypes = ["osTypes_example"];
          opts.appsVulnerabilityStatuses = ["appsVulnerabilityStatuses_example"];
          opts.lastActiveDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.skipCount = null;
          opts.threatContentHash = "threatContentHash_example";
          opts.remoteProfilingStatesNin = ["remoteProfilingStatesNin_example"];
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.scanStatus = "scanStatus_example";
          opts.filteredSiteIds = ["filteredSiteIds_example"];
          opts.userActionsNeeded = ["userActionsNeeded_example"];
          opts.registeredAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.osArch = "osArch_example";
          opts.adComputerNameContains = ["adComputerNameContains_example"];
          opts.totalMemoryGte = 56;
          opts.threatHidden = true;
          opts.sortBy = "null";
          opts.lastActiveDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.threatCreatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.cpuCountGte = 56;
          opts.cloudInstanceIdContains = ["cloudInstanceIdContains_example"];
          opts.agentVersions = ["agentVersions_example"];
          opts.adQueryContains = ["adQueryContains_example"];
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.accountIds = ["accountIds_example"];
          opts.locationEnabled = [true];
          opts.cloudProviderNin = ["cloudProviderNin_example"];
          opts.isPendingUninstall = true;
          opts.k8sNodeLabelsContains = ["k8sNodeLabelsContains_example"];
          opts.decommissionedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.tagsData = "tagsData_example";
          opts.agentVersionGt = "agentVersionGt_example";
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.threatMitigationStatus = "threatMitigationStatus_example";
          opts.lastSuccessfulScanDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.firewallEnabled = [true];
          opts.decommissionedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.decommissionedAtBetween = "decommissionedAtBetween_example";
          opts.domainsNin = ["domainsNin_example"];
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.gcpServiceAccountContains = ["gcpServiceAccountContains_example"];
          opts.threatResolved = true;
          opts.cloudLocationContains = ["cloudLocationContains_example"];
          opts.lastActiveDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.networkStatuses = ["networkStatuses_example"];
          opts.k8sTypeContains = ["k8sTypeContains_example"];
          opts.networkInterfaceGatewayMacAddressContains = ["networkInterfaceGatewayMacAddressContains_example"];
          opts.cpuCountBetween = "cpuCountBetween_example";
          opts.operationalStatesNin = ["operationalStatesNin_example"];
          opts.totalMemoryLt = 56;
          opts.k8sVersionContains = ["k8sVersionContains_example"];
          opts.installerTypes = ["installerTypes_example"];
          opts.adUserMemberContains = ["adUserMemberContains_example"];
          opts.infected = true;
          opts.coreCountLt = 56;
          opts.missingPermissions = ["missingPermissions_example"];
          opts.installerTypesNin = ["installerTypesNin_example"];
          opts.machineTypesNin = ["machineTypesNin_example"];
          opts.filterId = "filterId_example";
          opts.isDecommissioned = [true];
          opts.agentVersionLt = "agentVersionLt_example";
          opts.rangerStatusesNin = ["rangerStatusesNin_example"];
          opts.cloudInstanceSizeContains = ["cloudInstanceSizeContains_example"];
          opts.rangerVersionsNin = ["rangerVersionsNin_example"];
          opts.rsoLevel = "rsoLevel_example";
          opts.cpuCountLte = 56;
          opts.updatedAtBetween = "updatedAtBetween_example";
          opts.consoleMigrationStatuses = ["consoleMigrationStatuses_example"];
          opts.azureResourceGroupContains = ["azureResourceGroupContains_example"];
          opts.threatCreatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.uuidContains = ["uuidContains_example"];
          opts.networkStatusesNin = ["networkStatusesNin_example"];
          opts.totalMemoryLte = 56;
          opts.activeThreatsGt = 56;
          opts.lastSuccessfulScanDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.adQuery = "adQuery_example";
          opts.uuids = ["uuids_example"];

          instance.webApiAgentsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AgentsSchemasAgentViewSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.AgentsSchemasAgentViewSchemaMany200Data);
                expect(data.licenseKey).to.be.a('string');
                expect(data.licenseKey).to.be("");
                expect(data.machineType).to.be.a('string');
                expect(data.machineType).to.be("unknown");
                expect(data.mitigationModeSuspicious).to.be.a('string');
                expect(data.mitigationModeSuspicious).to.be("detect");
                expect(data.inRemoteShellSession).to.be.a('boolean');
                expect(data.inRemoteShellSession).to.be(false);
                expect(data.cpuCount).to.be.a('number');
                expect(data.cpuCount).to.be(2);
                expect(data.externalIp).to.be.a('string');
                expect(data.externalIp).to.be("31.155.5.7");
                expect(data.hasContainerizedWorkload).to.be.a('boolean');
                expect(data.hasContainerizedWorkload).to.be(false);
                expect(data.threatRebootRequired).to.be.a('boolean');
                expect(data.threatRebootRequired).to.be(false);
                expect(data.detectionState).to.be.a('string');
                expect(data.detectionState).to.be("");
                expect(data.consoleMigrationStatus).to.be.a('string');
                expect(data.consoleMigrationStatus).to.be("N/A");
                expect(data.lastSuccessfulScanDate).to.be.a(Date);
                expect(data.lastSuccessfulScanDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.agentVersion).to.be.a('string');
                expect(data.agentVersion).to.be("2.5.0.2417");
                expect(data.lastLoggedInUserName).to.be.a('string');
                expect(data.lastLoggedInUserName).to.be("janedoe3");
                expect(data.encryptedApplications).to.be.a('boolean');
                expect(data.encryptedApplications).to.be(false);
                {
                  let dataCtr = data.cloudProviders;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.AgentsSchemasAgentViewSchemaMany200CloudProviders);
                    expect(data.agentPodName).to.be.a('string');
                    expect(data.agentPodName).to.be("");
                    expect(data.clusterName).to.be.a('string');
                    expect(data.clusterName).to.be("");
                    expect(data.cloudAccount).to.be.a('string');
                    expect(data.cloudAccount).to.be("");
                    expect(data.azureResourceGroup).to.be.a('string');
                    expect(data.azureResourceGroup).to.be("");
                    {
                      let dataCtr = data.awsSubnetIds;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.kubernetesVersion).to.be.a('string');
                    expect(data.kubernetesVersion).to.be("");
                    expect(data.kubernetesType).to.be.a('string');
                    expect(data.kubernetesType).to.be("");
                    expect(data.agentNamespace).to.be.a('string');
                    expect(data.agentNamespace).to.be("");
                    {
                      let dataCtr = data.kubernetesNodeLabels;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.cloudInstanceId).to.be.a('string');
                    expect(data.cloudInstanceId).to.be("");
                    expect(data.cloudImage).to.be.a('string');
                    expect(data.cloudImage).to.be("");
                    {
                      let dataCtr = data.awsSecurityGroups;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.kubernetesNodeName).to.be.a('string');
                    expect(data.kubernetesNodeName).to.be("");
                    {
                      let dataCtr = data.cloudTags;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.awsRole).to.be.a('string');
                    expect(data.awsRole).to.be("");
                    expect(data.gcpServiceAccount).to.be.a('string');
                    expect(data.gcpServiceAccount).to.be("");
                    expect(data.cloudInstanceSize).to.be.a('string');
                    expect(data.cloudInstanceSize).to.be("");
                    expect(data.cloudLocation).to.be.a('string');
                    expect(data.cloudLocation).to.be("");
                    expect(data.cloudNetwork).to.be.a('string');
                    expect(data.cloudNetwork).to.be("");
    
                          }
                }
                expect(data.tags).to.be.a(S1MgmtApi.AgentsSchemasAgentViewSchemaMany200Tags);
                      {
                    let dataCtr = data.tags.sentinelone;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(S1MgmtApi.AgentsSchemasAgentViewSchemaMany200TagsSentinelone);
                      expect(data.id).to.be.a('string');
                      expect(data.id).to.be("225494730938493804");
                      expect(data.assignedById).to.be.a('string');
                      expect(data.assignedById).to.be("225494730938493804");
                      expect(data.assignedAt).to.be.a(Date);
                      expect(data.assignedAt).to.be(2018-02-27T04:49:26.257525Z);
                      expect(data.key).to.be.a('string');
                      expect(data.key).to.be("");
                      expect(data.value).to.be.a('string');
                      expect(data.value).to.be("");
                      expect(data.assignedBy).to.be.a('string');
                      expect(data.assignedBy).to.be("");
      
                            }
                  }
                expect(data.rangerVersion).to.be.a('string');
                expect(data.rangerVersion).to.be("");
                expect(data.isActive).to.be.a('boolean');
                expect(data.isActive).to.be(false);
                expect(data.mitigationMode).to.be.a('string');
                expect(data.mitigationMode).to.be("detect");
                expect(data.operationalState).to.be.a('string');
                expect(data.operationalState).to.be("");
                expect(data.accountId).to.be.a('string');
                expect(data.accountId).to.be("225494730938493804");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.modelName).to.be.a('string');
                expect(data.modelName).to.be("Acme computers - 15x4k");
                expect(data.totalMemory).to.be.a('number');
                expect(data.totalMemory).to.be(8192);
                expect(data.coreCount).to.be.a('number');
                expect(data.coreCount).to.be(8);
                expect(data.serialNumber).to.be.a('string');
                expect(data.serialNumber).to.be("");
                expect(data.activeThreats).to.be.a('number');
                expect(data.activeThreats).to.be(3);
                expect(data.activeDirectory).to.be.a(S1MgmtApi.AgentsSchemasAgentViewSchemaMany200ActiveDirectory);
                      {
                    let dataCtr = data.activeDirectory.lastUserMemberOf;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.activeDirectory.computerDistinguishedName).to.be.a('string');
                  expect(data.activeDirectory.computerDistinguishedName).to.be("CN=TEMP-T470P,CN=Computers,DC=sentinelone,DC=com");
                  expect(data.activeDirectory.lastUserDistinguishedName).to.be.a('string');
                  expect(data.activeDirectory.lastUserDistinguishedName).to.be("CN=John Doe,CN=Users,DC=sentinelone,DC=com");
                  expect(data.activeDirectory.mail).to.be.a('string');
                  expect(data.activeDirectory.mail).to.be("ActiveDirectory UPN");
                  expect(data.activeDirectory.userPrincipalName).to.be.a('string');
                  expect(data.activeDirectory.userPrincipalName).to.be("some@mail.com");
                  {
                    let dataCtr = data.activeDirectory.computerMemberOf;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                expect(data.allowRemoteShell).to.be.a('boolean');
                expect(data.allowRemoteShell).to.be(false);
                expect(data.locationType).to.be.a('string');
                expect(data.locationType).to.be("not_applicable");
                expect(data.groupIp).to.be.a('string');
                expect(data.groupIp).to.be("31.155.5.x");
                expect(data.groupUpdatedAt).to.be.a(Date);
                expect(data.groupUpdatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.networkQuarantineEnabled).to.be.a('boolean');
                expect(data.networkQuarantineEnabled).to.be(false);
                expect(data.scanStartedAt).to.be.a(Date);
                expect(data.scanStartedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.groupId).to.be.a('string');
                expect(data.groupId).to.be("225494730938493804");
                expect(data.lastActiveDate).to.be.a(Date);
                expect(data.lastActiveDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.policyUpdatedAt).to.be.a(Date);
                expect(data.policyUpdatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.siteName).to.be.a('string');
                expect(data.siteName).to.be("");
                expect(data.osUsername).to.be.a('string');
                expect(data.osUsername).to.be("");
                expect(data.osType).to.be.a('string');
                expect(data.osType).to.be("windows");
                expect(data.showAlertIcon).to.be.a('boolean');
                expect(data.showAlertIcon).to.be(false);
                expect(data.appsVulnerabilityStatus).to.be.a('string');
                expect(data.appsVulnerabilityStatus).to.be("patch_required");
                expect(data.isUpToDate).to.be.a('boolean');
                expect(data.isUpToDate).to.be(false);
                expect(data.rangerStatus).to.be.a('string');
                expect(data.rangerStatus).to.be("NotApplicable");
                expect(data.osRevision).to.be.a('string');
                expect(data.osRevision).to.be("");
                expect(data.remoteProfilingState).to.be.a('string');
                expect(data.remoteProfilingState).to.be("");
                expect(data.storageType).to.be.a('string');
                expect(data.storageType).to.be("");
                expect(data.operationalStateExpiration).to.be.a(Date);
                expect(data.operationalStateExpiration).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.computerName).to.be.a('string');
                expect(data.computerName).to.be("JOHN-WIN-4125");
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("ff819e70af13be381993075eb0ce5f2f6de05be2");
                expect(data.lastIpToMgmt).to.be.a('string');
                expect(data.lastIpToMgmt).to.be("");
                expect(data.accountName).to.be.a('string');
                expect(data.accountName).to.be("");
                expect(data.networkStatus).to.be.a('string');
                expect(data.networkStatus).to.be("connected");
                expect(data.scanStatus).to.be.a('string');
                expect(data.scanStatus).to.be("none");
                expect(data.osArch).to.be.a('string');
                expect(data.osArch).to.be("32 bit");
                {
                  let dataCtr = data.locations;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.AgentsSchemasAgentViewSchemaMany200Locations);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("office1");
                    expect(data.scope).to.be.a('string');
                    expect(data.scope).to.be("site");
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("225494730938493804");
    
                          }
                }
                expect(data.isUninstalled).to.be.a('boolean');
                expect(data.isUninstalled).to.be(false);
                expect(data.storageName).to.be.a('string');
                expect(data.storageName).to.be("");
                expect(data.isPendingUninstall).to.be.a('boolean');
                expect(data.isPendingUninstall).to.be(false);
                expect(data.proxyStates).to.be.a(S1MgmtApi.AgentsSchemasAgentViewSchemaMany200ProxyStates);
                      expect(data.proxyStates.deepVisibility).to.be.a('boolean');
                  expect(data.proxyStates.deepVisibility).to.be(false);
                  expect(data.proxyStates.console).to.be.a('boolean');
                  expect(data.proxyStates.console).to.be(false);
                expect(data.remoteProfilingStateExpiration).to.be.a(Date);
                expect(data.remoteProfilingStateExpiration).to.be(new Date());
                expect(data.osName).to.be.a('string');
                expect(data.osName).to.be("Windows 10");
                expect(data.scanFinishedAt).to.be.a(Date);
                expect(data.scanFinishedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.osStartTime).to.be.a(Date);
                expect(data.osStartTime).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.siteId).to.be.a('string');
                expect(data.siteId).to.be("225494730938493804");
                {
                  let dataCtr = data.userActionsNeeded;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("none");
                  }
                }
                expect(data.cpuId).to.be.a('string');
                expect(data.cpuId).to.be("Acme chips inc. Pro5555 @ 3.33GHz");
                expect(data.containerizedWorkloadCounts).to.be.a(S1MgmtApi.AgentsSchemasAgentViewSchemaMany200ContainerizedWorkloadCounts);
                      expect(data.containerizedWorkloadCounts.podsCount).to.be.a('number');
                  expect(data.containerizedWorkloadCounts.podsCount).to.be(0);
                  expect(data.containerizedWorkloadCounts.tasksCount).to.be.a('number');
                  expect(data.containerizedWorkloadCounts.tasksCount).to.be(0);
                  expect(data.containerizedWorkloadCounts.containersCount).to.be.a('number');
                  expect(data.containerizedWorkloadCounts.containersCount).to.be(0);
                expect(data.registeredAt).to.be.a(Date);
                expect(data.registeredAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.groupName).to.be.a('string');
                expect(data.groupName).to.be("");
                expect(data.isDecommissioned).to.be.a('boolean');
                expect(data.isDecommissioned).to.be(false);
                expect(data.installerType).to.be.a('string');
                expect(data.installerType).to.be(".msi");
                expect(data.infected).to.be.a('boolean');
                expect(data.infected).to.be(false);
                expect(data.externalId).to.be.a('string');
                expect(data.externalId).to.be("");
                expect(data.fullDiskScanLastUpdatedAt).to.be.a(Date);
                expect(data.fullDiskScanLastUpdatedAt).to.be(2018-02-27T04:49:26.257525Z);
                {
                  let dataCtr = data.networkInterfaces;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.AgentsSchemasAgentViewSchemaMany200NetworkInterfaces);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.physical).to.be.a('string');
                    expect(data.physical).to.be("00:25:96:FF:FE:12:34:56");
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("225494730938493804");
                    expect(data.gatewayMacAddress).to.be.a('string');
                    expect(data.gatewayMacAddress).to.be("00:25:96:FF:FE:12");
                    expect(data.gatewayIp).to.be.a('string');
                    expect(data.gatewayIp).to.be("192.168.1.1");
                    {
                      let dataCtr = data.inet;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.inet6;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
    
                          }
                }
                expect(data.locationEnabled).to.be.a('boolean');
                expect(data.locationEnabled).to.be(false);
                expect(data.firstFullModeTime).to.be.a(Date);
                expect(data.firstFullModeTime).to.be(new Date());
                expect(data.firewallEnabled).to.be.a('boolean');
                expect(data.firewallEnabled).to.be(false);
                {
                  let dataCtr = data.missingPermissions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("user_action_needed_fda");
                  }
                }
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.domain).to.be.a('string');
                expect(data.domain).to.be("mybusiness.net");
                expect(data.scanAbortedAt).to.be.a(Date);
                expect(data.scanAbortedAt).to.be(2018-02-27T04:49:26.257525Z);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiAgentsPassphrasesGet', function() {
        it('should call webApiAgentsPassphrasesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiAgentsPassphrasesGet call and complete the assertions
          /*
          var opts = {};
          opts.agentVersionsNin = ["agentVersionsNin_example"];
          opts.registeredAtBetween = "registeredAtBetween_example";
          opts.registeredAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.adComputerQueryContains = ["adComputerQueryContains_example"];
          opts.mitigationModeSuspicious = "mitigationModeSuspicious_example";
          opts.hasLocalConfiguration = true;
          opts.adUserQueryContains = ["adUserQueryContains_example"];
          opts.query = "query_example";
          opts.cloudProvider = ["cloudProvider_example"];
          opts.coreCountGt = 56;
          opts.decommissionedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.registeredAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.totalMemoryGt = 56;
          opts.skip = 56;
          opts.updatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.hasContainerizedWorkload = true;
          opts.cloudImageContains = ["cloudImageContains_example"];
          opts.threatCreatedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.appsVulnerabilityStatusesNin = ["appsVulnerabilityStatusesNin_example"];
          opts.scanStatusesNin = ["scanStatusesNin_example"];
          opts.adComputerMemberContains = ["adComputerMemberContains_example"];
          opts.coreCountLte = 56;
          opts.rangerVersions = ["rangerVersions_example"];
          opts.machineTypes = ["machineTypes_example"];
          opts.coreCountGte = 56;
          opts.locationIds = ["locationIds_example"];
          opts.locationIdsNin = ["locationIdsNin_example"];
          opts.gatewayIp = "gatewayIp_example";
          opts.updatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.groupIds = ["groupIds_example"];
          opts.missingPermissionsNin = ["missingPermissionsNin_example"];
          opts.migrationStatus = "migrationStatus_example";
          opts.threatRebootRequired = [true];
          opts.serialNumberContains = ["serialNumberContains_example"];
          opts.decommissionedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.lastSuccessfulScanDateBetween = "lastSuccessfulScanDateBetween_example";
          opts.lastActiveDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.lastActiveDateBetween = "lastActiveDateBetween_example";
          opts.networkQuarantineEnabled = [true];
          opts.cloudTagsContains = ["cloudTagsContains_example"];
          opts.threatCreatedAtBetween = "threatCreatedAtBetween_example";
          opts.encryptedApplications = true;
          opts.isUninstalled = [true];
          opts.networkInterfacePhysicalContains = ["networkInterfacePhysicalContains_example"];
          opts.agentVersionGte = "agentVersionGte_example";
          opts.lastSuccessfulScanDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.operationalStates = ["operationalStates_example"];
          opts.adUserNameContains = ["adUserNameContains_example"];
          opts.osTypesNin = ["osTypesNin_example"];
          opts.csvFilterId = "csvFilterId_example";
          opts.cursor = "null";
          opts.isActive = true;
          opts.mitigationMode = "mitigationMode_example";
          opts.awsSubnetIdsContains = ["awsSubnetIdsContains_example"];
          opts.agentVersionLte = "agentVersionLte_example";
          opts.updatedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.osVersionContains = ["osVersionContains_example"];
          opts.externalIpContains = ["externalIpContains_example"];
          opts.awsSecurityGroupsContains = ["awsSecurityGroupsContains_example"];
          opts.k8sNodeNameContains = ["k8sNodeNameContains_example"];
          opts.agentVersionBetween = "agentVersionBetween_example";
          opts.activeThreats = 56;
          opts.hasTags = true;
          opts.agentNamespaceContains = ["agentNamespaceContains_example"];
          opts.cpuCountLt = 56;
          opts.registeredAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.networkInterfaceInetContains = ["networkInterfaceInetContains_example"];
          opts.computerNameContains = ["computerNameContains_example"];
          opts.cloudNetworkContains = ["cloudNetworkContains_example"];
          opts.remoteOpsForensicsSupported = true;
          opts.remoteProfilingStates = ["remoteProfilingStates_example"];
          opts.filteredGroupIds = ["filteredGroupIds_example"];
          opts.agentPodNameContains = ["agentPodNameContains_example"];
          opts.userActionsNeededNin = ["userActionsNeededNin_example"];
          opts.rangerStatuses = ["rangerStatuses_example"];
          opts.computerNameLike = "computerNameLike_example";
          opts.externalIdContains = ["externalIdContains_example"];
          opts.createdAtBetween = "createdAtBetween_example";
          opts.consoleMigrationStatusesNin = ["consoleMigrationStatusesNin_example"];
          opts.cpuIdContains = ["cpuIdContains_example"];
          opts.coreCountBetween = "coreCountBetween_example";
          opts.isUpToDate = true;
          opts.threatCreatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.rangerStatus = "rangerStatus_example";
          opts.totalMemoryBetween = "totalMemoryBetween_example";
          opts.lastSuccessfulScanDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.domains = ["domains_example"];
          opts.awsRoleContains = ["awsRoleContains_example"];
          opts.lastLoggedInUserNameContains = ["lastLoggedInUserNameContains_example"];
          opts.cpuCountGt = 56;
          opts.cloudAccountContains = ["cloudAccountContains_example"];
          opts.clusterNameContains = ["clusterNameContains_example"];
          opts.scanStatuses = ["scanStatuses_example"];
          opts.updatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.ids = ["ids_example"];
          opts.countOnly = false;
          opts.liveUpdateIdContains = ["liveUpdateIdContains_example"];
          opts.limit = 10;
          opts.computerName = "computerName_example";
          opts.uuid = "uuid_example";
          opts.osTypes = ["osTypes_example"];
          opts.appsVulnerabilityStatuses = ["appsVulnerabilityStatuses_example"];
          opts.lastActiveDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.skipCount = null;
          opts.threatContentHash = "threatContentHash_example";
          opts.remoteProfilingStatesNin = ["remoteProfilingStatesNin_example"];
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.scanStatus = "scanStatus_example";
          opts.filteredSiteIds = ["filteredSiteIds_example"];
          opts.userActionsNeeded = ["userActionsNeeded_example"];
          opts.registeredAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.osArch = "osArch_example";
          opts.adComputerNameContains = ["adComputerNameContains_example"];
          opts.totalMemoryGte = 56;
          opts.threatHidden = true;
          opts.lastActiveDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.threatCreatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.cpuCountGte = 56;
          opts.cloudInstanceIdContains = ["cloudInstanceIdContains_example"];
          opts.agentVersions = ["agentVersions_example"];
          opts.adQueryContains = ["adQueryContains_example"];
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.accountIds = ["accountIds_example"];
          opts.locationEnabled = [true];
          opts.cloudProviderNin = ["cloudProviderNin_example"];
          opts.isPendingUninstall = true;
          opts.k8sNodeLabelsContains = ["k8sNodeLabelsContains_example"];
          opts.decommissionedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.tagsData = "tagsData_example";
          opts.agentVersionGt = "agentVersionGt_example";
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.threatMitigationStatus = "threatMitigationStatus_example";
          opts.lastSuccessfulScanDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.firewallEnabled = [true];
          opts.decommissionedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.decommissionedAtBetween = "decommissionedAtBetween_example";
          opts.domainsNin = ["domainsNin_example"];
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.gcpServiceAccountContains = ["gcpServiceAccountContains_example"];
          opts.threatResolved = true;
          opts.cloudLocationContains = ["cloudLocationContains_example"];
          opts.lastActiveDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.networkStatuses = ["networkStatuses_example"];
          opts.k8sTypeContains = ["k8sTypeContains_example"];
          opts.networkInterfaceGatewayMacAddressContains = ["networkInterfaceGatewayMacAddressContains_example"];
          opts.cpuCountBetween = "cpuCountBetween_example";
          opts.operationalStatesNin = ["operationalStatesNin_example"];
          opts.totalMemoryLt = 56;
          opts.k8sVersionContains = ["k8sVersionContains_example"];
          opts.installerTypes = ["installerTypes_example"];
          opts.adUserMemberContains = ["adUserMemberContains_example"];
          opts.infected = true;
          opts.coreCountLt = 56;
          opts.missingPermissions = ["missingPermissions_example"];
          opts.installerTypesNin = ["installerTypesNin_example"];
          opts.machineTypesNin = ["machineTypesNin_example"];
          opts.filterId = "filterId_example";
          opts.isDecommissioned = [true];
          opts.agentVersionLt = "agentVersionLt_example";
          opts.rangerStatusesNin = ["rangerStatusesNin_example"];
          opts.cloudInstanceSizeContains = ["cloudInstanceSizeContains_example"];
          opts.rangerVersionsNin = ["rangerVersionsNin_example"];
          opts.rsoLevel = "rsoLevel_example";
          opts.cpuCountLte = 56;
          opts.updatedAtBetween = "updatedAtBetween_example";
          opts.consoleMigrationStatuses = ["consoleMigrationStatuses_example"];
          opts.azureResourceGroupContains = ["azureResourceGroupContains_example"];
          opts.threatCreatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.uuidContains = ["uuidContains_example"];
          opts.networkStatusesNin = ["networkStatusesNin_example"];
          opts.totalMemoryLte = 56;
          opts.activeThreatsGt = 56;
          opts.lastSuccessfulScanDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.adQuery = "adQuery_example";
          opts.uuids = ["uuids_example"];

          instance.webApiAgentsPassphrasesGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AgentsSchemasAgentPassphraseSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.AgentsSchemasAgentPassphraseSchemaMany200Data);
                expect(data.lastLoggedInUserName).to.be.a('string');
                expect(data.lastLoggedInUserName).to.be("janedoe3");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.passphrase).to.be.a('string');
                expect(data.passphrase).to.be("DUNE BRAG LINT RATE ATE WEE BLOB BUSS SIS TINY GREW SHOD");
                expect(data.domain).to.be.a('string');
                expect(data.domain).to.be("mybusiness.net");
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("ff819e70af13be381993075eb0ce5f2f6de05be2");
                expect(data.computerName).to.be.a('string');
                expect(data.computerName).to.be("JOHN-WIN-4125");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiAgentsProcessesGet', function() {
        it('should call webApiAgentsProcessesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiAgentsProcessesGet call and complete the assertions
          /*
          var ids = ["ids_example"];

          instance.webApiAgentsProcessesGet(ids, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AgentsSchemasAgentProcessesSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.AgentsSchemasAgentProcessesSchemaMany200Data);
                expect(data.cpuUsage).to.be.a('number');
                expect(data.cpuUsage).to.be(0);
                expect(data.memoryUsage).to.be.a('number');
                expect(data.memoryUsage).to.be(0);
                expect(data.executablePath).to.be.a('string');
                expect(data.executablePath).to.be("");
                expect(data.pid).to.be.a('number');
                expect(data.pid).to.be(0);
                expect(data.processName).to.be.a('string');
                expect(data.processName).to.be("");
                expect(data.startTime).to.be.a(Date);
                expect(data.startTime).to.be(2018-02-27T04:49:26.257525Z);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiAgentsTagsGet', function() {
        it('should call webApiAgentsTagsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiAgentsTagsGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "null";
          opts.includeChildren = false;
          opts.query = "query_example";
          opts.ids = ["ids_example"];
          opts.countOnly = false;
          opts.valueContains = ["valueContains_example"];
          opts.limit = 10;
          opts.skip = 56;
          opts.skipCount = null;
          opts.sortOrder = "null";
          opts.key = "key_example";
          opts.value = "value_example";
          opts.includeParents = false;
          opts.keyContains = ["keyContains_example"];
          opts.sortBy = "null";
          opts.groupIds = ["groupIds_example"];
          opts.description = "description_example";
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiAgentsTagsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.TagManagerSchemasAgentTagSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.TagManagerSchemasAgentTagSchemaMany200Data);
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("env-prod");
                expect(data.updatedBy).to.be.a('string');
                expect(data.updatedBy).to.be("John Doe");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-19T16:32:00.000Z);
                expect(data.scopeId).to.be.a('string');
                expect(data.scopeId).to.be("225494730938493804");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("agents");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-20T16:40:00.000Z);
                expect(data.createdBy).to.be.a('string');
                expect(data.createdBy).to.be("John Doe");
                expect(data.key).to.be.a('string');
                expect(data.key).to.be("env");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("production");
                expect(data.scopePath).to.be.a('string');
                expect(data.scopePath).to.be("Global\Default account\Default site");
                expect(data.scopeLevel).to.be.a('string');
                expect(data.scopeLevel).to.be("site");
                expect(data.allowEdit).to.be.a('boolean');
                expect(data.allowEdit).to.be(false);
                expect(data.totalEndpoints).to.be.a('number');
                expect(data.totalEndpoints).to.be(0);
                expect(data.endpointsInCurrentScope).to.be.a('number');
                expect(data.endpointsInCurrentScope).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiAgentsagentIdLocalUpgradeAuthorizationGet', function() {
        it('should call webApiAgentsagentIdLocalUpgradeAuthorizationGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiAgentsagentIdLocalUpgradeAuthorizationGet call and complete the assertions
          /*
          var agentId = "agentId_example";

          instance.webApiAgentsagentIdLocalUpgradeAuthorizationGet(agentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AgentsSchemasGetAgentApprovalResponse200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AgentsSchemasGetAgentApprovalResponse200Data);
                  expect(data.data.siteAuthorization).to.be.a('string');
              expect(data.data.siteAuthorization).to.be("");
              expect(data.data.agentAuthorization).to.be.a('string');
              expect(data.data.agentAuthorization).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiAgentsagentIdUploadsactivityIdGet', function() {
        it('should call webApiAgentsagentIdUploadsactivityIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiAgentsagentIdUploadsactivityIdGet call
          /*
          var agentId = "agentId_example";
          var activityId = "activityId_example";

          instance.webApiAgentsagentIdUploadsactivityIdGet(agentId, activityId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiExportAgentsGet', function() {
        it('should call webApiExportAgentsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiExportAgentsGet call
          /*
          var opts = {};
          opts.agentVersionsNin = ["agentVersionsNin_example"];
          opts.registeredAtBetween = "registeredAtBetween_example";
          opts.registeredAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.adComputerQueryContains = ["adComputerQueryContains_example"];
          opts.mitigationModeSuspicious = "mitigationModeSuspicious_example";
          opts.hasLocalConfiguration = true;
          opts.adUserQueryContains = ["adUserQueryContains_example"];
          opts.query = "query_example";
          opts.cloudProvider = ["cloudProvider_example"];
          opts.coreCountGt = 56;
          opts.decommissionedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.registeredAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.totalMemoryGt = 56;
          opts.updatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.hasContainerizedWorkload = true;
          opts.cloudImageContains = ["cloudImageContains_example"];
          opts.threatCreatedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.appsVulnerabilityStatusesNin = ["appsVulnerabilityStatusesNin_example"];
          opts.scanStatusesNin = ["scanStatusesNin_example"];
          opts.adComputerMemberContains = ["adComputerMemberContains_example"];
          opts.coreCountLte = 56;
          opts.rangerVersions = ["rangerVersions_example"];
          opts.machineTypes = ["machineTypes_example"];
          opts.coreCountGte = 56;
          opts.locationIds = ["locationIds_example"];
          opts.locationIdsNin = ["locationIdsNin_example"];
          opts.gatewayIp = "gatewayIp_example";
          opts.updatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.groupIds = ["groupIds_example"];
          opts.missingPermissionsNin = ["missingPermissionsNin_example"];
          opts.migrationStatus = "migrationStatus_example";
          opts.threatRebootRequired = [true];
          opts.serialNumberContains = ["serialNumberContains_example"];
          opts.decommissionedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.lastSuccessfulScanDateBetween = "lastSuccessfulScanDateBetween_example";
          opts.lastActiveDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.lastActiveDateBetween = "lastActiveDateBetween_example";
          opts.networkQuarantineEnabled = [true];
          opts.cloudTagsContains = ["cloudTagsContains_example"];
          opts.threatCreatedAtBetween = "threatCreatedAtBetween_example";
          opts.encryptedApplications = true;
          opts.isUninstalled = [true];
          opts.networkInterfacePhysicalContains = ["networkInterfacePhysicalContains_example"];
          opts.agentVersionGte = "agentVersionGte_example";
          opts.lastSuccessfulScanDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.operationalStates = ["operationalStates_example"];
          opts.adUserNameContains = ["adUserNameContains_example"];
          opts.osTypesNin = ["osTypesNin_example"];
          opts.csvFilterId = "csvFilterId_example";
          opts.isActive = true;
          opts.mitigationMode = "mitigationMode_example";
          opts.awsSubnetIdsContains = ["awsSubnetIdsContains_example"];
          opts.agentVersionLte = "agentVersionLte_example";
          opts.updatedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.osVersionContains = ["osVersionContains_example"];
          opts.externalIpContains = ["externalIpContains_example"];
          opts.awsSecurityGroupsContains = ["awsSecurityGroupsContains_example"];
          opts.k8sNodeNameContains = ["k8sNodeNameContains_example"];
          opts.agentVersionBetween = "agentVersionBetween_example";
          opts.activeThreats = 56;
          opts.hasTags = true;
          opts.agentNamespaceContains = ["agentNamespaceContains_example"];
          opts.cpuCountLt = 56;
          opts.registeredAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.networkInterfaceInetContains = ["networkInterfaceInetContains_example"];
          opts.computerNameContains = ["computerNameContains_example"];
          opts.cloudNetworkContains = ["cloudNetworkContains_example"];
          opts.remoteOpsForensicsSupported = true;
          opts.remoteProfilingStates = ["remoteProfilingStates_example"];
          opts.filteredGroupIds = ["filteredGroupIds_example"];
          opts.agentPodNameContains = ["agentPodNameContains_example"];
          opts.userActionsNeededNin = ["userActionsNeededNin_example"];
          opts.rangerStatuses = ["rangerStatuses_example"];
          opts.computerNameLike = "computerNameLike_example";
          opts.externalIdContains = ["externalIdContains_example"];
          opts.createdAtBetween = "createdAtBetween_example";
          opts.consoleMigrationStatusesNin = ["consoleMigrationStatusesNin_example"];
          opts.cpuIdContains = ["cpuIdContains_example"];
          opts.coreCountBetween = "coreCountBetween_example";
          opts.isUpToDate = true;
          opts.threatCreatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.rangerStatus = "rangerStatus_example";
          opts.totalMemoryBetween = "totalMemoryBetween_example";
          opts.lastSuccessfulScanDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.domains = ["domains_example"];
          opts.awsRoleContains = ["awsRoleContains_example"];
          opts.lastLoggedInUserNameContains = ["lastLoggedInUserNameContains_example"];
          opts.cpuCountGt = 56;
          opts.cloudAccountContains = ["cloudAccountContains_example"];
          opts.clusterNameContains = ["clusterNameContains_example"];
          opts.scanStatuses = ["scanStatuses_example"];
          opts.updatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.ids = ["ids_example"];
          opts.liveUpdateIdContains = ["liveUpdateIdContains_example"];
          opts.computerName = "computerName_example";
          opts.uuid = "uuid_example";
          opts.osTypes = ["osTypes_example"];
          opts.appsVulnerabilityStatuses = ["appsVulnerabilityStatuses_example"];
          opts.lastActiveDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.threatContentHash = "threatContentHash_example";
          opts.remoteProfilingStatesNin = ["remoteProfilingStatesNin_example"];
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.scanStatus = "scanStatus_example";
          opts.filteredSiteIds = ["filteredSiteIds_example"];
          opts.userActionsNeeded = ["userActionsNeeded_example"];
          opts.registeredAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.osArch = "osArch_example";
          opts.adComputerNameContains = ["adComputerNameContains_example"];
          opts.totalMemoryGte = 56;
          opts.threatHidden = true;
          opts.lastActiveDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.threatCreatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.cpuCountGte = 56;
          opts.cloudInstanceIdContains = ["cloudInstanceIdContains_example"];
          opts.agentVersions = ["agentVersions_example"];
          opts.adQueryContains = ["adQueryContains_example"];
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.accountIds = ["accountIds_example"];
          opts.locationEnabled = [true];
          opts.cloudProviderNin = ["cloudProviderNin_example"];
          opts.isPendingUninstall = true;
          opts.k8sNodeLabelsContains = ["k8sNodeLabelsContains_example"];
          opts.decommissionedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.tagsData = "tagsData_example";
          opts.agentVersionGt = "agentVersionGt_example";
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.threatMitigationStatus = "threatMitigationStatus_example";
          opts.lastSuccessfulScanDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.firewallEnabled = [true];
          opts.decommissionedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.decommissionedAtBetween = "decommissionedAtBetween_example";
          opts.domainsNin = ["domainsNin_example"];
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.gcpServiceAccountContains = ["gcpServiceAccountContains_example"];
          opts.threatResolved = true;
          opts.cloudLocationContains = ["cloudLocationContains_example"];
          opts.lastActiveDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.networkStatuses = ["networkStatuses_example"];
          opts.k8sTypeContains = ["k8sTypeContains_example"];
          opts.networkInterfaceGatewayMacAddressContains = ["networkInterfaceGatewayMacAddressContains_example"];
          opts.cpuCountBetween = "cpuCountBetween_example";
          opts.operationalStatesNin = ["operationalStatesNin_example"];
          opts.totalMemoryLt = 56;
          opts.k8sVersionContains = ["k8sVersionContains_example"];
          opts.installerTypes = ["installerTypes_example"];
          opts.adUserMemberContains = ["adUserMemberContains_example"];
          opts.infected = true;
          opts.coreCountLt = 56;
          opts.missingPermissions = ["missingPermissions_example"];
          opts.installerTypesNin = ["installerTypesNin_example"];
          opts.machineTypesNin = ["machineTypesNin_example"];
          opts.filterId = "filterId_example";
          opts.isDecommissioned = [true];
          opts.agentVersionLt = "agentVersionLt_example";
          opts.rangerStatusesNin = ["rangerStatusesNin_example"];
          opts.cloudInstanceSizeContains = ["cloudInstanceSizeContains_example"];
          opts.rangerVersionsNin = ["rangerVersionsNin_example"];
          opts.rsoLevel = "rsoLevel_example";
          opts.cpuCountLte = 56;
          opts.updatedAtBetween = "updatedAtBetween_example";
          opts.consoleMigrationStatuses = ["consoleMigrationStatuses_example"];
          opts.azureResourceGroupContains = ["azureResourceGroupContains_example"];
          opts.threatCreatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.uuidContains = ["uuidContains_example"];
          opts.networkStatusesNin = ["networkStatusesNin_example"];
          opts.totalMemoryLte = 56;
          opts.activeThreatsGt = 56;
          opts.lastSuccessfulScanDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.adQuery = "adQuery_example";
          opts.uuids = ["uuids_example"];

          instance.webApiExportAgentsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiExportAgentsLightGet', function() {
        it('should call webApiExportAgentsLightGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiExportAgentsLightGet call
          /*
          var opts = {};
          opts.agentVersionsNin = ["agentVersionsNin_example"];
          opts.registeredAtBetween = "registeredAtBetween_example";
          opts.registeredAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.adComputerQueryContains = ["adComputerQueryContains_example"];
          opts.mitigationModeSuspicious = "mitigationModeSuspicious_example";
          opts.hasLocalConfiguration = true;
          opts.adUserQueryContains = ["adUserQueryContains_example"];
          opts.query = "query_example";
          opts.cloudProvider = ["cloudProvider_example"];
          opts.coreCountGt = 56;
          opts.decommissionedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.registeredAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.totalMemoryGt = 56;
          opts.updatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.hasContainerizedWorkload = true;
          opts.cloudImageContains = ["cloudImageContains_example"];
          opts.threatCreatedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.appsVulnerabilityStatusesNin = ["appsVulnerabilityStatusesNin_example"];
          opts.scanStatusesNin = ["scanStatusesNin_example"];
          opts.adComputerMemberContains = ["adComputerMemberContains_example"];
          opts.coreCountLte = 56;
          opts.rangerVersions = ["rangerVersions_example"];
          opts.machineTypes = ["machineTypes_example"];
          opts.coreCountGte = 56;
          opts.locationIds = ["locationIds_example"];
          opts.locationIdsNin = ["locationIdsNin_example"];
          opts.gatewayIp = "gatewayIp_example";
          opts.updatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.groupIds = ["groupIds_example"];
          opts.missingPermissionsNin = ["missingPermissionsNin_example"];
          opts.migrationStatus = "migrationStatus_example";
          opts.threatRebootRequired = [true];
          opts.serialNumberContains = ["serialNumberContains_example"];
          opts.decommissionedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.lastSuccessfulScanDateBetween = "lastSuccessfulScanDateBetween_example";
          opts.lastActiveDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.lastActiveDateBetween = "lastActiveDateBetween_example";
          opts.networkQuarantineEnabled = [true];
          opts.cloudTagsContains = ["cloudTagsContains_example"];
          opts.threatCreatedAtBetween = "threatCreatedAtBetween_example";
          opts.encryptedApplications = true;
          opts.isUninstalled = [true];
          opts.networkInterfacePhysicalContains = ["networkInterfacePhysicalContains_example"];
          opts.agentVersionGte = "agentVersionGte_example";
          opts.lastSuccessfulScanDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.operationalStates = ["operationalStates_example"];
          opts.adUserNameContains = ["adUserNameContains_example"];
          opts.osTypesNin = ["osTypesNin_example"];
          opts.csvFilterId = "csvFilterId_example";
          opts.isActive = true;
          opts.mitigationMode = "mitigationMode_example";
          opts.awsSubnetIdsContains = ["awsSubnetIdsContains_example"];
          opts.agentVersionLte = "agentVersionLte_example";
          opts.updatedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.osVersionContains = ["osVersionContains_example"];
          opts.externalIpContains = ["externalIpContains_example"];
          opts.awsSecurityGroupsContains = ["awsSecurityGroupsContains_example"];
          opts.k8sNodeNameContains = ["k8sNodeNameContains_example"];
          opts.agentVersionBetween = "agentVersionBetween_example";
          opts.activeThreats = 56;
          opts.hasTags = true;
          opts.agentNamespaceContains = ["agentNamespaceContains_example"];
          opts.cpuCountLt = 56;
          opts.registeredAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.networkInterfaceInetContains = ["networkInterfaceInetContains_example"];
          opts.computerNameContains = ["computerNameContains_example"];
          opts.cloudNetworkContains = ["cloudNetworkContains_example"];
          opts.remoteOpsForensicsSupported = true;
          opts.remoteProfilingStates = ["remoteProfilingStates_example"];
          opts.filteredGroupIds = ["filteredGroupIds_example"];
          opts.agentPodNameContains = ["agentPodNameContains_example"];
          opts.userActionsNeededNin = ["userActionsNeededNin_example"];
          opts.rangerStatuses = ["rangerStatuses_example"];
          opts.computerNameLike = "computerNameLike_example";
          opts.externalIdContains = ["externalIdContains_example"];
          opts.createdAtBetween = "createdAtBetween_example";
          opts.consoleMigrationStatusesNin = ["consoleMigrationStatusesNin_example"];
          opts.cpuIdContains = ["cpuIdContains_example"];
          opts.coreCountBetween = "coreCountBetween_example";
          opts.isUpToDate = true;
          opts.threatCreatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.rangerStatus = "rangerStatus_example";
          opts.totalMemoryBetween = "totalMemoryBetween_example";
          opts.lastSuccessfulScanDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.domains = ["domains_example"];
          opts.awsRoleContains = ["awsRoleContains_example"];
          opts.lastLoggedInUserNameContains = ["lastLoggedInUserNameContains_example"];
          opts.cpuCountGt = 56;
          opts.cloudAccountContains = ["cloudAccountContains_example"];
          opts.clusterNameContains = ["clusterNameContains_example"];
          opts.scanStatuses = ["scanStatuses_example"];
          opts.updatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.ids = ["ids_example"];
          opts.liveUpdateIdContains = ["liveUpdateIdContains_example"];
          opts.computerName = "computerName_example";
          opts.uuid = "uuid_example";
          opts.osTypes = ["osTypes_example"];
          opts.appsVulnerabilityStatuses = ["appsVulnerabilityStatuses_example"];
          opts.lastActiveDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.threatContentHash = "threatContentHash_example";
          opts.remoteProfilingStatesNin = ["remoteProfilingStatesNin_example"];
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.scanStatus = "scanStatus_example";
          opts.filteredSiteIds = ["filteredSiteIds_example"];
          opts.userActionsNeeded = ["userActionsNeeded_example"];
          opts.registeredAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.osArch = "osArch_example";
          opts.adComputerNameContains = ["adComputerNameContains_example"];
          opts.totalMemoryGte = 56;
          opts.threatHidden = true;
          opts.lastActiveDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.threatCreatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.cpuCountGte = 56;
          opts.cloudInstanceIdContains = ["cloudInstanceIdContains_example"];
          opts.agentVersions = ["agentVersions_example"];
          opts.adQueryContains = ["adQueryContains_example"];
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.accountIds = ["accountIds_example"];
          opts.locationEnabled = [true];
          opts.cloudProviderNin = ["cloudProviderNin_example"];
          opts.isPendingUninstall = true;
          opts.k8sNodeLabelsContains = ["k8sNodeLabelsContains_example"];
          opts.decommissionedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.tagsData = "tagsData_example";
          opts.agentVersionGt = "agentVersionGt_example";
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.threatMitigationStatus = "threatMitigationStatus_example";
          opts.lastSuccessfulScanDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.firewallEnabled = [true];
          opts.decommissionedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.decommissionedAtBetween = "decommissionedAtBetween_example";
          opts.domainsNin = ["domainsNin_example"];
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.gcpServiceAccountContains = ["gcpServiceAccountContains_example"];
          opts.threatResolved = true;
          opts.cloudLocationContains = ["cloudLocationContains_example"];
          opts.lastActiveDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.networkStatuses = ["networkStatuses_example"];
          opts.k8sTypeContains = ["k8sTypeContains_example"];
          opts.networkInterfaceGatewayMacAddressContains = ["networkInterfaceGatewayMacAddressContains_example"];
          opts.cpuCountBetween = "cpuCountBetween_example";
          opts.operationalStatesNin = ["operationalStatesNin_example"];
          opts.totalMemoryLt = 56;
          opts.k8sVersionContains = ["k8sVersionContains_example"];
          opts.installerTypes = ["installerTypes_example"];
          opts.adUserMemberContains = ["adUserMemberContains_example"];
          opts.infected = true;
          opts.coreCountLt = 56;
          opts.missingPermissions = ["missingPermissions_example"];
          opts.installerTypesNin = ["installerTypesNin_example"];
          opts.machineTypesNin = ["machineTypesNin_example"];
          opts.filterId = "filterId_example";
          opts.isDecommissioned = [true];
          opts.agentVersionLt = "agentVersionLt_example";
          opts.rangerStatusesNin = ["rangerStatusesNin_example"];
          opts.cloudInstanceSizeContains = ["cloudInstanceSizeContains_example"];
          opts.rangerVersionsNin = ["rangerVersionsNin_example"];
          opts.rsoLevel = "rsoLevel_example";
          opts.cpuCountLte = 56;
          opts.updatedAtBetween = "updatedAtBetween_example";
          opts.consoleMigrationStatuses = ["consoleMigrationStatuses_example"];
          opts.azureResourceGroupContains = ["azureResourceGroupContains_example"];
          opts.threatCreatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.uuidContains = ["uuidContains_example"];
          opts.networkStatusesNin = ["networkStatusesNin_example"];
          opts.totalMemoryLte = 56;
          opts.activeThreatsGt = 56;
          opts.lastSuccessfulScanDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.adQuery = "adQuery_example";
          opts.uuids = ["uuids_example"];

          instance.webApiExportAgentsLightGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
