/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.RangerApi();
  });

  describe('(package)', function() {
    describe('RangerApi', function() {
      describe('webApiRangerDeviceReviewPost', function() {
        it('should call webApiRangerDeviceReviewPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRangerDeviceReviewPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.SchemasDeviceReviewSchema();
          opts.body.filter = new S1MgmtApi.SchemasDeviceReviewSchemaFilter();
          opts.body.filter.hasUserLabel = false;
          opts.body.filter.agentIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.externalIp = "";
          opts.body.filter.managedState = "";
          opts.body.filter.discoveryMethods = [""];
          opts.body.filter.udpPortsContains = [137,2002];
          opts.body.filter.hostnamesContains = ["s1_host","SomeHost"];
          opts.body.filter.osVersion = "";
          opts.body.filter.deviceTypes = [""];
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.networkNameContains = ["Office"];
          opts.body.filter.query = "";
          opts.body.filter.networkName = "";
          opts.body.filter.osVersionContains = ["Service Pack 1"];
          opts.body.filter.externalIpContains = ["192.168.0.1/24","10.1"];
          opts.body.filter.firstSeenLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.osTypes = [""];
          opts.body.filter.deviceReviews = [""];
          opts.body.filter.gatewayMacAddress = "";
          opts.body.filter.osName = "";
          opts.body.filter.lastSeenGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.manufacturerContains = ["Company"];
          opts.body.filter.period = "latest";
          opts.body.filter.firstSeenBetween = "1514978890136-1514978650130";
          opts.body.filter.hostnames = [""];
          opts.body.filter.localIpContains = ["192.168.0.1/24","10.1"];
          opts.body.filter.deviceFunctionContains = ["security,mobile"];
          opts.body.filter.tcpPortsContains = [80,24];
          opts.body.filter.lastSeenLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.knownFingerprintingData = ["Manufacturer"];
          opts.body.filter.firstSeenGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.macAddress = "";
          opts.body.filter.firstSeenLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.localIp = "";
          opts.body.filter.managedStates = [""];
          opts.body.filter.lastSeenGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.manufacturer = "";
          opts.body.filter.subnetAddressContains = ["192.168.0.1/24","10.1"];
          opts.body.filter.siteIds = ["225494730938493804"];
          opts.body.filter.accountIds = ["225494730938493804"];
          opts.body.filter.gatewayMacAddressContains = ["aa:ee:b1"];
          opts.body.filter.osType = "";
          opts.body.filter.firstSeenGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.macAddressContains = ["aa:ee:b1"];
          opts.body.filter.lastSeenBetween = "1514978890136-1514978650130";
          opts.body.filter.deviceType = "Server/Workstation/...";
          opts.body.filter.lastSeenLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.tagNameContains = ["iot"];
          opts.body.filter.domains = ["mybusiness","workgroup"];
          opts.body.filter.siteNames = ["Office","Test"];
          opts.body.data = new S1MgmtApi.SchemasDeviceReviewSchemaData();
          opts.body.data.deviceReview = "Not Reviewed";
          opts.body.data.reasonDetails = "";
          opts.body.data.reason = "";

          instance.webApiRangerDeviceReviewPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRangerDeviceReviewinventoryIdPut', function() {
        it('should call webApiRangerDeviceReviewinventoryIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRangerDeviceReviewinventoryIdPut call and complete the assertions
          /*
          var inventoryId = "inventoryId_example";
          var opts = {};
          opts.body = new S1MgmtApi.SchemasDeviceReviewSchemaPut();
          opts.body.data = new S1MgmtApi.SchemasDeviceReviewSchemaData();
          opts.body.data.deviceReview = "Not Reviewed";
          opts.body.data.reasonDetails = "";
          opts.body.data.reason = "";

          instance.webApiRangerDeviceReviewinventoryIdPut(inventoryId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SchemasRangerTableViewSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SchemasRangerTableViewSchema200Data);
                  expect(data.data.previousOsVersion).to.be.a('string');
              expect(data.data.previousOsVersion).to.be("");
              expect(data.data.hasUserLabel).to.be.a('boolean');
              expect(data.data.hasUserLabel).to.be(false);
              {
                let dataCtr = data.data.tcpPorts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              expect(data.data.lastSeen).to.be.a(Date);
              expect(data.data.lastSeen).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.osVersion).to.be.a('string');
              expect(data.data.osVersion).to.be("");
              {
                let dataCtr = data.data.deviceReviewLog;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.SchemasRangerTableViewSchemaMany200DeviceReviewLog);
                  expect(data.username).to.be.a('string');
                  expect(data.username).to.be("");
                  expect(data.reasonDetails).to.be.a('string');
                  expect(data.reasonDetails).to.be("");
                  expect(data.updatedAt).to.be.a('string');
                  expect(data.updatedAt).to.be("");
                  expect(data.current).to.be.a('string');
                  expect(data.current).to.be("");
                  expect(data.reason).to.be.a('string');
                  expect(data.reason).to.be("");
                  expect(data.previous).to.be.a('string');
                  expect(data.previous).to.be("");
  
                        }
              }
              expect(data.data.labelUpdatedAt).to.be.a(Date);
              expect(data.data.labelUpdatedAt).to.be(2018-02-27T04:49:26.257525Z);
              {
                let dataCtr = data.data.networks;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.SchemasRangerTableViewSchemaMany200Networks);
                  expect(data.gatewayIpAddress).to.be.a('string');
                  expect(data.gatewayIpAddress).to.be("");
                  expect(data.gatewayMacAddress).to.be.a('string');
                  expect(data.gatewayMacAddress).to.be("");
                  expect(data.externalIp).to.be.a('string');
                  expect(data.externalIp).to.be("");
                  expect(data.ip).to.be.a('string');
                  expect(data.ip).to.be("");
                  expect(data.networkName).to.be.a('string');
                  expect(data.networkName).to.be("");
                  expect(data.subnetAddress).to.be.a('string');
                  expect(data.subnetAddress).to.be("");
  
                        }
              }
              expect(data.data.gatewayIpAddress).to.be.a('string');
              expect(data.data.gatewayIpAddress).to.be("");
              {
                let dataCtr = data.data.discoveryMethods;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.localIp).to.be.a('string');
              expect(data.data.localIp).to.be("");
              expect(data.data.hasIdentity).to.be.a('boolean');
              expect(data.data.hasIdentity).to.be(false);
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.gatewayMacAddress).to.be.a('string');
              expect(data.data.gatewayMacAddress).to.be("");
              {
                let dataCtr = data.data.udpPorts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              expect(data.data.deviceReview).to.be.a('string');
              expect(data.data.deviceReview).to.be("");
              expect(data.data.externalIp).to.be.a('string');
              expect(data.data.externalIp).to.be("");
              expect(data.data.deviceFunction).to.be.a('string');
              expect(data.data.deviceFunction).to.be("Server");
              expect(data.data.subnetAddress).to.be.a('string');
              expect(data.data.subnetAddress).to.be("");
              expect(data.data.agentId).to.be.a('string');
              expect(data.data.agentId).to.be("225494730938493804");
              {
                let dataCtr = data.data.hostnames;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.previousOsType).to.be.a('string');
              expect(data.data.previousOsType).to.be("");
              expect(data.data.macAddress).to.be.a('string');
              expect(data.data.macAddress).to.be("");
              {
                let dataCtr = data.data.ipAddresses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.firstSeen).to.be.a(Date);
              expect(data.data.firstSeen).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.previousDeviceFunction).to.be.a('string');
              expect(data.data.previousDeviceFunction).to.be("Server");
              expect(data.data.labelUserName).to.be.a('string');
              expect(data.data.labelUserName).to.be("");
              expect(data.data.manufacturer).to.be.a('string');
              expect(data.data.manufacturer).to.be("");
              expect(data.data.siteName).to.be.a('string');
              expect(data.data.siteName).to.be("");
              expect(data.data.fingerPrintScore).to.be.a('number');
              expect(data.data.fingerPrintScore).to.be(0);
              expect(data.data.osType).to.be.a('string');
              expect(data.data.osType).to.be("");
              expect(data.data.domain).to.be.a('string');
              expect(data.data.domain).to.be("");
              expect(data.data.networkName).to.be.a('string');
              expect(data.data.networkName).to.be("");
              expect(data.data.deviceType).to.be.a('string');
              expect(data.data.deviceType).to.be("Server");
              {
                let dataCtr = data.data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.SchemasRangerTableViewSchemaMany200Tags);
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.kind).to.be.a('string');
                  expect(data.kind).to.be("Vulnerability");
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("225494730938493804");
  
                        }
              }
              expect(data.data.managedState).to.be.a('string');
              expect(data.data.managedState).to.be("");
              expect(data.data.osName).to.be.a('string');
              expect(data.data.osName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRangerReportCsvGet', function() {
        it('should call webApiRangerReportCsvGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRangerReportCsvGet call
          /*
          var opts = {};
          opts.agentIds = ["agentIds_example"];
          opts.externalIp = "externalIp_example";
          opts.managedState = "managedState_example";
          opts.discoveryMethods = ["discoveryMethods_example"];
          opts.udpPortsContains = [3.4];
          opts.hostnamesContains = ["hostnamesContains_example"];
          opts.osVersion = "osVersion_example";
          opts.deviceTypes = ["deviceTypes_example"];
          opts.ids = ["ids_example"];
          opts.networkNameContains = ["networkNameContains_example"];
          opts.query = "query_example";
          opts.networkName = "networkName_example";
          opts.osVersionContains = ["osVersionContains_example"];
          opts.externalIpContains = ["externalIpContains_example"];
          opts.firstSeenLte = new Date("2013-10-20T19:20:30+01:00");
          opts.osTypes = ["osTypes_example"];
          opts.deviceReviews = ["deviceReviews_example"];
          opts.gatewayMacAddress = "gatewayMacAddress_example";
          opts.osName = "osName_example";
          opts.lastSeenGt = new Date("2013-10-20T19:20:30+01:00");
          opts.manufacturerContains = ["manufacturerContains_example"];
          opts.period = "latest";
          opts.firstSeenBetween = "firstSeenBetween_example";
          opts.hostnames = ["hostnames_example"];
          opts.localIpContains = ["localIpContains_example"];
          opts.deviceFunctionContains = ["deviceFunctionContains_example"];
          opts.tcpPortsContains = [3.4];
          opts.lastSeenLte = new Date("2013-10-20T19:20:30+01:00");
          opts.knownFingerprintingData = ["knownFingerprintingData_example"];
          opts.firstSeenGt = new Date("2013-10-20T19:20:30+01:00");
          opts.macAddress = "macAddress_example";
          opts.firstSeenLt = new Date("2013-10-20T19:20:30+01:00");
          opts.localIp = "localIp_example";
          opts.managedStates = ["managedStates_example"];
          opts.lastSeenGte = new Date("2013-10-20T19:20:30+01:00");
          opts.manufacturer = "manufacturer_example";
          opts.subnetAddressContains = ["subnetAddressContains_example"];
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.gatewayMacAddressContains = ["gatewayMacAddressContains_example"];
          opts.osType = "osType_example";
          opts.firstSeenGte = new Date("2013-10-20T19:20:30+01:00");
          opts.macAddressContains = ["macAddressContains_example"];
          opts.lastSeenBetween = "lastSeenBetween_example";
          opts.deviceType = "deviceType_example";
          opts.lastSeenLt = new Date("2013-10-20T19:20:30+01:00");
          opts.tagNameContains = ["tagNameContains_example"];
          opts.domains = ["domains_example"];
          opts.siteNames = ["siteNames_example"];

          instance.webApiRangerReportCsvGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRangerSettingsGet', function() {
        it('should call webApiRangerSettingsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRangerSettingsGet call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.siteIds = ["siteIds_example"];

          instance.webApiRangerSettingsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SchemasRangerSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SchemasRangerSettingsSchema200Data);
                  expect(data.data.snmpScan).to.be.a('boolean');
              expect(data.data.snmpScan).to.be(false);
              expect(data.data.accountId).to.be.a('string');
              expect(data.data.accountId).to.be("225494730938493804");
              expect(data.data.useFullDnsScan).to.be.a('boolean');
              expect(data.data.useFullDnsScan).to.be(false);
              expect(data.data.icmpScan).to.be.a('boolean');
              expect(data.data.icmpScan).to.be(false);
              {
                let dataCtr = data.data.tcpPorts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.scanOnlyLocalSubnets).to.be.a('boolean');
              expect(data.data.scanOnlyLocalSubnets).to.be(false);
              expect(data.data.minAgentsInNetworkToScan).to.be.a('number');
              expect(data.data.minAgentsInNetworkToScan).to.be(0);
              expect(data.data.smbScan).to.be.a('boolean');
              expect(data.data.smbScan).to.be(false);
              expect(data.data.combineDevices).to.be.a('boolean');
              expect(data.data.combineDevices).to.be(false);
              expect(data.data.udpPortScan).to.be.a('boolean');
              expect(data.data.udpPortScan).to.be(false);
              {
                let dataCtr = data.data.udpPorts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              {
                let dataCtr = data.data.specificPorts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.SchemasRangerSettingsSchema200DataSpecificPorts);
                  {
                    let dataCtr = data.values;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be(0);
                    }
                  }
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("single");
  
                        }
              }
              expect(data.data.enabled).to.be.a('boolean');
              expect(data.data.enabled).to.be(false);
              expect(data.data.usePeriodicSnapshots).to.be.a('boolean');
              expect(data.data.usePeriodicSnapshots).to.be(false);
              expect(data.data.rdnsScan).to.be.a('boolean');
              expect(data.data.rdnsScan).to.be(false);
              expect(data.data.newNetworkInHours).to.be.a('number');
              expect(data.data.newNetworkInHours).to.be(0);
              expect(data.data.multiScanSsdp).to.be.a('boolean');
              expect(data.data.multiScanSsdp).to.be(false);
              expect(data.data.autoEnableNetworks).to.be.a('boolean');
              expect(data.data.autoEnableNetworks).to.be(false);
              expect(data.data.snapshotPeriod).to.be.a('number');
              expect(data.data.snapshotPeriod).to.be(0);
              expect(data.data.networkDecommissionValue).to.be.a('number');
              expect(data.data.networkDecommissionValue).to.be(0);
              expect(data.data.tcpPortScan).to.be.a('boolean');
              expect(data.data.tcpPortScan).to.be(false);
              {
                let dataCtr = data.data.restrictions;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.SchemasRangerSettingsSchema200DataRestrictions);
                  expect(data.annotation).to.be.a('string');
                  expect(data.annotation).to.be("");
                  {
                    let dataCtr = data.values;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("ip");
  
                        }
              }
              expect(data.data.mdnsScan).to.be.a('boolean');
              expect(data.data.mdnsScan).to.be(false);
              expect(data.data.useSpecificPorts).to.be.a('boolean');
              expect(data.data.useSpecificPorts).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRangerSettingsPut', function() {
        it('should call webApiRangerSettingsPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRangerSettingsPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.SchemasPutRangerSchema();
          opts.body.filter = new S1MgmtApi.SchemasPutRangerSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.SchemasPutRangerSchemaData();
          opts.body.data.snmpScan = false;
          opts.body.data.accountId = "225494730938493804";
          opts.body.data.useFullDnsScan = false;
          opts.body.data.icmpScan = false;
          opts.body.data.tcpPorts = [0];
          opts.body.data.scopeId = "225494730938493804";
          opts.body.data.scanOnlyLocalSubnets = false;
          opts.body.data.minAgentsInNetworkToScan = 0;
          opts.body.data.smbScan = false;
          opts.body.data.combineDevices = false;
          opts.body.data.udpPortScan = false;
          opts.body.data.udpPorts = [0];
          opts.body.data.specificPorts = [new S1MgmtApi.SchemasRangerSettingsSchema200DataSpecificPorts()];
          opts.body.data.specificPorts[0].values = [0];
          opts.body.data.specificPorts[0].type = "single";
          opts.body.data.enabled = false;
          opts.body.data.usePeriodicSnapshots = false;
          opts.body.data.rdnsScan = false;
          opts.body.data.newNetworkInHours = 0;
          opts.body.data.multiScanSsdp = false;
          opts.body.data.autoEnableNetworks = false;
          opts.body.data.snapshotPeriod = 0;
          opts.body.data.networkDecommissionValue = 0;
          opts.body.data.tcpPortScan = false;
          opts.body.data.restrictions = [new S1MgmtApi.SchemasRangerSettingsSchema200DataRestrictions()];
          opts.body.data.restrictions[0].annotation = "";
          opts.body.data.restrictions[0].values = [""];
          opts.body.data.restrictions[0].type = "ip";
          opts.body.data.mdnsScan = false;
          opts.body.data.useSpecificPorts = false;

          instance.webApiRangerSettingsPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SchemasRangerSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SchemasRangerSettingsSchema200Data);
                  expect(data.data.snmpScan).to.be.a('boolean');
              expect(data.data.snmpScan).to.be(false);
              expect(data.data.accountId).to.be.a('string');
              expect(data.data.accountId).to.be("225494730938493804");
              expect(data.data.useFullDnsScan).to.be.a('boolean');
              expect(data.data.useFullDnsScan).to.be(false);
              expect(data.data.icmpScan).to.be.a('boolean');
              expect(data.data.icmpScan).to.be(false);
              {
                let dataCtr = data.data.tcpPorts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.scanOnlyLocalSubnets).to.be.a('boolean');
              expect(data.data.scanOnlyLocalSubnets).to.be(false);
              expect(data.data.minAgentsInNetworkToScan).to.be.a('number');
              expect(data.data.minAgentsInNetworkToScan).to.be(0);
              expect(data.data.smbScan).to.be.a('boolean');
              expect(data.data.smbScan).to.be(false);
              expect(data.data.combineDevices).to.be.a('boolean');
              expect(data.data.combineDevices).to.be(false);
              expect(data.data.udpPortScan).to.be.a('boolean');
              expect(data.data.udpPortScan).to.be(false);
              {
                let dataCtr = data.data.udpPorts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('number');
                  expect(data).to.be(0);
                }
              }
              {
                let dataCtr = data.data.specificPorts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.SchemasRangerSettingsSchema200DataSpecificPorts);
                  {
                    let dataCtr = data.values;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be(0);
                    }
                  }
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("single");
  
                        }
              }
              expect(data.data.enabled).to.be.a('boolean');
              expect(data.data.enabled).to.be(false);
              expect(data.data.usePeriodicSnapshots).to.be.a('boolean');
              expect(data.data.usePeriodicSnapshots).to.be(false);
              expect(data.data.rdnsScan).to.be.a('boolean');
              expect(data.data.rdnsScan).to.be(false);
              expect(data.data.newNetworkInHours).to.be.a('number');
              expect(data.data.newNetworkInHours).to.be(0);
              expect(data.data.multiScanSsdp).to.be.a('boolean');
              expect(data.data.multiScanSsdp).to.be(false);
              expect(data.data.autoEnableNetworks).to.be.a('boolean');
              expect(data.data.autoEnableNetworks).to.be(false);
              expect(data.data.snapshotPeriod).to.be.a('number');
              expect(data.data.snapshotPeriod).to.be(0);
              expect(data.data.networkDecommissionValue).to.be.a('number');
              expect(data.data.networkDecommissionValue).to.be(0);
              expect(data.data.tcpPortScan).to.be.a('boolean');
              expect(data.data.tcpPortScan).to.be(false);
              {
                let dataCtr = data.data.restrictions;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.SchemasRangerSettingsSchema200DataRestrictions);
                  expect(data.annotation).to.be.a('string');
                  expect(data.annotation).to.be("");
                  {
                    let dataCtr = data.values;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("ip");
  
                        }
              }
              expect(data.data.mdnsScan).to.be.a('boolean');
              expect(data.data.mdnsScan).to.be(false);
              expect(data.data.useSpecificPorts).to.be.a('boolean');
              expect(data.data.useSpecificPorts).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRangerTableViewGet', function() {
        it('should call webApiRangerTableViewGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRangerTableViewGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "null";
          opts.agentIds = ["agentIds_example"];
          opts.externalIp = "externalIp_example";
          opts.managedState = "managedState_example";
          opts.discoveryMethods = ["discoveryMethods_example"];
          opts.udpPortsContains = [3.4];
          opts.hostnamesContains = ["hostnamesContains_example"];
          opts.osVersion = "osVersion_example";
          opts.ids = ["ids_example"];
          opts.deviceTypes = ["deviceTypes_example"];
          opts.networkNameContains = ["networkNameContains_example"];
          opts.countOnly = false;
          opts.query = "query_example";
          opts.networkName = "networkName_example";
          opts.limit = 10;
          opts.externalIpContains = ["externalIpContains_example"];
          opts.firstSeenLte = new Date("2013-10-20T19:20:30+01:00");
          opts.osVersionContains = ["osVersionContains_example"];
          opts.osTypes = ["osTypes_example"];
          opts.skip = 56;
          opts.deviceReviews = ["deviceReviews_example"];
          opts.gatewayMacAddress = "gatewayMacAddress_example";
          opts.skipCount = null;
          opts.lastSeenGt = new Date("2013-10-20T19:20:30+01:00");
          opts.sortOrder = "null";
          opts.manufacturerContains = ["manufacturerContains_example"];
          opts.period = "latest";
          opts.firstSeenBetween = "firstSeenBetween_example";
          opts.hostnames = ["hostnames_example"];
          opts.localIpContains = ["localIpContains_example"];
          opts.deviceFunctionContains = ["deviceFunctionContains_example"];
          opts.tcpPortsContains = [3.4];
          opts.lastSeenLte = new Date("2013-10-20T19:20:30+01:00");
          opts.knownFingerprintingData = ["knownFingerprintingData_example"];
          opts.firstSeenGt = new Date("2013-10-20T19:20:30+01:00");
          opts.sortBy = "null";
          opts.macAddress = "macAddress_example";
          opts.firstSeenLt = new Date("2013-10-20T19:20:30+01:00");
          opts.localIp = "localIp_example";
          opts.managedStates = ["managedStates_example"];
          opts.lastSeenGte = new Date("2013-10-20T19:20:30+01:00");
          opts.manufacturer = "manufacturer_example";
          opts.subnetAddressContains = ["subnetAddressContains_example"];
          opts.siteNames = ["siteNames_example"];
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.gatewayMacAddressContains = ["gatewayMacAddressContains_example"];
          opts.osType = "osType_example";
          opts.firstSeenGte = new Date("2013-10-20T19:20:30+01:00");
          opts.macAddressContains = ["macAddressContains_example"];
          opts.lastSeenBetween = "lastSeenBetween_example";
          opts.deviceType = "deviceType_example";
          opts.lastSeenLt = new Date("2013-10-20T19:20:30+01:00");
          opts.tagNameContains = ["tagNameContains_example"];
          opts.domains = ["domains_example"];
          opts.osName = "osName_example";

          instance.webApiRangerTableViewGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SchemasRangerTableViewSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.SchemasRangerTableViewSchemaMany200Data);
                expect(data.previousOsVersion).to.be.a('string');
                expect(data.previousOsVersion).to.be("");
                expect(data.hasUserLabel).to.be.a('boolean');
                expect(data.hasUserLabel).to.be(false);
                {
                  let dataCtr = data.tcpPorts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }
                expect(data.lastSeen).to.be.a(Date);
                expect(data.lastSeen).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.osVersion).to.be.a('string');
                expect(data.osVersion).to.be("");
                {
                  let dataCtr = data.deviceReviewLog;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.SchemasRangerTableViewSchemaMany200DeviceReviewLog);
                    expect(data.username).to.be.a('string');
                    expect(data.username).to.be("");
                    expect(data.reasonDetails).to.be.a('string');
                    expect(data.reasonDetails).to.be("");
                    expect(data.updatedAt).to.be.a('string');
                    expect(data.updatedAt).to.be("");
                    expect(data.current).to.be.a('string');
                    expect(data.current).to.be("");
                    expect(data.reason).to.be.a('string');
                    expect(data.reason).to.be("");
                    expect(data.previous).to.be.a('string');
                    expect(data.previous).to.be("");
    
                          }
                }
                expect(data.labelUpdatedAt).to.be.a(Date);
                expect(data.labelUpdatedAt).to.be(2018-02-27T04:49:26.257525Z);
                {
                  let dataCtr = data.networks;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.SchemasRangerTableViewSchemaMany200Networks);
                    expect(data.gatewayIpAddress).to.be.a('string');
                    expect(data.gatewayIpAddress).to.be("");
                    expect(data.gatewayMacAddress).to.be.a('string');
                    expect(data.gatewayMacAddress).to.be("");
                    expect(data.externalIp).to.be.a('string');
                    expect(data.externalIp).to.be("");
                    expect(data.ip).to.be.a('string');
                    expect(data.ip).to.be("");
                    expect(data.networkName).to.be.a('string');
                    expect(data.networkName).to.be("");
                    expect(data.subnetAddress).to.be.a('string');
                    expect(data.subnetAddress).to.be("");
    
                          }
                }
                expect(data.gatewayIpAddress).to.be.a('string');
                expect(data.gatewayIpAddress).to.be("");
                {
                  let dataCtr = data.discoveryMethods;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.localIp).to.be.a('string');
                expect(data.localIp).to.be("");
                expect(data.hasIdentity).to.be.a('boolean');
                expect(data.hasIdentity).to.be(false);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.gatewayMacAddress).to.be.a('string');
                expect(data.gatewayMacAddress).to.be("");
                {
                  let dataCtr = data.udpPorts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }
                expect(data.deviceReview).to.be.a('string');
                expect(data.deviceReview).to.be("");
                expect(data.externalIp).to.be.a('string');
                expect(data.externalIp).to.be("");
                expect(data.deviceFunction).to.be.a('string');
                expect(data.deviceFunction).to.be("Server");
                expect(data.subnetAddress).to.be.a('string');
                expect(data.subnetAddress).to.be("");
                expect(data.agentId).to.be.a('string');
                expect(data.agentId).to.be("225494730938493804");
                {
                  let dataCtr = data.hostnames;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.previousOsType).to.be.a('string');
                expect(data.previousOsType).to.be("");
                expect(data.macAddress).to.be.a('string');
                expect(data.macAddress).to.be("");
                {
                  let dataCtr = data.ipAddresses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.firstSeen).to.be.a(Date);
                expect(data.firstSeen).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.previousDeviceFunction).to.be.a('string');
                expect(data.previousDeviceFunction).to.be("Server");
                expect(data.labelUserName).to.be.a('string');
                expect(data.labelUserName).to.be("");
                expect(data.manufacturer).to.be.a('string');
                expect(data.manufacturer).to.be("");
                expect(data.siteName).to.be.a('string');
                expect(data.siteName).to.be("");
                expect(data.fingerPrintScore).to.be.a('number');
                expect(data.fingerPrintScore).to.be(0);
                expect(data.osType).to.be.a('string');
                expect(data.osType).to.be("");
                expect(data.domain).to.be.a('string');
                expect(data.domain).to.be("");
                expect(data.networkName).to.be.a('string');
                expect(data.networkName).to.be("");
                expect(data.deviceType).to.be.a('string');
                expect(data.deviceType).to.be("Server");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.SchemasRangerTableViewSchemaMany200Tags);
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.kind).to.be.a('string');
                    expect(data.kind).to.be("Vulnerability");
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("225494730938493804");
    
                          }
                }
                expect(data.managedState).to.be.a('string');
                expect(data.managedState).to.be("");
                expect(data.osName).to.be.a('string');
                expect(data.osName).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRangerTagsPost', function() {
        it('should call webApiRangerTagsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRangerTagsPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.SchemasDeviceTagsSchema();
          opts.body.filter = new S1MgmtApi.SchemasDeviceReviewSchemaFilter();
          opts.body.filter.hasUserLabel = false;
          opts.body.filter.agentIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.externalIp = "";
          opts.body.filter.managedState = "";
          opts.body.filter.discoveryMethods = [""];
          opts.body.filter.udpPortsContains = [137,2002];
          opts.body.filter.hostnamesContains = ["s1_host","SomeHost"];
          opts.body.filter.osVersion = "";
          opts.body.filter.deviceTypes = [""];
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.networkNameContains = ["Office"];
          opts.body.filter.query = "";
          opts.body.filter.networkName = "";
          opts.body.filter.osVersionContains = ["Service Pack 1"];
          opts.body.filter.externalIpContains = ["192.168.0.1/24","10.1"];
          opts.body.filter.firstSeenLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.osTypes = [""];
          opts.body.filter.deviceReviews = [""];
          opts.body.filter.gatewayMacAddress = "";
          opts.body.filter.osName = "";
          opts.body.filter.lastSeenGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.manufacturerContains = ["Company"];
          opts.body.filter.period = "latest";
          opts.body.filter.firstSeenBetween = "1514978890136-1514978650130";
          opts.body.filter.hostnames = [""];
          opts.body.filter.localIpContains = ["192.168.0.1/24","10.1"];
          opts.body.filter.deviceFunctionContains = ["security,mobile"];
          opts.body.filter.tcpPortsContains = [80,24];
          opts.body.filter.lastSeenLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.knownFingerprintingData = ["Manufacturer"];
          opts.body.filter.firstSeenGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.macAddress = "";
          opts.body.filter.firstSeenLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.localIp = "";
          opts.body.filter.managedStates = [""];
          opts.body.filter.lastSeenGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.manufacturer = "";
          opts.body.filter.subnetAddressContains = ["192.168.0.1/24","10.1"];
          opts.body.filter.siteIds = ["225494730938493804"];
          opts.body.filter.accountIds = ["225494730938493804"];
          opts.body.filter.gatewayMacAddressContains = ["aa:ee:b1"];
          opts.body.filter.osType = "";
          opts.body.filter.firstSeenGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.macAddressContains = ["aa:ee:b1"];
          opts.body.filter.lastSeenBetween = "1514978890136-1514978650130";
          opts.body.filter.deviceType = "Server/Workstation/...";
          opts.body.filter.lastSeenLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.tagNameContains = ["iot"];
          opts.body.filter.domains = ["mybusiness","workgroup"];
          opts.body.filter.siteNames = ["Office","Test"];
          opts.body.data = [new S1MgmtApi.SchemasRangerTableViewSchemaMany200Tags()];
          opts.body.data[0].description = "";
          opts.body.data[0].name = "";
          opts.body.data[0].kind = "Vulnerability";
          opts.body.data[0].id = "225494730938493804";

          instance.webApiRangerTagsPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRangerinventoryIdJsonExportGet', function() {
        it('should call webApiRangerinventoryIdJsonExportGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRangerinventoryIdJsonExportGet call
          /*
          var inventoryId = "inventoryId_example";

          instance.webApiRangerinventoryIdJsonExportGet(inventoryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRangerinventoryIdJsonGet', function() {
        it('should call webApiRangerinventoryIdJsonGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRangerinventoryIdJsonGet call and complete the assertions
          /*
          var inventoryId = "inventoryId_example";

          instance.webApiRangerinventoryIdJsonGet(inventoryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.RawDataSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
