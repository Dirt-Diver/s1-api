/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.DeviceControlApi();
  });

  describe('(package)', function() {
    describe('DeviceControlApi', function() {
      describe('webApiDeviceControlConfigurationGet', function() {
        it('should call webApiDeviceControlConfigurationGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiDeviceControlConfigurationGet call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.groupIds = ["groupIds_example"];
          opts.tenant = true;
          opts.siteIds = ["siteIds_example"];

          instance.webApiDeviceControlConfigurationGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.DeviceControlSchemasDeviceSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.DeviceControlSchemasDeviceSettingsSchema200Data);
                  expect(data.data.reportBlocked).to.be.a('boolean');
              expect(data.data.reportBlocked).to.be(false);
              expect(data.data.disableRfcomm).to.be.a('boolean');
              expect(data.data.disableRfcomm).to.be(false);
              expect(data.data.disallowAccessPermissionControl).to.be.a('boolean');
              expect(data.data.disallowAccessPermissionControl).to.be(false);
              expect(data.data.reportReadOnly).to.be.a('boolean');
              expect(data.data.reportReadOnly).to.be(false);
              expect(data.data.enabled).to.be.a('boolean');
              expect(data.data.enabled).to.be(false);
              expect(data.data.reportApproved).to.be.a('boolean');
              expect(data.data.reportApproved).to.be(false);
              expect(data.data.inherits).to.be.a('boolean');
              expect(data.data.inherits).to.be(false);
              expect(data.data.disableBleCommunication).to.be.a('boolean');
              expect(data.data.disableBleCommunication).to.be(false);
              expect(data.data.inheritedFrom).to.be.a('string');
              expect(data.data.inheritedFrom).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiDeviceControlConfigurationPut', function() {
        it('should call webApiDeviceControlConfigurationPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiDeviceControlConfigurationPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.DeviceControlSchemasPostDeviceSettingsSchema();
          opts.body.filter = new S1MgmtApi.ExclusionsSchemasPostExclusionSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.DeviceControlSchemasPostDeviceSettingsSchemaData();
          opts.body.data.reportBlocked = false;
          opts.body.data.disableRfcomm = false;
          opts.body.data.disallowAccessPermissionControl = false;
          opts.body.data.reportReadOnly = false;
          opts.body.data.enabled = false;
          opts.body.data.reportApproved = false;
          opts.body.data.inherits = false;
          opts.body.data.disableBleCommunication = false;
          opts.body.data.inheritedFrom = "";

          instance.webApiDeviceControlConfigurationPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.DeviceControlSchemasDeviceSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.DeviceControlSchemasDeviceSettingsSchema200Data);
                  expect(data.data.reportBlocked).to.be.a('boolean');
              expect(data.data.reportBlocked).to.be(false);
              expect(data.data.disableRfcomm).to.be.a('boolean');
              expect(data.data.disableRfcomm).to.be(false);
              expect(data.data.disallowAccessPermissionControl).to.be.a('boolean');
              expect(data.data.disallowAccessPermissionControl).to.be(false);
              expect(data.data.reportReadOnly).to.be.a('boolean');
              expect(data.data.reportReadOnly).to.be(false);
              expect(data.data.enabled).to.be.a('boolean');
              expect(data.data.enabled).to.be(false);
              expect(data.data.reportApproved).to.be.a('boolean');
              expect(data.data.reportApproved).to.be(false);
              expect(data.data.inherits).to.be.a('boolean');
              expect(data.data.inherits).to.be(false);
              expect(data.data.disableBleCommunication).to.be.a('boolean');
              expect(data.data.disableBleCommunication).to.be(false);
              expect(data.data.inheritedFrom).to.be.a('string');
              expect(data.data.inheritedFrom).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiDeviceControlCopyRulesPost', function() {
        it('should call webApiDeviceControlCopyRulesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiDeviceControlCopyRulesPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.DeviceControlSchemasCopyRuleSchema();
          opts.body.filter = new S1MgmtApi.DeviceControlSchemasRuleDeleteSchemaFilter();
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.versions = [""];
          opts.body.filter.uids = [""];
          opts.body.filter.actions = ["Allow"];
          opts.body.filter.deviceNames = [""];
          opts.body.filter.interfaces = ["USB"];
          opts.body.filter.deviceClasses = ["02h"];
          opts.body.filter.query = "";
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.accessPermissions = ["Read-Only"];
          opts.body.filter.scopes = ["site"];
          opts.body.filter.statuses = ["Enabled"];
          opts.body.filter.deviceIds = ["02"];
          opts.body.filter.productIds = ["02"];
          opts.body.filter.ruleName = "";
          opts.body.filter.bluetoothAddresses = [""];
          opts.body.filter.vendorIds = [""];
          opts.body.filter.tenant = false;
          opts.body.filter.createdAtBetween = "1514978764288-1514978999999";
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.gattServices = [""];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.deviceInformationServiceInfoKeys = [""];
          opts.body.filter.manufacturerNames = [""];
          opts.body.filter.serviceClasses = ["02"];
          opts.body.filter.minorClasses = [""];
          opts.body.data = [new S1MgmtApi.DeviceControlSchemasCopyRuleSchemaData()];
          opts.body.data[0].accountId = "225494730938493804";
          opts.body.data[0].groupIds = ["225494730938493804"];
          opts.body.data[0].siteId = "225494730938493804";

          instance.webApiDeviceControlCopyRulesPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiDeviceControlDelete', function() {
        it('should call webApiDeviceControlDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiDeviceControlDelete call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.DeviceControlSchemasRuleDeleteSchema();
          opts.body.filter = new S1MgmtApi.DeviceControlSchemasRuleDeleteSchemaFilter();
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.versions = [""];
          opts.body.filter.uids = [""];
          opts.body.filter.actions = ["Allow"];
          opts.body.filter.deviceNames = [""];
          opts.body.filter.interfaces = ["USB"];
          opts.body.filter.deviceClasses = ["02h"];
          opts.body.filter.query = "";
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.accessPermissions = ["Read-Only"];
          opts.body.filter.scopes = ["site"];
          opts.body.filter.statuses = ["Enabled"];
          opts.body.filter.deviceIds = ["02"];
          opts.body.filter.productIds = ["02"];
          opts.body.filter.ruleName = "";
          opts.body.filter.bluetoothAddresses = [""];
          opts.body.filter.vendorIds = [""];
          opts.body.filter.tenant = false;
          opts.body.filter.createdAtBetween = "1514978764288-1514978999999";
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.gattServices = [""];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.deviceInformationServiceInfoKeys = [""];
          opts.body.filter.manufacturerNames = [""];
          opts.body.filter.serviceClasses = ["02"];
          opts.body.filter.minorClasses = [""];

          instance.webApiDeviceControlDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiDeviceControlEnablePut', function() {
        it('should call webApiDeviceControlEnablePut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiDeviceControlEnablePut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.DeviceControlSchemasEnableRuleSchema();
          opts.body.filter = new S1MgmtApi.DeviceControlSchemasRuleDeleteSchemaFilter();
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.versions = [""];
          opts.body.filter.uids = [""];
          opts.body.filter.actions = ["Allow"];
          opts.body.filter.deviceNames = [""];
          opts.body.filter.interfaces = ["USB"];
          opts.body.filter.deviceClasses = ["02h"];
          opts.body.filter.query = "";
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.accessPermissions = ["Read-Only"];
          opts.body.filter.scopes = ["site"];
          opts.body.filter.statuses = ["Enabled"];
          opts.body.filter.deviceIds = ["02"];
          opts.body.filter.productIds = ["02"];
          opts.body.filter.ruleName = "";
          opts.body.filter.bluetoothAddresses = [""];
          opts.body.filter.vendorIds = [""];
          opts.body.filter.tenant = false;
          opts.body.filter.createdAtBetween = "1514978764288-1514978999999";
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.gattServices = [""];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.deviceInformationServiceInfoKeys = [""];
          opts.body.filter.manufacturerNames = [""];
          opts.body.filter.serviceClasses = ["02"];
          opts.body.filter.minorClasses = [""];
          opts.body.data = new S1MgmtApi.DeviceControlSchemasEnableRuleSchemaData();
          opts.body.data.status = "Enabled";

          instance.webApiDeviceControlEnablePut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiDeviceControlEventsGet', function() {
        it('should call webApiDeviceControlEventsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiDeviceControlEventsGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "null";
          opts.agentIds = ["agentIds_example"];
          opts.uids = ["uids_example"];
          opts.interfaces = ["interfaces_example"];
          opts.deviceClasses = ["deviceClasses_example"];
          opts.query = "query_example";
          opts.ids = ["ids_example"];
          opts.countOnly = false;
          opts.limit = 10;
          opts.skip = 56;
          opts.eventTypes = ["eventTypes_example"];
          opts.skipCount = null;
          opts.sortOrder = "null";
          opts.accessPermissions = ["accessPermissions_example"];
          opts.deviceIds = ["deviceIds_example"];
          opts.eventTimeGte = new Date("2013-10-20T19:20:30+01:00");
          opts.productIds = ["productIds_example"];
          opts.eventTimeBetween = "eventTimeBetween_example";
          opts.sortBy = "null";
          opts.eventTimeLt = new Date("2013-10-20T19:20:30+01:00");
          opts.vendorIds = ["vendorIds_example"];
          opts.tenant = true;
          opts.groupIds = ["groupIds_example"];
          opts.eventTimeGt = new Date("2013-10-20T19:20:30+01:00");
          opts.eventIds = ["eventIds_example"];
          opts.eventTimeLte = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.serviceClasses = ["serviceClasses_example"];

          instance.webApiDeviceControlEventsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.DeviceControlSchemasDeviceEventResponseSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.DeviceControlSchemasDeviceEventResponseSchemaMany200Data);
                expect(data.profileUuids).to.be.a('string');
                expect(data.profileUuids).to.be("");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.eventType).to.be.a('string');
                expect(data.eventType).to.be("");
                expect(data.uId).to.be.a('string');
                expect(data.uId).to.be("02");
                expect(data.productId).to.be.a('string');
                expect(data.productId).to.be("02");
                expect(data.serviceClass).to.be.a('string');
                expect(data.serviceClass).to.be("02");
                expect(data.vendorId).to.be.a('string');
                expect(data.vendorId).to.be("02");
                expect(data.computerName).to.be.a('string');
                expect(data.computerName).to.be("JOHN-WIN-4125");
                expect(data.eventId).to.be.a('string');
                expect(data.eventId).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.minorClass).to.be.a('string');
                expect(data.minorClass).to.be("");
                expect(data.deviceClass).to.be.a('string');
                expect(data.deviceClass).to.be("02h");
                expect(data.agentId).to.be.a('string');
                expect(data.agentId).to.be("225494730938493804");
                expect(data.lmpVersion).to.be.a('string');
                expect(data.lmpVersion).to.be("");
                expect(data.eventTime).to.be.a(Date);
                expect(data.eventTime).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.deviceId).to.be.a('string');
                expect(data.deviceId).to.be("02");
                expect(data.ruleId).to.be.a('string');
                expect(data.ruleId).to.be("225494730938493804");
                expect(data.deviceName).to.be.a('string');
                expect(data.deviceName).to.be("");
                expect(data.lastLoggedInUserName).to.be.a('string');
                expect(data.lastLoggedInUserName).to.be("janedoe3");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data._interface).to.be.a('string');
                expect(data._interface).to.be("USB");
                expect(data.accessPermission).to.be.a('string');
                expect(data.accessPermission).to.be("Read-Only");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiDeviceControlExportGet', function() {
        it('should call webApiDeviceControlExportGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiDeviceControlExportGet call
          /*
          var opts = {};
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.versions = ["versions_example"];
          opts.uids = ["uids_example"];
          opts.actions = ["actions_example"];
          opts.deviceNames = ["deviceNames_example"];
          opts.interfaces = ["interfaces_example"];
          opts.deviceClasses = ["deviceClasses_example"];
          opts.query = "query_example";
          opts.ids = ["ids_example"];
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.accessPermissions = ["accessPermissions_example"];
          opts.scopes = ["scopes_example"];
          opts.statuses = ["statuses_example"];
          opts.deviceIds = ["deviceIds_example"];
          opts.productIds = ["productIds_example"];
          opts.ruleName = "ruleName_example";
          opts.bluetoothAddresses = ["bluetoothAddresses_example"];
          opts.vendorIds = ["vendorIds_example"];
          opts.tenant = true;
          opts.createdAtBetween = "createdAtBetween_example";
          opts.groupIds = ["groupIds_example"];
          opts.gattServices = ["gattServices_example"];
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.deviceInformationServiceInfoKeys = ["deviceInformationServiceInfoKeys_example"];
          opts.manufacturerNames = ["manufacturerNames_example"];
          opts.serviceClasses = ["serviceClasses_example"];
          opts.minorClasses = ["minorClasses_example"];

          instance.webApiDeviceControlExportGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiDeviceControlGet', function() {
        it('should call webApiDeviceControlGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiDeviceControlGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "null";
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.versions = ["versions_example"];
          opts.uids = ["uids_example"];
          opts.actions = ["actions_example"];
          opts.deviceNames = ["deviceNames_example"];
          opts.interfaces = ["interfaces_example"];
          opts.deviceClasses = ["deviceClasses_example"];
          opts.query = "query_example";
          opts.ids = ["ids_example"];
          opts.countOnly = false;
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.limit = 10;
          opts.skip = 56;
          opts.skipCount = null;
          opts.sortOrder = "null";
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.accessPermissions = ["accessPermissions_example"];
          opts.scopes = ["scopes_example"];
          opts.statuses = ["statuses_example"];
          opts.deviceIds = ["deviceIds_example"];
          opts.productIds = ["productIds_example"];
          opts.disablePagination = true;
          opts.ruleName = "ruleName_example";
          opts.sortBy = "null";
          opts.bluetoothAddresses = ["bluetoothAddresses_example"];
          opts.vendorIds = ["vendorIds_example"];
          opts.tenant = true;
          opts.createdAtBetween = "createdAtBetween_example";
          opts.groupIds = ["groupIds_example"];
          opts.gattServices = ["gattServices_example"];
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.deviceInformationServiceInfoKeys = ["deviceInformationServiceInfoKeys_example"];
          opts.manufacturerNames = ["manufacturerNames_example"];
          opts.serviceClasses = ["serviceClasses_example"];
          opts.minorClasses = ["minorClasses_example"];

          instance.webApiDeviceControlGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.DeviceControlSchemasDeviceSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.DeviceControlSchemasDeviceSchemaMany200Data);
                expect(data.ruleType).to.be.a('string');
                expect(data.ruleType).to.be("class");
                expect(data.scopeId).to.be.a('string');
                expect(data.scopeId).to.be("225494730938493804");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.uid).to.be.a('string');
                expect(data.uid).to.be("");
                expect(data.productId).to.be.a('string');
                expect(data.productId).to.be("02");
                expect(data.vendorId).to.be.a('string');
                expect(data.vendorId).to.be("02");
                expect(data.deviceId).to.be.a('string');
                expect(data.deviceId).to.be("02");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.deviceClassName).to.be.a(Object);
                expect(data.deviceClassName).to.be();
                expect(data.creatorId).to.be.a('string');
                expect(data.creatorId).to.be("225494730938493804");
                expect(data.deviceClass).to.be.a('string');
                expect(data.deviceClass).to.be("02h");
                expect(data.deviceInformationServiceInfoValue).to.be.a('string');
                expect(data.deviceInformationServiceInfoValue).to.be("");
                expect(data.version).to.be.a('string');
                expect(data.version).to.be("");
                expect(data.ruleName).to.be.a('string');
                expect(data.ruleName).to.be("");
                expect(data.scopeName).to.be.a('string');
                expect(data.scopeName).to.be("");
                expect(data.scope).to.be.a('string');
                expect(data.scope).to.be("site");
                {
                  let dataCtr = data.gattService;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.action).to.be.a('string');
                expect(data.action).to.be("Allow");
                expect(data.order).to.be.a('number');
                expect(data.order).to.be(0);
                expect(data.deviceName).to.be.a('string');
                expect(data.deviceName).to.be("");
                expect(data.creator).to.be.a('string');
                expect(data.creator).to.be("");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.editable).to.be.a('boolean');
                expect(data.editable).to.be(false);
                expect(data._interface).to.be.a('string');
                expect(data._interface).to.be("USB");
                expect(data.deviceInformationServiceInfoKey).to.be.a('string');
                expect(data.deviceInformationServiceInfoKey).to.be("");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("Enabled");
                expect(data.accessPermission).to.be.a('string');
                expect(data.accessPermission).to.be("Read-Only");
                expect(data.bluetoothAddress).to.be.a('string');
                expect(data.bluetoothAddress).to.be("");
                expect(data.manufacturerName).to.be.a('string');
                expect(data.manufacturerName).to.be("");
                {
                  let dataCtr = data.minorClasses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("02");
                  }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiDeviceControlMoveRulesPost', function() {
        it('should call webApiDeviceControlMoveRulesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiDeviceControlMoveRulesPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.DeviceControlSchemasCopyRuleSchema();
          opts.body.filter = new S1MgmtApi.DeviceControlSchemasRuleDeleteSchemaFilter();
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.versions = [""];
          opts.body.filter.uids = [""];
          opts.body.filter.actions = ["Allow"];
          opts.body.filter.deviceNames = [""];
          opts.body.filter.interfaces = ["USB"];
          opts.body.filter.deviceClasses = ["02h"];
          opts.body.filter.query = "";
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.accessPermissions = ["Read-Only"];
          opts.body.filter.scopes = ["site"];
          opts.body.filter.statuses = ["Enabled"];
          opts.body.filter.deviceIds = ["02"];
          opts.body.filter.productIds = ["02"];
          opts.body.filter.ruleName = "";
          opts.body.filter.bluetoothAddresses = [""];
          opts.body.filter.vendorIds = [""];
          opts.body.filter.tenant = false;
          opts.body.filter.createdAtBetween = "1514978764288-1514978999999";
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.gattServices = [""];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.deviceInformationServiceInfoKeys = [""];
          opts.body.filter.manufacturerNames = [""];
          opts.body.filter.serviceClasses = ["02"];
          opts.body.filter.minorClasses = [""];
          opts.body.data = [new S1MgmtApi.DeviceControlSchemasCopyRuleSchemaData()];
          opts.body.data[0].accountId = "225494730938493804";
          opts.body.data[0].groupIds = ["225494730938493804"];
          opts.body.data[0].siteId = "225494730938493804";

          instance.webApiDeviceControlMoveRulesPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiDeviceControlPost', function() {
        it('should call webApiDeviceControlPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiDeviceControlPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.DeviceControlSchemasPostDeviceSchema();
          opts.body.filter = new S1MgmtApi.ExclusionsSchemasPostExclusionSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.DeviceControlSchemasPostDeviceSchemaData();
          opts.body.data.ruleType = "class";
          opts.body.data.uid = "";
          opts.body.data.productId = "02";
          opts.body.data.serviceClass = "02";
          opts.body.data.vendorId = "02";
          opts.body.data.deviceId = "02";
          opts.body.data.deviceClass = "02h";
          opts.body.data.deviceInformationServiceInfoValue = "";
          opts.body.data.version = "";
          opts.body.data.ruleName = "";
          opts.body.data.gattService = [""];
          opts.body.data.action = "Allow";
          opts.body.data.deviceName = "";
          opts.body.data.deviceInformationServiceInfoKey = "";
          opts.body.data._interface = "USB";
          opts.body.data.status = "Enabled";
          opts.body.data.accessPermission = "Read-Only";
          opts.body.data.bluetoothAddress = "";
          opts.body.data.manufacturerName = "";
          opts.body.data.minorClasses = ["02"];

          instance.webApiDeviceControlPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.DeviceControlSchemasDeviceSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.DeviceControlSchemasDeviceSchema200Data);
                  expect(data.data.ruleType).to.be.a('string');
              expect(data.data.ruleType).to.be("class");
              expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.uid).to.be.a('string');
              expect(data.data.uid).to.be("");
              expect(data.data.productId).to.be.a('string');
              expect(data.data.productId).to.be("02");
              expect(data.data.vendorId).to.be.a('string');
              expect(data.data.vendorId).to.be("02");
              expect(data.data.deviceId).to.be.a('string');
              expect(data.data.deviceId).to.be("02");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.deviceClassName).to.be.a(Object);
              expect(data.data.deviceClassName).to.be();
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              expect(data.data.deviceClass).to.be.a('string');
              expect(data.data.deviceClass).to.be("02h");
              expect(data.data.deviceInformationServiceInfoValue).to.be.a('string');
              expect(data.data.deviceInformationServiceInfoValue).to.be("");
              expect(data.data.version).to.be.a('string');
              expect(data.data.version).to.be("");
              expect(data.data.ruleName).to.be.a('string');
              expect(data.data.ruleName).to.be("");
              expect(data.data.scopeName).to.be.a('string');
              expect(data.data.scopeName).to.be("");
              expect(data.data.scope).to.be.a('string');
              expect(data.data.scope).to.be("site");
              {
                let dataCtr = data.data.gattService;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.action).to.be.a('string');
              expect(data.data.action).to.be("Allow");
              expect(data.data.order).to.be.a('number');
              expect(data.data.order).to.be(0);
              expect(data.data.deviceName).to.be.a('string');
              expect(data.data.deviceName).to.be("");
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.editable).to.be.a('boolean');
              expect(data.data.editable).to.be(false);
              expect(data.data._interface).to.be.a('string');
              expect(data.data._interface).to.be("USB");
              expect(data.data.deviceInformationServiceInfoKey).to.be.a('string');
              expect(data.data.deviceInformationServiceInfoKey).to.be("");
              expect(data.data.status).to.be.a('string');
              expect(data.data.status).to.be("Enabled");
              expect(data.data.accessPermission).to.be.a('string');
              expect(data.data.accessPermission).to.be("Read-Only");
              expect(data.data.bluetoothAddress).to.be.a('string');
              expect(data.data.bluetoothAddress).to.be("");
              expect(data.data.manufacturerName).to.be.a('string');
              expect(data.data.manufacturerName).to.be("");
              {
                let dataCtr = data.data.minorClasses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("02");
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiDeviceControlReorderPut', function() {
        it('should call webApiDeviceControlReorderPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiDeviceControlReorderPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.DeviceControlSchemasReorderSchema();
          opts.body.filter = new S1MgmtApi.DeviceControlSchemasReorderSchemaFilter();
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter._interface = "USB";
          opts.body.filter.tenant = false;
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.data = [new S1MgmtApi.DeviceControlSchemasReorderSchemaData()];
          opts.body.data[0].order = 1;
          opts.body.data[0].id = "225494730938493804";

          instance.webApiDeviceControlReorderPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiDeviceControlruleIdPut', function() {
        it('should call webApiDeviceControlruleIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiDeviceControlruleIdPut call and complete the assertions
          /*
          var ruleId = "ruleId_example";
          var opts = {};
          opts.body = new S1MgmtApi.DeviceControlSchemasPutDeviceSchema();
          opts.body.data = new S1MgmtApi.DeviceControlSchemasPutDeviceSchemaData();
          opts.body.data.ruleType = "class";
          opts.body.data.uid = "";
          opts.body.data.productId = "02";
          opts.body.data.serviceClass = "02";
          opts.body.data.vendorId = "02";
          opts.body.data.deviceId = "02";
          opts.body.data.deviceClass = "02h";
          opts.body.data.deviceInformationServiceInfoValue = "";
          opts.body.data.version = "";
          opts.body.data.ruleName = "";
          opts.body.data.gattService = [""];
          opts.body.data.action = "Allow";
          opts.body.data.deviceName = "";
          opts.body.data.deviceInformationServiceInfoKey = "";
          opts.body.data._interface = "USB";
          opts.body.data.status = "Enabled";
          opts.body.data.accessPermission = "Read-Only";
          opts.body.data.bluetoothAddress = "";
          opts.body.data.manufacturerName = "";
          opts.body.data.minorClasses = ["02"];

          instance.webApiDeviceControlruleIdPut(ruleId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.DeviceControlSchemasDeviceSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.DeviceControlSchemasDeviceSchema200Data);
                  expect(data.data.ruleType).to.be.a('string');
              expect(data.data.ruleType).to.be("class");
              expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.uid).to.be.a('string');
              expect(data.data.uid).to.be("");
              expect(data.data.productId).to.be.a('string');
              expect(data.data.productId).to.be("02");
              expect(data.data.vendorId).to.be.a('string');
              expect(data.data.vendorId).to.be("02");
              expect(data.data.deviceId).to.be.a('string');
              expect(data.data.deviceId).to.be("02");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.deviceClassName).to.be.a(Object);
              expect(data.data.deviceClassName).to.be();
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              expect(data.data.deviceClass).to.be.a('string');
              expect(data.data.deviceClass).to.be("02h");
              expect(data.data.deviceInformationServiceInfoValue).to.be.a('string');
              expect(data.data.deviceInformationServiceInfoValue).to.be("");
              expect(data.data.version).to.be.a('string');
              expect(data.data.version).to.be("");
              expect(data.data.ruleName).to.be.a('string');
              expect(data.data.ruleName).to.be("");
              expect(data.data.scopeName).to.be.a('string');
              expect(data.data.scopeName).to.be("");
              expect(data.data.scope).to.be.a('string');
              expect(data.data.scope).to.be("site");
              {
                let dataCtr = data.data.gattService;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.action).to.be.a('string');
              expect(data.data.action).to.be("Allow");
              expect(data.data.order).to.be.a('number');
              expect(data.data.order).to.be(0);
              expect(data.data.deviceName).to.be.a('string');
              expect(data.data.deviceName).to.be("");
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.editable).to.be.a('boolean');
              expect(data.data.editable).to.be(false);
              expect(data.data._interface).to.be.a('string');
              expect(data.data._interface).to.be("USB");
              expect(data.data.deviceInformationServiceInfoKey).to.be.a('string');
              expect(data.data.deviceInformationServiceInfoKey).to.be("");
              expect(data.data.status).to.be.a('string');
              expect(data.data.status).to.be("Enabled");
              expect(data.data.accessPermission).to.be.a('string');
              expect(data.data.accessPermission).to.be("Read-Only");
              expect(data.data.bluetoothAddress).to.be.a('string');
              expect(data.data.bluetoothAddress).to.be("");
              expect(data.data.manufacturerName).to.be.a('string');
              expect(data.data.manufacturerName).to.be("");
              {
                let dataCtr = data.data.minorClasses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("02");
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
