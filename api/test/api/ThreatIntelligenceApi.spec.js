/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.ThreatIntelligenceApi();
  });

  describe('(package)', function() {
    describe('ThreatIntelligenceApi', function() {
      describe('webApiPrivateInternalIocsGlobalExclusionsDelete', function() {
        it('should call webApiPrivateInternalIocsGlobalExclusionsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateInternalIocsGlobalExclusionsDelete call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21SchemasGlobalExclusionsSchema();
          opts.body.iocsValues = [""];

          instance.webApiPrivateInternalIocsGlobalExclusionsDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateInternalIocsGlobalExclusionsGet', function() {
        it('should call webApiPrivateInternalIocsGlobalExclusionsGet successfully', function(done) {
          // TODO: uncomment webApiPrivateInternalIocsGlobalExclusionsGet call and complete the assertions
          /*

          instance.webApiPrivateInternalIocsGlobalExclusionsGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21SchemasGlobalExclusionsDetailsMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21SchemasGlobalExclusionsDetailsMany200Data);
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.iocsValue).to.be.a('string');
                expect(data.iocsValue).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateInternalIocsGlobalExclusionsPost', function() {
        it('should call webApiPrivateInternalIocsGlobalExclusionsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateInternalIocsGlobalExclusionsPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21SchemasGlobalExclusionsSchema();
          opts.body.iocsValues = [""];

          instance.webApiPrivateInternalIocsGlobalExclusionsPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateThreatIntelligenceAlertsalertIdIocsPost', function() {
        it('should call webApiPrivateThreatIntelligenceAlertsalertIdIocsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateThreatIntelligenceAlertsalertIdIocsPost call
          /*
          var alertId = "alertId_example";
          var opts = {};
          opts.body = new S1MgmtApi.V21SchemasPostUamAlertObservablesDataSchema();
          opts.body.eppThreatId = 0;
          opts.body.observables = [new S1MgmtApi.V21SchemasPostUamAlertObservablesDataSchemaObservables()];
          opts.body.observables[0].typeId = 0;
          opts.body.observables[0].value = "";

          instance.webApiPrivateThreatIntelligenceAlertsalertIdIocsPost(alertId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateThreatIntelligenceCustomAppConfigDelete', function() {
        it('should call webApiPrivateThreatIntelligenceCustomAppConfigDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateThreatIntelligenceCustomAppConfigDelete call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21SchemasDeleteCustomAppConfigurationSchema();
          opts.body.data = new S1MgmtApi.V21SchemasDeleteCustomAppConfigurationSchemaData();
          opts.body.data.scopeLevel = "site";
          opts.body.data.scopeId = 0;
          opts.body.data.mgmtId = 0;

          instance.webApiPrivateThreatIntelligenceCustomAppConfigDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateThreatIntelligenceCustomAppConfigPost', function() {
        it('should call webApiPrivateThreatIntelligenceCustomAppConfigPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateThreatIntelligenceCustomAppConfigPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21SchemasPostCustomAppConfigurationSchema();
          opts.body.data = new S1MgmtApi.V21SchemasPostCustomAppConfigurationSchemaData();
          opts.body.data.scopeId = 0;
          opts.body.data.driverMemory = 0;
          opts.body.data.executorMemory = 0;
          opts.body.data.minScale = 0;
          opts.body.data.scopeLevel = "site";
          opts.body.data.driverCores = 0;
          opts.body.data.mgmtId = 0;
          opts.body.data.sparkConf = "";
          opts.body.data.maxScale = 0;
          opts.body.data.executorCores = 0;

          instance.webApiPrivateThreatIntelligenceCustomAppConfigPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateThreatIntelligenceKnowledgeHuburiGet', function() {
        it('should call webApiPrivateThreatIntelligenceKnowledgeHuburiGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateThreatIntelligenceKnowledgeHuburiGet call
          /*
          var uri = "uri_example";

          instance.webApiPrivateThreatIntelligenceKnowledgeHuburiGet(uri, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateThreatIntelligenceThreatsthreatIdIndicatorsGet', function() {
        it('should call webApiPrivateThreatIntelligenceThreatsthreatIdIndicatorsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateThreatIntelligenceThreatsthreatIdIndicatorsGet call
          /*
          var threatId = "threatId_example";

          instance.webApiPrivateThreatIntelligenceThreatsthreatIdIndicatorsGet(threatId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatIntelligenceIocsDelete', function() {
        it('should call webApiThreatIntelligenceIocsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatIntelligenceIocsDelete call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21SchemasIOCDeleteSchema();
          opts.body.filter = new S1MgmtApi.V21SchemasIOCDeleteSchemaFilter();
          opts.body.filter.descriptionContains = ["Malicious-activity"];
          opts.body.filter.uploadTimeGt = 2022-07-13T20:33:29.007906Z;
          opts.body.filter.updatedAtGt = 2021-07-13T20:33:29.007906Z;
          opts.body.filter.categoryIn = "";
          opts.body.filter.updatedAtGte = 2021-07-13T20:33:29.007906Z;
          opts.body.filter.creatorContains = ["admin@sentinelone.com"];
          opts.body.filter.tenant = false;
          opts.body.filter.creationTimeGte = 2021-07-13T20:33:29.007906Z;
          opts.body.filter.type = "IPv4";
          opts.body.filter.creationTimeGt = 2021-07-12T20:33:29.007906Z;
          opts.body.filter.creationTimeLte = 2021-07-11T20:33:29.007906Z;
          opts.body.filter.creationTimeLt = 2021-07-13T20:33:29.007906Z;
          opts.body.filter.batchId = "atmtn000000028a881bcf939dc6d92ab55443";
          opts.body.filter.externalId = "e277603e-1060-5ad4-9937-c26c97f1ca68";
          opts.body.filter.updatedAtLt = 2021-07-13T20:33:29.007906Z;
          opts.body.filter.updatedAtLte = 2021-07-13T20:33:29.007906Z;
          opts.body.filter.accountIds = "426418030212073762";
          opts.body.filter.source = ["AlienVault"];
          opts.body.filter.value = "175.45.176.1";
          opts.body.filter.uploadTimeLte = 2022-07-13T20:33:29.007906Z;
          opts.body.filter.uuids = "2cffae871197f20d864fe8363eee6651";
          opts.body.filter.nameContains = ["foo.dll"];
          opts.body.filter.uploadTimeLt = 2021-07-13T20:33:29.007906Z;
          opts.body.filter.uploadTimeGte = 2022-07-13T20:33:29.007906Z;

          instance.webApiThreatIntelligenceIocsDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatIntelligenceIocsGet', function() {
        it('should call webApiThreatIntelligenceIocsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatIntelligenceIocsGet call and complete the assertions
          /*
          var opts = {};
          opts.descriptionContains = ["descriptionContains_example"];
          opts.uploadTimeGt = new Date("2013-10-20T19:20:30+01:00");
          opts.updatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.categoryIn = "categoryIn_example";
          opts.limit = 10;
          opts.updatedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.creatorContains = ["creatorContains_example"];
          opts.tenant = true;
          opts.sortBy = "null";
          opts.skipCount = null;
          opts.creationTimeGte = new Date("2013-10-20T19:20:30+01:00");
          opts.skip = 56;
          opts.creationTimeGt = new Date("2013-10-20T19:20:30+01:00");
          opts.type = "type_example";
          opts.sortOrder = "null";
          opts.creationTimeLte = new Date("2013-10-20T19:20:30+01:00");
          opts.creationTimeLt = new Date("2013-10-20T19:20:30+01:00");
          opts.batchId = "batchId_example";
          opts.externalId = "externalId_example";
          opts.updatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.updatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.accountIds = ["accountIds_example"];
          opts.source = ["source_example"];
          opts.cursor = "null";
          opts.countOnly = false;
          opts.value = "value_example";
          opts.uploadTimeLte = new Date("2013-10-20T19:20:30+01:00");
          opts.uuids = ["uuids_example"];
          opts.nameContains = ["nameContains_example"];
          opts.uploadTimeLt = new Date("2013-10-20T19:20:30+01:00");
          opts.uploadTimeGte = new Date("2013-10-20T19:20:30+01:00");

          instance.webApiThreatIntelligenceIocsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21SchemasGetIndicatorSchemaMany200);
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21SchemasGetIndicatorSchemaMany200Data);
                expect(data.scopeId).to.be.a('string');
                expect(data.scopeId).to.be("225494730938493804");
                {
                  let dataCtr = data.mitreTactic;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.originalRiskScore).to.be.a('number');
                expect(data.originalRiskScore).to.be(0);
                {
                  let dataCtr = data.labels;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.intrusionSets;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.validUntil).to.be.a(Date);
                expect(data.validUntil).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.campaignNames;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.source).to.be.a('string');
                expect(data.source).to.be("");
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.creationTime).to.be.a(Date);
                expect(data.creationTime).to.be(2018-02-27T04:49:26.257525Z);
                {
                  let dataCtr = data.reference;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.category;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.threatActors;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("DNS");
                expect(data.method).to.be.a('string');
                expect(data.method).to.be("EQUALS");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.patternType).to.be.a('string');
                expect(data.patternType).to.be("");
                expect(data.batchId).to.be.a('string');
                expect(data.batchId).to.be("");
                expect(data.scope).to.be.a('string');
                expect(data.scope).to.be("site");
                expect(data.externalId).to.be.a('string');
                expect(data.externalId).to.be("");
                {
                  let dataCtr = data.threatActorTypes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.pattern).to.be.a('string');
                expect(data.pattern).to.be("");
                expect(data.creator).to.be.a('string');
                expect(data.creator).to.be("");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
                {
                  let dataCtr = data.malwareNames;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.severity).to.be.a('number');
                expect(data.severity).to.be(0);
                expect(data.metadata).to.be.a('string');
                expect(data.metadata).to.be("");
                expect(data.uploadTime).to.be.a(Date);
                expect(data.uploadTime).to.be(2018-02-27T04:49:26.257525Z);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatIntelligenceIocsPost', function() {
        it('should call webApiThreatIntelligenceIocsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatIntelligenceIocsPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21SchemasPostThreatIntelligenceSchema();
          opts.body.filter = new S1MgmtApi.V21SchemasPostUserConfigSchemaFilter();
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.data = [new S1MgmtApi.V21SchemasPostThreatIntelligenceSchemaData()];
          opts.body.data[0].mitreTactic = [""];
          opts.body.data[0].originalRiskScore = 0;
          opts.body.data[0].labels = [""];
          opts.body.data[0].intrusionSets = [""];
          opts.body.data[0].validUntil = 2018-02-27T04:49:26.257525Z;
          opts.body.data[0].description = "";
          opts.body.data[0].campaignNames = [""];
          opts.body.data[0].source = "";
          opts.body.data[0].reference = [""];
          opts.body.data[0].creationTime = 2018-02-27T04:49:26.257525Z;
          opts.body.data[0].category = [""];
          opts.body.data[0].threatActors = [""];
          opts.body.data[0].metadata = "";
          opts.body.data[0].type = "DNS";
          opts.body.data[0].method = "EQUALS";
          opts.body.data[0].name = "";
          opts.body.data[0].patternType = ;
          opts.body.data[0].externalId = "";
          opts.body.data[0].threatActorTypes = ["Nation-state"]"Nation-state";
          opts.body.data[0].pattern = "";
          opts.body.data[0].creator = "";
          opts.body.data[0].value = "";
          opts.body.data[0].malwareNames = [""];
          opts.body.data[0].severity = 0;

          instance.webApiThreatIntelligenceIocsPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21SchemasPostIndicatorSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21SchemasPostIndicatorSchemaMany200Data);
                expect(data.scopeId).to.be.a('string');
                expect(data.scopeId).to.be("225494730938493804");
                {
                  let dataCtr = data.mitreTactic;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.originalRiskScore).to.be.a('number');
                expect(data.originalRiskScore).to.be(0);
                {
                  let dataCtr = data.labels;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.intrusionSets;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.validUntil).to.be.a(Date);
                expect(data.validUntil).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.campaignNames;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.source).to.be.a('string');
                expect(data.source).to.be("");
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.creationTime).to.be.a(Date);
                expect(data.creationTime).to.be(2018-02-27T04:49:26.257525Z);
                {
                  let dataCtr = data.reference;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.category;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.threatActors;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.metadata).to.be.a('string');
                expect(data.metadata).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("DNS");
                expect(data.method).to.be.a('string');
                expect(data.method).to.be("EQUALS");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.patternType).to.be.a('string');
                expect(data.patternType).to.be("");
                expect(data.batchId).to.be.a('string');
                expect(data.batchId).to.be("");
                expect(data.scope).to.be.a('string');
                expect(data.scope).to.be("site");
                expect(data.externalId).to.be.a('string');
                expect(data.externalId).to.be("");
                {
                  let dataCtr = data.threatActorTypes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.pattern).to.be.a('string');
                expect(data.pattern).to.be("");
                expect(data.creator).to.be.a('string');
                expect(data.creator).to.be("");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
                {
                  let dataCtr = data.malwareNames;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.severity).to.be.a('number');
                expect(data.severity).to.be(0);
                expect(data.uploadTime).to.be.a(Date);
                expect(data.uploadTime).to.be(2018-02-27T04:49:26.257525Z);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatIntelligenceUserConfigDelete', function() {
        it('should call webApiThreatIntelligenceUserConfigDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatIntelligenceUserConfigDelete call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21SchemasUserConfigFilterSchema();
          opts.body.tenant = false;
          opts.body.accountIds = "426418030212073762";

          instance.webApiThreatIntelligenceUserConfigDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatIntelligenceUserConfigGet', function() {
        it('should call webApiThreatIntelligenceUserConfigGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatIntelligenceUserConfigGet call and complete the assertions
          /*
          var opts = {};
          opts.tenant = true;
          opts.accountIds = ["accountIds_example"];

          instance.webApiThreatIntelligenceUserConfigGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21SchemasGetUserConfigSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21SchemasGetUserConfigSchemaMany200Data);
                expect(data.scopeId).to.be.a('string');
                expect(data.scopeId).to.be("225494730938493804");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.scopeLevel).to.be.a('string');
                expect(data.scopeLevel).to.be("site");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.disableThreat).to.be.a('boolean');
                expect(data.disableThreat).to.be(false);
                {
                  let dataCtr = data.excludeTii;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatIntelligenceUserConfigPost', function() {
        it('should call webApiThreatIntelligenceUserConfigPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatIntelligenceUserConfigPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21SchemasPostUserConfigSchema();
          opts.body.filter = new S1MgmtApi.V21SchemasPostUserConfigSchemaFilter();
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.V21SchemasPostUserConfigSchemaData();
          opts.body.data.excludeTii = [""];
          opts.body.data.description = "";
          opts.body.data.disableThreat = false;

          instance.webApiThreatIntelligenceUserConfigPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21SchemasGetUserConfigSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21SchemasGetUserConfigSchemaMany200Data);
                expect(data.scopeId).to.be.a('string');
                expect(data.scopeId).to.be("225494730938493804");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.scopeLevel).to.be.a('string');
                expect(data.scopeLevel).to.be("site");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.disableThreat).to.be.a('boolean');
                expect(data.disableThreat).to.be(false);
                {
                  let dataCtr = data.excludeTii;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
