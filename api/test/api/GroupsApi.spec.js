/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.GroupsApi();
  });

  describe('(package)', function() {
    describe('GroupsApi', function() {
      describe('webApiGroupsGet', function() {
        it('should call webApiGroupsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiGroupsGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "null";
          opts.updatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.query = "query_example";
          opts.isDefault = true;
          opts.countOnly = false;
          opts.limit = 10;
          opts.updatedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.skip = 56;
          opts.id = "id_example";
          opts.skipCount = null;
          opts.rank = 56;
          opts.sortOrder = "null";
          opts.updatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.registrationToken = "registrationToken_example";
          opts.type = "type_example";
          opts.sortBy = "null";
          opts.updatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.groupIds = ["groupIds_example"];
          opts.description = "description_example";
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.name = "name_example";
          opts.types = ["types_example"];

          instance.webApiGroupsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.GroupsSummarizedGroupSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.GroupsSummarizedGroupSchemaMany200Data);
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.filterId).to.be.a('string');
                expect(data.filterId).to.be("225494730938493804");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.creator).to.be.a('string');
                expect(data.creator).to.be("");
                expect(data.creatorId).to.be.a('string');
                expect(data.creatorId).to.be("225494730938493804");
                expect(data.totalAgents).to.be.a('number');
                expect(data.totalAgents).to.be(0);
                expect(data.rank).to.be.a('number');
                expect(data.rank).to.be(1);
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.siteId).to.be.a('string');
                expect(data.siteId).to.be("225494730938493804");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("static");
                expect(data.registrationToken).to.be.a(Object);
                expect(data.registrationToken).to.be(eyJ1cmwiOiAiaHR0cHM6Ly9jb25zb2xlLnNlbnRpbmVsb25lLm5ldCIsICJzaXRlX2tleSI6ICIwNzhkYjliMWUyOTA1Y2NhIn0=);
                expect(data.filterName).to.be.a('string');
                expect(data.filterName).to.be("");
                expect(data.inherits).to.be.a('boolean');
                expect(data.inherits).to.be(false);
                expect(data.isDefault).to.be.a('boolean');
                expect(data.isDefault).to.be(false);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiGroupsPost', function() {
        it('should call webApiGroupsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiGroupsPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.GroupsPostGroupSchema();
          opts.body.data = new S1MgmtApi.GroupsPostGroupSchemaData();
          opts.body.data.description = "";
          opts.body.data.filterId = "225494730938493804";
          opts.body.data.name = "";
          opts.body.data.rank = 0;
          opts.body.data.policy = new S1MgmtApi.GroupsPostGroupSchemaDataPolicy();
          opts.body.data.policy.autoMitigationAction = "";
          opts.body.data.policy.mitigationMode = "detect";
          opts.body.data.policy.iocAttributes = new S1MgmtApi.SitesSitePutSchemaDataPolicyIocAttributes();
          opts.body.data.policy.iocAttributes.smartFileMonitoring = false;
          opts.body.data.policy.iocAttributes.windowsEventLogs = false;
          opts.body.data.policy.iocAttributes.autoInstallBrowserExtensions = false;
          opts.body.data.policy.iocAttributes.dataMasking = false;
          opts.body.data.policy.iocAttributes.dllModuleLoad = false;
          opts.body.data.policy.iocAttributes.dns = false;
          opts.body.data.policy.iocAttributes.crossProcess = false;
          opts.body.data.policy.iocAttributes.registry = false;
          opts.body.data.policy.iocAttributes.driver = false;
          opts.body.data.policy.iocAttributes.fds = false;
          opts.body.data.policy.iocAttributes.windowsEventLogsExtended = false;
          opts.body.data.policy.iocAttributes.file = false;
          opts.body.data.policy.iocAttributes.namedPipeExtended = false;
          opts.body.data.policy.iocAttributes.url = false;
          opts.body.data.policy.iocAttributes.behavioralIndicators = false;
          opts.body.data.policy.iocAttributes.process = false;
          opts.body.data.policy.iocAttributes.commandScripts = false;
          opts.body.data.policy.iocAttributes.namedPipe = false;
          opts.body.data.policy.iocAttributes.ip = false;
          opts.body.data.policy.iocAttributes.login = false;
          opts.body.data.policy.iocAttributes.scheduledTask = false;
          opts.body.data.policy.researchOn = false;
          opts.body.data.policy.autoFileUpload = new S1MgmtApi.SitesSitePutSchemaDataPolicyAutoFileUpload();
          opts.body.data.policy.autoFileUpload.maxDailyFileUploadLimit = 0;
          opts.body.data.policy.autoFileUpload.includeBenignFiles = false;
          opts.body.data.policy.autoFileUpload.maxLocalDiskUsageLimit = 0;
          opts.body.data.policy.autoFileUpload.maxLocalDiskUsage = 0;
          opts.body.data.policy.autoFileUpload.enabled = false;
          opts.body.data.policy.autoFileUpload.maxFileSizeLimit = 0;
          opts.body.data.policy.autoFileUpload.maxFileSize = 0;
          opts.body.data.policy.autoFileUpload.maxDailyFileUpload = 0;
          opts.body.data.policy.mitigationModeSuspicious = "detect";
          opts.body.data.policy.updatedAt = 2018-02-27T04:49:26.257525Z;
          opts.body.data.policy.antiTamperingOn = false;
          opts.body.data.policy.identityReportInterval = 0;
          opts.body.data.policy.monitorOnExecute = false;
          opts.body.data.policy.userId = "225494730938493804";
          opts.body.data.policy.driverBlocking = false;
          opts.body.data.policy.identityEndpointReporting = "disabled";
          opts.body.data.policy.isDefault = false;
          opts.body.data.policy.ioc = false;
          opts.body.data.policy.agentUiOn = false;
          opts.body.data.policy.monitorOnWrite = false;
          opts.body.data.policy.identityUpdateInterval = 0;
          opts.body.data.policy.iocSupported = false;
          opts.body.data.policy.identityThrottlingInterval = 0;
          opts.body.data.policy.agentLoggingOn = false;
          opts.body.data.policy.unsignedDriverBlockingOn = false;
          opts.body.data.policy.agentUi = new S1MgmtApi.SitesSitePutSchemaDataPolicyAgentUi();
          opts.body.data.policy.agentUi.threatPopUpNotifications = false;
          opts.body.data.policy.agentUi.contactFreeText = "";
          opts.body.data.policy.agentUi.contactEmail = "";
          opts.body.data.policy.agentUi.maxEventAgeDays = 0;
          opts.body.data.policy.agentUi.showAgentWarnings = false;
          opts.body.data.policy.agentUi.contactPhoneNumber = "";
          opts.body.data.policy.agentUi.showDeviceTab = false;
          opts.body.data.policy.agentUi.devicePopUpNotifications = false;
          opts.body.data.policy.agentUi.showSupport = false;
          opts.body.data.policy.agentUi.showQuarantineTab = false;
          opts.body.data.policy.agentUi.contactCompany = "";
          opts.body.data.policy.agentUi.showSuspicious = false;
          opts.body.data.policy.agentUi.contactOther = "";
          opts.body.data.policy.agentUi.contactDirectMessage = "";
          opts.body.data.policy.agentUi.contactSupportWebsite = "";
          opts.body.data.policy.agentUi.agentUiOn = false;
          opts.body.data.policy.userFullName = "";
          opts.body.data.policy.signedDriverBlockingOn = false;
          opts.body.data.policy.allowRemoteShell = false;
          opts.body.data.policy.isDvPolicyPerEventType = false;
          opts.body.data.policy.removeMacros = false;
          opts.body.data.policy.scanNewAgents = false;
          opts.body.data.policy.snapshotsOn = false;
          opts.body.data.policy.engines = new S1MgmtApi.SitesSitePutSchemaDataPolicyEngines();
          opts.body.data.policy.engines.lateralMovement = "on";
          opts.body.data.policy.engines.preExecutionSuspicious = "on";
          opts.body.data.policy.engines.preExecution = "on";
          opts.body.data.policy.engines.dataFiles = "on";
          opts.body.data.policy.engines.pup = "on";
          opts.body.data.policy.engines.executables = "on";
          opts.body.data.policy.engines.penetration = "on";
          opts.body.data.policy.engines.applicationControl = "on";
          opts.body.data.policy.engines.reputation = "on";
          opts.body.data.policy.engines.exploits = "on";
          opts.body.data.policy.engines.remoteShell = "on";
          opts.body.data.policy.remoteOpsForensics = new S1MgmtApi.SitesSitePutSchemaDataPolicyRemoteOpsForensics();
          opts.body.data.policy.remoteOpsForensics.parsedArtifactsDestination = "local";
          opts.body.data.policy.remoteOpsForensics.maximumFileSizeUpload = "0";
          opts.body.data.policy.remoteOpsForensics.maximumDailyUpload = "0";
          opts.body.data.policy.remoteOpsForensics.maximumFileSizeUploadLimit = "0";
          opts.body.data.policy.remoteOpsForensics.enabled = false;
          opts.body.data.policy.remoteOpsForensics.cpuLimit = 0;
          opts.body.data.policy.remoteOpsForensics.maximumDailyUploadLimit = "0";
          opts.body.data.policy.forensicsAutoTriggering = new S1MgmtApi.SitesSitePutSchemaDataPolicyForensicsAutoTriggering();
          opts.body.data.policy.forensicsAutoTriggering.windowsProfileId = "";
          opts.body.data.policy.forensicsAutoTriggering.linuxEnabled = false;
          opts.body.data.policy.forensicsAutoTriggering.macosProfileName = "";
          opts.body.data.policy.forensicsAutoTriggering.macosProfileId = "";
          opts.body.data.policy.forensicsAutoTriggering.windowsProfileName = "";
          opts.body.data.policy.forensicsAutoTriggering.linuxProfileName = "";
          opts.body.data.policy.forensicsAutoTriggering.windowsEnabled = false;
          opts.body.data.policy.forensicsAutoTriggering.linuxProfileId = "";
          opts.body.data.policy.forensicsAutoTriggering.macosEnabled = false;
          opts.body.data.policy.identityOn = false;
          opts.body.data.policy.cloudValidationOn = ;
          opts.body.data.policy.autoImmuneOn = false;
          opts.body.data.policy.agentNotification = false;
          opts.body.data.policy.createdAt = 2018-02-27T04:49:26.257525Z;
          opts.body.data.policy.networkQuarantineOn = false;
          opts.body.data.policy.autoDecommissionDays = 0;
          opts.body.data.policy.remoteScriptOrchestration = new S1MgmtApi.SitesSitePutSchemaDataPolicyRemoteScriptOrchestration();
          opts.body.data.policy.remoteScriptOrchestration.alwaysUploadStreamToCloud = false;
          opts.body.data.policy.remoteScriptOrchestration.maxLocalPackageDiskUsageLimit = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxDailyFileUploadLimit = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxLocalPackageDiskUsage = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxDailyFileDownloadLimit = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxFileSizeLimit = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxDailyFileDownload = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxFileSize = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxDailyFileUpload = "0";
          opts.body.data.policy.autoDecommissionOn = false;
          opts.body.data.policy.dvAttributesPerEventType = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventType();
          opts.body.data.policy.dvAttributesPerEventType.smartFileMonitoring = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeSmartFileMonitoring();
          opts.body.data.policy.dvAttributesPerEventType.smartFileMonitoring.smartFileMonitoring = false;
          opts.body.data.policy.dvAttributesPerEventType.windowsEventLogs = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeWindowsEventLogs();
          opts.body.data.policy.dvAttributesPerEventType.windowsEventLogs.dvEventTypeWindowsEventLogCreation = false;
          opts.body.data.policy.dvAttributesPerEventType.autoInstallBrowserExtensions = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeAutoInstallBrowserExtensions();
          opts.body.data.policy.dvAttributesPerEventType.autoInstallBrowserExtensions.autoInstallBrowserExtensions = false;
          opts.body.data.policy.dvAttributesPerEventType.dataMasking = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeDataMasking();
          opts.body.data.policy.dvAttributesPerEventType.dataMasking.dataMasking = false;
          opts.body.data.policy.dvAttributesPerEventType.dllModuleLoad = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeDllModuleLoad();
          opts.body.data.policy.dvAttributesPerEventType.dllModuleLoad.dvEventTypeDllModuleLoad = false;
          opts.body.data.policy.dvAttributesPerEventType.dns = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeDns();
          opts.body.data.policy.dvAttributesPerEventType.dns.dvEventTypeDns = false;
          opts.body.data.policy.dvAttributesPerEventType.crossProcess = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeCrossProcess();
          opts.body.data.policy.dvAttributesPerEventType.crossProcess.dvEventTypeCrossProcessOpenProcess = false;
          opts.body.data.policy.dvAttributesPerEventType.crossProcess.dvEventTypeCrossProcessRemoteThread = false;
          opts.body.data.policy.dvAttributesPerEventType.crossProcess.dvEventTypeCrossProcessDuplicateProcess = false;
          opts.body.data.policy.dvAttributesPerEventType.crossProcess.dvEventTypeCrossProcessDuplicateThread = false;
          opts.body.data.policy.dvAttributesPerEventType.registry = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeRegistry();
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeySecurityChanged = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryValueDeleted = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryValueModified = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeyRename = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeyCreated = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryValueCreated = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeyImport = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeyDelete = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeyExport = false;
          opts.body.data.policy.dvAttributesPerEventType.driver = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeDriver();
          opts.body.data.policy.dvAttributesPerEventType.driver.dvEventTypeDriverLoad = false;
          opts.body.data.policy.dvAttributesPerEventType.windowsEventLogsExtended = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeWindowsEventLogsExtended();
          opts.body.data.policy.dvAttributesPerEventType.windowsEventLogsExtended.windowsEventLogsExtended = false;
          opts.body.data.policy.dvAttributesPerEventType.file = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeFile();
          opts.body.data.policy.dvAttributesPerEventType.file.dvEventTypeFileModification = false;
          opts.body.data.policy.dvAttributesPerEventType.file.dvEventTypeFileCreation = false;
          opts.body.data.policy.dvAttributesPerEventType.file.dvEventTypeFileRename = false;
          opts.body.data.policy.dvAttributesPerEventType.file.dvEventTypeFileDeletion = false;
          opts.body.data.policy.dvAttributesPerEventType.file.fullDiskScan = false;
          opts.body.data.policy.dvAttributesPerEventType.namedPipeExtended = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeNamedPipeExtended();
          opts.body.data.policy.dvAttributesPerEventType.namedPipeExtended.namedPipeExtended = false;
          opts.body.data.policy.dvAttributesPerEventType.url = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeUrl();
          opts.body.data.policy.dvAttributesPerEventType.url.dvEventTypeUrl = false;
          opts.body.data.policy.dvAttributesPerEventType.behavioralIndicators = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeBehavioralIndicators();
          opts.body.data.policy.dvAttributesPerEventType.behavioralIndicators.dvEventTypeBehavioralIndicators = false;
          opts.body.data.policy.dvAttributesPerEventType.process = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeProcess();
          opts.body.data.policy.dvAttributesPerEventType.process.dvEventTypeProcessModification = false;
          opts.body.data.policy.dvAttributesPerEventType.process.dvEventTypeProcessExit = false;
          opts.body.data.policy.dvAttributesPerEventType.process.dvEventTypeProcessCreation = false;
          opts.body.data.policy.dvAttributesPerEventType.commandScripts = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeCommandScripts();
          opts.body.data.policy.dvAttributesPerEventType.commandScripts.dvEventTypeCommandScripts = false;
          opts.body.data.policy.dvAttributesPerEventType.namedPipe = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeNamedPipe();
          opts.body.data.policy.dvAttributesPerEventType.namedPipe.dvEventTypeNamedPipeConnection = false;
          opts.body.data.policy.dvAttributesPerEventType.namedPipe.dvEventTypeNamedPipeCreation = false;
          opts.body.data.policy.dvAttributesPerEventType.ip = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeIp();
          opts.body.data.policy.dvAttributesPerEventType.ip.dvEventTypeIpConnect = false;
          opts.body.data.policy.dvAttributesPerEventType.ip.dvEventTypeIpListen = false;
          opts.body.data.policy.dvAttributesPerEventType.login = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeLogin();
          opts.body.data.policy.dvAttributesPerEventType.login.dvEventTypeLoginLoggedOut = false;
          opts.body.data.policy.dvAttributesPerEventType.login.dvEventTypeLoginLoggedIn = false;
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeScheduledTask();
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask.dvEventTypeScheduledTaskDelete = false;
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask.dvEventTypeScheduledTaskUpdate = false;
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask.dvEventTypeScheduledTaskRegister = false;
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask.dvEventTypeScheduledTaskTrigger = false;
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask.dvEventTypeScheduledTaskStart = false;
          opts.body.data.source = "";
          opts.body.data.siteId = "225494730938493804";
          opts.body.data.type = "static";
          opts.body.data.inherits = false;
          opts.body.data.isDefault = false;

          instance.webApiGroupsPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.GroupsGroupSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.GroupsGroupSchema200Data);
                  expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("");
              expect(data.data.filterId).to.be.a('string');
              expect(data.data.filterId).to.be("225494730938493804");
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("");
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              expect(data.data.rank).to.be.a('number');
              expect(data.data.rank).to.be(1);
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.siteId).to.be.a('string');
              expect(data.data.siteId).to.be("225494730938493804");
              expect(data.data.type).to.be.a('string');
              expect(data.data.type).to.be("static");
              expect(data.data.registrationToken).to.be.a(Object);
              expect(data.data.registrationToken).to.be(eyJ1cmwiOiAiaHR0cHM6Ly9jb25zb2xlLnNlbnRpbmVsb25lLm5ldCIsICJzaXRlX2tleSI6ICIwNzhkYjliMWUyOTA1Y2NhIn0=);
              expect(data.data.isDefault).to.be.a('boolean');
              expect(data.data.isDefault).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiGroupsRanksPut', function() {
        it('should call webApiGroupsRanksPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiGroupsRanksPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.GroupsPutRanksSchema();
          opts.body.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter = new S1MgmtApi.GroupsPutRanksSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.GroupsPutRanksSchemaData();
          opts.body.data.ranks = [new S1MgmtApi.GroupsPutRanksSchemaDataRanks()];
          opts.body.data.ranks[0].rank = 1;
          opts.body.data.ranks[0].id = "225494730938493804";
          opts.body.siteIds = ["225494730938493804","225494730938493915"];

          instance.webApiGroupsRanksPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema204);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiGroupsgroupIdDelete', function() {
        it('should call webApiGroupsgroupIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiGroupsgroupIdDelete call and complete the assertions
          /*
          var groupId = "groupId_example";

          instance.webApiGroupsgroupIdDelete(groupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiGroupsgroupIdGet', function() {
        it('should call webApiGroupsgroupIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiGroupsgroupIdGet call and complete the assertions
          /*
          var groupId = "groupId_example";

          instance.webApiGroupsgroupIdGet(groupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.GroupsGroupSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.GroupsGroupSchema200Data);
                  expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("");
              expect(data.data.filterId).to.be.a('string');
              expect(data.data.filterId).to.be("225494730938493804");
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("");
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              expect(data.data.rank).to.be.a('number');
              expect(data.data.rank).to.be(1);
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.siteId).to.be.a('string');
              expect(data.data.siteId).to.be("225494730938493804");
              expect(data.data.type).to.be.a('string');
              expect(data.data.type).to.be("static");
              expect(data.data.registrationToken).to.be.a(Object);
              expect(data.data.registrationToken).to.be(eyJ1cmwiOiAiaHR0cHM6Ly9jb25zb2xlLnNlbnRpbmVsb25lLm5ldCIsICJzaXRlX2tleSI6ICIwNzhkYjliMWUyOTA1Y2NhIn0=);
              expect(data.data.isDefault).to.be.a('boolean');
              expect(data.data.isDefault).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiGroupsgroupIdMoveAgentsPut', function() {
        it('should call webApiGroupsgroupIdMoveAgentsPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiGroupsgroupIdMoveAgentsPut call and complete the assertions
          /*
          var groupId = "groupId_example";
          var opts = {};
          opts.body = new S1MgmtApi.GroupsPutAddAgentsSchema();
          opts.body.filter = new S1MgmtApi.GroupsPutAddAgentsSchemaFilter();
          opts.body.filter.agentVersionsNin = ["2.0.0.0","2.1.5.144"];
          opts.body.filter.registeredAtBetween = "1514978764288-1514978999999";
          opts.body.filter.registeredAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.adComputerQueryContains = ["DC=sentinelone","Windows"];
          opts.body.filter.mitigationModeSuspicious = "detect";
          opts.body.filter.hasLocalConfiguration = false;
          opts.body.filter.adUserQueryContains = ["DC=sentinelone","John"];
          opts.body.filter.query = "Linux";
          opts.body.filter.cloudProvider = [""];
          opts.body.filter.coreCountGt = 0;
          opts.body.filter.decommissionedAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.registeredAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.totalMemoryGt = 0;
          opts.body.filter.updatedAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.hasContainerizedWorkload = false;
          opts.body.filter.cloudImageContains = [""];
          opts.body.filter.threatCreatedAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.appsVulnerabilityStatusesNin = ["patch_required"];
          opts.body.filter.scanStatusesNin = ["started","aborted"];
          opts.body.filter.adComputerMemberContains = ["DC=sentinelone"];
          opts.body.filter.coreCountLte = 0;
          opts.body.filter.rangerVersions = ["2.0.0.0","2.1.5.144"];
          opts.body.filter.machineTypes = ["laptop","desktop"];
          opts.body.filter.coreCountGte = 0;
          opts.body.filter.locationIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.locationIdsNin = ["225494730938493804","225494730938493915"];
          opts.body.filter.gatewayIp = "192.168.0.1";
          opts.body.filter.updatedAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.missingPermissionsNin = ["user_action_needed_bluetooth_per","user_action_needed_fda_helper"];
          opts.body.filter.migrationStatus = "N/A";
          opts.body.filter.threatRebootRequired = [false];
          opts.body.filter.serialNumberContains = [""];
          opts.body.filter.decommissionedAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.lastSuccessfulScanDateBetween = "1514978764288-1514978999999";
          opts.body.filter.lastActiveDateLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.lastActiveDateBetween = "1514978764288-1514978999999";
          opts.body.filter.networkQuarantineEnabled = [false];
          opts.body.filter.cloudTagsContains = [""];
          opts.body.filter.threatCreatedAtBetween = "1514978764288-1514978999999";
          opts.body.filter.encryptedApplications = false;
          opts.body.filter.isUninstalled = [true,false];
          opts.body.filter.networkInterfacePhysicalContains = ["aa:0f",":41:"];
          opts.body.filter.agentVersionGte = "2.5.1.1320";
          opts.body.filter.lastSuccessfulScanDateGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.operationalStates = [""];
          opts.body.filter.adUserNameContains = ["DC=sentinelone"];
          opts.body.filter.osTypesNin = ["windows"];
          opts.body.filter.csvFilterId = "225494730938493804";
          opts.body.filter.isActive = false;
          opts.body.filter.mitigationMode = "detect";
          opts.body.filter.awsSubnetIdsContains = [""];
          opts.body.filter.agentVersionLte = "2.5.1.1320";
          opts.body.filter.updatedAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.osVersionContains = ["Service Pack 1"];
          opts.body.filter.externalIpContains = ["205","127.0"];
          opts.body.filter.awsSecurityGroupsContains = [""];
          opts.body.filter.k8sNodeNameContains = [""];
          opts.body.filter.agentVersionBetween = "2.0.0.0-2.1.5.144";
          opts.body.filter.activeThreats = 3;
          opts.body.filter.hasTags = false;
          opts.body.filter.agentNamespaceContains = [""];
          opts.body.filter.cpuCountLt = 0;
          opts.body.filter.registeredAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.networkInterfaceInetContains = ["192","10.0.0"];
          opts.body.filter.computerNameContains = ["john-office","WIN"];
          opts.body.filter.cloudNetworkContains = [""];
          opts.body.filter.remoteOpsForensicsSupported = false;
          opts.body.filter.remoteProfilingStates = [""];
          opts.body.filter.filteredGroupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.agentPodNameContains = [""];
          opts.body.filter.userActionsNeededNin = ["reboot_needed","upgrade_needed"];
          opts.body.filter.rangerStatuses = ["NotApplicable"];
          opts.body.filter.computerNameLike = "Lab1";
          opts.body.filter.externalIdContains = ["Tag#1 - monitoring","Performance machine"];
          opts.body.filter.createdAtBetween = "1514978890136-1514978650130";
          opts.body.filter.consoleMigrationStatusesNin = ["N/A"];
          opts.body.filter.cpuIdContains = ["Intel","AMD"];
          opts.body.filter.coreCountBetween = "2-8";
          opts.body.filter.isUpToDate = false;
          opts.body.filter.threatCreatedAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.rangerStatus = "NotApplicable";
          opts.body.filter.totalMemoryBetween = "4-8";
          opts.body.filter.lastSuccessfulScanDateLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.domains = ["mybusiness.net","workgroup"];
          opts.body.filter.awsRoleContains = [""];
          opts.body.filter.lastLoggedInUserNameContains = ["admin","johnd1"];
          opts.body.filter.cpuCountGt = 0;
          opts.body.filter.cloudAccountContains = [""];
          opts.body.filter.clusterNameContains = [""];
          opts.body.filter.scanStatuses = ["started","aborted"];
          opts.body.filter.updatedAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.liveUpdateIdContains = [""];
          opts.body.filter.computerName = "My Office Desktop";
          opts.body.filter.uuid = "ff819e70af13be381993075eb0ce5f2f6de05be2";
          opts.body.filter.osTypes = ["windows"];
          opts.body.filter.appsVulnerabilityStatuses = ["patch_required"];
          opts.body.filter.lastActiveDateGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.threatContentHash = "cf23df2207d99a74fbe169e3eba035e633b65d94";
          opts.body.filter.agentIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.remoteProfilingStatesNin = [""];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.scanStatus = "none";
          opts.body.filter.filteredSiteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.userActionsNeeded = ["reboot_needed","upgrade_needed"];
          opts.body.filter.registeredAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.osArch = "32 bit";
          opts.body.filter.adComputerNameContains = ["DC=sentinelone"];
          opts.body.filter.totalMemoryGte = 0;
          opts.body.filter.threatHidden = false;
          opts.body.filter.lastActiveDateGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.threatCreatedAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.cpuCountGte = 0;
          opts.body.filter.cloudInstanceIdContains = [""];
          opts.body.filter.agentVersions = ["2.0.0.0","2.1.5.144"];
          opts.body.filter.adQueryContains = ["DC=sentinelone"];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.locationEnabled = [false];
          opts.body.filter.cloudProviderNin = [""];
          opts.body.filter.isPendingUninstall = false;
          opts.body.filter.k8sNodeLabelsContains = [""];
          opts.body.filter.decommissionedAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.tagsData = "{"key1": ["value1_1", "value1_2"], "key2__nin": ["value2"]}";
          opts.body.filter.agentVersionGt = "2.5.1.1320";
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.threatMitigationStatus = "mitigated";
          opts.body.filter.lastSuccessfulScanDateGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.firewallEnabled = [false];
          opts.body.filter.decommissionedAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.decommissionedAtBetween = "1514978890136-1514978650130";
          opts.body.filter.domainsNin = ["mybusiness.net","workgroup"];
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.gcpServiceAccountContains = [""];
          opts.body.filter.threatResolved = false;
          opts.body.filter.cloudLocationContains = [""];
          opts.body.filter.lastActiveDateLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.networkStatuses = ["connected","connecting"];
          opts.body.filter.k8sTypeContains = [""];
          opts.body.filter.networkInterfaceGatewayMacAddressContains = ["aa:0f",":41:"];
          opts.body.filter.cpuCountBetween = "2-8";
          opts.body.filter.operationalStatesNin = [""];
          opts.body.filter.totalMemoryLt = 0;
          opts.body.filter.k8sVersionContains = [""];
          opts.body.filter.installerTypes = [".msi"];
          opts.body.filter.adUserMemberContains = ["DC=sentinelone"];
          opts.body.filter.infected = false;
          opts.body.filter.coreCountLt = 0;
          opts.body.filter.missingPermissions = ["user_action_needed_bluetooth_per","user_action_needed_fda_helper"];
          opts.body.filter.installerTypesNin = [".msi"];
          opts.body.filter.machineTypesNin = ["laptop","desktop"];
          opts.body.filter.filterId = "225494730938493804";
          opts.body.filter.isDecommissioned = [true,false];
          opts.body.filter.agentVersionLt = "2.5.1.1320";
          opts.body.filter.rangerStatusesNin = ["NotApplicable"];
          opts.body.filter.cloudInstanceSizeContains = [""];
          opts.body.filter.rangerVersionsNin = ["2.0.0.0","2.1.5.144"];
          opts.body.filter.rsoLevel = "none";
          opts.body.filter.cpuCountLte = 0;
          opts.body.filter.updatedAtBetween = "1514978890136-1514978650130";
          opts.body.filter.consoleMigrationStatuses = ["N/A"];
          opts.body.filter.azureResourceGroupContains = [""];
          opts.body.filter.threatCreatedAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.uuidContains = ["e92-01928","b055"];
          opts.body.filter.networkStatusesNin = ["connected","connecting"];
          opts.body.filter.totalMemoryLte = 0;
          opts.body.filter.activeThreatsGt = 5;
          opts.body.filter.lastSuccessfulScanDateLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.adQuery = "CN=Managers,DC=sentinelone,DC=com";
          opts.body.filter.uuids = ["ff819e70af13be381993075eb0ce5f2f6de05b11","ff819e70af13be381993075eb0ce5f2f6de05c22"];

          instance.webApiGroupsgroupIdMoveAgentsPut(groupId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.GroupsAddAgentsDataSchema204);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.GroupsAddAgentsDataSchema204Data);
                  expect(data.data.agentsMoved).to.be.a('number');
              expect(data.data.agentsMoved).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiGroupsgroupIdPut', function() {
        it('should call webApiGroupsgroupIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiGroupsgroupIdPut call and complete the assertions
          /*
          var groupId = "groupId_example";
          var opts = {};
          opts.body = new S1MgmtApi.GroupsPutGroupSchema();
          opts.body.data = new S1MgmtApi.GroupsPutGroupSchemaData();
          opts.body.data.description = "";
          opts.body.data.filterId = "225494730938493804";
          opts.body.data.name = "";
          opts.body.data.id = "225494730938493804";
          opts.body.data.rank = 0;
          opts.body.data.policy = new S1MgmtApi.GroupsPostGroupSchemaDataPolicy();
          opts.body.data.policy.autoMitigationAction = "";
          opts.body.data.policy.mitigationMode = "detect";
          opts.body.data.policy.iocAttributes = new S1MgmtApi.SitesSitePutSchemaDataPolicyIocAttributes();
          opts.body.data.policy.iocAttributes.smartFileMonitoring = false;
          opts.body.data.policy.iocAttributes.windowsEventLogs = false;
          opts.body.data.policy.iocAttributes.autoInstallBrowserExtensions = false;
          opts.body.data.policy.iocAttributes.dataMasking = false;
          opts.body.data.policy.iocAttributes.dllModuleLoad = false;
          opts.body.data.policy.iocAttributes.dns = false;
          opts.body.data.policy.iocAttributes.crossProcess = false;
          opts.body.data.policy.iocAttributes.registry = false;
          opts.body.data.policy.iocAttributes.driver = false;
          opts.body.data.policy.iocAttributes.fds = false;
          opts.body.data.policy.iocAttributes.windowsEventLogsExtended = false;
          opts.body.data.policy.iocAttributes.file = false;
          opts.body.data.policy.iocAttributes.namedPipeExtended = false;
          opts.body.data.policy.iocAttributes.url = false;
          opts.body.data.policy.iocAttributes.behavioralIndicators = false;
          opts.body.data.policy.iocAttributes.process = false;
          opts.body.data.policy.iocAttributes.commandScripts = false;
          opts.body.data.policy.iocAttributes.namedPipe = false;
          opts.body.data.policy.iocAttributes.ip = false;
          opts.body.data.policy.iocAttributes.login = false;
          opts.body.data.policy.iocAttributes.scheduledTask = false;
          opts.body.data.policy.researchOn = false;
          opts.body.data.policy.autoFileUpload = new S1MgmtApi.SitesSitePutSchemaDataPolicyAutoFileUpload();
          opts.body.data.policy.autoFileUpload.maxDailyFileUploadLimit = 0;
          opts.body.data.policy.autoFileUpload.includeBenignFiles = false;
          opts.body.data.policy.autoFileUpload.maxLocalDiskUsageLimit = 0;
          opts.body.data.policy.autoFileUpload.maxLocalDiskUsage = 0;
          opts.body.data.policy.autoFileUpload.enabled = false;
          opts.body.data.policy.autoFileUpload.maxFileSizeLimit = 0;
          opts.body.data.policy.autoFileUpload.maxFileSize = 0;
          opts.body.data.policy.autoFileUpload.maxDailyFileUpload = 0;
          opts.body.data.policy.mitigationModeSuspicious = "detect";
          opts.body.data.policy.updatedAt = 2018-02-27T04:49:26.257525Z;
          opts.body.data.policy.antiTamperingOn = false;
          opts.body.data.policy.identityReportInterval = 0;
          opts.body.data.policy.monitorOnExecute = false;
          opts.body.data.policy.userId = "225494730938493804";
          opts.body.data.policy.driverBlocking = false;
          opts.body.data.policy.identityEndpointReporting = "disabled";
          opts.body.data.policy.isDefault = false;
          opts.body.data.policy.ioc = false;
          opts.body.data.policy.agentUiOn = false;
          opts.body.data.policy.monitorOnWrite = false;
          opts.body.data.policy.identityUpdateInterval = 0;
          opts.body.data.policy.iocSupported = false;
          opts.body.data.policy.identityThrottlingInterval = 0;
          opts.body.data.policy.agentLoggingOn = false;
          opts.body.data.policy.unsignedDriverBlockingOn = false;
          opts.body.data.policy.agentUi = new S1MgmtApi.SitesSitePutSchemaDataPolicyAgentUi();
          opts.body.data.policy.agentUi.threatPopUpNotifications = false;
          opts.body.data.policy.agentUi.contactFreeText = "";
          opts.body.data.policy.agentUi.contactEmail = "";
          opts.body.data.policy.agentUi.maxEventAgeDays = 0;
          opts.body.data.policy.agentUi.showAgentWarnings = false;
          opts.body.data.policy.agentUi.contactPhoneNumber = "";
          opts.body.data.policy.agentUi.showDeviceTab = false;
          opts.body.data.policy.agentUi.devicePopUpNotifications = false;
          opts.body.data.policy.agentUi.showSupport = false;
          opts.body.data.policy.agentUi.showQuarantineTab = false;
          opts.body.data.policy.agentUi.contactCompany = "";
          opts.body.data.policy.agentUi.showSuspicious = false;
          opts.body.data.policy.agentUi.contactOther = "";
          opts.body.data.policy.agentUi.contactDirectMessage = "";
          opts.body.data.policy.agentUi.contactSupportWebsite = "";
          opts.body.data.policy.agentUi.agentUiOn = false;
          opts.body.data.policy.userFullName = "";
          opts.body.data.policy.signedDriverBlockingOn = false;
          opts.body.data.policy.allowRemoteShell = false;
          opts.body.data.policy.isDvPolicyPerEventType = false;
          opts.body.data.policy.removeMacros = false;
          opts.body.data.policy.scanNewAgents = false;
          opts.body.data.policy.snapshotsOn = false;
          opts.body.data.policy.engines = new S1MgmtApi.SitesSitePutSchemaDataPolicyEngines();
          opts.body.data.policy.engines.lateralMovement = "on";
          opts.body.data.policy.engines.preExecutionSuspicious = "on";
          opts.body.data.policy.engines.preExecution = "on";
          opts.body.data.policy.engines.dataFiles = "on";
          opts.body.data.policy.engines.pup = "on";
          opts.body.data.policy.engines.executables = "on";
          opts.body.data.policy.engines.penetration = "on";
          opts.body.data.policy.engines.applicationControl = "on";
          opts.body.data.policy.engines.reputation = "on";
          opts.body.data.policy.engines.exploits = "on";
          opts.body.data.policy.engines.remoteShell = "on";
          opts.body.data.policy.remoteOpsForensics = new S1MgmtApi.SitesSitePutSchemaDataPolicyRemoteOpsForensics();
          opts.body.data.policy.remoteOpsForensics.parsedArtifactsDestination = "local";
          opts.body.data.policy.remoteOpsForensics.maximumFileSizeUpload = "0";
          opts.body.data.policy.remoteOpsForensics.maximumDailyUpload = "0";
          opts.body.data.policy.remoteOpsForensics.maximumFileSizeUploadLimit = "0";
          opts.body.data.policy.remoteOpsForensics.enabled = false;
          opts.body.data.policy.remoteOpsForensics.cpuLimit = 0;
          opts.body.data.policy.remoteOpsForensics.maximumDailyUploadLimit = "0";
          opts.body.data.policy.forensicsAutoTriggering = new S1MgmtApi.SitesSitePutSchemaDataPolicyForensicsAutoTriggering();
          opts.body.data.policy.forensicsAutoTriggering.windowsProfileId = "";
          opts.body.data.policy.forensicsAutoTriggering.linuxEnabled = false;
          opts.body.data.policy.forensicsAutoTriggering.macosProfileName = "";
          opts.body.data.policy.forensicsAutoTriggering.macosProfileId = "";
          opts.body.data.policy.forensicsAutoTriggering.windowsProfileName = "";
          opts.body.data.policy.forensicsAutoTriggering.linuxProfileName = "";
          opts.body.data.policy.forensicsAutoTriggering.windowsEnabled = false;
          opts.body.data.policy.forensicsAutoTriggering.linuxProfileId = "";
          opts.body.data.policy.forensicsAutoTriggering.macosEnabled = false;
          opts.body.data.policy.identityOn = false;
          opts.body.data.policy.cloudValidationOn = ;
          opts.body.data.policy.autoImmuneOn = false;
          opts.body.data.policy.agentNotification = false;
          opts.body.data.policy.createdAt = 2018-02-27T04:49:26.257525Z;
          opts.body.data.policy.networkQuarantineOn = false;
          opts.body.data.policy.autoDecommissionDays = 0;
          opts.body.data.policy.remoteScriptOrchestration = new S1MgmtApi.SitesSitePutSchemaDataPolicyRemoteScriptOrchestration();
          opts.body.data.policy.remoteScriptOrchestration.alwaysUploadStreamToCloud = false;
          opts.body.data.policy.remoteScriptOrchestration.maxLocalPackageDiskUsageLimit = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxDailyFileUploadLimit = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxLocalPackageDiskUsage = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxDailyFileDownloadLimit = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxFileSizeLimit = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxDailyFileDownload = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxFileSize = "0";
          opts.body.data.policy.remoteScriptOrchestration.maxDailyFileUpload = "0";
          opts.body.data.policy.autoDecommissionOn = false;
          opts.body.data.policy.dvAttributesPerEventType = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventType();
          opts.body.data.policy.dvAttributesPerEventType.smartFileMonitoring = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeSmartFileMonitoring();
          opts.body.data.policy.dvAttributesPerEventType.smartFileMonitoring.smartFileMonitoring = false;
          opts.body.data.policy.dvAttributesPerEventType.windowsEventLogs = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeWindowsEventLogs();
          opts.body.data.policy.dvAttributesPerEventType.windowsEventLogs.dvEventTypeWindowsEventLogCreation = false;
          opts.body.data.policy.dvAttributesPerEventType.autoInstallBrowserExtensions = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeAutoInstallBrowserExtensions();
          opts.body.data.policy.dvAttributesPerEventType.autoInstallBrowserExtensions.autoInstallBrowserExtensions = false;
          opts.body.data.policy.dvAttributesPerEventType.dataMasking = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeDataMasking();
          opts.body.data.policy.dvAttributesPerEventType.dataMasking.dataMasking = false;
          opts.body.data.policy.dvAttributesPerEventType.dllModuleLoad = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeDllModuleLoad();
          opts.body.data.policy.dvAttributesPerEventType.dllModuleLoad.dvEventTypeDllModuleLoad = false;
          opts.body.data.policy.dvAttributesPerEventType.dns = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeDns();
          opts.body.data.policy.dvAttributesPerEventType.dns.dvEventTypeDns = false;
          opts.body.data.policy.dvAttributesPerEventType.crossProcess = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeCrossProcess();
          opts.body.data.policy.dvAttributesPerEventType.crossProcess.dvEventTypeCrossProcessOpenProcess = false;
          opts.body.data.policy.dvAttributesPerEventType.crossProcess.dvEventTypeCrossProcessRemoteThread = false;
          opts.body.data.policy.dvAttributesPerEventType.crossProcess.dvEventTypeCrossProcessDuplicateProcess = false;
          opts.body.data.policy.dvAttributesPerEventType.crossProcess.dvEventTypeCrossProcessDuplicateThread = false;
          opts.body.data.policy.dvAttributesPerEventType.registry = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeRegistry();
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeySecurityChanged = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryValueDeleted = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryValueModified = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeyRename = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeyCreated = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryValueCreated = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeyImport = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeyDelete = false;
          opts.body.data.policy.dvAttributesPerEventType.registry.dvEventTypeRegistryKeyExport = false;
          opts.body.data.policy.dvAttributesPerEventType.driver = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeDriver();
          opts.body.data.policy.dvAttributesPerEventType.driver.dvEventTypeDriverLoad = false;
          opts.body.data.policy.dvAttributesPerEventType.windowsEventLogsExtended = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeWindowsEventLogsExtended();
          opts.body.data.policy.dvAttributesPerEventType.windowsEventLogsExtended.windowsEventLogsExtended = false;
          opts.body.data.policy.dvAttributesPerEventType.file = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeFile();
          opts.body.data.policy.dvAttributesPerEventType.file.dvEventTypeFileModification = false;
          opts.body.data.policy.dvAttributesPerEventType.file.dvEventTypeFileCreation = false;
          opts.body.data.policy.dvAttributesPerEventType.file.dvEventTypeFileRename = false;
          opts.body.data.policy.dvAttributesPerEventType.file.dvEventTypeFileDeletion = false;
          opts.body.data.policy.dvAttributesPerEventType.file.fullDiskScan = false;
          opts.body.data.policy.dvAttributesPerEventType.namedPipeExtended = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeNamedPipeExtended();
          opts.body.data.policy.dvAttributesPerEventType.namedPipeExtended.namedPipeExtended = false;
          opts.body.data.policy.dvAttributesPerEventType.url = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeUrl();
          opts.body.data.policy.dvAttributesPerEventType.url.dvEventTypeUrl = false;
          opts.body.data.policy.dvAttributesPerEventType.behavioralIndicators = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeBehavioralIndicators();
          opts.body.data.policy.dvAttributesPerEventType.behavioralIndicators.dvEventTypeBehavioralIndicators = false;
          opts.body.data.policy.dvAttributesPerEventType.process = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeProcess();
          opts.body.data.policy.dvAttributesPerEventType.process.dvEventTypeProcessModification = false;
          opts.body.data.policy.dvAttributesPerEventType.process.dvEventTypeProcessExit = false;
          opts.body.data.policy.dvAttributesPerEventType.process.dvEventTypeProcessCreation = false;
          opts.body.data.policy.dvAttributesPerEventType.commandScripts = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeCommandScripts();
          opts.body.data.policy.dvAttributesPerEventType.commandScripts.dvEventTypeCommandScripts = false;
          opts.body.data.policy.dvAttributesPerEventType.namedPipe = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeNamedPipe();
          opts.body.data.policy.dvAttributesPerEventType.namedPipe.dvEventTypeNamedPipeConnection = false;
          opts.body.data.policy.dvAttributesPerEventType.namedPipe.dvEventTypeNamedPipeCreation = false;
          opts.body.data.policy.dvAttributesPerEventType.ip = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeIp();
          opts.body.data.policy.dvAttributesPerEventType.ip.dvEventTypeIpConnect = false;
          opts.body.data.policy.dvAttributesPerEventType.ip.dvEventTypeIpListen = false;
          opts.body.data.policy.dvAttributesPerEventType.login = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeLogin();
          opts.body.data.policy.dvAttributesPerEventType.login.dvEventTypeLoginLoggedOut = false;
          opts.body.data.policy.dvAttributesPerEventType.login.dvEventTypeLoginLoggedIn = false;
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask = new S1MgmtApi.SitesSitePutSchemaDataPolicyDvAttributesPerEventTypeScheduledTask();
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask.dvEventTypeScheduledTaskDelete = false;
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask.dvEventTypeScheduledTaskUpdate = false;
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask.dvEventTypeScheduledTaskRegister = false;
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask.dvEventTypeScheduledTaskTrigger = false;
          opts.body.data.policy.dvAttributesPerEventType.scheduledTask.dvEventTypeScheduledTaskStart = false;
          opts.body.data.source = "";
          opts.body.data.siteId = "225494730938493804";
          opts.body.data.inherits = false;
          opts.body.data.isDefault = false;

          instance.webApiGroupsgroupIdPut(groupId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.GroupsGroupSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.GroupsGroupSchema200Data);
                  expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("");
              expect(data.data.filterId).to.be.a('string');
              expect(data.data.filterId).to.be("225494730938493804");
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("");
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              expect(data.data.rank).to.be.a('number');
              expect(data.data.rank).to.be(1);
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.siteId).to.be.a('string');
              expect(data.data.siteId).to.be("225494730938493804");
              expect(data.data.type).to.be.a('string');
              expect(data.data.type).to.be("static");
              expect(data.data.registrationToken).to.be.a(Object);
              expect(data.data.registrationToken).to.be(eyJ1cmwiOiAiaHR0cHM6Ly9jb25zb2xlLnNlbnRpbmVsb25lLm5ldCIsICJzaXRlX2tleSI6ICIwNzhkYjliMWUyOTA1Y2NhIn0=);
              expect(data.data.isDefault).to.be.a('boolean');
              expect(data.data.isDefault).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiGroupsgroupIdRegenerateKeyPut', function() {
        it('should call webApiGroupsgroupIdRegenerateKeyPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiGroupsgroupIdRegenerateKeyPut call and complete the assertions
          /*
          var groupId = "groupId_example";

          instance.webApiGroupsgroupIdRegenerateKeyPut(groupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.GroupsRegenerateKeySchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SitesRegenerateKeySchema200Data);
                  expect(data.data.registrationToken).to.be.a('string');
              expect(data.data.registrationToken).to.be("eyJ1cmwiOiAiaHR0cHM6Ly9jb25zb2xlLnNlbnRpbmVsb25lLm5ldCIsICJzaXRlX2tleSI6ICIwNzhkYjliMWUyOTA1Y2NhIn0=");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiGroupsgroupIdRevertPolicyPut', function() {
        it('should call webApiGroupsgroupIdRevertPolicyPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiGroupsgroupIdRevertPolicyPut call and complete the assertions
          /*
          var groupId = "groupId_example";
          var opts = {};
          opts.body = new S1MgmtApi.PoliciesSchemasRevertPolicySchema();
          opts.body.data = new S1MgmtApi.PoliciesSchemasRevertPolicySchemaData();
          opts.body.data.id = "225494730938493804";

          instance.webApiGroupsgroupIdRevertPolicyPut(groupId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiGroupsgroupIdTokenGet', function() {
        it('should call webApiGroupsgroupIdTokenGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiGroupsgroupIdTokenGet call and complete the assertions
          /*
          var groupId = "groupId_example";

          instance.webApiGroupsgroupIdTokenGet(groupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.GroupsGroupTokenGenerationSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SitesSiteTokenGenerationSchema200Data);
                  expect(data.data.token).to.be.a('string');
              expect(data.data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
