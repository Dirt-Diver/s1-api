/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.CloudResourcesApi();
  });

  describe('(package)', function() {
    describe('CloudResourcesApi', function() {
      describe('webApiCloudnativeCloudRoguesExportGet', function() {
        it('should call webApiCloudnativeCloudRoguesExportGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiCloudnativeCloudRoguesExportGet call
          /*
          var exportFormat = "exportFormat_example";
          var opts = {};
          opts.skip = 56;
          opts.osTypes = ["osTypes_example"];
          opts.siteIds = ["siteIds_example"];
          opts.cloudProviderName = ["cloudProviderName_example"];
          opts.sortOrder = "null";
          opts.idContains = ["idContains_example"];
          opts.limit = 10;
          opts.cloudProviderAccountIdContains = ["cloudProviderAccountIdContains_example"];
          opts.virtualNetworkIdContains = ["virtualNetworkIdContains_example"];
          opts.nameContains = ["nameContains_example"];
          opts.cloudProviderAccountNameContains = ["cloudProviderAccountNameContains_example"];
          opts.cloudProviderAccountName = ["cloudProviderAccountName_example"];
          opts.region = ["region_example"];
          opts.skipCount = null;
          opts.cursor = "null";
          opts.sortBy = "null";
          opts.imageContains = ["imageContains_example"];
          opts.regionContains = ["regionContains_example"];
          opts.countOnly = false;
          opts.accountIds = ["accountIds_example"];

          instance.webApiCloudnativeCloudRoguesExportGet(exportFormat, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiCloudnativeCloudRoguesGet', function() {
        it('should call webApiCloudnativeCloudRoguesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiCloudnativeCloudRoguesGet call and complete the assertions
          /*
          var opts = {};
          opts.skip = 56;
          opts.osTypes = ["osTypes_example"];
          opts.siteIds = ["siteIds_example"];
          opts.cloudProviderName = ["cloudProviderName_example"];
          opts.sortOrder = "null";
          opts.idContains = ["idContains_example"];
          opts.limit = 10;
          opts.cloudProviderAccountIdContains = ["cloudProviderAccountIdContains_example"];
          opts.virtualNetworkIdContains = ["virtualNetworkIdContains_example"];
          opts.nameContains = ["nameContains_example"];
          opts.cloudProviderAccountNameContains = ["cloudProviderAccountNameContains_example"];
          opts.cloudProviderAccountName = ["cloudProviderAccountName_example"];
          opts.region = ["region_example"];
          opts.skipCount = null;
          opts.cursor = "null";
          opts.sortBy = "null";
          opts.imageContains = ["imageContains_example"];
          opts.regionContains = ["regionContains_example"];
          opts.countOnly = false;
          opts.accountIds = ["accountIds_example"];

          instance.webApiCloudnativeCloudRoguesGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21RoguesSchemasCloudResourcesSchema200);
            expect(data.data).to.be.a(S1MgmtApi.V21RoguesSchemasCloudResourcesSchema200Data);
                  {
                let dataCtr = data.data.resources;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.V21RoguesSchemasCloudResourcesSchema200DataResources);
                  expect(data.cloudProviderAccountName).to.be.a('string');
                  expect(data.cloudProviderAccountName).to.be("");
                  expect(data.resourceType).to.be.a('string');
                  expect(data.resourceType).to.be("");
                  expect(data.virtualNetworkId).to.be.a('string');
                  expect(data.virtualNetworkId).to.be("");
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("225494730938493804");
                  expect(data.tags).to.be.a(Object);
                  expect(data.tags).to.be();
                  expect(data.osTypeIcon).to.be.a('string');
                  expect(data.osTypeIcon).to.be("");
                  expect(data.region).to.be.a('string');
                  expect(data.region).to.be("");
                  expect(data.osType).to.be.a('string');
                  expect(data.osType).to.be("");
                  expect(data.cloudProviderName).to.be.a('string');
                  expect(data.cloudProviderName).to.be("");
                  expect(data.cloudProviderOrganization).to.be.a('string');
                  expect(data.cloudProviderOrganization).to.be("");
                  expect(data.createdTime).to.be.a('string');
                  expect(data.createdTime).to.be("");
                  expect(data.cloudProviderAccountId).to.be.a('string');
                  expect(data.cloudProviderAccountId).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
