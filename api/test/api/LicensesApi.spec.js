/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.LicensesApi();
  });

  describe('(package)', function() {
    describe('LicensesApi', function() {
      describe('webApiLicensesUpdateSitesModulesPut', function() {
        it('should call webApiLicensesUpdateSitesModulesPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiLicensesUpdateSitesModulesPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.LicensesSchemasSiteBulkModulesSchema();
          opts.body.filter = new S1MgmtApi.SitesSiteBulkPutSchemaFilter();
          opts.body.filter.nameContains = [""];
          opts.body.filter.accountId = "225494730938493804";
          opts.body.filter.availableMoveSites = false;
          opts.body.filter.healthStatus = false;
          opts.body.filter.updatedAt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.features = ["firewall-control"];
          opts.body.filter.expiration = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.siteType = "Trial";
          opts.body.filter.adminOnly = false;
          opts.body.filter.query = "";
          opts.body.filter.isDefault = false;
          opts.body.filter.state = "active";
          opts.body.filter.activeLicenses = 0;
          opts.body.filter.totalLicenses = 0;
          opts.body.filter.states = [""];
          opts.body.filter.externalId = "";
          opts.body.filter.suite = "Core";
          opts.body.filter.accountNameContains = [""];
          opts.body.filter.registrationToken = "eyJ1cmwiOiAiaHR0cHM6Ly9jb25zb2xlLnNlbnRpbmVsb25lLm5ldCIsICJzaXRlX2tleSI6ICIwNzhkYjliMWUyOTA1Y2NhIn0=";
          opts.body.filter.module = "star,rso";
          opts.body.filter.description = "";
          opts.body.filter.name = "My Site";
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.createdAt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.sku = "core";
          opts.body.filter.descriptionContains = [""];
          opts.body.data = new S1MgmtApi.LicensesSchemasSiteBulkModulesSchemaData();
          opts.body.data.modules = [new S1MgmtApi.LicensesSchemasSiteBulkModulesSchemaDataModules()];
          opts.body.data.modules[0].name = "";
          opts.body.data.operation = "add";

          instance.webApiLicensesUpdateSitesModulesPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
