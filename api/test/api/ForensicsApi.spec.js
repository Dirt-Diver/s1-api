/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.ForensicsApi();
  });

  describe('(package)', function() {
    describe('ForensicsApi', function() {
      describe('webApiApplicationsapplicationIdForensicsConnectionsGet', function() {
        it('should call webApiApplicationsapplicationIdForensicsConnectionsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiApplicationsapplicationIdForensicsConnectionsGet call and complete the assertions
          /*
          var applicationId = "applicationId_example";
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.countryCode = "";
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];

          instance.webApiApplicationsapplicationIdForensicsConnectionsGet(applicationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ForensicsConnectionsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.ForensicsConnectionsSchema200Data);
                  {
                let dataCtr = data.data.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiApplicationsapplicationIdForensicsDetailsGet', function() {
        it('should call webApiApplicationsapplicationIdForensicsDetailsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiApplicationsapplicationIdForensicsDetailsGet call and complete the assertions
          /*
          var applicationId = "applicationId_example";
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];

          instance.webApiApplicationsapplicationIdForensicsDetailsGet(applicationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ForensicsApplicationDetailsContentFields200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.ForensicsApplicationDetailsContentFields200Data);
                  expect(data.data.result).to.be.a(S1MgmtApi.ForensicsApplicationDetailsContentFields200DataResult);
                    expect(data.data.result.process).to.be.a(S1MgmtApi.ForensicsApplicationContentFields200DataResultProcess);
                      expect(data.data.result.process.bundleId).to.be.a('string');
                  expect(data.data.result.process.bundleId).to.be("");
                  expect(data.data.result.process.isPrimary).to.be.a('boolean');
                  expect(data.data.result.process.isPrimary).to.be(false);
                  expect(data.data.result.process.username).to.be.a('string');
                  expect(data.data.result.process.username).to.be("");
                  expect(data.data.result.process.createdDate).to.be.a('string');
                  expect(data.data.result.process.createdDate).to.be("");
                  expect(data.data.result.process.pid).to.be.a('number');
                  expect(data.data.result.process.pid).to.be(0);
                  expect(data.data.result.process.objectId).to.be.a('string');
                  expect(data.data.result.process.objectId).to.be("");
                  expect(data.data.result.process.isRoot).to.be.a('boolean');
                  expect(data.data.result.process.isRoot).to.be(false);
                  expect(data.data.result.process.executableFileId).to.be.a('string');
                  expect(data.data.result.process.executableFileId).to.be("");
                  expect(data.data.result.process.displayName).to.be.a('string');
                  expect(data.data.result.process.displayName).to.be("");
                expect(data.data.result.fetchStorySentAt).to.be.a(Date);
                expect(data.data.result.fetchStorySentAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.result.applicationId).to.be.a('string');
                expect(data.data.result.applicationId).to.be("");
                expect(data.data.result.fetchStoryErrorAt).to.be.a(Date);
                expect(data.data.result.fetchStoryErrorAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.result.agent).to.be.a('string');
                expect(data.data.result.agent).to.be("");
                expect(data.data.result.file).to.be.a(S1MgmtApi.ForensicsApplicationContentFields200DataResultFile);
                      expect(data.data.result.file.createdDate).to.be.a('string');
                  expect(data.data.result.file.createdDate).to.be("");
                  expect(data.data.result.file.path).to.be.a('string');
                  expect(data.data.result.file.path).to.be("");
                  expect(data.data.result.file.size).to.be.a('number');
                  expect(data.data.result.file.size).to.be(0);
                  expect(data.data.result.file.permission).to.be.a('string');
                  expect(data.data.result.file.permission).to.be("");
                  expect(data.data.result.file.objectId).to.be.a('string');
                  expect(data.data.result.file.objectId).to.be("");
                  expect(data.data.result.file.contentHash).to.be.a('string');
                  expect(data.data.result.file.contentHash).to.be("");
                  expect(data.data.result.file.isSystem).to.be.a('boolean');
                  expect(data.data.result.file.isSystem).to.be(false);
                  expect(data.data.result.file.displayName).to.be.a('string');
                  expect(data.data.result.file.displayName).to.be("");
                expect(data.data.result.seenOnNetwork).to.be.a('number');
                expect(data.data.result.seenOnNetwork).to.be(0);
                expect(data.data.result.summaryOverview).to.be.a(S1MgmtApi.ForensicsApplicationDetailsContentFields200DataResultSummaryOverview);
                      expect(data.data.result.summaryOverview.registry).to.be.a(S1MgmtApi.ForensicsApplicationDetailsContentFields200DataResultSummaryOverviewRegistry);
                        expect(data.data.result.summaryOverview.registry.persistence).to.be.a('number');
                    expect(data.data.result.summaryOverview.registry.persistence).to.be(0);
                    expect(data.data.result.summaryOverview.registry.security).to.be.a('number');
                    expect(data.data.result.summaryOverview.registry.security).to.be(0);
                    expect(data.data.result.summaryOverview.registry.stealth).to.be.a('number');
                    expect(data.data.result.summaryOverview.registry.stealth).to.be(0);
                  expect(data.data.result.summaryOverview.file).to.be.a(S1MgmtApi.ForensicsApplicationDetailsContentFields200DataResultSummaryOverviewFile);
                        expect(data.data.result.summaryOverview.file.write).to.be.a('number');
                    expect(data.data.result.summaryOverview.file.write).to.be(0);
                    expect(data.data.result.summaryOverview.file._delete).to.be.a('number');
                    expect(data.data.result.summaryOverview.file._delete).to.be(0);
                    expect(data.data.result.summaryOverview.file.create).to.be.a('number');
                    expect(data.data.result.summaryOverview.file.create).to.be(0);
                  expect(data.data.result.summaryOverview.network).to.be.a(S1MgmtApi.ForensicsApplicationDetailsContentFields200DataResultSummaryOverviewNetwork);
                        expect(data.data.result.summaryOverview.network.connections).to.be.a('number');
                    expect(data.data.result.summaryOverview.network.connections).to.be(0);
                    expect(data.data.result.summaryOverview.network.dns).to.be.a('number');
                    expect(data.data.result.summaryOverview.network.dns).to.be(0);
                expect(data.data.result.lastEventSeenAt).to.be.a(Date);
                expect(data.data.result.lastEventSeenAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.result.rawData).to.be.a(Object);
                expect(data.data.result.rawData).to.be();
                expect(data.data.result.processCreatedAt).to.be.a(Date);
                expect(data.data.result.processCreatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.result.processDisplayName).to.be.a('string');
                expect(data.data.result.processDisplayName).to.be("");
                expect(data.data.result.categoryScores).to.be.a(Object);
                expect(data.data.result.categoryScores).to.be();
                expect(data.data.result.applicationDuration).to.be.a('string');
                expect(data.data.result.applicationDuration).to.be("");
                expect(data.data.result.applicationCreated).to.be.a(Date);
                expect(data.data.result.applicationCreated).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.result.fetchStoryStatus).to.be.a('string');
                expect(data.data.result.fetchStoryStatus).to.be("");
                expect(data.data.result.graph).to.be.a(Object);
                expect(data.data.result.graph).to.be();
                expect(data.data.result.summary).to.be.a(Object);
                expect(data.data.result.summary).to.be();
              expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiApplicationsapplicationIdForensicsExportexportFormatGet', function() {
        it('should call webApiApplicationsapplicationIdForensicsExportexportFormatGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiApplicationsapplicationIdForensicsExportexportFormatGet call
          /*
          var applicationId = "applicationId_example";
          var exportFormat = "exportFormat_example";
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];

          instance.webApiApplicationsapplicationIdForensicsExportexportFormatGet(applicationId, exportFormat, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiApplicationsapplicationIdForensicsGet', function() {
        it('should call webApiApplicationsapplicationIdForensicsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiApplicationsapplicationIdForensicsGet call and complete the assertions
          /*
          var applicationId = "applicationId_example";
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];

          instance.webApiApplicationsapplicationIdForensicsGet(applicationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ForensicsApplicationContentFields200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.ForensicsApplicationContentFields200Data);
                  expect(data.data.result).to.be.a(S1MgmtApi.ForensicsApplicationContentFields200DataResult);
                    expect(data.data.result.process).to.be.a(S1MgmtApi.ForensicsApplicationContentFields200DataResultProcess);
                      expect(data.data.result.process.bundleId).to.be.a('string');
                  expect(data.data.result.process.bundleId).to.be("");
                  expect(data.data.result.process.isPrimary).to.be.a('boolean');
                  expect(data.data.result.process.isPrimary).to.be(false);
                  expect(data.data.result.process.username).to.be.a('string');
                  expect(data.data.result.process.username).to.be("");
                  expect(data.data.result.process.createdDate).to.be.a('string');
                  expect(data.data.result.process.createdDate).to.be("");
                  expect(data.data.result.process.pid).to.be.a('number');
                  expect(data.data.result.process.pid).to.be(0);
                  expect(data.data.result.process.objectId).to.be.a('string');
                  expect(data.data.result.process.objectId).to.be("");
                  expect(data.data.result.process.isRoot).to.be.a('boolean');
                  expect(data.data.result.process.isRoot).to.be(false);
                  expect(data.data.result.process.executableFileId).to.be.a('string');
                  expect(data.data.result.process.executableFileId).to.be("");
                  expect(data.data.result.process.displayName).to.be.a('string');
                  expect(data.data.result.process.displayName).to.be("");
                expect(data.data.result.applicationId).to.be.a('string');
                expect(data.data.result.applicationId).to.be("");
                expect(data.data.result.file).to.be.a(S1MgmtApi.ForensicsApplicationContentFields200DataResultFile);
                      expect(data.data.result.file.createdDate).to.be.a('string');
                  expect(data.data.result.file.createdDate).to.be("");
                  expect(data.data.result.file.path).to.be.a('string');
                  expect(data.data.result.file.path).to.be("");
                  expect(data.data.result.file.size).to.be.a('number');
                  expect(data.data.result.file.size).to.be(0);
                  expect(data.data.result.file.permission).to.be.a('string');
                  expect(data.data.result.file.permission).to.be("");
                  expect(data.data.result.file.objectId).to.be.a('string');
                  expect(data.data.result.file.objectId).to.be("");
                  expect(data.data.result.file.contentHash).to.be.a('string');
                  expect(data.data.result.file.contentHash).to.be("");
                  expect(data.data.result.file.isSystem).to.be.a('boolean');
                  expect(data.data.result.file.isSystem).to.be(false);
                  expect(data.data.result.file.displayName).to.be.a('string');
                  expect(data.data.result.file.displayName).to.be("");
                expect(data.data.result.seenOnNetwork).to.be.a('number');
                expect(data.data.result.seenOnNetwork).to.be(0);
                expect(data.data.result.processCreatedAt).to.be.a(Date);
                expect(data.data.result.processCreatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.result.processDisplayName).to.be.a('string');
                expect(data.data.result.processDisplayName).to.be("");
                expect(data.data.result.maliciousProcessArguments).to.be.a('string');
                expect(data.data.result.maliciousProcessArguments).to.be("");
                expect(data.data.result.agent).to.be.a('string');
                expect(data.data.result.agent).to.be("");
                expect(data.data.result.applicationCreated).to.be.a(Date);
                expect(data.data.result.applicationCreated).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.result.fetchStoryStatus).to.be.a('string');
                expect(data.data.result.fetchStoryStatus).to.be("");
              expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
