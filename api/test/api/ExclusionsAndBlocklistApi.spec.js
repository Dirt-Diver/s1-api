/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.ExclusionsAndBlocklistApi();
  });

  describe('(package)', function() {
    describe('ExclusionsAndBlocklistApi', function() {
      describe('webApiExclusionsDelete', function() {
        it('should call webApiExclusionsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiExclusionsDelete call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ExclusionsSchemasDeleteExclusionSchema();
          opts.body.data = new S1MgmtApi.ExclusionsSchemasDeleteExclusionSchemaData();
          opts.body.data.ids = ["225494730938493804","225494730938493915"];
          opts.body.data.type = "path";

          instance.webApiExclusionsDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiExclusionsGet', function() {
        it('should call webApiExclusionsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiExclusionsGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "null";
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.unified = true;
          opts.includeChildren = true;
          opts.updatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.ids = ["ids_example"];
          opts.query = "query_example";
          opts.inAppInventory = true;
          opts.countOnly = false;
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.valueContains = ["valueContains_example"];
          opts.limit = 10;
          opts.updatedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.source = ["source_example"];
          opts.osTypes = ["osTypes_example"];
          opts.skip = 56;
          opts.recommendations = ["recommendations_example"];
          opts.skipCount = null;
          opts.sortOrder = "null";
          opts.updatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.pathExclusionTypes = ["pathExclusionTypes_example"];
          opts.imported = true;
          opts.value = "value_example";
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.includeParents = true;
          opts.userContains = ["userContains_example"];
          opts.type = "type_example";
          opts.sortBy = "null";
          opts.tenant = true;
          opts.createdAtBetween = "createdAtBetween_example";
          opts.groupIds = ["groupIds_example"];
          opts.updatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.updatedAtBetween = "updatedAtBetween_example";
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.descriptionContains = ["descriptionContains_example"];
          opts.modes = ["modes_example"];
          opts.userIds = ["userIds_example"];
          opts.types = ["types_example"];
          opts.applicationNameContains = ["applicationNameContains_example"];
          opts.modeType = "modeType_example";

          instance.webApiExclusionsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ExclusionsSchemasExclusionSchemaGetMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.ExclusionsSchemasExclusionSchemaGetMany200Data);
                expect(data.mode).to.be.a('string');
                expect(data.mode).to.be("suppress");
                expect(data.includeChildren).to.be.a('boolean');
                expect(data.includeChildren).to.be(false);
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.pathExclusionType).to.be.a('string');
                expect(data.pathExclusionType).to.be("file");
                expect(data.userId).to.be.a('string');
                expect(data.userId).to.be("225494730938493804");
                {
                  let dataCtr = data.actions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("upload");
                  }
                }
                expect(data.inAppInventory).to.be.a('boolean');
                expect(data.inAppInventory).to.be(false);
                expect(data.notRecommended).to.be.a('string');
                expect(data.notRecommended).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.source).to.be.a('string');
                expect(data.source).to.be("user");
                expect(data.imported).to.be.a('boolean');
                expect(data.imported).to.be(false);
                expect(data.scopePath).to.be.a('string');
                expect(data.scopePath).to.be("");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
                expect(data.inject).to.be.a('boolean');
                expect(data.inject).to.be(false);
                expect(data.userName).to.be.a('string');
                expect(data.userName).to.be("");
                expect(data.applicationName).to.be.a('string');
                expect(data.applicationName).to.be("");
                expect(data.includeParents).to.be.a('boolean');
                expect(data.includeParents).to.be(false);
                expect(data.scopeName).to.be.a('string');
                expect(data.scopeName).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
                expect(data.scope).to.be.a(S1MgmtApi.ExclusionsSchemasExclusionSchemaGetMany200Scope);
                      {
                    let dataCtr = data.scope.accountIds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }
                  expect(data.scope.tenant).to.be.a('boolean');
                  expect(data.scope.tenant).to.be(false);
                  {
                    let dataCtr = data.scope.groupIds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }
                  {
                    let dataCtr = data.scope.siteIds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.osType).to.be.a('string');
                expect(data.osType).to.be("windows");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiExclusionsImportPost', function() {
        it('should call webApiExclusionsImportPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiExclusionsImportPost call and complete the assertions
          /*
          var file = "/path/to/file.txt";
          var opts = {};
          opts.filter = "filter_example";

          instance.webApiExclusionsImportPost(file, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ExclusionsSchemasImportExclusionsOrBlockListResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.ExclusionsSchemasImportExclusionsOrBlockListResponseSchema200Data);
                  expect(data.data.reportId).to.be.a('string');
              expect(data.data.reportId).to.be("225494730938493804");
              expect(data.data.total).to.be.a('number');
              expect(data.data.total).to.be(0);
              expect(data.data.succeeded).to.be.a('number');
              expect(data.data.succeeded).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiExclusionsPost', function() {
        it('should call webApiExclusionsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiExclusionsPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ExclusionsSchemasPostExclusionSchema();
          opts.body.filter = new S1MgmtApi.ExclusionsSchemasPostExclusionSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.ExclusionsSchemasPostExclusionSchemaData();
          opts.body.data.description = "";
          opts.body.data.osType = "windows";
          opts.body.data.mode = "suppress";
          opts.body.data.type = "path";
          opts.body.data.source = "";
          opts.body.data.value = ffffffffffffffffffffffffffffffffffffffff;
          opts.body.data.pathExclusionType = "";
          opts.body.data.actions = ["upload"]"upload";
          opts.body.data.inject = false;

          instance.webApiExclusionsPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ExclusionsSchemasExclusionSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.ExclusionsSchemasExclusionSchemaMany200Data);
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.inject).to.be.a('boolean');
                expect(data.inject).to.be(false);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.mode).to.be.a('string');
                expect(data.mode).to.be("suppress");
                expect(data.osType).to.be.a('string');
                expect(data.osType).to.be("windows");
                expect(data.scopeName).to.be.a('string');
                expect(data.scopeName).to.be("");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
                expect(data.source).to.be.a('string');
                expect(data.source).to.be("user");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
                expect(data.userId).to.be.a('string');
                expect(data.userId).to.be("225494730938493804");
                expect(data.pathExclusionType).to.be.a('string');
                expect(data.pathExclusionType).to.be("file");
                expect(data.userName).to.be.a('string');
                expect(data.userName).to.be("");
                {
                  let dataCtr = data.actions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("upload");
                  }
                }
                expect(data.notRecommended).to.be.a('string');
                expect(data.notRecommended).to.be("");
                expect(data.scope).to.be.a(S1MgmtApi.ExclusionsSchemasExclusionSchemaGetMany200Scope);
                      {
                    let dataCtr = data.scope.accountIds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }
                  expect(data.scope.tenant).to.be.a('boolean');
                  expect(data.scope.tenant).to.be(false);
                  {
                    let dataCtr = data.scope.groupIds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }
                  {
                    let dataCtr = data.scope.siteIds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiExclusionsPut', function() {
        it('should call webApiExclusionsPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiExclusionsPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ExclusionsSchemasPutExclusionSchema();
          opts.body.data = new S1MgmtApi.ExclusionsSchemasPutExclusionSchemaData();
          opts.body.data.description = "";
          opts.body.data.id = "225494730938493804";
          opts.body.data.osType = "windows";
          opts.body.data.mode = "suppress";
          opts.body.data.type = "path";
          opts.body.data.source = "";
          opts.body.data.value = ffffffffffffffffffffffffffffffffffffffff;
          opts.body.data.pathExclusionType = "";
          opts.body.data.actions = ["upload"]"upload";
          opts.body.data.inject = false;

          instance.webApiExclusionsPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ExclusionsSchemasExclusionSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.ExclusionsSchemasExclusionSchemaMany200Data);
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.inject).to.be.a('boolean');
                expect(data.inject).to.be(false);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.mode).to.be.a('string');
                expect(data.mode).to.be("suppress");
                expect(data.osType).to.be.a('string');
                expect(data.osType).to.be("windows");
                expect(data.scopeName).to.be.a('string');
                expect(data.scopeName).to.be("");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
                expect(data.source).to.be.a('string');
                expect(data.source).to.be("user");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
                expect(data.userId).to.be.a('string');
                expect(data.userId).to.be("225494730938493804");
                expect(data.pathExclusionType).to.be.a('string');
                expect(data.pathExclusionType).to.be("file");
                expect(data.userName).to.be.a('string');
                expect(data.userName).to.be("");
                {
                  let dataCtr = data.actions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("upload");
                  }
                }
                expect(data.notRecommended).to.be.a('string');
                expect(data.notRecommended).to.be("");
                expect(data.scope).to.be.a(S1MgmtApi.ExclusionsSchemasExclusionSchemaGetMany200Scope);
                      {
                    let dataCtr = data.scope.accountIds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }
                  expect(data.scope.tenant).to.be.a('boolean');
                  expect(data.scope.tenant).to.be(false);
                  {
                    let dataCtr = data.scope.groupIds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }
                  {
                    let dataCtr = data.scope.siteIds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiExclusionsReportreportIdGet', function() {
        it('should call webApiExclusionsReportreportIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiExclusionsReportreportIdGet call
          /*
          var reportId = "reportId_example";

          instance.webApiExclusionsReportreportIdGet(reportId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiExclusionsValidatePost', function() {
        it('should call webApiExclusionsValidatePost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiExclusionsValidatePost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ExclusionsSchemasValidateExclusionSchema();
          opts.body.data = new S1MgmtApi.ExclusionsSchemasValidateExclusionSchemaData();
          opts.body.data.exclusionType = "path";
          opts.body.data.osType = "windows";
          opts.body.data.value = "";

          instance.webApiExclusionsValidatePost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ExclusionsSchemasValidateExclusionRestrictionOutputSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.ExclusionsSchemasValidateExclusionRestrictionOutputSchema200Data);
                  expect(data.data.status).to.be.a('string');
              expect(data.data.status).to.be("Not recommended");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiExportExclusionsGet', function() {
        it('should call webApiExportExclusionsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiExportExclusionsGet call
          /*
          var opts = {};
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.unified = true;
          opts.includeChildren = true;
          opts.updatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.query = "query_example";
          opts.ids = ["ids_example"];
          opts.inAppInventory = true;
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.valueContains = ["valueContains_example"];
          opts.updatedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.source = ["source_example"];
          opts.osTypes = ["osTypes_example"];
          opts.recommendations = ["recommendations_example"];
          opts.updatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.pathExclusionTypes = ["pathExclusionTypes_example"];
          opts.imported = true;
          opts.value = "value_example";
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.includeParents = true;
          opts.userContains = ["userContains_example"];
          opts.type = "type_example";
          opts.tenant = true;
          opts.createdAtBetween = "createdAtBetween_example";
          opts.groupIds = ["groupIds_example"];
          opts.updatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.updatedAtBetween = "updatedAtBetween_example";
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.descriptionContains = ["descriptionContains_example"];
          opts.modes = ["modes_example"];
          opts.userIds = ["userIds_example"];
          opts.types = ["types_example"];
          opts.applicationNameContains = ["applicationNameContains_example"];
          opts.modeType = "modeType_example";

          instance.webApiExportExclusionsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiExportRestrictionsGet', function() {
        it('should call webApiExportRestrictionsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiExportRestrictionsGet call
          /*
          var opts = {};
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.unified = true;
          opts.includeChildren = true;
          opts.updatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.query = "query_example";
          opts.ids = ["ids_example"];
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.valueContains = ["valueContains_example"];
          opts.updatedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.source = ["source_example"];
          opts.osTypes = ["osTypes_example"];
          opts.recommendations = ["recommendations_example"];
          opts.updatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.imported = true;
          opts.value = "value_example";
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.includeParents = true;
          opts.userContains = ["userContains_example"];
          opts.type = "black_hash";
          opts.tenant = true;
          opts.createdAtBetween = "createdAtBetween_example";
          opts.groupIds = ["groupIds_example"];
          opts.updatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.updatedAtBetween = "updatedAtBetween_example";
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.descriptionContains = ["descriptionContains_example"];
          opts.userIds = ["userIds_example"];
          opts.types = ["types_example"];

          instance.webApiExportRestrictionsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRestrictionsDelete', function() {
        it('should call webApiRestrictionsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRestrictionsDelete call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ExclusionsSchemasDeleteRestrictionSchema();
          opts.body.data = new S1MgmtApi.ExclusionsSchemasDeleteRestrictionSchemaData();
          opts.body.data.ids = ["225494730938493804","225494730938493915"];
          opts.body.data.type = "black_hash";

          instance.webApiRestrictionsDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRestrictionsGet', function() {
        it('should call webApiRestrictionsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRestrictionsGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "null";
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.unified = true;
          opts.includeChildren = true;
          opts.updatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.ids = ["ids_example"];
          opts.query = "query_example";
          opts.countOnly = false;
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.valueContains = ["valueContains_example"];
          opts.limit = 10;
          opts.updatedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.source = ["source_example"];
          opts.osTypes = ["osTypes_example"];
          opts.skip = 56;
          opts.recommendations = ["recommendations_example"];
          opts.skipCount = null;
          opts.sortOrder = "null";
          opts.updatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.imported = true;
          opts.value = "value_example";
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.includeParents = true;
          opts.userContains = ["userContains_example"];
          opts.type = "black_hash";
          opts.sortBy = "null";
          opts.tenant = true;
          opts.createdAtBetween = "createdAtBetween_example";
          opts.groupIds = ["groupIds_example"];
          opts.updatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.updatedAtBetween = "updatedAtBetween_example";
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.descriptionContains = ["descriptionContains_example"];
          opts.modes = ["modes_example"];
          opts.userIds = ["userIds_example"];
          opts.types = ["types_example"];

          instance.webApiRestrictionsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ExclusionsSchemasRestrictionSchemaGetMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.ExclusionsSchemasRestrictionSchemaGetMany200Data);
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.includeParents).to.be.a('boolean');
                expect(data.includeParents).to.be(false);
                expect(data.osType).to.be.a('string');
                expect(data.osType).to.be("windows");
                expect(data.scopeName).to.be.a('string');
                expect(data.scopeName).to.be("");
                expect(data.includeChildren).to.be.a('boolean');
                expect(data.includeChildren).to.be(false);
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
                expect(data.source).to.be.a('string');
                expect(data.source).to.be("user");
                expect(data.imported).to.be.a('boolean');
                expect(data.imported).to.be(false);
                expect(data.scopePath).to.be.a('string');
                expect(data.scopePath).to.be("");
                expect(data.userId).to.be.a('string');
                expect(data.userId).to.be("225494730938493804");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
                expect(data.userName).to.be.a('string');
                expect(data.userName).to.be("");
                expect(data.notRecommended).to.be.a('string');
                expect(data.notRecommended).to.be("");
                expect(data.scope).to.be.a(S1MgmtApi.ExclusionsSchemasExclusionSchemaGetMany200Scope);
                      {
                    let dataCtr = data.scope.accountIds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }
                  expect(data.scope.tenant).to.be.a('boolean');
                  expect(data.scope.tenant).to.be(false);
                  {
                    let dataCtr = data.scope.groupIds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }
                  {
                    let dataCtr = data.scope.siteIds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRestrictionsImportPost', function() {
        it('should call webApiRestrictionsImportPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRestrictionsImportPost call and complete the assertions
          /*
          var file = "/path/to/file.txt";
          var opts = {};
          opts.filter = "filter_example";

          instance.webApiRestrictionsImportPost(file, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ExclusionsSchemasImportExclusionsOrBlockListResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.ExclusionsSchemasImportExclusionsOrBlockListResponseSchema200Data);
                  expect(data.data.reportId).to.be.a('string');
              expect(data.data.reportId).to.be("225494730938493804");
              expect(data.data.total).to.be.a('number');
              expect(data.data.total).to.be(0);
              expect(data.data.succeeded).to.be.a('number');
              expect(data.data.succeeded).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRestrictionsPost', function() {
        it('should call webApiRestrictionsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRestrictionsPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ExclusionsSchemasPostRestrictionSchema();
          opts.body.filter = new S1MgmtApi.ExclusionsSchemasPostExclusionSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.ExclusionsSchemasPostRestrictionSchemaData();
          opts.body.data.description = "";
          opts.body.data.osType = "windows";
          opts.body.data.type = "black_hash";
          opts.body.data.source = "";
          opts.body.data.value = ffffffffffffffffffffffffffffffffffffffff;

          instance.webApiRestrictionsPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ExclusionsSchemasRestrictionSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.ExclusionsSchemasRestrictionSchemaMany200Data);
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.osType).to.be.a('string');
                expect(data.osType).to.be("windows");
                expect(data.scopeName).to.be.a('string');
                expect(data.scopeName).to.be("");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
                expect(data.source).to.be.a('string');
                expect(data.source).to.be("user");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
                expect(data.userId).to.be.a('string');
                expect(data.userId).to.be("225494730938493804");
                expect(data.userName).to.be.a('string');
                expect(data.userName).to.be("");
                expect(data.notRecommended).to.be.a('string');
                expect(data.notRecommended).to.be("");
                expect(data.scope).to.be.a(S1MgmtApi.ExclusionsSchemasExclusionSchemaGetMany200Scope);
                      {
                    let dataCtr = data.scope.accountIds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }
                  expect(data.scope.tenant).to.be.a('boolean');
                  expect(data.scope.tenant).to.be(false);
                  {
                    let dataCtr = data.scope.groupIds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }
                  {
                    let dataCtr = data.scope.siteIds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRestrictionsPut', function() {
        it('should call webApiRestrictionsPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRestrictionsPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ExclusionsSchemasPutRestrictionSchema();
          opts.body.data = new S1MgmtApi.ExclusionsSchemasPutRestrictionSchemaData();
          opts.body.data.description = "";
          opts.body.data.id = "225494730938493804";
          opts.body.data.osType = "windows";
          opts.body.data.type = "black_hash";
          opts.body.data.source = "";
          opts.body.data.value = ffffffffffffffffffffffffffffffffffffffff;

          instance.webApiRestrictionsPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ExclusionsSchemasRestrictionSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.ExclusionsSchemasRestrictionSchemaMany200Data);
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.osType).to.be.a('string');
                expect(data.osType).to.be("windows");
                expect(data.scopeName).to.be.a('string');
                expect(data.scopeName).to.be("");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
                expect(data.source).to.be.a('string');
                expect(data.source).to.be("user");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
                expect(data.userId).to.be.a('string');
                expect(data.userId).to.be("225494730938493804");
                expect(data.userName).to.be.a('string');
                expect(data.userName).to.be("");
                expect(data.notRecommended).to.be.a('string');
                expect(data.notRecommended).to.be("");
                expect(data.scope).to.be.a(S1MgmtApi.ExclusionsSchemasExclusionSchemaGetMany200Scope);
                      {
                    let dataCtr = data.scope.accountIds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }
                  expect(data.scope.tenant).to.be.a('boolean');
                  expect(data.scope.tenant).to.be(false);
                  {
                    let dataCtr = data.scope.groupIds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }
                  {
                    let dataCtr = data.scope.siteIds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRestrictionsReportreportIdGet', function() {
        it('should call webApiRestrictionsReportreportIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRestrictionsReportreportIdGet call
          /*
          var reportId = "reportId_example";

          instance.webApiRestrictionsReportreportIdGet(reportId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRestrictionsValidatePost', function() {
        it('should call webApiRestrictionsValidatePost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRestrictionsValidatePost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ExclusionsSchemasValidateRestrictionSchema();
          opts.body.data = new S1MgmtApi.ExclusionsSchemasValidateRestrictionSchemaData();
          opts.body.data.osType = "windows";
          opts.body.data.value = "";

          instance.webApiRestrictionsValidatePost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ExclusionsSchemasValidateExclusionRestrictionOutputSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.ExclusionsSchemasValidateExclusionRestrictionOutputSchema200Data);
                  expect(data.data.status).to.be.a('string');
              expect(data.data.status).to.be("Not recommended");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
