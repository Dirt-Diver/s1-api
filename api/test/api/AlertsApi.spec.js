/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.AlertsApi();
  });

  describe('(package)', function() {
    describe('AlertsApi', function() {
      describe('webApiCloudDetectionAlertsAnalystVerdictPost', function() {
        it('should call webApiCloudDetectionAlertsAnalystVerdictPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiCloudDetectionAlertsAnalystVerdictPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21AlertsSchemasAlertsAnalystVerdictSchema();
          opts.body.filter = new S1MgmtApi.V21AlertsSchemasAlertsIncidentSchemaFilter();
          opts.body.filter.containerImageNameContains = [""];
          opts.body.filter.limit = 0;
          opts.body.filter.reportedAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.tenant = false;
          opts.body.filter.reportedAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.sourceProcessNameContains = ["proc1.exe"];
          opts.body.filter.incidentStatus = ["IN_PROGRESS"];
          opts.body.filter.sourceProcessCommandlineContains = ["rule1"];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sNamespaceLabelsContains = [""];
          opts.body.filter.k8sPodContains = [""];
          opts.body.filter.reportedAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.sourceProcessFileHashSha1Contains = ["rule1"];
          opts.body.filter.k8sNodeContains = [""];
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.origAgentUuidContains = ["win7"];
          opts.body.filter.sourceProcessFileHashMd5Contains = ["rule1"];
          opts.body.filter.query = "";
          opts.body.filter.osType = ["windows_legacy"]"windows_legacy";
          opts.body.filter.containerNameContains = [""];
          opts.body.filter.analystVerdict = ["TRUE_POSITIVE"];
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.origAgentNameContains = ["ilia"];
          opts.body.filter.ruleNameContains = ["rule1"];
          opts.body.filter.origAgentOsRevisionContains = ["win7"];
          opts.body.filter.sourceProcessFilePathContains = ["rule1"];
          opts.body.filter.k8sControllerLabelsContains = [""];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.containerLabelsContains = [""];
          opts.body.filter.k8sNamespaceNameContains = [""];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.machineType = [""];
          opts.body.filter.k8sControllerNameContains = [""];
          opts.body.filter.severity = ["Low"];
          opts.body.filter.k8sClusterContains = [""];
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.scopes = ["account"];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.sourceProcessStorylineContains = ["rule1"];
          opts.body.filter.origAgentVersionContains = ["7.11"];
          opts.body.filter.reportedAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sPodLabelsContains = [""];
          opts.body.filter.sourceProcessFileHashSha256Contains = ["rule1"];
          opts.body.data = new S1MgmtApi.V21AlertsSchemasAlertsAnalystVerdictSchemaData();
          opts.body.data.analystVerdict = "undefined";

          instance.webApiCloudDetectionAlertsAnalystVerdictPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiCloudDetectionAlertsGet', function() {
        it('should call webApiCloudDetectionAlertsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiCloudDetectionAlertsGet call and complete the assertions
          /*
          var opts = {};
          opts.limit = 10;
          opts.containerImageNameContains = ["containerImageNameContains_example"];
          opts.reportedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.tenant = true;
          opts.reportedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.sourceProcessNameContains = ["sourceProcessNameContains_example"];
          opts.incidentStatus = ["incidentStatus_example"];
          opts.sourceProcessCommandlineContains = ["sourceProcessCommandlineContains_example"];
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.k8sNamespaceLabelsContains = ["k8sNamespaceLabelsContains_example"];
          opts.k8sPodContains = ["k8sPodContains_example"];
          opts.reportedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.sourceProcessFileHashSha1Contains = ["sourceProcessFileHashSha1Contains_example"];
          opts.cursor = "null";
          opts.k8sNodeContains = ["k8sNodeContains_example"];
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.sortOrder = "null";
          opts.origAgentUuidContains = ["origAgentUuidContains_example"];
          opts.sourceProcessFileHashMd5Contains = ["sourceProcessFileHashMd5Contains_example"];
          opts.query = "query_example";
          opts.osType = ["osType_example"];
          opts.containerNameContains = ["containerNameContains_example"];
          opts.sortBy = "null";
          opts.analystVerdict = ["analystVerdict_example"];
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.origAgentNameContains = ["origAgentNameContains_example"];
          opts.ruleNameContains = ["ruleNameContains_example"];
          opts.origAgentOsRevisionContains = ["origAgentOsRevisionContains_example"];
          opts.sourceProcessFilePathContains = ["sourceProcessFilePathContains_example"];
          opts.k8sControllerLabelsContains = ["k8sControllerLabelsContains_example"];
          opts.siteIds = ["siteIds_example"];
          opts.containerLabelsContains = ["containerLabelsContains_example"];
          opts.k8sNamespaceNameContains = ["k8sNamespaceNameContains_example"];
          opts.groupIds = ["groupIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.machineType = ["machineType_example"];
          opts.k8sControllerNameContains = ["k8sControllerNameContains_example"];
          opts.skipCount = null;
          opts.disablePagination = true;
          opts.severity = ["severity_example"];
          opts.k8sClusterContains = ["k8sClusterContains_example"];
          opts.ids = ["ids_example"];
          opts.scopes = ["scopes_example"];
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.sourceProcessStorylineContains = ["sourceProcessStorylineContains_example"];
          opts.origAgentVersionContains = ["origAgentVersionContains_example"];
          opts.skip = 56;
          opts.reportedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.k8sPodLabelsContains = ["k8sPodLabelsContains_example"];
          opts.sourceProcessFileHashSha256Contains = ["sourceProcessFileHashSha256Contains_example"];
          opts.countOnly = false;

          instance.webApiCloudDetectionAlertsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21AlertsSchemasAlertInformationSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.V21RulesSchemasRuleViewSchemaMany200Pagination);
                  expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
              expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21AlertsSchemasAlertInformationSchemaMany200Data);
                expect(data.sourceParentProcessInfo).to.be.a(S1MgmtApi.V21AlertsSchemasAlertInformationSchemaMany200SourceParentProcessInfo);
                      expect(data.sourceParentProcessInfo.fileHashSha256).to.be.a('string');
                  expect(data.sourceParentProcessInfo.fileHashSha256).to.be("");
                  expect(data.sourceParentProcessInfo.subsystem).to.be.a('string');
                  expect(data.sourceParentProcessInfo.subsystem).to.be("unknown");
                  expect(data.sourceParentProcessInfo.uniqueId).to.be.a('string');
                  expect(data.sourceParentProcessInfo.uniqueId).to.be("");
                  expect(data.sourceParentProcessInfo.fileSignerIdentity).to.be.a('string');
                  expect(data.sourceParentProcessInfo.fileSignerIdentity).to.be("");
                  expect(data.sourceParentProcessInfo.integrityLevel).to.be.a('string');
                  expect(data.sourceParentProcessInfo.integrityLevel).to.be("unknown");
                  expect(data.sourceParentProcessInfo.pid).to.be.a('string');
                  expect(data.sourceParentProcessInfo.pid).to.be("");
                  expect(data.sourceParentProcessInfo.filePath).to.be.a('string');
                  expect(data.sourceParentProcessInfo.filePath).to.be("");
                  expect(data.sourceParentProcessInfo.effectiveUser).to.be.a('string');
                  expect(data.sourceParentProcessInfo.effectiveUser).to.be("");
                  expect(data.sourceParentProcessInfo.fileHashSha1).to.be.a('string');
                  expect(data.sourceParentProcessInfo.fileHashSha1).to.be("");
                  expect(data.sourceParentProcessInfo.pidStarttime).to.be.a(Date);
                  expect(data.sourceParentProcessInfo.pidStarttime).to.be(2018-02-27T04:49:26.257525Z);
                  expect(data.sourceParentProcessInfo.fileHashMd5).to.be.a('string');
                  expect(data.sourceParentProcessInfo.fileHashMd5).to.be("");
                  expect(data.sourceParentProcessInfo.realUser).to.be.a('string');
                  expect(data.sourceParentProcessInfo.realUser).to.be("");
                  expect(data.sourceParentProcessInfo.loginUser).to.be.a('string');
                  expect(data.sourceParentProcessInfo.loginUser).to.be("");
                  expect(data.sourceParentProcessInfo.storyline).to.be.a('string');
                  expect(data.sourceParentProcessInfo.storyline).to.be("");
                  expect(data.sourceParentProcessInfo.commandline).to.be.a('string');
                  expect(data.sourceParentProcessInfo.commandline).to.be("");
                  expect(data.sourceParentProcessInfo.name).to.be.a('string');
                  expect(data.sourceParentProcessInfo.name).to.be("");
                  expect(data.sourceParentProcessInfo.user).to.be.a('string');
                  expect(data.sourceParentProcessInfo.user).to.be("");
                expect(data.ruleInfo).to.be.a(S1MgmtApi.V21AlertsSchemasAlertInformationSchemaMany200RuleInfo);
                      expect(data.ruleInfo.severity).to.be.a('string');
                  expect(data.ruleInfo.severity).to.be("Low");
                  expect(data.ruleInfo.id).to.be.a('string');
                  expect(data.ruleInfo.id).to.be("");
                  expect(data.ruleInfo.s1ql).to.be.a('string');
                  expect(data.ruleInfo.s1ql).to.be("");
                  expect(data.ruleInfo.scopeLevel).to.be.a('string');
                  expect(data.ruleInfo.scopeLevel).to.be("group");
                  expect(data.ruleInfo.treatAsThreat).to.be.a('string');
                  expect(data.ruleInfo.treatAsThreat).to.be("UNDEFINED");
                  expect(data.ruleInfo.queryLang).to.be.a('string');
                  expect(data.ruleInfo.queryLang).to.be("1.0");
                  expect(data.ruleInfo.description).to.be.a('string');
                  expect(data.ruleInfo.description).to.be("");
                  expect(data.ruleInfo.queryType).to.be.a('string');
                  expect(data.ruleInfo.queryType).to.be("events");
                  expect(data.ruleInfo.name).to.be.a('string');
                  expect(data.ruleInfo.name).to.be("");
                expect(data.alertInfo).to.be.a(S1MgmtApi.V21AlertsSchemasAlertInformationSchemaMany200AlertInfo);
                      expect(data.alertInfo.dnsResponse).to.be.a('string');
                  expect(data.alertInfo.dnsResponse).to.be("");
                  expect(data.alertInfo.moduleSha1).to.be.a('string');
                  expect(data.alertInfo.moduleSha1).to.be("");
                  expect(data.alertInfo.indicatorCategory).to.be.a('string');
                  expect(data.alertInfo.indicatorCategory).to.be("");
                  expect(data.alertInfo.incidentStatus).to.be.a('string');
                  expect(data.alertInfo.incidentStatus).to.be("Unresolved");
                  expect(data.alertInfo.tiIndicatorValue).to.be.a('string');
                  expect(data.alertInfo.tiIndicatorValue).to.be("");
                  expect(data.alertInfo.netEventDirection).to.be.a('string');
                  expect(data.alertInfo.netEventDirection).to.be("");
                  expect(data.alertInfo.loginAccountSid).to.be.a('string');
                  expect(data.alertInfo.loginAccountSid).to.be("");
                  expect(data.alertInfo.hitType).to.be.a('string');
                  expect(data.alertInfo.hitType).to.be("Events");
                  expect(data.alertInfo.modulePath).to.be.a('string');
                  expect(data.alertInfo.modulePath).to.be("");
                  expect(data.alertInfo.indicatorDescription).to.be.a('string');
                  expect(data.alertInfo.indicatorDescription).to.be("");
                  expect(data.alertInfo.indicatorName).to.be.a('string');
                  expect(data.alertInfo.indicatorName).to.be("");
                  expect(data.alertInfo.dstPort).to.be.a('string');
                  expect(data.alertInfo.dstPort).to.be("");
                  expect(data.alertInfo.isEdr).to.be.a('boolean');
                  expect(data.alertInfo.isEdr).to.be(false);
                  expect(data.alertInfo.analystVerdict).to.be.a('string');
                  expect(data.alertInfo.analystVerdict).to.be("Undefined");
                  expect(data.alertInfo.srcMachineIp).to.be.a('string');
                  expect(data.alertInfo.srcMachineIp).to.be("");
                  expect(data.alertInfo.registryKeyPath).to.be.a('string');
                  expect(data.alertInfo.registryKeyPath).to.be("");
                  expect(data.alertInfo.registryOldValueType).to.be.a('string');
                  expect(data.alertInfo.registryOldValueType).to.be("");
                  expect(data.alertInfo.tiIndicatorComparisonMethod).to.be.a('string');
                  expect(data.alertInfo.tiIndicatorComparisonMethod).to.be("");
                  expect(data.alertInfo.registryPath).to.be.a('string');
                  expect(data.alertInfo.registryPath).to.be("");
                  expect(data.alertInfo.registryValue).to.be.a('string');
                  expect(data.alertInfo.registryValue).to.be("");
                  expect(data.alertInfo.loginIsAdministratorEquivalent).to.be.a('string');
                  expect(data.alertInfo.loginIsAdministratorEquivalent).to.be("");
                  expect(data.alertInfo.loginAccountDomain).to.be.a('string');
                  expect(data.alertInfo.loginAccountDomain).to.be("");
                  expect(data.alertInfo.reportedAt).to.be.a(Date);
                  expect(data.alertInfo.reportedAt).to.be(2018-02-27T04:49:26.257525Z);
                  expect(data.alertInfo.dnsRequest).to.be.a('string');
                  expect(data.alertInfo.dnsRequest).to.be("");
                  expect(data.alertInfo.loginType).to.be.a('string');
                  expect(data.alertInfo.loginType).to.be("");
                  expect(data.alertInfo.registryOldValue).to.be.a('string');
                  expect(data.alertInfo.registryOldValue).to.be("");
                  expect(data.alertInfo.srcIp).to.be.a('string');
                  expect(data.alertInfo.srcIp).to.be("");
                  expect(data.alertInfo.updatedAt).to.be.a(Date);
                  expect(data.alertInfo.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                  expect(data.alertInfo.tiIndicatorSource).to.be.a('string');
                  expect(data.alertInfo.tiIndicatorSource).to.be("");
                  expect(data.alertInfo.source).to.be.a('string');
                  expect(data.alertInfo.source).to.be("");
                  expect(data.alertInfo.eventType).to.be.a('string');
                  expect(data.alertInfo.eventType).to.be("");
                  expect(data.alertInfo.tiIndicatorType).to.be.a('string');
                  expect(data.alertInfo.tiIndicatorType).to.be("");
                  expect(data.alertInfo.dstIp).to.be.a('string');
                  expect(data.alertInfo.dstIp).to.be("");
                  expect(data.alertInfo.loginsUserName).to.be.a('string');
                  expect(data.alertInfo.loginsUserName).to.be("");
                  expect(data.alertInfo.createdAt).to.be.a(Date);
                  expect(data.alertInfo.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                  expect(data.alertInfo.loginIsSuccessful).to.be.a('string');
                  expect(data.alertInfo.loginIsSuccessful).to.be("");
                  expect(data.alertInfo.dvEventId).to.be.a('string');
                  expect(data.alertInfo.dvEventId).to.be("");
                  expect(data.alertInfo.srcPort).to.be.a('string');
                  expect(data.alertInfo.srcPort).to.be("");
                  expect(data.alertInfo.alertId).to.be.a('string');
                  expect(data.alertInfo.alertId).to.be("225494730938493804");
                expect(data.targetProcessInfo).to.be.a(S1MgmtApi.V21AlertsSchemasAlertInformationSchemaMany200TargetProcessInfo);
                      expect(data.targetProcessInfo.tgtFileCreatedAt).to.be.a(Date);
                  expect(data.targetProcessInfo.tgtFileCreatedAt).to.be(2018-02-27T04:49:26.257525Z);
                  expect(data.targetProcessInfo.tgtProcSignedStatus).to.be.a('string');
                  expect(data.targetProcessInfo.tgtProcSignedStatus).to.be("");
                  expect(data.targetProcessInfo.tgtFilePath).to.be.a('string');
                  expect(data.targetProcessInfo.tgtFilePath).to.be("");
                  expect(data.targetProcessInfo.tgtFileHashSha256).to.be.a('string');
                  expect(data.targetProcessInfo.tgtFileHashSha256).to.be("");
                  expect(data.targetProcessInfo.tgtFileModifiedAt).to.be.a(Date);
                  expect(data.targetProcessInfo.tgtFileModifiedAt).to.be(2018-02-27T04:49:26.257525Z);
                  expect(data.targetProcessInfo.tgtProcName).to.be.a('string');
                  expect(data.targetProcessInfo.tgtProcName).to.be("");
                  expect(data.targetProcessInfo.tgtProcImagePath).to.be.a('string');
                  expect(data.targetProcessInfo.tgtProcImagePath).to.be("");
                  expect(data.targetProcessInfo.tgtFileHashSha1).to.be.a('string');
                  expect(data.targetProcessInfo.tgtFileHashSha1).to.be("");
                  expect(data.targetProcessInfo.tgtFileIsSigned).to.be.a('string');
                  expect(data.targetProcessInfo.tgtFileIsSigned).to.be("");
                  expect(data.targetProcessInfo.tgtProcStorylineId).to.be.a('string');
                  expect(data.targetProcessInfo.tgtProcStorylineId).to.be("");
                  expect(data.targetProcessInfo.tgtProcPid).to.be.a('string');
                  expect(data.targetProcessInfo.tgtProcPid).to.be("");
                  expect(data.targetProcessInfo.tgtProcIntegrityLevel).to.be.a('string');
                  expect(data.targetProcessInfo.tgtProcIntegrityLevel).to.be("unknown");
                  expect(data.targetProcessInfo.tgtProcCmdLine).to.be.a('string');
                  expect(data.targetProcessInfo.tgtProcCmdLine).to.be("");
                  expect(data.targetProcessInfo.tgtFileId).to.be.a('string');
                  expect(data.targetProcessInfo.tgtFileId).to.be("");
                  expect(data.targetProcessInfo.tgtProcUid).to.be.a('string');
                  expect(data.targetProcessInfo.tgtProcUid).to.be("");
                  expect(data.targetProcessInfo.tgtProcessStartTime).to.be.a(Date);
                  expect(data.targetProcessInfo.tgtProcessStartTime).to.be(2018-02-27T04:49:26.257525Z);
                  expect(data.targetProcessInfo.tgtFileOldPath).to.be.a('string');
                  expect(data.targetProcessInfo.tgtFileOldPath).to.be("");
                expect(data.containerInfo).to.be.a(S1MgmtApi.V21AlertsSchemasAlertInformationSchemaMany200ContainerInfo);
                      expect(data.containerInfo.labels).to.be.a('string');
                  expect(data.containerInfo.labels).to.be("");
                  expect(data.containerInfo.name).to.be.a('string');
                  expect(data.containerInfo.name).to.be("");
                  expect(data.containerInfo.id).to.be.a('string');
                  expect(data.containerInfo.id).to.be("");
                  expect(data.containerInfo.image).to.be.a('string');
                  expect(data.containerInfo.image).to.be("");
                expect(data.kubernetesInfo).to.be.a(S1MgmtApi.V21AlertsSchemasAlertInformationSchemaMany200KubernetesInfo);
                      expect(data.kubernetesInfo.podLabels).to.be.a('string');
                  expect(data.kubernetesInfo.podLabels).to.be("");
                  expect(data.kubernetesInfo.pod).to.be.a('string');
                  expect(data.kubernetesInfo.pod).to.be("");
                  expect(data.kubernetesInfo.controllerKind).to.be.a('string');
                  expect(data.kubernetesInfo.controllerKind).to.be("");
                  expect(data.kubernetesInfo.namespace).to.be.a('string');
                  expect(data.kubernetesInfo.namespace).to.be("");
                  expect(data.kubernetesInfo.controllerLabels).to.be.a('string');
                  expect(data.kubernetesInfo.controllerLabels).to.be("");
                  expect(data.kubernetesInfo.controllerName).to.be.a('string');
                  expect(data.kubernetesInfo.controllerName).to.be("");
                  expect(data.kubernetesInfo.node).to.be.a('string');
                  expect(data.kubernetesInfo.node).to.be("");
                  expect(data.kubernetesInfo.namespaceLabels).to.be.a('string');
                  expect(data.kubernetesInfo.namespaceLabels).to.be("");
                  expect(data.kubernetesInfo.cluster).to.be.a('string');
                  expect(data.kubernetesInfo.cluster).to.be("");
                expect(data.sourceProcessInfo).to.be.a(S1MgmtApi.V21AlertsSchemasAlertInformationSchemaMany200SourceProcessInfo);
                      expect(data.sourceProcessInfo.fileHashSha256).to.be.a('string');
                  expect(data.sourceProcessInfo.fileHashSha256).to.be("");
                  expect(data.sourceProcessInfo.subsystem).to.be.a('string');
                  expect(data.sourceProcessInfo.subsystem).to.be("unknown");
                  expect(data.sourceProcessInfo.uniqueId).to.be.a('string');
                  expect(data.sourceProcessInfo.uniqueId).to.be("");
                  expect(data.sourceProcessInfo.fileSignerIdentity).to.be.a('string');
                  expect(data.sourceProcessInfo.fileSignerIdentity).to.be("");
                  expect(data.sourceProcessInfo.integrityLevel).to.be.a('string');
                  expect(data.sourceProcessInfo.integrityLevel).to.be("unknown");
                  expect(data.sourceProcessInfo.pid).to.be.a('string');
                  expect(data.sourceProcessInfo.pid).to.be("");
                  expect(data.sourceProcessInfo.filePath).to.be.a('string');
                  expect(data.sourceProcessInfo.filePath).to.be("");
                  expect(data.sourceProcessInfo.effectiveUser).to.be.a('string');
                  expect(data.sourceProcessInfo.effectiveUser).to.be("");
                  expect(data.sourceProcessInfo.fileHashSha1).to.be.a('string');
                  expect(data.sourceProcessInfo.fileHashSha1).to.be("");
                  expect(data.sourceProcessInfo.pidStarttime).to.be.a(Date);
                  expect(data.sourceProcessInfo.pidStarttime).to.be(2018-02-27T04:49:26.257525Z);
                  expect(data.sourceProcessInfo.fileHashMd5).to.be.a('string');
                  expect(data.sourceProcessInfo.fileHashMd5).to.be("");
                  expect(data.sourceProcessInfo.realUser).to.be.a('string');
                  expect(data.sourceProcessInfo.realUser).to.be("");
                  expect(data.sourceProcessInfo.loginUser).to.be.a('string');
                  expect(data.sourceProcessInfo.loginUser).to.be("");
                  expect(data.sourceProcessInfo.storyline).to.be.a('string');
                  expect(data.sourceProcessInfo.storyline).to.be("");
                  expect(data.sourceProcessInfo.commandline).to.be.a('string');
                  expect(data.sourceProcessInfo.commandline).to.be("");
                  expect(data.sourceProcessInfo.name).to.be.a('string');
                  expect(data.sourceProcessInfo.name).to.be("");
                  expect(data.sourceProcessInfo.user).to.be.a('string');
                  expect(data.sourceProcessInfo.user).to.be("");
                expect(data.agentDetectionInfo).to.be.a(S1MgmtApi.V21AlertsSchemasAlertInformationSchemaMany200AgentDetectionInfo);
                      expect(data.agentDetectionInfo.osName).to.be.a('string');
                  expect(data.agentDetectionInfo.osName).to.be("");
                  expect(data.agentDetectionInfo.osRevision).to.be.a('string');
                  expect(data.agentDetectionInfo.osRevision).to.be("");
                  expect(data.agentDetectionInfo.accountId).to.be.a('string');
                  expect(data.agentDetectionInfo.accountId).to.be("225494730938493804");
                  expect(data.agentDetectionInfo.version).to.be.a('string');
                  expect(data.agentDetectionInfo.version).to.be("3.6.1.14");
                  expect(data.agentDetectionInfo.machineType).to.be.a('string');
                  expect(data.agentDetectionInfo.machineType).to.be("");
                  expect(data.agentDetectionInfo.siteId).to.be.a('string');
                  expect(data.agentDetectionInfo.siteId).to.be("225494730938493804");
                  expect(data.agentDetectionInfo.osFamily).to.be.a('string');
                  expect(data.agentDetectionInfo.osFamily).to.be("");
                  expect(data.agentDetectionInfo.uuid).to.be.a('string');
                  expect(data.agentDetectionInfo.uuid).to.be("");
                  expect(data.agentDetectionInfo.name).to.be.a('string');
                  expect(data.agentDetectionInfo.name).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiCloudDetectionAlertsIncidentPost', function() {
        it('should call webApiCloudDetectionAlertsIncidentPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiCloudDetectionAlertsIncidentPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21AlertsSchemasAlertsIncidentSchema();
          opts.body.filter = new S1MgmtApi.V21AlertsSchemasAlertsIncidentSchemaFilter();
          opts.body.filter.containerImageNameContains = [""];
          opts.body.filter.limit = 0;
          opts.body.filter.reportedAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.tenant = false;
          opts.body.filter.reportedAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.sourceProcessNameContains = ["proc1.exe"];
          opts.body.filter.incidentStatus = ["IN_PROGRESS"];
          opts.body.filter.sourceProcessCommandlineContains = ["rule1"];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sNamespaceLabelsContains = [""];
          opts.body.filter.k8sPodContains = [""];
          opts.body.filter.reportedAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.sourceProcessFileHashSha1Contains = ["rule1"];
          opts.body.filter.k8sNodeContains = [""];
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.origAgentUuidContains = ["win7"];
          opts.body.filter.sourceProcessFileHashMd5Contains = ["rule1"];
          opts.body.filter.query = "";
          opts.body.filter.osType = ["windows_legacy"]"windows_legacy";
          opts.body.filter.containerNameContains = [""];
          opts.body.filter.analystVerdict = ["TRUE_POSITIVE"];
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.origAgentNameContains = ["ilia"];
          opts.body.filter.ruleNameContains = ["rule1"];
          opts.body.filter.origAgentOsRevisionContains = ["win7"];
          opts.body.filter.sourceProcessFilePathContains = ["rule1"];
          opts.body.filter.k8sControllerLabelsContains = [""];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.containerLabelsContains = [""];
          opts.body.filter.k8sNamespaceNameContains = [""];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.machineType = [""];
          opts.body.filter.k8sControllerNameContains = [""];
          opts.body.filter.severity = ["Low"];
          opts.body.filter.k8sClusterContains = [""];
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.scopes = ["account"];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.sourceProcessStorylineContains = ["rule1"];
          opts.body.filter.origAgentVersionContains = ["7.11"];
          opts.body.filter.reportedAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sPodLabelsContains = [""];
          opts.body.filter.sourceProcessFileHashSha256Contains = ["rule1"];
          opts.body.data = new S1MgmtApi.V21AlertsSchemasAlertsIncidentSchemaData();
          opts.body.data.incidentStatus = "unresolved";

          instance.webApiCloudDetectionAlertsIncidentPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
