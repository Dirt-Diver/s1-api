/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.RBACApi();
  });

  describe('(package)', function() {
    describe('RBACApi', function() {
      describe('webApiRbacRoleGet', function() {
        it('should call webApiRbacRoleGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRbacRoleGet call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.groupIds = ["groupIds_example"];
          opts.tenant = true;
          opts.siteIds = ["siteIds_example"];

          instance.webApiRbacRoleGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.RbacSchemasNewRoleTemplate200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.RbacSchemasNewRoleTemplate200Data);
                  expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("");
              {
                let dataCtr = data.data.pages;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.RbacSchemasRolePermissions200DataPages);
                  expect(data.identifier).to.be.a('string');
                  expect(data.identifier).to.be("");
                  {
                    let dataCtr = data.permissions;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(S1MgmtApi.RbacSchemasRolePermissions200DataPermissions);
                      expect(data.identifier).to.be.a('string');
                      expect(data.identifier).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.additionalDescription).to.be.a('string');
                      expect(data.additionalDescription).to.be("");
                      expect(data.disabledReasonCode).to.be.a('string');
                      expect(data.disabledReasonCode).to.be("");
                      expect(data.disabledReason).to.be.a('string');
                      expect(data.disabledReason).to.be("");
                      {
                        let dataCtr = data.dependsOn;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("225494730938493804");
                        }
                      }
                      expect(data.groupName).to.be.a('string');
                      expect(data.groupName).to.be("");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("");
                      expect(data.value).to.be.a('boolean');
                      expect(data.value).to.be(false);
                      expect(data.title).to.be.a('string');
                      expect(data.title).to.be("");
      
                            }
                  }
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRbacRolePost', function() {
        it('should call webApiRbacRolePost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRbacRolePost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.RbacSchemasRbacCreateRoleSchema();
          opts.body.filter = new S1MgmtApi.ExclusionsSchemasPostExclusionSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.RbacSchemasRbacCreateRoleSchemaData();
          opts.body.data.description = "";
          opts.body.data.name = "";
          opts.body.data.permissionIds = ["225494730938493804","225494730938493915"];

          instance.webApiRbacRolePost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.RbacSchemasRolePermissions200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.RbacSchemasRolePermissions200Data);
                  expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("");
              expect(data.data.updatedBy).to.be.a('string');
              expect(data.data.updatedBy).to.be("");
              expect(data.data.predefinedRole).to.be.a('boolean');
              expect(data.data.predefinedRole).to.be(false);
              expect(data.data.siteName).to.be.a('string');
              expect(data.data.siteName).to.be("");
              expect(data.data.accountName).to.be.a('string');
              expect(data.data.accountName).to.be("");
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("");
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.updatedById).to.be.a('string');
              expect(data.data.updatedById).to.be("225494730938493804");
              expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              {
                let dataCtr = data.data.pages;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.RbacSchemasRolePermissions200DataPages);
                  expect(data.identifier).to.be.a('string');
                  expect(data.identifier).to.be("");
                  {
                    let dataCtr = data.permissions;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(S1MgmtApi.RbacSchemasRolePermissions200DataPermissions);
                      expect(data.identifier).to.be.a('string');
                      expect(data.identifier).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.additionalDescription).to.be.a('string');
                      expect(data.additionalDescription).to.be("");
                      expect(data.disabledReasonCode).to.be.a('string');
                      expect(data.disabledReasonCode).to.be("");
                      expect(data.disabledReason).to.be.a('string');
                      expect(data.disabledReason).to.be("");
                      {
                        let dataCtr = data.dependsOn;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("225494730938493804");
                        }
                      }
                      expect(data.groupName).to.be.a('string');
                      expect(data.groupName).to.be("");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("");
                      expect(data.value).to.be.a('boolean');
                      expect(data.value).to.be(false);
                      expect(data.title).to.be.a('string');
                      expect(data.title).to.be("");
      
                            }
                  }
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
              expect(data.data.usersInRoles).to.be.a('number');
              expect(data.data.usersInRoles).to.be(0);
              expect(data.data.scope).to.be.a('string');
              expect(data.data.scope).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRbacRoleroleIdDelete', function() {
        it('should call webApiRbacRoleroleIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRbacRoleroleIdDelete call and complete the assertions
          /*
          var roleId = "roleId_example";
          var opts = {};
          opts.body = new S1MgmtApi.RbacSchemasRbacDeleteRoleSchema();
          opts.body.data = new S1MgmtApi.RbacSchemasRbacDeleteRoleSchemaData();
          opts.body.data.targetId = "225494730938493804";

          instance.webApiRbacRoleroleIdDelete(roleId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRbacRoleroleIdGet', function() {
        it('should call webApiRbacRoleroleIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRbacRoleroleIdGet call and complete the assertions
          /*
          var roleId = "roleId_example";
          var opts = {};
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.updatedAtBetween = "updatedAtBetween_example";
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.name = "name_example";
          opts.accountIds = ["accountIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.query = "query_example";
          opts.updatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.updatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.tenant = true;
          opts.createdAtBetween = "createdAtBetween_example";
          opts.groupIds = ["groupIds_example"];
          opts.updatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.updatedAtGte = new Date("2013-10-20T19:20:30+01:00");

          instance.webApiRbacRoleroleIdGet(roleId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.RbacSchemasRolePermissions200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.RbacSchemasRolePermissions200Data);
                  expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("");
              expect(data.data.updatedBy).to.be.a('string');
              expect(data.data.updatedBy).to.be("");
              expect(data.data.predefinedRole).to.be.a('boolean');
              expect(data.data.predefinedRole).to.be(false);
              expect(data.data.siteName).to.be.a('string');
              expect(data.data.siteName).to.be("");
              expect(data.data.accountName).to.be.a('string');
              expect(data.data.accountName).to.be("");
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("");
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.updatedById).to.be.a('string');
              expect(data.data.updatedById).to.be("225494730938493804");
              expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              {
                let dataCtr = data.data.pages;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.RbacSchemasRolePermissions200DataPages);
                  expect(data.identifier).to.be.a('string');
                  expect(data.identifier).to.be("");
                  {
                    let dataCtr = data.permissions;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(S1MgmtApi.RbacSchemasRolePermissions200DataPermissions);
                      expect(data.identifier).to.be.a('string');
                      expect(data.identifier).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.additionalDescription).to.be.a('string');
                      expect(data.additionalDescription).to.be("");
                      expect(data.disabledReasonCode).to.be.a('string');
                      expect(data.disabledReasonCode).to.be("");
                      expect(data.disabledReason).to.be.a('string');
                      expect(data.disabledReason).to.be("");
                      {
                        let dataCtr = data.dependsOn;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("225494730938493804");
                        }
                      }
                      expect(data.groupName).to.be.a('string');
                      expect(data.groupName).to.be("");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("");
                      expect(data.value).to.be.a('boolean');
                      expect(data.value).to.be(false);
                      expect(data.title).to.be.a('string');
                      expect(data.title).to.be("");
      
                            }
                  }
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
              expect(data.data.usersInRoles).to.be.a('number');
              expect(data.data.usersInRoles).to.be(0);
              expect(data.data.scope).to.be.a('string');
              expect(data.data.scope).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRbacRoleroleIdPut', function() {
        it('should call webApiRbacRoleroleIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRbacRoleroleIdPut call and complete the assertions
          /*
          var roleId = "roleId_example";
          var opts = {};
          opts.body = new S1MgmtApi.RbacSchemasRbacUpdateRoleSchema();
          opts.body.filter = new S1MgmtApi.ExclusionsSchemasPostExclusionSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.RbacSchemasRbacCreateRoleSchemaData();
          opts.body.data.description = "";
          opts.body.data.name = "";
          opts.body.data.permissionIds = ["225494730938493804","225494730938493915"];

          instance.webApiRbacRoleroleIdPut(roleId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.RbacSchemasRolePermissions200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.RbacSchemasRolePermissions200Data);
                  expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("");
              expect(data.data.updatedBy).to.be.a('string');
              expect(data.data.updatedBy).to.be("");
              expect(data.data.predefinedRole).to.be.a('boolean');
              expect(data.data.predefinedRole).to.be(false);
              expect(data.data.siteName).to.be.a('string');
              expect(data.data.siteName).to.be("");
              expect(data.data.accountName).to.be.a('string');
              expect(data.data.accountName).to.be("");
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("");
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.updatedById).to.be.a('string');
              expect(data.data.updatedById).to.be("225494730938493804");
              expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              {
                let dataCtr = data.data.pages;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.RbacSchemasRolePermissions200DataPages);
                  expect(data.identifier).to.be.a('string');
                  expect(data.identifier).to.be("");
                  {
                    let dataCtr = data.permissions;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(S1MgmtApi.RbacSchemasRolePermissions200DataPermissions);
                      expect(data.identifier).to.be.a('string');
                      expect(data.identifier).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.additionalDescription).to.be.a('string');
                      expect(data.additionalDescription).to.be("");
                      expect(data.disabledReasonCode).to.be.a('string');
                      expect(data.disabledReasonCode).to.be("");
                      expect(data.disabledReason).to.be.a('string');
                      expect(data.disabledReason).to.be("");
                      {
                        let dataCtr = data.dependsOn;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("225494730938493804");
                        }
                      }
                      expect(data.groupName).to.be.a('string');
                      expect(data.groupName).to.be("");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("");
                      expect(data.value).to.be.a('boolean');
                      expect(data.value).to.be(false);
                      expect(data.title).to.be.a('string');
                      expect(data.title).to.be("");
      
                            }
                  }
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
              expect(data.data.usersInRoles).to.be.a('number');
              expect(data.data.usersInRoles).to.be(0);
              expect(data.data.scope).to.be.a('string');
              expect(data.data.scope).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRbacRolesGet', function() {
        it('should call webApiRbacRolesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRbacRolesGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "null";
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.includeChildren = false;
          opts.updatedAt = new Date("2013-10-20T19:20:30+01:00");
          opts.updatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.query = "query_example";
          opts.ids = ["ids_example"];
          opts.countOnly = false;
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.limit = 10;
          opts.updatedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.predefinedRole = true;
          opts.accountName = "accountName_example";
          opts.skip = 56;
          opts.skipCount = null;
          opts.creatorId = "creatorId_example";
          opts.sortOrder = "null";
          opts.updatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.updatedById = "updatedById_example";
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.includeParents = true;
          opts.sortBy = "null";
          opts.tenant = true;
          opts.createdAtBetween = "createdAtBetween_example";
          opts.groupIds = ["groupIds_example"];
          opts.updatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.description = "description_example";
          opts.updatedAtBetween = "updatedAtBetween_example";
          opts.updatedBy = "updatedBy_example";
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.siteName = "siteName_example";
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.name = "name_example";
          opts.creator = "creator_example";
          opts.createdAt = new Date("2013-10-20T19:20:30+01:00");
          opts.tenancyIds = ["tenancyIds_example"];
          opts.usersInRoles = 56;

          instance.webApiRbacRolesGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.RbacSchemasFlatRoleWithAccountOrSiteNameMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.RbacSchemasFlatRoleWithAccountOrSiteNameMany200Data);
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.updatedBy).to.be.a('string');
                expect(data.updatedBy).to.be("");
                expect(data.predefinedRole).to.be.a('boolean');
                expect(data.predefinedRole).to.be(false);
                expect(data.siteName).to.be.a('string');
                expect(data.siteName).to.be("");
                expect(data.accountName).to.be.a('string');
                expect(data.accountName).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.creator).to.be.a('string');
                expect(data.creator).to.be("");
                expect(data.creatorId).to.be.a('string');
                expect(data.creatorId).to.be("225494730938493804");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.updatedById).to.be.a('string');
                expect(data.updatedById).to.be("225494730938493804");
                expect(data.scopeId).to.be.a('string');
                expect(data.scopeId).to.be("225494730938493804");
                expect(data.usersInRoles).to.be.a('number');
                expect(data.usersInRoles).to.be(0);
                expect(data.scope).to.be.a('string');
                expect(data.scope).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
