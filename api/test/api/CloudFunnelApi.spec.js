/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.CloudFunnelApi();
  });

  describe('(package)', function() {
    describe('CloudFunnelApi', function() {
      describe('webApiCloudFunnelAssumeRoleExternalIdGet', function() {
        it('should call webApiCloudFunnelAssumeRoleExternalIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiCloudFunnelAssumeRoleExternalIdGet call and complete the assertions
          /*
          var opts = {};
          opts.siteId = "siteId_example";
          opts.accountId = "accountId_example";

          instance.webApiCloudFunnelAssumeRoleExternalIdGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21CloudFunnelSchemasGetAssumeRoleExternalIdResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21CloudFunnelSchemasGetAssumeRoleExternalIdResponseSchema200Data);
                  expect(data.data.assumeRoleExternalId).to.be.a('string');
              expect(data.data.assumeRoleExternalId).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiCloudFunnelEstimatorGet', function() {
        it('should call webApiCloudFunnelEstimatorGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiCloudFunnelEstimatorGet call and complete the assertions
          /*
          var estimatorId = "estimatorId_example";

          instance.webApiCloudFunnelEstimatorGet(estimatorId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21CloudFunnelSchemasGetEstimatorResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21CloudFunnelSchemasGetEstimatorResponseSchema200Data);
                  expect(data.data.isCompleted).to.be.a('boolean');
              expect(data.data.isCompleted).to.be(false);
              expect(data.data.compressedBytes).to.be.a('string');
              expect(data.data.compressedBytes).to.be("");
              expect(data.data.matchingEvents).to.be.a('string');
              expect(data.data.matchingEvents).to.be("");
              expect(data.data.uncompressedBytes).to.be.a('string');
              expect(data.data.uncompressedBytes).to.be("");
              expect(data.data.error).to.be.a('string');
              expect(data.data.error).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiCloudFunnelEstimatorPost', function() {
        it('should call webApiCloudFunnelEstimatorPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiCloudFunnelEstimatorPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21CloudFunnelSchemasInitEstimatorSchema();
          opts.body.data = new S1MgmtApi.V21CloudFunnelSchemasInitEstimatorSchemaData();
          opts.body.data.desiredFields = [""];
          opts.body.data.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.data.siteIds = ["225494730938493804"];
          opts.body.data.query = "";

          instance.webApiCloudFunnelEstimatorPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21CloudFunnelSchemasInitEstimatorResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21CloudFunnelSchemasInitEstimatorResponseSchema200Data);
                  expect(data.data.error).to.be.a('string');
              expect(data.data.error).to.be("");
              expect(data.data.estimatorId).to.be.a('string');
              expect(data.data.estimatorId).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiCloudFunnelOnboardingDelete', function() {
        it('should call webApiCloudFunnelOnboardingDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiCloudFunnelOnboardingDelete call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21CloudFunnelSchemasOnboardingDeleteSchema();
          opts.body.data = new S1MgmtApi.V21CloudFunnelSchemasOnboardingDeleteSchemaData();
          opts.body.data.accountId = "225494730938493804";
          opts.body.data.siteIds = ["225494730938493804"];

          instance.webApiCloudFunnelOnboardingDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21CloudFunnelSchemasOnboardingDeleteResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21CloudFunnelSchemasOnboardingDeleteResponseSchema200Data);
                  expect(data.data.error).to.be.a('string');
              expect(data.data.error).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiCloudFunnelOnboardingGet', function() {
        it('should call webApiCloudFunnelOnboardingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiCloudFunnelOnboardingGet call and complete the assertions
          /*
          var opts = {};
          opts.siteId = "siteId_example";
          opts.accountId = "accountId_example";

          instance.webApiCloudFunnelOnboardingGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21CloudFunnelSchemasOnboardingResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21CloudFunnelSchemasOnboardingResponseSchema200Data);
                  expect(data.data.useAssumeRole).to.be.a('boolean');
              expect(data.data.useAssumeRole).to.be(false);
              expect(data.data.isInheriting).to.be.a('boolean');
              expect(data.data.isInheriting).to.be(false);
              expect(data.data.globalOnboardingExists).to.be.a('boolean');
              expect(data.data.globalOnboardingExists).to.be(false);
              expect(data.data.cloudProvider).to.be.a('string');
              expect(data.data.cloudProvider).to.be("");
              {
                let dataCtr = data.data.desiredFields;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.assumeRoleExternalId).to.be.a('string');
              expect(data.data.assumeRoleExternalId).to.be("");
              expect(data.data.accountOnboardingExists).to.be.a('boolean');
              expect(data.data.accountOnboardingExists).to.be(false);
              expect(data.data.roleToAssume).to.be.a('string');
              expect(data.data.roleToAssume).to.be("");
              expect(data.data.error).to.be.a('string');
              expect(data.data.error).to.be("");
              expect(data.data.disableStream).to.be.a('boolean');
              expect(data.data.disableStream).to.be(false);
              expect(data.data.bucketUrl).to.be.a('string');
              expect(data.data.bucketUrl).to.be("");
              expect(data.data.query).to.be.a('string');
              expect(data.data.query).to.be("");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiCloudFunnelOnboardingPost', function() {
        it('should call webApiCloudFunnelOnboardingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiCloudFunnelOnboardingPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21CloudFunnelSchemasOnboardingPostSchema();
          opts.body.data = new S1MgmtApi.V21CloudFunnelSchemasOnboardingPostSchemaData();
          opts.body.data.disableStream = false;
          opts.body.data.isInheriting = false;
          opts.body.data.accountId = "225494730938493804";
          opts.body.data.useAssumeRole = false;
          opts.body.data.cloudProvider = "";
          opts.body.data.desiredFields = [""];
          opts.body.data.roleToAssume = "";
          opts.body.data.query = "";
          opts.body.data.bucketUrl = "";
          opts.body.data.siteIds = ["225494730938493804"];

          instance.webApiCloudFunnelOnboardingPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21CloudFunnelSchemasOnboardingResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21CloudFunnelSchemasOnboardingResponseSchema200Data);
                  expect(data.data.useAssumeRole).to.be.a('boolean');
              expect(data.data.useAssumeRole).to.be(false);
              expect(data.data.isInheriting).to.be.a('boolean');
              expect(data.data.isInheriting).to.be(false);
              expect(data.data.globalOnboardingExists).to.be.a('boolean');
              expect(data.data.globalOnboardingExists).to.be(false);
              expect(data.data.cloudProvider).to.be.a('string');
              expect(data.data.cloudProvider).to.be("");
              {
                let dataCtr = data.data.desiredFields;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.assumeRoleExternalId).to.be.a('string');
              expect(data.data.assumeRoleExternalId).to.be("");
              expect(data.data.accountOnboardingExists).to.be.a('boolean');
              expect(data.data.accountOnboardingExists).to.be(false);
              expect(data.data.roleToAssume).to.be.a('string');
              expect(data.data.roleToAssume).to.be("");
              expect(data.data.error).to.be.a('string');
              expect(data.data.error).to.be("");
              expect(data.data.disableStream).to.be.a('boolean');
              expect(data.data.disableStream).to.be(false);
              expect(data.data.bucketUrl).to.be.a('string');
              expect(data.data.bucketUrl).to.be("");
              expect(data.data.query).to.be.a('string');
              expect(data.data.query).to.be("");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiCloudFunnelValidateBucketPermissionsPost', function() {
        it('should call webApiCloudFunnelValidateBucketPermissionsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiCloudFunnelValidateBucketPermissionsPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21CloudFunnelSchemasBucketValidationSchema();
          opts.body.data = new S1MgmtApi.V21CloudFunnelSchemasBucketValidationSchemaData();
          opts.body.data.useAssumeRole = false;
          opts.body.data.accountId = "225494730938493804";
          opts.body.data.cloudProvider = "";
          opts.body.data.siteId = "225494730938493804";
          opts.body.data.roleToAssume = "";
          opts.body.data.bucketUrl = "";

          instance.webApiCloudFunnelValidateBucketPermissionsPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21CloudFunnelSchemasBucketValidationResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21CloudFunnelSchemasBucketValidationResponseSchema200Data);
                  expect(data.data.isValid).to.be.a('boolean');
              expect(data.data.isValid).to.be(false);
              expect(data.data.error).to.be.a('string');
              expect(data.data.error).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiCloudFunnelValidateQueryPost', function() {
        it('should call webApiCloudFunnelValidateQueryPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiCloudFunnelValidateQueryPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21CloudFunnelSchemasQueryValidationSchema();
          opts.body.data = new S1MgmtApi.V21CloudFunnelSchemasQueryValidationSchemaData();
          opts.body.data.query = "";

          instance.webApiCloudFunnelValidateQueryPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21CloudFunnelSchemasQueryValidationResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21CloudFunnelSchemasQueryValidationResponseSchema200Data);
                  expect(data.data.isValid).to.be.a('boolean');
              expect(data.data.isValid).to.be(false);
              expect(data.data.error).to.be.a('string');
              expect(data.data.error).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
