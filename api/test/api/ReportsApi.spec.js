/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.ReportsApi();
  });

  describe('(package)', function() {
    describe('ReportsApi', function() {
      describe('webApiReportTasksGet', function() {
        it('should call webApiReportTasksGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiReportTasksGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "null";
          opts.query = "query_example";
          opts.ids = ["ids_example"];
          opts.countOnly = false;
          opts.limit = 10;
          opts.skip = 56;
          opts.id = "id_example";
          opts.skipCount = null;
          opts.creatorId = "creatorId_example";
          opts.sortOrder = "null";
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.scheduleType = "scheduleType_example";
          opts.sortBy = "null";
          opts.frequency = "frequency_example";
          opts.scope = "scope_example";
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.name = "name_example";
          opts.day = "day_example";
          opts.creatorName = "creatorName_example";

          instance.webApiReportTasksGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ReportsReportTaskDataSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.ReportsReportTaskDataSchemaMany200Data);
                {
                  let dataCtr = data.attachmentTypes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.toDate).to.be.a(Date);
                expect(data.toDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.scheduleType).to.be.a('string');
                expect(data.scheduleType).to.be("manually");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                {
                  let dataCtr = data.recipients;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.day).to.be.a(Object);
                expect(data.day).to.be();
                expect(data.creatorId).to.be.a('string');
                expect(data.creatorId).to.be("225494730938493804");
                expect(data.sites).to.be.a('string');
                expect(data.sites).to.be("");
                {
                  let dataCtr = data.insightTypes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
                expect(data.frequency).to.be.a('string');
                expect(data.frequency).to.be("manually");
                expect(data.creatorName).to.be.a('string');
                expect(data.creatorName).to.be("");
                expect(data.fromDate).to.be.a(Date);
                expect(data.fromDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.scope).to.be.a('string');
                expect(data.scope).to.be("site");
                expect(data.isTrend).to.be.a('boolean');
                expect(data.isTrend).to.be(false);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiReportTasksPost', function() {
        it('should call webApiReportTasksPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiReportTasksPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ReportsReportTasksPostSchema();
          opts.body.filter = new S1MgmtApi.ReportsReportTasksPostSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.scope = "";
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.ReportsReportTasksPostSchemaData();
          opts.body.data.scheduleType = "manually";
          opts.body.data.name = "";
          opts.body.data.recipients = [""];
          opts.body.data.day = "sunday";
          opts.body.data.insightTypes = [];
          opts.body.data.frequency = "manually";
          opts.body.data.attachmentTypes = [""];
          opts.body.data.fromDate = 2018-02-27T04:49:26.257525Z;
          opts.body.data.toDate = 2018-02-27T04:49:26.257525Z;
          opts.body.data.isTrend = false;

          instance.webApiReportTasksPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiReportTaskstaskIdPut', function() {
        it('should call webApiReportTaskstaskIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiReportTaskstaskIdPut call and complete the assertions
          /*
          var taskId = "taskId_example";
          var opts = {};
          opts.body = new S1MgmtApi.ReportsReportTasksPutSchema();
          opts.body.data = new S1MgmtApi.ReportsReportTasksPutSchemaData();
          opts.body.data.recipients = [""];
          opts.body.data.name = "";
          opts.body.data.attachmentTypes = [""];
          opts.body.data.id = "225494730938493804";

          instance.webApiReportTaskstaskIdPut(taskId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ReportsReportTaskDataSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.ReportsReportTaskDataSchema200Data);
                  {
                let dataCtr = data.data.attachmentTypes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.toDate).to.be.a(Date);
              expect(data.data.toDate).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.scheduleType).to.be.a('string');
              expect(data.data.scheduleType).to.be("manually");
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              {
                let dataCtr = data.data.recipients;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.day).to.be.a(Object);
              expect(data.data.day).to.be();
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              expect(data.data.sites).to.be.a('string');
              expect(data.data.sites).to.be("");
              {
                let dataCtr = data.data.insightTypes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }
              expect(data.data.frequency).to.be.a('string');
              expect(data.data.frequency).to.be("manually");
              expect(data.data.creatorName).to.be.a('string');
              expect(data.data.creatorName).to.be("");
              expect(data.data.fromDate).to.be.a(Date);
              expect(data.data.fromDate).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.scope).to.be.a('string');
              expect(data.data.scope).to.be("site");
              expect(data.data.isTrend).to.be.a('boolean');
              expect(data.data.isTrend).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiReportsDeleteReportsPost', function() {
        it('should call webApiReportsDeleteReportsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiReportsDeleteReportsPost call
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ReportsReportDeleteSchema();
          opts.body.filter = new S1MgmtApi.ReportsReportDeleteSchemaFilter();
          opts.body.filter.toDate = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.scheduleType = "manually";
          opts.body.filter.id = "225494730938493804";
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.name = "";
          opts.body.filter.interval = "";
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.query = "";
          opts.body.filter.frequency = "manually";
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.fromDate = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.scope = "group";
          opts.body.data = ;

          instance.webApiReportsDeleteReportsPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiReportsDeleteTasksPost', function() {
        it('should call webApiReportsDeleteTasksPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiReportsDeleteTasksPost call
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ReportsReportTaskDeleteSchema();
          opts.body.filter = new S1MgmtApi.ReportsReportTaskDeleteSchemaFilter();
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.scheduleType = "manually";
          opts.body.filter.id = "225494730938493804";
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.name = "";
          opts.body.filter.interval = "";
          opts.body.filter.sites = "";
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.query = "";
          opts.body.filter.frequency = "manually";
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.scope = "group";
          opts.body.filter.isTrend = false;
          opts.body.data = ;

          instance.webApiReportsDeleteTasksPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiReportsGet', function() {
        it('should call webApiReportsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiReportsGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "null";
          opts.query = "query_example";
          opts.ids = ["ids_example"];
          opts.countOnly = false;
          opts.fromDate = new Date("2013-10-20T19:20:30+01:00");
          opts.toDate = new Date("2013-10-20T19:20:30+01:00");
          opts.limit = 10;
          opts.skip = 56;
          opts.id = "id_example";
          opts.interval = "interval_example";
          opts.skipCount = null;
          opts.sortOrder = "null";
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.scheduleType = "scheduleType_example";
          opts.sortBy = "null";
          opts.taskId = "taskId_example";
          opts.frequency = "frequency_example";
          opts.groupIds = ["groupIds_example"];
          opts.scope = "scope_example";
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.name = "name_example";

          instance.webApiReportsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ReportsReportDataSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.ReportsReportDataSchemaMany200Data);
                {
                  let dataCtr = data.attachmentTypes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.toDate).to.be.a(Date);
                expect(data.toDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.scheduleType).to.be.a('string');
                expect(data.scheduleType).to.be("manually");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.interval).to.be.a(Object);
                expect(data.interval).to.be();
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.creatorId).to.be.a('string');
                expect(data.creatorId).to.be("225494730938493804");
                expect(data.sites).to.be.a('string');
                expect(data.sites).to.be("");
                {
                  let dataCtr = data.insightTypes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.frequency).to.be.a('string');
                expect(data.frequency).to.be("");
                expect(data.creatorName).to.be.a('string');
                expect(data.creatorName).to.be("");
                expect(data.fromDate).to.be.a(Date);
                expect(data.fromDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.scope).to.be.a('string');
                expect(data.scope).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiReportsInsightsTypesGet', function() {
        it('should call webApiReportsInsightsTypesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiReportsInsightsTypesGet call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.groupIds = ["groupIds_example"];
          opts.forceUpdate = false;
          opts.siteIds = ["siteIds_example"];

          instance.webApiReportsInsightsTypesGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ReportsInsightData200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.ReportsInsightData200Data);
                  {
                let dataCtr = data.data.insightTypes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiReportsreportIdreportFormatGet', function() {
        it('should call webApiReportsreportIdreportFormatGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiReportsreportIdreportFormatGet call
          /*
          var reportId = "reportId_example";
          var reportFormat = "reportFormat_example";

          instance.webApiReportsreportIdreportFormatGet(reportId, reportFormat, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiSentinelonerssGet', function() {
        it('should call webApiSentinelonerssGet successfully', function(done) {
          // TODO: uncomment webApiSentinelonerssGet call and complete the assertions
          /*

          instance.webApiSentinelonerssGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.RawDataSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
