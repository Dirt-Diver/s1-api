/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.ServiceUsersApi();
  });

  describe('(package)', function() {
    describe('ServiceUsersApi', function() {
      describe('webApiExportServiceUsersGet', function() {
        it('should call webApiExportServiceUsersGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiExportServiceUsersGet call
          /*
          var opts = {};
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.query = "query_example";
          opts.ids = ["ids_example"];
          opts.roleIds = ["roleIds_example"];

          instance.webApiExportServiceUsersGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiServiceUsersDeleteServiceUsersPost', function() {
        it('should call webApiServiceUsersDeleteServiceUsersPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiServiceUsersDeleteServiceUsersPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ServiceUsersSchemasBulkDeleteServiceUsersSchema();
          opts.body.filter = new S1MgmtApi.ServiceUsersSchemasBulkDeleteServiceUsersSchemaFilter();
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.query = "";
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.roleIds = ["225494730938493804","225494730938493915"];
          opts.body.data = ;

          instance.webApiServiceUsersDeleteServiceUsersPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiServiceUsersGet', function() {
        it('should call webApiServiceUsersGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiServiceUsersGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "null";
          opts.skip = 56;
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.query = "query_example";
          opts.skipCount = null;
          opts.sortOrder = "null";
          opts.sortBy = "null";
          opts.roleIds = ["roleIds_example"];
          opts.ids = ["ids_example"];
          opts.countOnly = false;
          opts.limit = 10;

          instance.webApiServiceUsersGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ServiceUsersSchemasGetServiceUserSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.ServiceUsersSchemasGetServiceUserSchemaMany200Data);
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.updatedBy).to.be.a(S1MgmtApi.ServiceUsersSchemasGetServiceUserSchemaMany200UpdatedBy);
                      expect(data.updatedBy.name).to.be.a('string');
                  expect(data.updatedBy.name).to.be("");
                  expect(data.updatedBy.id).to.be.a('string');
                  expect(data.updatedBy.id).to.be("225494730938493804");
                {
                  let dataCtr = data.scopeRoles;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataScopeRoles);
                    expect(data.accountName).to.be.a('string');
                    expect(data.accountName).to.be("My Scope 1");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("My Scope 1");
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("225494730938493804");
                    expect(data.roleId).to.be.a('string');
                    expect(data.roleId).to.be("225494730938493804");
                    {
                      let dataCtr = data.roles;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.roleName).to.be.a('string');
                    expect(data.roleName).to.be("Admin");
    
                          }
                }
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.lastActivation).to.be.a(Date);
                expect(data.lastActivation).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.createdBy).to.be.a(S1MgmtApi.ServiceUsersSchemasGetServiceUserSchemaMany200CreatedBy);
                      expect(data.createdBy.name).to.be.a('string');
                  expect(data.createdBy.name).to.be("");
                  expect(data.createdBy.id).to.be.a('string');
                  expect(data.createdBy.id).to.be("225494730938493804");
                expect(data.apiToken).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataApiToken);
                      expect(data.apiToken.createdAt).to.be.a(Date);
                  expect(data.apiToken.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                  expect(data.apiToken.expiresAt).to.be.a(Date);
                  expect(data.apiToken.expiresAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.scope).to.be.a('string');
                expect(data.scope).to.be("tenant");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiServiceUsersPost', function() {
        it('should call webApiServiceUsersPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiServiceUsersPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ServiceUsersSchemasCreateServiceUserSchema();
          opts.body.data = new S1MgmtApi.ServiceUsersSchemasCreateServiceUserSchemaData();
          opts.body.data.description = "";
          opts.body.data.scopeRoles = [{"id":"225494730938493804","role_id":"225494730938493804"}];
          opts.body.data.scopeRoles[0].roleId = "225494730938493804";
          opts.body.data.scopeRoles[0].roles = ["Admin"];
          opts.body.data.scopeRoles[0].roleName = "Admin";
          opts.body.data.scopeRoles[0].id = "225494730938493804";
          opts.body.data.expirationDate = new Date();
          opts.body.data.name = "My app integration";
          opts.body.data.forceLegacy = false;
          opts.body.data.scope = "tenant";

          instance.webApiServiceUsersPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ServiceUsersSchemasCreatedServiceUserSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.ServiceUsersSchemasCreatedServiceUserSchema200Data);
                  expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("");
              expect(data.data.updatedBy).to.be.a(S1MgmtApi.ServiceUsersSchemasGetServiceUserSchemaMany200UpdatedBy);
                    expect(data.data.updatedBy.name).to.be.a('string');
                expect(data.data.updatedBy.name).to.be("");
                expect(data.data.updatedBy.id).to.be.a('string');
                expect(data.data.updatedBy.id).to.be("225494730938493804");
              {
                let dataCtr = data.data.scopeRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataScopeRoles);
                  expect(data.accountName).to.be.a('string');
                  expect(data.accountName).to.be("My Scope 1");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("My Scope 1");
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("225494730938493804");
                  expect(data.roleId).to.be.a('string');
                  expect(data.roleId).to.be("225494730938493804");
                  {
                    let dataCtr = data.roles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.roleName).to.be.a('string');
                  expect(data.roleName).to.be("Admin");
  
                        }
              }
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.lastActivation).to.be.a(Date);
              expect(data.data.lastActivation).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.createdBy).to.be.a(S1MgmtApi.ServiceUsersSchemasGetServiceUserSchemaMany200CreatedBy);
                    expect(data.data.createdBy.name).to.be.a('string');
                expect(data.data.createdBy.name).to.be("");
                expect(data.data.createdBy.id).to.be.a('string');
                expect(data.data.createdBy.id).to.be("225494730938493804");
              expect(data.data.apiToken).to.be.a(S1MgmtApi.ServiceUsersSchemasCreatedServiceUserSchema200DataApiToken);
                    expect(data.data.apiToken.createdAt).to.be.a(Date);
                expect(data.data.apiToken.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.apiToken.expiresAt).to.be.a(Date);
                expect(data.data.apiToken.expiresAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.apiToken.value).to.be.a('string');
                expect(data.data.apiToken.value).to.be("");
              expect(data.data.scope).to.be.a('string');
              expect(data.data.scope).to.be("tenant");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiServiceUsersserviceUserIdDelete', function() {
        it('should call webApiServiceUsersserviceUserIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiServiceUsersserviceUserIdDelete call and complete the assertions
          /*
          var serviceUserId = "serviceUserId_example";

          instance.webApiServiceUsersserviceUserIdDelete(serviceUserId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiServiceUsersserviceUserIdGet', function() {
        it('should call webApiServiceUsersserviceUserIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiServiceUsersserviceUserIdGet call and complete the assertions
          /*
          var serviceUserId = "serviceUserId_example";

          instance.webApiServiceUsersserviceUserIdGet(serviceUserId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ServiceUsersSchemasGetServiceUserSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.ServiceUsersSchemasGetServiceUserSchema200Data);
                  expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("");
              expect(data.data.updatedBy).to.be.a(S1MgmtApi.ServiceUsersSchemasGetServiceUserSchemaMany200UpdatedBy);
                    expect(data.data.updatedBy.name).to.be.a('string');
                expect(data.data.updatedBy.name).to.be("");
                expect(data.data.updatedBy.id).to.be.a('string');
                expect(data.data.updatedBy.id).to.be("225494730938493804");
              {
                let dataCtr = data.data.scopeRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataScopeRoles);
                  expect(data.accountName).to.be.a('string');
                  expect(data.accountName).to.be("My Scope 1");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("My Scope 1");
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("225494730938493804");
                  expect(data.roleId).to.be.a('string');
                  expect(data.roleId).to.be("225494730938493804");
                  {
                    let dataCtr = data.roles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.roleName).to.be.a('string');
                  expect(data.roleName).to.be("Admin");
  
                        }
              }
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.lastActivation).to.be.a(Date);
              expect(data.data.lastActivation).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.createdBy).to.be.a(S1MgmtApi.ServiceUsersSchemasGetServiceUserSchemaMany200CreatedBy);
                    expect(data.data.createdBy.name).to.be.a('string');
                expect(data.data.createdBy.name).to.be("");
                expect(data.data.createdBy.id).to.be.a('string');
                expect(data.data.createdBy.id).to.be("225494730938493804");
              expect(data.data.apiToken).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataApiToken);
                    expect(data.data.apiToken.createdAt).to.be.a(Date);
                expect(data.data.apiToken.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.apiToken.expiresAt).to.be.a(Date);
                expect(data.data.apiToken.expiresAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.scope).to.be.a('string');
              expect(data.data.scope).to.be("tenant");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiServiceUsersserviceUserIdPut', function() {
        it('should call webApiServiceUsersserviceUserIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiServiceUsersserviceUserIdPut call and complete the assertions
          /*
          var serviceUserId = "serviceUserId_example";
          var opts = {};
          opts.body = new S1MgmtApi.ServiceUsersSchemasUpdateServiceUserSchema();
          opts.body.data = new S1MgmtApi.ServiceUsersSchemasUpdateServiceUserSchemaData();
          opts.body.data.description = "";
          opts.body.data.scopeRoles = [{"id":"225494730938493804","role_id":"225494730938493804"}];
          opts.body.data.scopeRoles[0].roleId = "225494730938493804";
          opts.body.data.scopeRoles[0].roles = ["Admin"];
          opts.body.data.scopeRoles[0].roleName = "Admin";
          opts.body.data.scopeRoles[0].id = "225494730938493804";
          opts.body.data.scope = "tenant";

          instance.webApiServiceUsersserviceUserIdPut(serviceUserId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ServiceUsersSchemasGetServiceUserSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.ServiceUsersSchemasGetServiceUserSchema200Data);
                  expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("");
              expect(data.data.updatedBy).to.be.a(S1MgmtApi.ServiceUsersSchemasGetServiceUserSchemaMany200UpdatedBy);
                    expect(data.data.updatedBy.name).to.be.a('string');
                expect(data.data.updatedBy.name).to.be("");
                expect(data.data.updatedBy.id).to.be.a('string');
                expect(data.data.updatedBy.id).to.be("225494730938493804");
              {
                let dataCtr = data.data.scopeRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataScopeRoles);
                  expect(data.accountName).to.be.a('string');
                  expect(data.accountName).to.be("My Scope 1");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("My Scope 1");
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("225494730938493804");
                  expect(data.roleId).to.be.a('string');
                  expect(data.roleId).to.be("225494730938493804");
                  {
                    let dataCtr = data.roles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.roleName).to.be.a('string');
                  expect(data.roleName).to.be("Admin");
  
                        }
              }
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.lastActivation).to.be.a(Date);
              expect(data.data.lastActivation).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.createdBy).to.be.a(S1MgmtApi.ServiceUsersSchemasGetServiceUserSchemaMany200CreatedBy);
                    expect(data.data.createdBy.name).to.be.a('string');
                expect(data.data.createdBy.name).to.be("");
                expect(data.data.createdBy.id).to.be.a('string');
                expect(data.data.createdBy.id).to.be("225494730938493804");
              expect(data.data.apiToken).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataApiToken);
                    expect(data.data.apiToken.createdAt).to.be.a(Date);
                expect(data.data.apiToken.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.apiToken.expiresAt).to.be.a(Date);
                expect(data.data.apiToken.expiresAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.scope).to.be.a('string');
              expect(data.data.scope).to.be("tenant");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
