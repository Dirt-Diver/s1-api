/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.ThreatsApi();
  });

  describe('(package)', function() {
    describe('ThreatsApi', function() {
      describe('webApiExportThreatsthreatIdExploreEventsGet', function() {
        it('should call webApiExportThreatsthreatIdExploreEventsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiExportThreatsthreatIdExploreEventsGet call
          /*
          var threatId = "threatId_example";
          var format = "format_example";
          var opts = {};
          opts.eventId = "eventId_example";
          opts.eventTypes = ["eventTypes_example"];
          opts.eventSubTypes = ["eventSubTypes_example"];
          opts.processNameLike = "processNameLike_example";

          instance.webApiExportThreatsthreatIdExploreEventsGet(threatId, format, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiExportThreatsthreatIdTimelineGet', function() {
        it('should call webApiExportThreatsthreatIdTimelineGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiExportThreatsthreatIdTimelineGet call
          /*
          var threatId = "threatId_example";
          var opts = {};
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.activityTypes = ["activityTypes_example"];
          opts.query = "query_example";
          opts.groupIds = ["groupIds_example"];

          instance.webApiExportThreatsthreatIdTimelineGet(threatId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatsActionsContainerNetworkConnectPost', function() {
        it('should call webApiThreatsActionsContainerNetworkConnectPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatsActionsContainerNetworkConnectPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ThreatsSchemasContainerNetworkQuarantineSchema();
          opts.body.filter = new S1MgmtApi.ThreatsSchemasThreatsMitigateRequestSchemaFilter();
          opts.body.filter.agentVersionsNin = ["2.5.1.1320"];
          opts.body.filter.analystVerdictsNin = ["true_positive","suspicious"];
          opts.body.filter.threatDetailsContains = ["malware.exe","virus.exe"];
          opts.body.filter.classificationSources = ["Cloud"];
          opts.body.filter.query = "";
          opts.body.filter.cloudProvider = [""];
          opts.body.filter.incidentStatusesNin = ["unresolved","in_progress"];
          opts.body.filter.publisherNameContains = ["GOOGLE","Apple Inc."];
          opts.body.filter.agentIsActive = false;
          opts.body.filter.updatedAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.classificationSourcesNin = ["Cloud"];
          opts.body.filter.containerNameContains = [""];
          opts.body.filter.cloudImageContains = [""];
          opts.body.filter.hasAgentTags = false;
          opts.body.filter.storylineContains = ["0000C2E97648","0006FC73-77B4-470F-AAC7-"];
          opts.body.filter.updatedAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.classificationsNin = [""];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.externalTicketIds = [""];
          opts.body.filter.osTypesNin = ["windows"];
          opts.body.filter.containerImageNameContains = [""];
          opts.body.filter.agentIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.k8sPodNameContains = [""];
          opts.body.filter.contentHashes = "ddd5030a3d029f3845fc1052419829f08f312240";
          opts.body.filter.awsSubnetIdsContains = [""];
          opts.body.filter.agentTagsData = "{"key1": ["value1_1", "value1_2"], "key2__nin": ["value2"]}";
          opts.body.filter.updatedAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.storylines = [""];
          opts.body.filter.k8sControllerLabelsContains = [""];
          opts.body.filter.awsSecurityGroupsContains = [""];
          opts.body.filter.k8sNodeNameContains = [""];
          opts.body.filter.confidenceLevels = ["malicious"];
          opts.body.filter.computerNameContains = ["john-office","WIN"];
          opts.body.filter.cloudNetworkContains = [""];
          opts.body.filter.classifications = [""];
          opts.body.filter.analystVerdicts = ["true_positive","suspicious"];
          opts.body.filter.initiatedByUsernameContains = ["John","John Doe"];
          opts.body.filter.resolved = false;
          opts.body.filter.collectionIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.detectionEngines = ["reputation"];
          opts.body.filter.awsRoleContains = [""];
          opts.body.filter.cloudAccountContains = [""];
          opts.body.filter.updatedAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.countsFor = "osTypes,machineTypes";
          opts.body.filter.limit = 0;
          opts.body.filter.realtimeAgentVersionContains = ["1.1.1.1","2.2."];
          opts.body.filter.osTypes = ["windows"];
          opts.body.filter.agentMachineTypes = ["unknown"];
          opts.body.filter.initiatedBy = ["agent_policy","dv_command"];
          opts.body.filter.initiatedByNin = ["agent_policy","dv_command"];
          opts.body.filter.k8sNamespaceLabelsContains = [""];
          opts.body.filter.engines = ["reputation"];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.detectionAgentVersionContains = ["1.1.1.1","2.2."];
          opts.body.filter.detectionEnginesNin = ["reputation"];
          opts.body.filter.osNamesNin = ["Windows 10 Pro"];
          opts.body.filter.k8sControllerNameContains = [""];
          opts.body.filter.k8sClusterNameContains = [""];
          opts.body.filter.noteExists = false;
          opts.body.filter.containerLabelsContains = [""];
          opts.body.filter.tenant = false;
          opts.body.filter.cloudInstanceIdContains = [""];
          opts.body.filter.agentVersions = ["2.5.1.1320"];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.detectionAgentDomainContains = ["sentinel","sentinelone.com"];
          opts.body.filter.enginesNin = ["reputation"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.cloudProviderNin = [""];
          opts.body.filter.filePathContains = ["\\MyUser\\Downloads"];
          opts.body.filter.k8sNodeLabelsContains = [""];
          opts.body.filter.osArchs = ["32 bit"];
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sNamespaceNameContains = [""];
          opts.body.filter.rebootRequired = false;
          opts.body.filter.mitigationStatuses = ["not_mitigated"];
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sPodLabelsContains = [""];
          opts.body.filter.gcpServiceAccountContains = [""];
          opts.body.filter.pendingActions = false;
          opts.body.filter.cloudLocationContains = [""];
          opts.body.filter.mitigationStatusesNin = ["not_mitigated"];
          opts.body.filter.agentMachineTypesNin = ["unknown"];
          opts.body.filter.originatedProcessContains = [""];
          opts.body.filter.failedActions = false;
          opts.body.filter.osNames = ["Windows 10 Pro"];
          opts.body.filter.contentHashContains = ["5f09bcff3"];
          opts.body.filter.incidentStatuses = ["unresolved","in_progress"];
          opts.body.filter.cloudInstanceSizeContains = [""];
          opts.body.filter.mitigatedPreemptively = false;
          opts.body.filter.displayName = "";
          opts.body.filter.externalTicketIdContains = [""];
          opts.body.filter.confidenceLevelsNin = ["malicious"];
          opts.body.filter.azureResourceGroupContains = [""];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.commandLineArgumentsContains = ["/usr/sbin/","wget"];
          opts.body.filter.uuidContains = ["e92-01928","b055"];
          opts.body.filter.externalTicketExists = false;
          opts.body.data = new S1MgmtApi.ThreatsSchemasContainerNetworkQuarantineSchemaData();
          opts.body.data.containerId = "3e1e05139573";

          instance.webApiThreatsActionsContainerNetworkConnectPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatsActionsContainerNetworkDisconnectPost', function() {
        it('should call webApiThreatsActionsContainerNetworkDisconnectPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatsActionsContainerNetworkDisconnectPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ThreatsSchemasContainerNetworkQuarantineSchema();
          opts.body.filter = new S1MgmtApi.ThreatsSchemasThreatsMitigateRequestSchemaFilter();
          opts.body.filter.agentVersionsNin = ["2.5.1.1320"];
          opts.body.filter.analystVerdictsNin = ["true_positive","suspicious"];
          opts.body.filter.threatDetailsContains = ["malware.exe","virus.exe"];
          opts.body.filter.classificationSources = ["Cloud"];
          opts.body.filter.query = "";
          opts.body.filter.cloudProvider = [""];
          opts.body.filter.incidentStatusesNin = ["unresolved","in_progress"];
          opts.body.filter.publisherNameContains = ["GOOGLE","Apple Inc."];
          opts.body.filter.agentIsActive = false;
          opts.body.filter.updatedAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.classificationSourcesNin = ["Cloud"];
          opts.body.filter.containerNameContains = [""];
          opts.body.filter.cloudImageContains = [""];
          opts.body.filter.hasAgentTags = false;
          opts.body.filter.storylineContains = ["0000C2E97648","0006FC73-77B4-470F-AAC7-"];
          opts.body.filter.updatedAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.classificationsNin = [""];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.externalTicketIds = [""];
          opts.body.filter.osTypesNin = ["windows"];
          opts.body.filter.containerImageNameContains = [""];
          opts.body.filter.agentIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.k8sPodNameContains = [""];
          opts.body.filter.contentHashes = "ddd5030a3d029f3845fc1052419829f08f312240";
          opts.body.filter.awsSubnetIdsContains = [""];
          opts.body.filter.agentTagsData = "{"key1": ["value1_1", "value1_2"], "key2__nin": ["value2"]}";
          opts.body.filter.updatedAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.storylines = [""];
          opts.body.filter.k8sControllerLabelsContains = [""];
          opts.body.filter.awsSecurityGroupsContains = [""];
          opts.body.filter.k8sNodeNameContains = [""];
          opts.body.filter.confidenceLevels = ["malicious"];
          opts.body.filter.computerNameContains = ["john-office","WIN"];
          opts.body.filter.cloudNetworkContains = [""];
          opts.body.filter.classifications = [""];
          opts.body.filter.analystVerdicts = ["true_positive","suspicious"];
          opts.body.filter.initiatedByUsernameContains = ["John","John Doe"];
          opts.body.filter.resolved = false;
          opts.body.filter.collectionIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.detectionEngines = ["reputation"];
          opts.body.filter.awsRoleContains = [""];
          opts.body.filter.cloudAccountContains = [""];
          opts.body.filter.updatedAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.countsFor = "osTypes,machineTypes";
          opts.body.filter.limit = 0;
          opts.body.filter.realtimeAgentVersionContains = ["1.1.1.1","2.2."];
          opts.body.filter.osTypes = ["windows"];
          opts.body.filter.agentMachineTypes = ["unknown"];
          opts.body.filter.initiatedBy = ["agent_policy","dv_command"];
          opts.body.filter.initiatedByNin = ["agent_policy","dv_command"];
          opts.body.filter.k8sNamespaceLabelsContains = [""];
          opts.body.filter.engines = ["reputation"];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.detectionAgentVersionContains = ["1.1.1.1","2.2."];
          opts.body.filter.detectionEnginesNin = ["reputation"];
          opts.body.filter.osNamesNin = ["Windows 10 Pro"];
          opts.body.filter.k8sControllerNameContains = [""];
          opts.body.filter.k8sClusterNameContains = [""];
          opts.body.filter.noteExists = false;
          opts.body.filter.containerLabelsContains = [""];
          opts.body.filter.tenant = false;
          opts.body.filter.cloudInstanceIdContains = [""];
          opts.body.filter.agentVersions = ["2.5.1.1320"];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.detectionAgentDomainContains = ["sentinel","sentinelone.com"];
          opts.body.filter.enginesNin = ["reputation"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.cloudProviderNin = [""];
          opts.body.filter.filePathContains = ["\\MyUser\\Downloads"];
          opts.body.filter.k8sNodeLabelsContains = [""];
          opts.body.filter.osArchs = ["32 bit"];
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sNamespaceNameContains = [""];
          opts.body.filter.rebootRequired = false;
          opts.body.filter.mitigationStatuses = ["not_mitigated"];
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sPodLabelsContains = [""];
          opts.body.filter.gcpServiceAccountContains = [""];
          opts.body.filter.pendingActions = false;
          opts.body.filter.cloudLocationContains = [""];
          opts.body.filter.mitigationStatusesNin = ["not_mitigated"];
          opts.body.filter.agentMachineTypesNin = ["unknown"];
          opts.body.filter.originatedProcessContains = [""];
          opts.body.filter.failedActions = false;
          opts.body.filter.osNames = ["Windows 10 Pro"];
          opts.body.filter.contentHashContains = ["5f09bcff3"];
          opts.body.filter.incidentStatuses = ["unresolved","in_progress"];
          opts.body.filter.cloudInstanceSizeContains = [""];
          opts.body.filter.mitigatedPreemptively = false;
          opts.body.filter.displayName = "";
          opts.body.filter.externalTicketIdContains = [""];
          opts.body.filter.confidenceLevelsNin = ["malicious"];
          opts.body.filter.azureResourceGroupContains = [""];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.commandLineArgumentsContains = ["/usr/sbin/","wget"];
          opts.body.filter.uuidContains = ["e92-01928","b055"];
          opts.body.filter.externalTicketExists = false;
          opts.body.data = new S1MgmtApi.ThreatsSchemasContainerNetworkQuarantineSchemaData();
          opts.body.data.containerId = "3e1e05139573";

          instance.webApiThreatsActionsContainerNetworkDisconnectPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatsAddToBlacklistPost', function() {
        it('should call webApiThreatsAddToBlacklistPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatsAddToBlacklistPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ThreatsSchemasThreatsAddToRestrictionsWithTargetSchema();
          opts.body.filter = new S1MgmtApi.ThreatsSchemasThreatsMitigateRequestSchemaFilter();
          opts.body.filter.agentVersionsNin = ["2.5.1.1320"];
          opts.body.filter.analystVerdictsNin = ["true_positive","suspicious"];
          opts.body.filter.threatDetailsContains = ["malware.exe","virus.exe"];
          opts.body.filter.classificationSources = ["Cloud"];
          opts.body.filter.query = "";
          opts.body.filter.cloudProvider = [""];
          opts.body.filter.incidentStatusesNin = ["unresolved","in_progress"];
          opts.body.filter.publisherNameContains = ["GOOGLE","Apple Inc."];
          opts.body.filter.agentIsActive = false;
          opts.body.filter.updatedAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.classificationSourcesNin = ["Cloud"];
          opts.body.filter.containerNameContains = [""];
          opts.body.filter.cloudImageContains = [""];
          opts.body.filter.hasAgentTags = false;
          opts.body.filter.storylineContains = ["0000C2E97648","0006FC73-77B4-470F-AAC7-"];
          opts.body.filter.updatedAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.classificationsNin = [""];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.externalTicketIds = [""];
          opts.body.filter.osTypesNin = ["windows"];
          opts.body.filter.containerImageNameContains = [""];
          opts.body.filter.agentIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.k8sPodNameContains = [""];
          opts.body.filter.contentHashes = "ddd5030a3d029f3845fc1052419829f08f312240";
          opts.body.filter.awsSubnetIdsContains = [""];
          opts.body.filter.agentTagsData = "{"key1": ["value1_1", "value1_2"], "key2__nin": ["value2"]}";
          opts.body.filter.updatedAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.storylines = [""];
          opts.body.filter.k8sControllerLabelsContains = [""];
          opts.body.filter.awsSecurityGroupsContains = [""];
          opts.body.filter.k8sNodeNameContains = [""];
          opts.body.filter.confidenceLevels = ["malicious"];
          opts.body.filter.computerNameContains = ["john-office","WIN"];
          opts.body.filter.cloudNetworkContains = [""];
          opts.body.filter.classifications = [""];
          opts.body.filter.analystVerdicts = ["true_positive","suspicious"];
          opts.body.filter.initiatedByUsernameContains = ["John","John Doe"];
          opts.body.filter.resolved = false;
          opts.body.filter.collectionIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.detectionEngines = ["reputation"];
          opts.body.filter.awsRoleContains = [""];
          opts.body.filter.cloudAccountContains = [""];
          opts.body.filter.updatedAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.countsFor = "osTypes,machineTypes";
          opts.body.filter.limit = 0;
          opts.body.filter.realtimeAgentVersionContains = ["1.1.1.1","2.2."];
          opts.body.filter.osTypes = ["windows"];
          opts.body.filter.agentMachineTypes = ["unknown"];
          opts.body.filter.initiatedBy = ["agent_policy","dv_command"];
          opts.body.filter.initiatedByNin = ["agent_policy","dv_command"];
          opts.body.filter.k8sNamespaceLabelsContains = [""];
          opts.body.filter.engines = ["reputation"];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.detectionAgentVersionContains = ["1.1.1.1","2.2."];
          opts.body.filter.detectionEnginesNin = ["reputation"];
          opts.body.filter.osNamesNin = ["Windows 10 Pro"];
          opts.body.filter.k8sControllerNameContains = [""];
          opts.body.filter.k8sClusterNameContains = [""];
          opts.body.filter.noteExists = false;
          opts.body.filter.containerLabelsContains = [""];
          opts.body.filter.tenant = false;
          opts.body.filter.cloudInstanceIdContains = [""];
          opts.body.filter.agentVersions = ["2.5.1.1320"];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.detectionAgentDomainContains = ["sentinel","sentinelone.com"];
          opts.body.filter.enginesNin = ["reputation"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.cloudProviderNin = [""];
          opts.body.filter.filePathContains = ["\\MyUser\\Downloads"];
          opts.body.filter.k8sNodeLabelsContains = [""];
          opts.body.filter.osArchs = ["32 bit"];
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sNamespaceNameContains = [""];
          opts.body.filter.rebootRequired = false;
          opts.body.filter.mitigationStatuses = ["not_mitigated"];
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sPodLabelsContains = [""];
          opts.body.filter.gcpServiceAccountContains = [""];
          opts.body.filter.pendingActions = false;
          opts.body.filter.cloudLocationContains = [""];
          opts.body.filter.mitigationStatusesNin = ["not_mitigated"];
          opts.body.filter.agentMachineTypesNin = ["unknown"];
          opts.body.filter.originatedProcessContains = [""];
          opts.body.filter.failedActions = false;
          opts.body.filter.osNames = ["Windows 10 Pro"];
          opts.body.filter.contentHashContains = ["5f09bcff3"];
          opts.body.filter.incidentStatuses = ["unresolved","in_progress"];
          opts.body.filter.cloudInstanceSizeContains = [""];
          opts.body.filter.mitigatedPreemptively = false;
          opts.body.filter.displayName = "";
          opts.body.filter.externalTicketIdContains = [""];
          opts.body.filter.confidenceLevelsNin = ["malicious"];
          opts.body.filter.azureResourceGroupContains = [""];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.commandLineArgumentsContains = ["/usr/sbin/","wget"];
          opts.body.filter.uuidContains = ["e92-01928","b055"];
          opts.body.filter.externalTicketExists = false;
          opts.body.data = new S1MgmtApi.ThreatsSchemasThreatsAddToRestrictionsWithTargetSchemaData();
          opts.body.data.description = "";
          opts.body.data.targetScope = "group";
          opts.body.data.note = "";
          opts.body.data.externalTicketId = "";

          instance.webApiThreatsAddToBlacklistPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ThreatsSchemasThreatsAddToBlocklistExclusionsResultSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.ThreatsSchemasThreatsAddToBlocklistExclusionsResultSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);
              {
                let dataCtr = data.data.details;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.ThreatsSchemasThreatsAddToBlocklistExclusionsResultSchema200DataDetails);
                  expect(data.analystVerdict).to.be.a('string');
                  expect(data.analystVerdict).to.be("updated");
                  expect(data.result).to.be.a('string');
                  expect(data.result).to.be("created");
                  expect(data.threatId).to.be.a('string');
                  expect(data.threatId).to.be("225494730938493804");
  
                        }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatsAddToExclusionsPost', function() {
        it('should call webApiThreatsAddToExclusionsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatsAddToExclusionsPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ThreatsSchemasThreatsAddToExclusionsWithTargetSchema();
          opts.body.filter = new S1MgmtApi.ThreatsSchemasThreatsMitigateRequestSchemaFilter();
          opts.body.filter.agentVersionsNin = ["2.5.1.1320"];
          opts.body.filter.analystVerdictsNin = ["true_positive","suspicious"];
          opts.body.filter.threatDetailsContains = ["malware.exe","virus.exe"];
          opts.body.filter.classificationSources = ["Cloud"];
          opts.body.filter.query = "";
          opts.body.filter.cloudProvider = [""];
          opts.body.filter.incidentStatusesNin = ["unresolved","in_progress"];
          opts.body.filter.publisherNameContains = ["GOOGLE","Apple Inc."];
          opts.body.filter.agentIsActive = false;
          opts.body.filter.updatedAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.classificationSourcesNin = ["Cloud"];
          opts.body.filter.containerNameContains = [""];
          opts.body.filter.cloudImageContains = [""];
          opts.body.filter.hasAgentTags = false;
          opts.body.filter.storylineContains = ["0000C2E97648","0006FC73-77B4-470F-AAC7-"];
          opts.body.filter.updatedAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.classificationsNin = [""];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.externalTicketIds = [""];
          opts.body.filter.osTypesNin = ["windows"];
          opts.body.filter.containerImageNameContains = [""];
          opts.body.filter.agentIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.k8sPodNameContains = [""];
          opts.body.filter.contentHashes = "ddd5030a3d029f3845fc1052419829f08f312240";
          opts.body.filter.awsSubnetIdsContains = [""];
          opts.body.filter.agentTagsData = "{"key1": ["value1_1", "value1_2"], "key2__nin": ["value2"]}";
          opts.body.filter.updatedAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.storylines = [""];
          opts.body.filter.k8sControllerLabelsContains = [""];
          opts.body.filter.awsSecurityGroupsContains = [""];
          opts.body.filter.k8sNodeNameContains = [""];
          opts.body.filter.confidenceLevels = ["malicious"];
          opts.body.filter.computerNameContains = ["john-office","WIN"];
          opts.body.filter.cloudNetworkContains = [""];
          opts.body.filter.classifications = [""];
          opts.body.filter.analystVerdicts = ["true_positive","suspicious"];
          opts.body.filter.initiatedByUsernameContains = ["John","John Doe"];
          opts.body.filter.resolved = false;
          opts.body.filter.collectionIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.detectionEngines = ["reputation"];
          opts.body.filter.awsRoleContains = [""];
          opts.body.filter.cloudAccountContains = [""];
          opts.body.filter.updatedAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.countsFor = "osTypes,machineTypes";
          opts.body.filter.limit = 0;
          opts.body.filter.realtimeAgentVersionContains = ["1.1.1.1","2.2."];
          opts.body.filter.osTypes = ["windows"];
          opts.body.filter.agentMachineTypes = ["unknown"];
          opts.body.filter.initiatedBy = ["agent_policy","dv_command"];
          opts.body.filter.initiatedByNin = ["agent_policy","dv_command"];
          opts.body.filter.k8sNamespaceLabelsContains = [""];
          opts.body.filter.engines = ["reputation"];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.detectionAgentVersionContains = ["1.1.1.1","2.2."];
          opts.body.filter.detectionEnginesNin = ["reputation"];
          opts.body.filter.osNamesNin = ["Windows 10 Pro"];
          opts.body.filter.k8sControllerNameContains = [""];
          opts.body.filter.k8sClusterNameContains = [""];
          opts.body.filter.noteExists = false;
          opts.body.filter.containerLabelsContains = [""];
          opts.body.filter.tenant = false;
          opts.body.filter.cloudInstanceIdContains = [""];
          opts.body.filter.agentVersions = ["2.5.1.1320"];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.detectionAgentDomainContains = ["sentinel","sentinelone.com"];
          opts.body.filter.enginesNin = ["reputation"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.cloudProviderNin = [""];
          opts.body.filter.filePathContains = ["\\MyUser\\Downloads"];
          opts.body.filter.k8sNodeLabelsContains = [""];
          opts.body.filter.osArchs = ["32 bit"];
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sNamespaceNameContains = [""];
          opts.body.filter.rebootRequired = false;
          opts.body.filter.mitigationStatuses = ["not_mitigated"];
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sPodLabelsContains = [""];
          opts.body.filter.gcpServiceAccountContains = [""];
          opts.body.filter.pendingActions = false;
          opts.body.filter.cloudLocationContains = [""];
          opts.body.filter.mitigationStatusesNin = ["not_mitigated"];
          opts.body.filter.agentMachineTypesNin = ["unknown"];
          opts.body.filter.originatedProcessContains = [""];
          opts.body.filter.failedActions = false;
          opts.body.filter.osNames = ["Windows 10 Pro"];
          opts.body.filter.contentHashContains = ["5f09bcff3"];
          opts.body.filter.incidentStatuses = ["unresolved","in_progress"];
          opts.body.filter.cloudInstanceSizeContains = [""];
          opts.body.filter.mitigatedPreemptively = false;
          opts.body.filter.displayName = "";
          opts.body.filter.externalTicketIdContains = [""];
          opts.body.filter.confidenceLevelsNin = ["malicious"];
          opts.body.filter.azureResourceGroupContains = [""];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.commandLineArgumentsContains = ["/usr/sbin/","wget"];
          opts.body.filter.uuidContains = ["e92-01928","b055"];
          opts.body.filter.externalTicketExists = false;
          opts.body.data = new S1MgmtApi.ThreatsSchemasThreatsAddToExclusionsWithTargetSchemaData();
          opts.body.data.description = "";
          opts.body.data.targetScope = "group";
          opts.body.data.note = "";
          opts.body.data.mode = "suppress";
          opts.body.data.type = "hash";
          opts.body.data.externalTicketId = "";
          opts.body.data.value = "";
          opts.body.data.pathExclusionType = "";
          opts.body.data.actions = ["upload"]"upload";
          opts.body.data.macroModules = new S1MgmtApi.ThreatsSchemasThreatsAddToExclusionsWithTargetSchemaDataMacroModules();
          opts.body.data.macroModules.description = "";
          opts.body.data.macroModules.hashes = [""];

          instance.webApiThreatsAddToExclusionsPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ThreatsSchemasThreatsAddToBlocklistExclusionsResultSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.ThreatsSchemasThreatsAddToBlocklistExclusionsResultSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);
              {
                let dataCtr = data.data.details;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.ThreatsSchemasThreatsAddToBlocklistExclusionsResultSchema200DataDetails);
                  expect(data.analystVerdict).to.be.a('string');
                  expect(data.analystVerdict).to.be("updated");
                  expect(data.result).to.be.a('string');
                  expect(data.result).to.be("created");
                  expect(data.threatId).to.be.a('string');
                  expect(data.threatId).to.be("225494730938493804");
  
                        }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatsAnalystVerdictPost', function() {
        it('should call webApiThreatsAnalystVerdictPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatsAnalystVerdictPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ThreatsSchemasThreatsAnalystVerdictSchema();
          opts.body.filter = new S1MgmtApi.ThreatsSchemasThreatsIncidentSchemaFilter();
          opts.body.filter.agentVersionsNin = ["2.5.1.1320"];
          opts.body.filter.analystVerdictsNin = ["true_positive","suspicious"];
          opts.body.filter.threatDetailsContains = ["malware.exe","virus.exe"];
          opts.body.filter.classificationSources = ["Cloud"];
          opts.body.filter.query = "";
          opts.body.filter.cloudProvider = [""];
          opts.body.filter.incidentStatusesNin = ["unresolved","in_progress"];
          opts.body.filter.publisherNameContains = ["GOOGLE","Apple Inc."];
          opts.body.filter.agentIsActive = false;
          opts.body.filter.updatedAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.classificationSourcesNin = ["Cloud"];
          opts.body.filter.containerNameContains = [""];
          opts.body.filter.cloudImageContains = [""];
          opts.body.filter.hasAgentTags = false;
          opts.body.filter.storylineContains = ["0000C2E97648","0006FC73-77B4-470F-AAC7-"];
          opts.body.filter.updatedAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.classificationsNin = [""];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.externalTicketIds = [""];
          opts.body.filter.osTypesNin = ["windows"];
          opts.body.filter.containerImageNameContains = [""];
          opts.body.filter.agentIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.k8sPodNameContains = [""];
          opts.body.filter.contentHashes = "ddd5030a3d029f3845fc1052419829f08f312240";
          opts.body.filter.awsSubnetIdsContains = [""];
          opts.body.filter.agentTagsData = "{"key1": ["value1_1", "value1_2"], "key2__nin": ["value2"]}";
          opts.body.filter.updatedAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.storylines = [""];
          opts.body.filter.k8sControllerLabelsContains = [""];
          opts.body.filter.awsSecurityGroupsContains = [""];
          opts.body.filter.k8sNodeNameContains = [""];
          opts.body.filter.confidenceLevels = ["malicious"];
          opts.body.filter.computerNameContains = ["john-office","WIN"];
          opts.body.filter.cloudNetworkContains = [""];
          opts.body.filter.classifications = [""];
          opts.body.filter.analystVerdicts = ["true_positive","suspicious"];
          opts.body.filter.initiatedByUsernameContains = ["John","John Doe"];
          opts.body.filter.resolved = false;
          opts.body.filter.collectionIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.detectionEngines = ["reputation"];
          opts.body.filter.awsRoleContains = [""];
          opts.body.filter.cloudAccountContains = [""];
          opts.body.filter.updatedAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.countsFor = "osTypes,machineTypes";
          opts.body.filter.limit = 0;
          opts.body.filter.realtimeAgentVersionContains = ["1.1.1.1","2.2."];
          opts.body.filter.osTypes = ["windows"];
          opts.body.filter.agentMachineTypes = ["unknown"];
          opts.body.filter.initiatedBy = ["agent_policy","dv_command"];
          opts.body.filter.initiatedByNin = ["agent_policy","dv_command"];
          opts.body.filter.k8sNamespaceLabelsContains = [""];
          opts.body.filter.engines = ["reputation"];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.detectionAgentVersionContains = ["1.1.1.1","2.2."];
          opts.body.filter.detectionEnginesNin = ["reputation"];
          opts.body.filter.osNamesNin = ["Windows 10 Pro"];
          opts.body.filter.k8sControllerNameContains = [""];
          opts.body.filter.k8sClusterNameContains = [""];
          opts.body.filter.noteExists = false;
          opts.body.filter.containerLabelsContains = [""];
          opts.body.filter.tenant = false;
          opts.body.filter.cloudInstanceIdContains = [""];
          opts.body.filter.agentVersions = ["2.5.1.1320"];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.detectionAgentDomainContains = ["sentinel","sentinelone.com"];
          opts.body.filter.enginesNin = ["reputation"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.cloudProviderNin = [""];
          opts.body.filter.filePathContains = ["\\MyUser\\Downloads"];
          opts.body.filter.k8sNodeLabelsContains = [""];
          opts.body.filter.osArchs = ["32 bit"];
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sNamespaceNameContains = [""];
          opts.body.filter.rebootRequired = false;
          opts.body.filter.mitigationStatuses = ["not_mitigated"];
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sPodLabelsContains = [""];
          opts.body.filter.gcpServiceAccountContains = [""];
          opts.body.filter.pendingActions = false;
          opts.body.filter.cloudLocationContains = [""];
          opts.body.filter.mitigationStatusesNin = ["not_mitigated"];
          opts.body.filter.agentMachineTypesNin = ["unknown"];
          opts.body.filter.originatedProcessContains = [""];
          opts.body.filter.failedActions = false;
          opts.body.filter.osNames = ["Windows 10 Pro"];
          opts.body.filter.contentHashContains = ["5f09bcff3"];
          opts.body.filter.incidentStatuses = ["unresolved","in_progress"];
          opts.body.filter.cloudInstanceSizeContains = [""];
          opts.body.filter.mitigatedPreemptively = false;
          opts.body.filter.displayName = "";
          opts.body.filter.externalTicketIdContains = [""];
          opts.body.filter.confidenceLevelsNin = ["malicious"];
          opts.body.filter.azureResourceGroupContains = [""];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.commandLineArgumentsContains = ["/usr/sbin/","wget"];
          opts.body.filter.uuidContains = ["e92-01928","b055"];
          opts.body.filter.externalTicketExists = false;
          opts.body.data = new S1MgmtApi.ThreatsSchemasThreatsAnalystVerdictSchemaData();
          opts.body.data.analystVerdict = "undefined";

          instance.webApiThreatsAnalystVerdictPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ThreatsSchemasThreatsAnalystVerdictResultSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.ThreatsSchemasThreatsAnalystVerdictResultSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);
              {
                let dataCtr = data.data.details;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.ThreatsSchemasThreatsAnalystVerdictResultSchema200DataDetails);
                  expect(data.result).to.be.a('string');
                  expect(data.result).to.be("updated");
                  expect(data.threatId).to.be.a('string');
                  expect(data.threatId).to.be("225494730938493804");
  
                        }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatsDvAddToBlacklistPost', function() {
        it('should call webApiThreatsDvAddToBlacklistPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatsDvAddToBlacklistPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ThreatsSchemasDvAddToBlackListSchema();
          opts.body.data = new S1MgmtApi.ThreatsSchemasDvAddToBlackListSchemaData();
          opts.body.data.targetScope = "site";
          opts.body.data.hashes = [new S1MgmtApi.ThreatsSchemasDvAddToBlackListSchemaDataHashes()];
          opts.body.data.hashes[0].agentId = "225494730938493804";
          opts.body.data.hashes[0].hash = "19423e162be504e52b8f7a18e2445309a6ada52f";

          instance.webApiThreatsDvAddToBlacklistPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatsDvMarkAsThreatPost', function() {
        it('should call webApiThreatsDvMarkAsThreatPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatsDvMarkAsThreatPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ThreatsSchemasDvMarkAsThreatSchema();
          opts.body.data = new S1MgmtApi.ThreatsSchemasDvMarkAsThreatSchemaData();
          opts.body.data.status = "threat";
          opts.body.data.initiatedBy = "dvManual";
          opts.body.data.events = [new S1MgmtApi.ThreatsSchemasDvMarkAsThreatSchemaDataEvents()];
          opts.body.data.events[0].agentId = "225494730938493804";
          opts.body.data.events[0].storyline = "8d9629ca-fc0b-5bf8-0e3a-193f99fdaa85";

          instance.webApiThreatsDvMarkAsThreatPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatsEnginesDisablePost', function() {
        it('should call webApiThreatsEnginesDisablePost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatsEnginesDisablePost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ThreatsSchemasEngineListSchema();
          opts.body.data = new S1MgmtApi.ThreatsSchemasEngineListSchemaData();
          opts.body.data.engines = [""];

          instance.webApiThreatsEnginesDisablePost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatsExportGet', function() {
        it('should call webApiThreatsExportGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatsExportGet call
          /*
          var opts = {};
          opts.agentVersionsNin = ["agentVersionsNin_example"];
          opts.analystVerdictsNin = ["analystVerdictsNin_example"];
          opts.threatDetailsContains = ["threatDetailsContains_example"];
          opts.classificationSources = ["classificationSources_example"];
          opts.query = "query_example";
          opts.cloudProvider = ["cloudProvider_example"];
          opts.incidentStatusesNin = ["incidentStatusesNin_example"];
          opts.publisherNameContains = ["publisherNameContains_example"];
          opts.agentIsActive = true;
          opts.updatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.classificationSourcesNin = ["classificationSourcesNin_example"];
          opts.containerNameContains = ["containerNameContains_example"];
          opts.cloudImageContains = ["cloudImageContains_example"];
          opts.hasAgentTags = true;
          opts.storylineContains = ["storylineContains_example"];
          opts.updatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.classificationsNin = ["classificationsNin_example"];
          opts.groupIds = ["groupIds_example"];
          opts.externalTicketIds = ["externalTicketIds_example"];
          opts.osTypesNin = ["osTypesNin_example"];
          opts.containerImageNameContains = ["containerImageNameContains_example"];
          opts.agentIds = ["agentIds_example"];
          opts.k8sPodNameContains = ["k8sPodNameContains_example"];
          opts.contentHashes = ["contentHashes_example"];
          opts.awsSubnetIdsContains = ["awsSubnetIdsContains_example"];
          opts.agentTagsData = "agentTagsData_example";
          opts.updatedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.storylines = ["storylines_example"];
          opts.k8sControllerLabelsContains = ["k8sControllerLabelsContains_example"];
          opts.awsSecurityGroupsContains = ["awsSecurityGroupsContains_example"];
          opts.k8sNodeNameContains = ["k8sNodeNameContains_example"];
          opts.confidenceLevels = ["confidenceLevels_example"];
          opts.computerNameContains = ["computerNameContains_example"];
          opts.cloudNetworkContains = ["cloudNetworkContains_example"];
          opts.classifications = ["classifications_example"];
          opts.analystVerdicts = ["analystVerdicts_example"];
          opts.initiatedByUsernameContains = ["initiatedByUsernameContains_example"];
          opts.resolved = true;
          opts.collectionIds = ["collectionIds_example"];
          opts.detectionEngines = ["detectionEngines_example"];
          opts.awsRoleContains = ["awsRoleContains_example"];
          opts.cloudAccountContains = ["cloudAccountContains_example"];
          opts.updatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.ids = ["ids_example"];
          opts.countsFor = "countsFor_example";
          opts.realtimeAgentVersionContains = ["realtimeAgentVersionContains_example"];
          opts.osTypes = ["osTypes_example"];
          opts.agentMachineTypes = ["agentMachineTypes_example"];
          opts.initiatedBy = ["initiatedBy_example"];
          opts.initiatedByNin = ["initiatedByNin_example"];
          opts.k8sNamespaceLabelsContains = ["k8sNamespaceLabelsContains_example"];
          opts.engines = ["engines_example"];
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionAgentVersionContains = ["detectionAgentVersionContains_example"];
          opts.detectionEnginesNin = ["detectionEnginesNin_example"];
          opts.osNamesNin = ["osNamesNin_example"];
          opts.k8sControllerNameContains = ["k8sControllerNameContains_example"];
          opts.k8sClusterNameContains = ["k8sClusterNameContains_example"];
          opts.noteExists = true;
          opts.containerLabelsContains = ["containerLabelsContains_example"];
          opts.tenant = true;
          opts.cloudInstanceIdContains = ["cloudInstanceIdContains_example"];
          opts.agentVersions = ["agentVersions_example"];
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionAgentDomainContains = ["detectionAgentDomainContains_example"];
          opts.enginesNin = ["enginesNin_example"];
          opts.accountIds = ["accountIds_example"];
          opts.cloudProviderNin = ["cloudProviderNin_example"];
          opts.filePathContains = ["filePathContains_example"];
          opts.k8sNodeLabelsContains = ["k8sNodeLabelsContains_example"];
          opts.osArchs = ["osArchs_example"];
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.k8sNamespaceNameContains = ["k8sNamespaceNameContains_example"];
          opts.rebootRequired = true;
          opts.mitigationStatuses = ["mitigationStatuses_example"];
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.k8sPodLabelsContains = ["k8sPodLabelsContains_example"];
          opts.gcpServiceAccountContains = ["gcpServiceAccountContains_example"];
          opts.pendingActions = true;
          opts.cloudLocationContains = ["cloudLocationContains_example"];
          opts.mitigationStatusesNin = ["mitigationStatusesNin_example"];
          opts.agentMachineTypesNin = ["agentMachineTypesNin_example"];
          opts.originatedProcessContains = ["originatedProcessContains_example"];
          opts.failedActions = true;
          opts.osNames = ["osNames_example"];
          opts.contentHashContains = ["contentHashContains_example"];
          opts.incidentStatuses = ["incidentStatuses_example"];
          opts.cloudInstanceSizeContains = ["cloudInstanceSizeContains_example"];
          opts.mitigatedPreemptively = true;
          opts.displayName = "displayName_example";
          opts.externalTicketIdContains = ["externalTicketIdContains_example"];
          opts.confidenceLevelsNin = ["confidenceLevelsNin_example"];
          opts.azureResourceGroupContains = ["azureResourceGroupContains_example"];
          opts.siteIds = ["siteIds_example"];
          opts.commandLineArgumentsContains = ["commandLineArgumentsContains_example"];
          opts.uuidContains = ["uuidContains_example"];
          opts.externalTicketExists = true;

          instance.webApiThreatsExportGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatsExternalTicketIdPost', function() {
        it('should call webApiThreatsExternalTicketIdPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatsExternalTicketIdPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ThreatsSchemasThreatExternalTicketSchema();
          opts.body.filter = new S1MgmtApi.ThreatsSchemasThreatsIncidentSchemaFilter();
          opts.body.filter.agentVersionsNin = ["2.5.1.1320"];
          opts.body.filter.analystVerdictsNin = ["true_positive","suspicious"];
          opts.body.filter.threatDetailsContains = ["malware.exe","virus.exe"];
          opts.body.filter.classificationSources = ["Cloud"];
          opts.body.filter.query = "";
          opts.body.filter.cloudProvider = [""];
          opts.body.filter.incidentStatusesNin = ["unresolved","in_progress"];
          opts.body.filter.publisherNameContains = ["GOOGLE","Apple Inc."];
          opts.body.filter.agentIsActive = false;
          opts.body.filter.updatedAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.classificationSourcesNin = ["Cloud"];
          opts.body.filter.containerNameContains = [""];
          opts.body.filter.cloudImageContains = [""];
          opts.body.filter.hasAgentTags = false;
          opts.body.filter.storylineContains = ["0000C2E97648","0006FC73-77B4-470F-AAC7-"];
          opts.body.filter.updatedAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.classificationsNin = [""];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.externalTicketIds = [""];
          opts.body.filter.osTypesNin = ["windows"];
          opts.body.filter.containerImageNameContains = [""];
          opts.body.filter.agentIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.k8sPodNameContains = [""];
          opts.body.filter.contentHashes = "ddd5030a3d029f3845fc1052419829f08f312240";
          opts.body.filter.awsSubnetIdsContains = [""];
          opts.body.filter.agentTagsData = "{"key1": ["value1_1", "value1_2"], "key2__nin": ["value2"]}";
          opts.body.filter.updatedAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.storylines = [""];
          opts.body.filter.k8sControllerLabelsContains = [""];
          opts.body.filter.awsSecurityGroupsContains = [""];
          opts.body.filter.k8sNodeNameContains = [""];
          opts.body.filter.confidenceLevels = ["malicious"];
          opts.body.filter.computerNameContains = ["john-office","WIN"];
          opts.body.filter.cloudNetworkContains = [""];
          opts.body.filter.classifications = [""];
          opts.body.filter.analystVerdicts = ["true_positive","suspicious"];
          opts.body.filter.initiatedByUsernameContains = ["John","John Doe"];
          opts.body.filter.resolved = false;
          opts.body.filter.collectionIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.detectionEngines = ["reputation"];
          opts.body.filter.awsRoleContains = [""];
          opts.body.filter.cloudAccountContains = [""];
          opts.body.filter.updatedAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.countsFor = "osTypes,machineTypes";
          opts.body.filter.limit = 0;
          opts.body.filter.realtimeAgentVersionContains = ["1.1.1.1","2.2."];
          opts.body.filter.osTypes = ["windows"];
          opts.body.filter.agentMachineTypes = ["unknown"];
          opts.body.filter.initiatedBy = ["agent_policy","dv_command"];
          opts.body.filter.initiatedByNin = ["agent_policy","dv_command"];
          opts.body.filter.k8sNamespaceLabelsContains = [""];
          opts.body.filter.engines = ["reputation"];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.detectionAgentVersionContains = ["1.1.1.1","2.2."];
          opts.body.filter.detectionEnginesNin = ["reputation"];
          opts.body.filter.osNamesNin = ["Windows 10 Pro"];
          opts.body.filter.k8sControllerNameContains = [""];
          opts.body.filter.k8sClusterNameContains = [""];
          opts.body.filter.noteExists = false;
          opts.body.filter.containerLabelsContains = [""];
          opts.body.filter.tenant = false;
          opts.body.filter.cloudInstanceIdContains = [""];
          opts.body.filter.agentVersions = ["2.5.1.1320"];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.detectionAgentDomainContains = ["sentinel","sentinelone.com"];
          opts.body.filter.enginesNin = ["reputation"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.cloudProviderNin = [""];
          opts.body.filter.filePathContains = ["\\MyUser\\Downloads"];
          opts.body.filter.k8sNodeLabelsContains = [""];
          opts.body.filter.osArchs = ["32 bit"];
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sNamespaceNameContains = [""];
          opts.body.filter.rebootRequired = false;
          opts.body.filter.mitigationStatuses = ["not_mitigated"];
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sPodLabelsContains = [""];
          opts.body.filter.gcpServiceAccountContains = [""];
          opts.body.filter.pendingActions = false;
          opts.body.filter.cloudLocationContains = [""];
          opts.body.filter.mitigationStatusesNin = ["not_mitigated"];
          opts.body.filter.agentMachineTypesNin = ["unknown"];
          opts.body.filter.originatedProcessContains = [""];
          opts.body.filter.failedActions = false;
          opts.body.filter.osNames = ["Windows 10 Pro"];
          opts.body.filter.contentHashContains = ["5f09bcff3"];
          opts.body.filter.incidentStatuses = ["unresolved","in_progress"];
          opts.body.filter.cloudInstanceSizeContains = [""];
          opts.body.filter.mitigatedPreemptively = false;
          opts.body.filter.displayName = "";
          opts.body.filter.externalTicketIdContains = [""];
          opts.body.filter.confidenceLevelsNin = ["malicious"];
          opts.body.filter.azureResourceGroupContains = [""];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.commandLineArgumentsContains = ["/usr/sbin/","wget"];
          opts.body.filter.uuidContains = ["e92-01928","b055"];
          opts.body.filter.externalTicketExists = false;
          opts.body.data = new S1MgmtApi.ThreatsSchemasThreatExternalTicketSchemaData();
          opts.body.data.externalTicketId = "";

          instance.webApiThreatsExternalTicketIdPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatsFetchFilePost', function() {
        it('should call webApiThreatsFetchFilePost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatsFetchFilePost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ThreatsSchemasThreatsFetchFileRequestSchema();
          opts.body.filter = new S1MgmtApi.ThreatsSchemasThreatsFetchFileRequestSchemaFilter();
          opts.body.filter.agentVersionsNin = ["2.5.1.1320"];
          opts.body.filter.analystVerdictsNin = ["true_positive","suspicious"];
          opts.body.filter.threatDetailsContains = ["malware.exe","virus.exe"];
          opts.body.filter.classificationSources = ["Cloud"];
          opts.body.filter.query = "";
          opts.body.filter.cloudProvider = [""];
          opts.body.filter.incidentStatusesNin = ["unresolved","in_progress"];
          opts.body.filter.publisherNameContains = ["GOOGLE","Apple Inc."];
          opts.body.filter.agentIsActive = false;
          opts.body.filter.updatedAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.classificationSourcesNin = ["Cloud"];
          opts.body.filter.containerNameContains = [""];
          opts.body.filter.cloudImageContains = [""];
          opts.body.filter.hasAgentTags = false;
          opts.body.filter.storylineContains = ["0000C2E97648","0006FC73-77B4-470F-AAC7-"];
          opts.body.filter.updatedAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.classificationsNin = [""];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.externalTicketIds = [""];
          opts.body.filter.osTypesNin = ["windows"];
          opts.body.filter.containerImageNameContains = [""];
          opts.body.filter.agentIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.k8sPodNameContains = [""];
          opts.body.filter.contentHashes = "ddd5030a3d029f3845fc1052419829f08f312240";
          opts.body.filter.awsSubnetIdsContains = [""];
          opts.body.filter.agentTagsData = "{"key1": ["value1_1", "value1_2"], "key2__nin": ["value2"]}";
          opts.body.filter.updatedAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.storylines = [""];
          opts.body.filter.k8sControllerLabelsContains = [""];
          opts.body.filter.awsSecurityGroupsContains = [""];
          opts.body.filter.k8sNodeNameContains = [""];
          opts.body.filter.confidenceLevels = ["malicious"];
          opts.body.filter.computerNameContains = ["john-office","WIN"];
          opts.body.filter.cloudNetworkContains = [""];
          opts.body.filter.classifications = [""];
          opts.body.filter.analystVerdicts = ["true_positive","suspicious"];
          opts.body.filter.initiatedByUsernameContains = ["John","John Doe"];
          opts.body.filter.resolved = false;
          opts.body.filter.collectionIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.detectionEngines = ["reputation"];
          opts.body.filter.awsRoleContains = [""];
          opts.body.filter.cloudAccountContains = [""];
          opts.body.filter.updatedAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.countsFor = "osTypes,machineTypes";
          opts.body.filter.realtimeAgentVersionContains = ["1.1.1.1","2.2."];
          opts.body.filter.osTypes = ["windows"];
          opts.body.filter.agentMachineTypes = ["unknown"];
          opts.body.filter.initiatedBy = ["agent_policy","dv_command"];
          opts.body.filter.initiatedByNin = ["agent_policy","dv_command"];
          opts.body.filter.k8sNamespaceLabelsContains = [""];
          opts.body.filter.engines = ["reputation"];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.detectionAgentVersionContains = ["1.1.1.1","2.2."];
          opts.body.filter.detectionEnginesNin = ["reputation"];
          opts.body.filter.osNamesNin = ["Windows 10 Pro"];
          opts.body.filter.k8sControllerNameContains = [""];
          opts.body.filter.k8sClusterNameContains = [""];
          opts.body.filter.noteExists = false;
          opts.body.filter.containerLabelsContains = [""];
          opts.body.filter.tenant = false;
          opts.body.filter.cloudInstanceIdContains = [""];
          opts.body.filter.agentVersions = ["2.5.1.1320"];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.detectionAgentDomainContains = ["sentinel","sentinelone.com"];
          opts.body.filter.enginesNin = ["reputation"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.cloudProviderNin = [""];
          opts.body.filter.filePathContains = ["\\MyUser\\Downloads"];
          opts.body.filter.k8sNodeLabelsContains = [""];
          opts.body.filter.osArchs = ["32 bit"];
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sNamespaceNameContains = [""];
          opts.body.filter.rebootRequired = false;
          opts.body.filter.mitigationStatuses = ["not_mitigated"];
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sPodLabelsContains = [""];
          opts.body.filter.gcpServiceAccountContains = [""];
          opts.body.filter.pendingActions = false;
          opts.body.filter.cloudLocationContains = [""];
          opts.body.filter.mitigationStatusesNin = ["not_mitigated"];
          opts.body.filter.agentMachineTypesNin = ["unknown"];
          opts.body.filter.originatedProcessContains = [""];
          opts.body.filter.failedActions = false;
          opts.body.filter.osNames = ["Windows 10 Pro"];
          opts.body.filter.contentHashContains = ["5f09bcff3"];
          opts.body.filter.incidentStatuses = ["unresolved","in_progress"];
          opts.body.filter.cloudInstanceSizeContains = [""];
          opts.body.filter.mitigatedPreemptively = false;
          opts.body.filter.displayName = "";
          opts.body.filter.externalTicketIdContains = [""];
          opts.body.filter.confidenceLevelsNin = ["malicious"];
          opts.body.filter.azureResourceGroupContains = [""];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.commandLineArgumentsContains = ["/usr/sbin/","wget"];
          opts.body.filter.uuidContains = ["e92-01928","b055"];
          opts.body.filter.externalTicketExists = false;
          opts.body.data = new S1MgmtApi.ThreatsSchemasThreatsFetchFileRequestSchemaData();
          opts.body.data.password = "MySecretPass123!";

          instance.webApiThreatsFetchFilePost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatsGet', function() {
        it('should call webApiThreatsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatsGet call and complete the assertions
          /*
          var opts = {};
          opts.agentVersionsNin = ["agentVersionsNin_example"];
          opts.analystVerdictsNin = ["analystVerdictsNin_example"];
          opts.threatDetailsContains = ["threatDetailsContains_example"];
          opts.classificationSources = ["classificationSources_example"];
          opts.query = "query_example";
          opts.cloudProvider = ["cloudProvider_example"];
          opts.incidentStatusesNin = ["incidentStatusesNin_example"];
          opts.publisherNameContains = ["publisherNameContains_example"];
          opts.skip = 56;
          opts.agentIsActive = true;
          opts.updatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.classificationSourcesNin = ["classificationSourcesNin_example"];
          opts.containerNameContains = ["containerNameContains_example"];
          opts.cloudImageContains = ["cloudImageContains_example"];
          opts.hasAgentTags = true;
          opts.storylineContains = ["storylineContains_example"];
          opts.updatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.classificationsNin = ["classificationsNin_example"];
          opts.groupIds = ["groupIds_example"];
          opts.externalTicketIds = ["externalTicketIds_example"];
          opts.osTypesNin = ["osTypesNin_example"];
          opts.containerImageNameContains = ["containerImageNameContains_example"];
          opts.cursor = "null";
          opts.agentIds = ["agentIds_example"];
          opts.k8sPodNameContains = ["k8sPodNameContains_example"];
          opts.contentHashes = ["contentHashes_example"];
          opts.awsSubnetIdsContains = ["awsSubnetIdsContains_example"];
          opts.agentTagsData = "agentTagsData_example";
          opts.updatedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.storylines = ["storylines_example"];
          opts.k8sControllerLabelsContains = ["k8sControllerLabelsContains_example"];
          opts.awsSecurityGroupsContains = ["awsSecurityGroupsContains_example"];
          opts.k8sNodeNameContains = ["k8sNodeNameContains_example"];
          opts.sortOrder = "null";
          opts.confidenceLevels = ["confidenceLevels_example"];
          opts.computerNameContains = ["computerNameContains_example"];
          opts.cloudNetworkContains = ["cloudNetworkContains_example"];
          opts.classifications = ["classifications_example"];
          opts.analystVerdicts = ["analystVerdicts_example"];
          opts.initiatedByUsernameContains = ["initiatedByUsernameContains_example"];
          opts.resolved = true;
          opts.collectionIds = ["collectionIds_example"];
          opts.detectionEngines = ["detectionEngines_example"];
          opts.awsRoleContains = ["awsRoleContains_example"];
          opts.cloudAccountContains = ["cloudAccountContains_example"];
          opts.updatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.ids = ["ids_example"];
          opts.countOnly = false;
          opts.countsFor = "countsFor_example";
          opts.limit = 10;
          opts.realtimeAgentVersionContains = ["realtimeAgentVersionContains_example"];
          opts.osTypes = ["osTypes_example"];
          opts.agentMachineTypes = ["agentMachineTypes_example"];
          opts.initiatedBy = ["initiatedBy_example"];
          opts.initiatedByNin = ["initiatedByNin_example"];
          opts.k8sNamespaceLabelsContains = ["k8sNamespaceLabelsContains_example"];
          opts.engines = ["engines_example"];
          opts.skipCount = null;
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionAgentVersionContains = ["detectionAgentVersionContains_example"];
          opts.detectionEnginesNin = ["detectionEnginesNin_example"];
          opts.osNamesNin = ["osNamesNin_example"];
          opts.k8sControllerNameContains = ["k8sControllerNameContains_example"];
          opts.k8sClusterNameContains = ["k8sClusterNameContains_example"];
          opts.noteExists = true;
          opts.containerLabelsContains = ["containerLabelsContains_example"];
          opts.sortBy = "null";
          opts.tenant = true;
          opts.cloudInstanceIdContains = ["cloudInstanceIdContains_example"];
          opts.agentVersions = ["agentVersions_example"];
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionAgentDomainContains = ["detectionAgentDomainContains_example"];
          opts.enginesNin = ["enginesNin_example"];
          opts.accountIds = ["accountIds_example"];
          opts.cloudProviderNin = ["cloudProviderNin_example"];
          opts.filePathContains = ["filePathContains_example"];
          opts.k8sNodeLabelsContains = ["k8sNodeLabelsContains_example"];
          opts.osArchs = ["osArchs_example"];
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.k8sNamespaceNameContains = ["k8sNamespaceNameContains_example"];
          opts.rebootRequired = true;
          opts.mitigationStatuses = ["mitigationStatuses_example"];
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.k8sPodLabelsContains = ["k8sPodLabelsContains_example"];
          opts.gcpServiceAccountContains = ["gcpServiceAccountContains_example"];
          opts.pendingActions = true;
          opts.cloudLocationContains = ["cloudLocationContains_example"];
          opts.mitigationStatusesNin = ["mitigationStatusesNin_example"];
          opts.agentMachineTypesNin = ["agentMachineTypesNin_example"];
          opts.originatedProcessContains = ["originatedProcessContains_example"];
          opts.failedActions = true;
          opts.osNames = ["osNames_example"];
          opts.contentHashContains = ["contentHashContains_example"];
          opts.incidentStatuses = ["incidentStatuses_example"];
          opts.cloudInstanceSizeContains = ["cloudInstanceSizeContains_example"];
          opts.mitigatedPreemptively = true;
          opts.displayName = "displayName_example";
          opts.externalTicketIdContains = ["externalTicketIdContains_example"];
          opts.confidenceLevelsNin = ["confidenceLevelsNin_example"];
          opts.azureResourceGroupContains = ["azureResourceGroupContains_example"];
          opts.siteIds = ["siteIds_example"];
          opts.commandLineArgumentsContains = ["commandLineArgumentsContains_example"];
          opts.uuidContains = ["uuidContains_example"];
          opts.externalTicketExists = true;

          instance.webApiThreatsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ThreatsSchemasThreatSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.ThreatsSchemasThreatSchemaMany200Data);
                expect(data.containerInfo).to.be.a(S1MgmtApi.ThreatsSchemasThreatSchemaMany200ContainerInfo);
                      expect(data.containerInfo.name).to.be.a('string');
                  expect(data.containerInfo.name).to.be("");
                  expect(data.containerInfo.id).to.be.a('string');
                  expect(data.containerInfo.id).to.be("");
                  expect(data.containerInfo.image).to.be.a('string');
                  expect(data.containerInfo.image).to.be("");
                  expect(data.containerInfo.isContainerQuarantine).to.be.a('boolean');
                  expect(data.containerInfo.isContainerQuarantine).to.be(false);
                  {
                    let dataCtr = data.containerInfo.labels;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                {
                  let dataCtr = data.mitigationStatus;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.ThreatsSchemasThreatSchemaMany200MitigationStatus);
                    expect(data.reportId).to.be.a('string');
                    expect(data.reportId).to.be("225494730938493804");
                    expect(data.action).to.be.a('string');
                    expect(data.action).to.be("kill");
                    expect(data.actionsCounters).to.be.a(S1MgmtApi.ThreatsSchemasThreatSchemaMany200ActionsCounters);
                          expect(data.actionsCounters.pendingReboot).to.be.a('number');
                      expect(data.actionsCounters.pendingReboot).to.be(0);
                      expect(data.actionsCounters.success).to.be.a('number');
                      expect(data.actionsCounters.success).to.be(0);
                      expect(data.actionsCounters.total).to.be.a('number');
                      expect(data.actionsCounters.total).to.be(0);
                      expect(data.actionsCounters.notFound).to.be.a('number');
                      expect(data.actionsCounters.notFound).to.be(0);
                      expect(data.actionsCounters.failed).to.be.a('number');
                      expect(data.actionsCounters.failed).to.be(0);
                    expect(data.groupNotFound).to.be.a('boolean');
                    expect(data.groupNotFound).to.be(false);
                    expect(data.mitigationEndedAt).to.be.a(Date);
                    expect(data.mitigationEndedAt).to.be(2018-02-27T04:49:26.257525Z);
                    expect(data.lastUpdate).to.be.a(Date);
                    expect(data.lastUpdate).to.be(2018-02-27T04:49:26.257525Z);
                    expect(data.agentSupportsReport).to.be.a('boolean');
                    expect(data.agentSupportsReport).to.be(false);
                    expect(data.status).to.be.a('string');
                    expect(data.status).to.be("success");
                    expect(data.mitigationStartedAt).to.be.a(Date);
                    expect(data.mitigationStartedAt).to.be(2018-02-27T04:49:26.257525Z);
                    expect(data.latestReport).to.be.a('string');
                    expect(data.latestReport).to.be("");
    
                          }
                }
                {
                  let dataCtr = data.whiteningOptions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.kubernetesInfo).to.be.a(S1MgmtApi.ThreatsSchemasThreatSchemaMany200KubernetesInfo);
                      {
                    let dataCtr = data.kubernetesInfo.podLabels;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.kubernetesInfo.controllerLabels;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.kubernetesInfo.nodeLabels;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.kubernetesInfo.controllerName).to.be.a('string');
                  expect(data.kubernetesInfo.controllerName).to.be("");
                  expect(data.kubernetesInfo.node).to.be.a('string');
                  expect(data.kubernetesInfo.node).to.be("");
                  expect(data.kubernetesInfo.pod).to.be.a('string');
                  expect(data.kubernetesInfo.pod).to.be("");
                  expect(data.kubernetesInfo.namespace).to.be.a('string');
                  expect(data.kubernetesInfo.namespace).to.be("");
                  {
                    let dataCtr = data.kubernetesInfo.namespaceLabels;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.kubernetesInfo.controllerKind).to.be.a('string');
                  expect(data.kubernetesInfo.controllerKind).to.be("");
                  expect(data.kubernetesInfo.cluster).to.be.a('string');
                  expect(data.kubernetesInfo.cluster).to.be("");
                  expect(data.kubernetesInfo.isContainerQuarantine).to.be.a('boolean');
                  expect(data.kubernetesInfo.isContainerQuarantine).to.be(false);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.agentRealtimeInfo).to.be.a(S1MgmtApi.ThreatsSchemasThreatSchemaMany200AgentRealtimeInfo);
                      expect(data.agentRealtimeInfo.agentIsActive).to.be.a('boolean');
                  expect(data.agentRealtimeInfo.agentIsActive).to.be(false);
                  expect(data.agentRealtimeInfo.scanFinishedAt).to.be.a(Date);
                  expect(data.agentRealtimeInfo.scanFinishedAt).to.be(2018-02-27T04:49:26.257525Z);
                  expect(data.agentRealtimeInfo.agentMitigationMode).to.be.a('string');
                  expect(data.agentRealtimeInfo.agentMitigationMode).to.be("detect");
                  expect(data.agentRealtimeInfo.agentInfected).to.be.a('boolean');
                  expect(data.agentRealtimeInfo.agentInfected).to.be(false);
                  expect(data.agentRealtimeInfo.operationalState).to.be.a('string');
                  expect(data.agentRealtimeInfo.operationalState).to.be("");
                  expect(data.agentRealtimeInfo.accountId).to.be.a('string');
                  expect(data.agentRealtimeInfo.accountId).to.be("225494730938493804");
                  expect(data.agentRealtimeInfo.agentMachineType).to.be.a('string');
                  expect(data.agentRealtimeInfo.agentMachineType).to.be("unknown");
                  expect(data.agentRealtimeInfo.siteId).to.be.a('string');
                  expect(data.agentRealtimeInfo.siteId).to.be("225494730938493804");
                  expect(data.agentRealtimeInfo.storageType).to.be.a('string');
                  expect(data.agentRealtimeInfo.storageType).to.be("");
                  {
                    let dataCtr = data.agentRealtimeInfo.userActionsNeeded;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("none");
                    }
                  }
                  expect(data.agentRealtimeInfo.rebootRequired).to.be.a('boolean');
                  expect(data.agentRealtimeInfo.rebootRequired).to.be(false);
                  expect(data.agentRealtimeInfo.agentComputerName).to.be.a('string');
                  expect(data.agentRealtimeInfo.agentComputerName).to.be("");
                  expect(data.agentRealtimeInfo.agentUuid).to.be.a('string');
                  expect(data.agentRealtimeInfo.agentUuid).to.be("");
                  expect(data.agentRealtimeInfo.accountName).to.be.a('string');
                  expect(data.agentRealtimeInfo.accountName).to.be("");
                  expect(data.agentRealtimeInfo.agentId).to.be.a('string');
                  expect(data.agentRealtimeInfo.agentId).to.be("225494730938493804");
                  expect(data.agentRealtimeInfo.agentDecommissionedAt).to.be.a('boolean');
                  expect(data.agentRealtimeInfo.agentDecommissionedAt).to.be(false);
                  expect(data.agentRealtimeInfo.groupName).to.be.a('string');
                  expect(data.agentRealtimeInfo.groupName).to.be("");
                  expect(data.agentRealtimeInfo.agentIsDecommissioned).to.be.a('boolean');
                  expect(data.agentRealtimeInfo.agentIsDecommissioned).to.be(false);
                  expect(data.agentRealtimeInfo.activeThreats).to.be.a('number');
                  expect(data.agentRealtimeInfo.activeThreats).to.be(0);
                  expect(data.agentRealtimeInfo.agentOsName).to.be.a('string');
                  expect(data.agentRealtimeInfo.agentOsName).to.be("");
                  expect(data.agentRealtimeInfo.agentNetworkStatus).to.be.a('string');
                  expect(data.agentRealtimeInfo.agentNetworkStatus).to.be("connected");
                  expect(data.agentRealtimeInfo.scanStatus).to.be.a('string');
                  expect(data.agentRealtimeInfo.scanStatus).to.be("none");
                  {
                    let dataCtr = data.agentRealtimeInfo.networkInterfaces;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(S1MgmtApi.ThreatsSchemasThreatSchemaMany200AgentRealtimeInfoNetworkInterfaces);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.physical).to.be.a('string');
                      expect(data.physical).to.be("00:25:96:FF:FE:12:34:56");
                      expect(data.id).to.be.a('string');
                      expect(data.id).to.be("225494730938493804");
                      {
                        let dataCtr = data.inet;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.inet6;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
      
                            }
                  }
                  expect(data.agentRealtimeInfo.scanStartedAt).to.be.a(Date);
                  expect(data.agentRealtimeInfo.scanStartedAt).to.be(2018-02-27T04:49:26.257525Z);
                  expect(data.agentRealtimeInfo.groupId).to.be.a('string');
                  expect(data.agentRealtimeInfo.groupId).to.be("225494730938493804");
                  expect(data.agentRealtimeInfo.siteName).to.be.a('string');
                  expect(data.agentRealtimeInfo.siteName).to.be("");
                  expect(data.agentRealtimeInfo.agentVersion).to.be.a('string');
                  expect(data.agentRealtimeInfo.agentVersion).to.be("3.6.1.14");
                  expect(data.agentRealtimeInfo.storageName).to.be.a('string');
                  expect(data.agentRealtimeInfo.storageName).to.be("");
                  expect(data.agentRealtimeInfo.agentOsType).to.be.a('string');
                  expect(data.agentRealtimeInfo.agentOsType).to.be("windows");
                  expect(data.agentRealtimeInfo.agentDomain).to.be.a('string');
                  expect(data.agentRealtimeInfo.agentDomain).to.be("");
                  expect(data.agentRealtimeInfo.scanAbortedAt).to.be.a(Date);
                  expect(data.agentRealtimeInfo.scanAbortedAt).to.be(2018-02-27T04:49:26.257525Z);
                  expect(data.agentRealtimeInfo.agentOsRevision).to.be.a('string');
                  expect(data.agentRealtimeInfo.agentOsRevision).to.be("");
                expect(data.agentDetectionInfo).to.be.a(S1MgmtApi.ThreatsSchemasThreatSchemaMany200AgentDetectionInfo);
                      expect(data.agentDetectionInfo.agentLastLoggedInUserName).to.be.a('string');
                  expect(data.agentDetectionInfo.agentLastLoggedInUserName).to.be("janedoe3");
                  expect(data.agentDetectionInfo.agentVersion).to.be.a('string');
                  expect(data.agentDetectionInfo.agentVersion).to.be("3.6.1.14");
                  expect(data.agentDetectionInfo.agentLastLoggedInUserMail).to.be.a('string');
                  expect(data.agentDetectionInfo.agentLastLoggedInUserMail).to.be("");
                  expect(data.agentDetectionInfo.agentDomain).to.be.a('string');
                  expect(data.agentDetectionInfo.agentDomain).to.be("mybusiness.net");
                  expect(data.agentDetectionInfo.agentOsName).to.be.a('string');
                  expect(data.agentDetectionInfo.agentOsName).to.be("");
                  expect(data.agentDetectionInfo.externalIp).to.be.a('string');
                  expect(data.agentDetectionInfo.externalIp).to.be("");
                  expect(data.agentDetectionInfo.accountName).to.be.a('string');
                  expect(data.agentDetectionInfo.accountName).to.be("");
                  expect(data.agentDetectionInfo.groupName).to.be.a('string');
                  expect(data.agentDetectionInfo.groupName).to.be("");
                  expect(data.agentDetectionInfo.accountId).to.be.a('string');
                  expect(data.agentDetectionInfo.accountId).to.be("225494730938493804");
                  expect(data.agentDetectionInfo.agentDetectionState).to.be.a('string');
                  expect(data.agentDetectionInfo.agentDetectionState).to.be("");
                  expect(data.agentDetectionInfo.agentUuid).to.be.a('string');
                  expect(data.agentDetectionInfo.agentUuid).to.be("");
                  expect(data.agentDetectionInfo.agentMitigationMode).to.be.a('string');
                  expect(data.agentDetectionInfo.agentMitigationMode).to.be("detect");
                  expect(data.agentDetectionInfo.siteId).to.be.a('string');
                  expect(data.agentDetectionInfo.siteId).to.be("225494730938493804");
                  expect(data.agentDetectionInfo.agentIpV4).to.be.a('string');
                  expect(data.agentDetectionInfo.agentIpV4).to.be("");
                  expect(data.agentDetectionInfo.agentRegisteredAt).to.be.a(Date);
                  expect(data.agentDetectionInfo.agentRegisteredAt).to.be(2018-02-27T04:49:26.257525Z);
                  expect(data.agentDetectionInfo.siteName).to.be.a('string');
                  expect(data.agentDetectionInfo.siteName).to.be("");
                  expect(data.agentDetectionInfo.agentIpV6).to.be.a('string');
                  expect(data.agentDetectionInfo.agentIpV6).to.be("");
                  expect(data.agentDetectionInfo.agentLastLoggedInUpn).to.be.a('string');
                  expect(data.agentDetectionInfo.agentLastLoggedInUpn).to.be("");
                  {
                    let dataCtr = data.agentDetectionInfo.cloudProviders;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(S1MgmtApi.ThreatsSchemasThreatSchemaMany200AgentDetectionInfoCloudProviders);
                      expect(data.cloudImage).to.be.a('string');
                      expect(data.cloudImage).to.be("");
                      expect(data.agentPodName).to.be.a('string');
                      expect(data.agentPodName).to.be("");
                      expect(data.awsRole).to.be.a('string');
                      expect(data.awsRole).to.be("");
                      expect(data.gcpServiceAccount).to.be.a('string');
                      expect(data.gcpServiceAccount).to.be("");
                      {
                        let dataCtr = data.awsSecurityGroups;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      expect(data.clusterName).to.be.a('string');
                      expect(data.clusterName).to.be("");
                      expect(data.cloudInstanceSize).to.be.a('string');
                      expect(data.cloudInstanceSize).to.be("");
                      expect(data.cloudLocation).to.be.a('string');
                      expect(data.cloudLocation).to.be("");
                      expect(data.cloudAccount).to.be.a('string');
                      expect(data.cloudAccount).to.be("");
                      expect(data.cloudNetwork).to.be.a('string');
                      expect(data.cloudNetwork).to.be("");
                      {
                        let dataCtr = data.cloudTags;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      expect(data.agentNamespace).to.be.a('string');
                      expect(data.agentNamespace).to.be("");
                      expect(data.azureResourceGroup).to.be.a('string');
                      expect(data.azureResourceGroup).to.be("");
                      expect(data.cloudInstanceId).to.be.a('string');
                      expect(data.cloudInstanceId).to.be("");
                      {
                        let dataCtr = data.awsSubnetIds;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
      
                            }
                  }
                  expect(data.agentDetectionInfo.agentOsRevision).to.be.a('string');
                  expect(data.agentDetectionInfo.agentOsRevision).to.be("");
                  expect(data.agentDetectionInfo.groupId).to.be.a('string');
                  expect(data.agentDetectionInfo.groupId).to.be("225494730938493804");
                {
                  let dataCtr = data.indicators;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.ThreatsSchemasThreatSchemaMany200Indicators);
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.categoryId).to.be.a('number');
                    expect(data.categoryId).to.be(0);
                    {
                      let dataCtr = data.ids;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('number');
                        expect(data).to.be(0);
                      }
                    }
                    expect(data.category).to.be.a('string');
                    expect(data.category).to.be("");
                    {
                      let dataCtr = data.tactics;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(S1MgmtApi.ThreatsSchemasThreatSchemaMany200Tactics);
                        expect(data.source).to.be.a('string');
                        expect(data.source).to.be("");
                        {
                          let dataCtr = data.techniques;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(S1MgmtApi.ThreatsSchemasThreatSchemaMany200Techniques);
                            expect(data.link).to.be.a('string');
                            expect(data.link).to.be("");
                            expect(data.name).to.be.a('string');
                            expect(data.name).to.be("");
            
                                  }
                        }
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
        
                              }
                    }
    
                          }
                }
                expect(data.threatInfo).to.be.a(S1MgmtApi.ThreatsSchemasThreatSchemaMany200ThreatInfo);
                      expect(data.threatInfo.mitigationStatus).to.be.a('string');
                  expect(data.threatInfo.mitigationStatus).to.be("not_mitigated");
                  expect(data.threatInfo.fileExtensionType).to.be.a('string');
                  expect(data.threatInfo.fileExtensionType).to.be("");
                  expect(data.threatInfo.confidenceLevel).to.be.a('string');
                  expect(data.threatInfo.confidenceLevel).to.be("malicious");
                  expect(data.threatInfo.publisherName).to.be.a('string');
                  expect(data.threatInfo.publisherName).to.be("");
                  expect(data.threatInfo.browserType).to.be.a('string');
                  expect(data.threatInfo.browserType).to.be("");
                  expect(data.threatInfo.processUser).to.be.a('string');
                  expect(data.threatInfo.processUser).to.be("");
                  expect(data.threatInfo.filePath).to.be.a(Object);
                  expect(data.threatInfo.filePath).to.be();
                  expect(data.threatInfo.updatedAt).to.be.a(Date);
                  expect(data.threatInfo.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                  expect(data.threatInfo.mitigationStatusDescription).to.be.a(Object);
                  expect(data.threatInfo.mitigationStatusDescription).to.be();
                  expect(data.threatInfo.maliciousProcessArguments).to.be.a('string');
                  expect(data.threatInfo.maliciousProcessArguments).to.be("");
                  expect(data.threatInfo.incidentStatusDescription).to.be.a(Object);
                  expect(data.threatInfo.incidentStatusDescription).to.be();
                  expect(data.threatInfo.rebootRequired).to.be.a('boolean');
                  expect(data.threatInfo.rebootRequired).to.be(false);
                  expect(data.threatInfo.collectionId).to.be.a('string');
                  expect(data.threatInfo.collectionId).to.be("225494730938493804");
                  expect(data.threatInfo.automaticallyResolved).to.be.a('boolean');
                  expect(data.threatInfo.automaticallyResolved).to.be(false);
                  {
                    let dataCtr = data.threatInfo.macroModules;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(S1MgmtApi.ThreatsSchemasThreatSchemaMany200ThreatInfoMacroModules);
                      expect(data.sha1).to.be.a('string');
                      expect(data.sha1).to.be("");
                      expect(data.moduleName).to.be.a('string');
                      expect(data.moduleName).to.be("");
      
                            }
                  }
                  expect(data.threatInfo.pendingActions).to.be.a('boolean');
                  expect(data.threatInfo.pendingActions).to.be(false);
                  expect(data.threatInfo.reachedEventsLimit).to.be.a('boolean');
                  expect(data.threatInfo.reachedEventsLimit).to.be(false);
                  expect(data.threatInfo.md5).to.be.a('string');
                  expect(data.threatInfo.md5).to.be("");
                  expect(data.threatInfo.classificationSource).to.be.a('string');
                  expect(data.threatInfo.classificationSource).to.be("Cloud");
                  expect(data.threatInfo.fileExtension).to.be.a('string');
                  expect(data.threatInfo.fileExtension).to.be("");
                  expect(data.threatInfo.fileSize).to.be.a('number');
                  expect(data.threatInfo.fileSize).to.be(0);
                  expect(data.threatInfo.externalTicketId).to.be.a('string');
                  expect(data.threatInfo.externalTicketId).to.be("");
                  expect(data.threatInfo.classification).to.be.a('string');
                  expect(data.threatInfo.classification).to.be("");
                  expect(data.threatInfo.sha1).to.be.a('string');
                  expect(data.threatInfo.sha1).to.be("ddd5030a3d029f3845fc1052419829f08f312240");
                  expect(data.threatInfo.failedActions).to.be.a('boolean');
                  expect(data.threatInfo.failedActions).to.be(false);
                  expect(data.threatInfo.analystVerdictDescription).to.be.a(Object);
                  expect(data.threatInfo.analystVerdictDescription).to.be();
                  expect(data.threatInfo.sha256).to.be.a('string');
                  expect(data.threatInfo.sha256).to.be("50d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c");
                  expect(data.threatInfo.originatorProcess).to.be.a('string');
                  expect(data.threatInfo.originatorProcess).to.be("");
                  expect(data.threatInfo.fileVerificationType).to.be.a('string');
                  expect(data.threatInfo.fileVerificationType).to.be("");
                  expect(data.threatInfo.isValidCertificate).to.be.a('boolean');
                  expect(data.threatInfo.isValidCertificate).to.be(false);
                  expect(data.threatInfo.isFileless).to.be.a(Object);
                  expect(data.threatInfo.isFileless).to.be();
                  expect(data.threatInfo.engines).to.be.a(Object);
                  expect(data.threatInfo.engines).to.be();
                  expect(data.threatInfo.analystVerdict).to.be.a('string');
                  expect(data.threatInfo.analystVerdict).to.be("undefined");
                  expect(data.threatInfo.mitigatedPreemptively).to.be.a('boolean');
                  expect(data.threatInfo.mitigatedPreemptively).to.be(false);
                  expect(data.threatInfo.certificateId).to.be.a('string');
                  expect(data.threatInfo.certificateId).to.be("");
                  expect(data.threatInfo.initiatingUsername).to.be.a('string');
                  expect(data.threatInfo.initiatingUsername).to.be("");
                  expect(data.threatInfo.storyline).to.be.a('string');
                  expect(data.threatInfo.storyline).to.be("a00637fa-e18d-9b80-e803-f370524f8085");
                  expect(data.threatInfo.detectionType).to.be.a('string');
                  expect(data.threatInfo.detectionType).to.be("static");
                  expect(data.threatInfo.threatName).to.be.a('string');
                  expect(data.threatInfo.threatName).to.be("");
                  expect(data.threatInfo.identifiedAt).to.be.a(Date);
                  expect(data.threatInfo.identifiedAt).to.be(2018-02-27T04:49:26.257525Z);
                  expect(data.threatInfo.incidentStatus).to.be.a('string');
                  expect(data.threatInfo.incidentStatus).to.be("unresolved");
                  expect(data.threatInfo.createdAt).to.be.a(Date);
                  expect(data.threatInfo.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                  expect(data.threatInfo.initiatedBy).to.be.a('string');
                  expect(data.threatInfo.initiatedBy).to.be("agent_policy");
                  expect(data.threatInfo.initiatedByDescription).to.be.a(Object);
                  expect(data.threatInfo.initiatedByDescription).to.be();
                  expect(data.threatInfo.detectionEngines).to.be.a(Object);
                  expect(data.threatInfo.detectionEngines).to.be();
                  expect(data.threatInfo.threatId).to.be.a('string');
                  expect(data.threatInfo.threatId).to.be("225494730938493804");
                  expect(data.threatInfo.cloudFilesHashVerdict).to.be.a('string');
                  expect(data.threatInfo.cloudFilesHashVerdict).to.be("");
                  expect(data.threatInfo.externalTicketExists).to.be.a(Object);
                  expect(data.threatInfo.externalTicketExists).to.be();
                  expect(data.threatInfo.initiatingUserId).to.be.a('string');
                  expect(data.threatInfo.initiatingUserId).to.be("225494730938493804");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatsIncidentPost', function() {
        it('should call webApiThreatsIncidentPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatsIncidentPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ThreatsSchemasThreatsIncidentSchema();
          opts.body.filter = new S1MgmtApi.ThreatsSchemasThreatsIncidentSchemaFilter();
          opts.body.filter.agentVersionsNin = ["2.5.1.1320"];
          opts.body.filter.analystVerdictsNin = ["true_positive","suspicious"];
          opts.body.filter.threatDetailsContains = ["malware.exe","virus.exe"];
          opts.body.filter.classificationSources = ["Cloud"];
          opts.body.filter.query = "";
          opts.body.filter.cloudProvider = [""];
          opts.body.filter.incidentStatusesNin = ["unresolved","in_progress"];
          opts.body.filter.publisherNameContains = ["GOOGLE","Apple Inc."];
          opts.body.filter.agentIsActive = false;
          opts.body.filter.updatedAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.classificationSourcesNin = ["Cloud"];
          opts.body.filter.containerNameContains = [""];
          opts.body.filter.cloudImageContains = [""];
          opts.body.filter.hasAgentTags = false;
          opts.body.filter.storylineContains = ["0000C2E97648","0006FC73-77B4-470F-AAC7-"];
          opts.body.filter.updatedAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.classificationsNin = [""];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.externalTicketIds = [""];
          opts.body.filter.osTypesNin = ["windows"];
          opts.body.filter.containerImageNameContains = [""];
          opts.body.filter.agentIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.k8sPodNameContains = [""];
          opts.body.filter.contentHashes = "ddd5030a3d029f3845fc1052419829f08f312240";
          opts.body.filter.awsSubnetIdsContains = [""];
          opts.body.filter.agentTagsData = "{"key1": ["value1_1", "value1_2"], "key2__nin": ["value2"]}";
          opts.body.filter.updatedAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.storylines = [""];
          opts.body.filter.k8sControllerLabelsContains = [""];
          opts.body.filter.awsSecurityGroupsContains = [""];
          opts.body.filter.k8sNodeNameContains = [""];
          opts.body.filter.confidenceLevels = ["malicious"];
          opts.body.filter.computerNameContains = ["john-office","WIN"];
          opts.body.filter.cloudNetworkContains = [""];
          opts.body.filter.classifications = [""];
          opts.body.filter.analystVerdicts = ["true_positive","suspicious"];
          opts.body.filter.initiatedByUsernameContains = ["John","John Doe"];
          opts.body.filter.resolved = false;
          opts.body.filter.collectionIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.detectionEngines = ["reputation"];
          opts.body.filter.awsRoleContains = [""];
          opts.body.filter.cloudAccountContains = [""];
          opts.body.filter.updatedAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.countsFor = "osTypes,machineTypes";
          opts.body.filter.limit = 0;
          opts.body.filter.realtimeAgentVersionContains = ["1.1.1.1","2.2."];
          opts.body.filter.osTypes = ["windows"];
          opts.body.filter.agentMachineTypes = ["unknown"];
          opts.body.filter.initiatedBy = ["agent_policy","dv_command"];
          opts.body.filter.initiatedByNin = ["agent_policy","dv_command"];
          opts.body.filter.k8sNamespaceLabelsContains = [""];
          opts.body.filter.engines = ["reputation"];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.detectionAgentVersionContains = ["1.1.1.1","2.2."];
          opts.body.filter.detectionEnginesNin = ["reputation"];
          opts.body.filter.osNamesNin = ["Windows 10 Pro"];
          opts.body.filter.k8sControllerNameContains = [""];
          opts.body.filter.k8sClusterNameContains = [""];
          opts.body.filter.noteExists = false;
          opts.body.filter.containerLabelsContains = [""];
          opts.body.filter.tenant = false;
          opts.body.filter.cloudInstanceIdContains = [""];
          opts.body.filter.agentVersions = ["2.5.1.1320"];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.detectionAgentDomainContains = ["sentinel","sentinelone.com"];
          opts.body.filter.enginesNin = ["reputation"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.cloudProviderNin = [""];
          opts.body.filter.filePathContains = ["\\MyUser\\Downloads"];
          opts.body.filter.k8sNodeLabelsContains = [""];
          opts.body.filter.osArchs = ["32 bit"];
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sNamespaceNameContains = [""];
          opts.body.filter.rebootRequired = false;
          opts.body.filter.mitigationStatuses = ["not_mitigated"];
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sPodLabelsContains = [""];
          opts.body.filter.gcpServiceAccountContains = [""];
          opts.body.filter.pendingActions = false;
          opts.body.filter.cloudLocationContains = [""];
          opts.body.filter.mitigationStatusesNin = ["not_mitigated"];
          opts.body.filter.agentMachineTypesNin = ["unknown"];
          opts.body.filter.originatedProcessContains = [""];
          opts.body.filter.failedActions = false;
          opts.body.filter.osNames = ["Windows 10 Pro"];
          opts.body.filter.contentHashContains = ["5f09bcff3"];
          opts.body.filter.incidentStatuses = ["unresolved","in_progress"];
          opts.body.filter.cloudInstanceSizeContains = [""];
          opts.body.filter.mitigatedPreemptively = false;
          opts.body.filter.displayName = "";
          opts.body.filter.externalTicketIdContains = [""];
          opts.body.filter.confidenceLevelsNin = ["malicious"];
          opts.body.filter.azureResourceGroupContains = [""];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.commandLineArgumentsContains = ["/usr/sbin/","wget"];
          opts.body.filter.uuidContains = ["e92-01928","b055"];
          opts.body.filter.externalTicketExists = false;
          opts.body.data = new S1MgmtApi.ThreatsSchemasThreatsIncidentSchemaData();
          opts.body.data.analystVerdict = "undefined";
          opts.body.data.incidentStatus = "unresolved";

          instance.webApiThreatsIncidentPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ThreatsSchemasThreatsIncidentResultSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.ThreatsSchemasThreatsIncidentResultSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);
              {
                let dataCtr = data.data.details;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.ThreatsSchemasThreatsIncidentResultSchema200DataDetails);
                  expect(data.analystVerdict).to.be.a('string');
                  expect(data.analystVerdict).to.be("updated");
                  expect(data.result).to.be.a('string');
                  expect(data.result).to.be("updated");
                  expect(data.threatId).to.be.a('string');
                  expect(data.threatId).to.be("225494730938493804");
  
                        }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatsMitigateactionPost', function() {
        it('should call webApiThreatsMitigateactionPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatsMitigateactionPost call and complete the assertions
          /*
          var action = "action_example";
          var opts = {};
          opts.body = new S1MgmtApi.ThreatsSchemasThreatsMitigateRequestSchema();
          opts.body.filter = new S1MgmtApi.ThreatsSchemasThreatsMitigateRequestSchemaFilter();
          opts.body.filter.agentVersionsNin = ["2.5.1.1320"];
          opts.body.filter.analystVerdictsNin = ["true_positive","suspicious"];
          opts.body.filter.threatDetailsContains = ["malware.exe","virus.exe"];
          opts.body.filter.classificationSources = ["Cloud"];
          opts.body.filter.query = "";
          opts.body.filter.cloudProvider = [""];
          opts.body.filter.incidentStatusesNin = ["unresolved","in_progress"];
          opts.body.filter.publisherNameContains = ["GOOGLE","Apple Inc."];
          opts.body.filter.agentIsActive = false;
          opts.body.filter.updatedAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.classificationSourcesNin = ["Cloud"];
          opts.body.filter.containerNameContains = [""];
          opts.body.filter.cloudImageContains = [""];
          opts.body.filter.hasAgentTags = false;
          opts.body.filter.storylineContains = ["0000C2E97648","0006FC73-77B4-470F-AAC7-"];
          opts.body.filter.updatedAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.classificationsNin = [""];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.externalTicketIds = [""];
          opts.body.filter.osTypesNin = ["windows"];
          opts.body.filter.containerImageNameContains = [""];
          opts.body.filter.agentIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.k8sPodNameContains = [""];
          opts.body.filter.contentHashes = "ddd5030a3d029f3845fc1052419829f08f312240";
          opts.body.filter.awsSubnetIdsContains = [""];
          opts.body.filter.agentTagsData = "{"key1": ["value1_1", "value1_2"], "key2__nin": ["value2"]}";
          opts.body.filter.updatedAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.storylines = [""];
          opts.body.filter.k8sControllerLabelsContains = [""];
          opts.body.filter.awsSecurityGroupsContains = [""];
          opts.body.filter.k8sNodeNameContains = [""];
          opts.body.filter.confidenceLevels = ["malicious"];
          opts.body.filter.computerNameContains = ["john-office","WIN"];
          opts.body.filter.cloudNetworkContains = [""];
          opts.body.filter.classifications = [""];
          opts.body.filter.analystVerdicts = ["true_positive","suspicious"];
          opts.body.filter.initiatedByUsernameContains = ["John","John Doe"];
          opts.body.filter.resolved = false;
          opts.body.filter.collectionIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.detectionEngines = ["reputation"];
          opts.body.filter.awsRoleContains = [""];
          opts.body.filter.cloudAccountContains = [""];
          opts.body.filter.updatedAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.countsFor = "osTypes,machineTypes";
          opts.body.filter.limit = 0;
          opts.body.filter.realtimeAgentVersionContains = ["1.1.1.1","2.2."];
          opts.body.filter.osTypes = ["windows"];
          opts.body.filter.agentMachineTypes = ["unknown"];
          opts.body.filter.initiatedBy = ["agent_policy","dv_command"];
          opts.body.filter.initiatedByNin = ["agent_policy","dv_command"];
          opts.body.filter.k8sNamespaceLabelsContains = [""];
          opts.body.filter.engines = ["reputation"];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.detectionAgentVersionContains = ["1.1.1.1","2.2."];
          opts.body.filter.detectionEnginesNin = ["reputation"];
          opts.body.filter.osNamesNin = ["Windows 10 Pro"];
          opts.body.filter.k8sControllerNameContains = [""];
          opts.body.filter.k8sClusterNameContains = [""];
          opts.body.filter.noteExists = false;
          opts.body.filter.containerLabelsContains = [""];
          opts.body.filter.tenant = false;
          opts.body.filter.cloudInstanceIdContains = [""];
          opts.body.filter.agentVersions = ["2.5.1.1320"];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.detectionAgentDomainContains = ["sentinel","sentinelone.com"];
          opts.body.filter.enginesNin = ["reputation"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.cloudProviderNin = [""];
          opts.body.filter.filePathContains = ["\\MyUser\\Downloads"];
          opts.body.filter.k8sNodeLabelsContains = [""];
          opts.body.filter.osArchs = ["32 bit"];
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sNamespaceNameContains = [""];
          opts.body.filter.rebootRequired = false;
          opts.body.filter.mitigationStatuses = ["not_mitigated"];
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.k8sPodLabelsContains = [""];
          opts.body.filter.gcpServiceAccountContains = [""];
          opts.body.filter.pendingActions = false;
          opts.body.filter.cloudLocationContains = [""];
          opts.body.filter.mitigationStatusesNin = ["not_mitigated"];
          opts.body.filter.agentMachineTypesNin = ["unknown"];
          opts.body.filter.originatedProcessContains = [""];
          opts.body.filter.failedActions = false;
          opts.body.filter.osNames = ["Windows 10 Pro"];
          opts.body.filter.contentHashContains = ["5f09bcff3"];
          opts.body.filter.incidentStatuses = ["unresolved","in_progress"];
          opts.body.filter.cloudInstanceSizeContains = [""];
          opts.body.filter.mitigatedPreemptively = false;
          opts.body.filter.displayName = "";
          opts.body.filter.externalTicketIdContains = [""];
          opts.body.filter.confidenceLevelsNin = ["malicious"];
          opts.body.filter.azureResourceGroupContains = [""];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.commandLineArgumentsContains = ["/usr/sbin/","wget"];
          opts.body.filter.uuidContains = ["e92-01928","b055"];
          opts.body.filter.externalTicketExists = false;
          opts.body.data = ;

          instance.webApiThreatsMitigateactionPost(action, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ThreatsSchemasThreatMitigationActionSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.ThreatsSchemasThreatMitigationActionSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);
              {
                let dataCtr = data.data.details;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.ThreatsSchemasThreatMitigationActionSchema200DataDetails);
                  {
                    let dataCtr = data.skipped;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(S1MgmtApi.ThreatsSchemasThreatMitigationActionSchema200DataSkipped);
                      expect(data.reason).to.be.a('string');
                      expect(data.reason).to.be("permissions");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.action).to.be.a('string');
                      expect(data.action).to.be("kill");
      
                            }
                  }
                  {
                    let dataCtr = data.reports;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(S1MgmtApi.ThreatsSchemasThreatSchemaMany200MitigationStatus);
                      expect(data.reportId).to.be.a('string');
                      expect(data.reportId).to.be("225494730938493804");
                      expect(data.action).to.be.a('string');
                      expect(data.action).to.be("kill");
                      expect(data.actionsCounters).to.be.a(S1MgmtApi.ThreatsSchemasThreatSchemaMany200ActionsCounters);
                            expect(data.actionsCounters.pendingReboot).to.be.a('number');
                        expect(data.actionsCounters.pendingReboot).to.be(0);
                        expect(data.actionsCounters.success).to.be.a('number');
                        expect(data.actionsCounters.success).to.be(0);
                        expect(data.actionsCounters.total).to.be.a('number');
                        expect(data.actionsCounters.total).to.be(0);
                        expect(data.actionsCounters.notFound).to.be.a('number');
                        expect(data.actionsCounters.notFound).to.be(0);
                        expect(data.actionsCounters.failed).to.be.a('number');
                        expect(data.actionsCounters.failed).to.be(0);
                      expect(data.groupNotFound).to.be.a('boolean');
                      expect(data.groupNotFound).to.be(false);
                      expect(data.mitigationEndedAt).to.be.a(Date);
                      expect(data.mitigationEndedAt).to.be(2018-02-27T04:49:26.257525Z);
                      expect(data.lastUpdate).to.be.a(Date);
                      expect(data.lastUpdate).to.be(2018-02-27T04:49:26.257525Z);
                      expect(data.agentSupportsReport).to.be.a('boolean');
                      expect(data.agentSupportsReport).to.be(false);
                      expect(data.status).to.be.a('string');
                      expect(data.status).to.be("success");
                      expect(data.mitigationStartedAt).to.be.a(Date);
                      expect(data.mitigationStartedAt).to.be(2018-02-27T04:49:26.257525Z);
                      expect(data.latestReport).to.be.a('string');
                      expect(data.latestReport).to.be("");
      
                            }
                  }
                  expect(data.threatId).to.be.a('string');
                  expect(data.threatId).to.be("225494730938493804");
  
                        }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatsMitigationReportreportIdGet', function() {
        it('should call webApiThreatsMitigationReportreportIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatsMitigationReportreportIdGet call
          /*
          var reportId = "reportId_example";

          instance.webApiThreatsMitigationReportreportIdGet(reportId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatsthreatIdDownloadFromCloudGet', function() {
        it('should call webApiThreatsthreatIdDownloadFromCloudGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatsthreatIdDownloadFromCloudGet call and complete the assertions
          /*
          var threatId = "threatId_example";

          instance.webApiThreatsthreatIdDownloadFromCloudGet(threatId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ThreatFileDownloadURLSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.ThreatFileDownloadURLSchema200Data);
                  expect(data.data.fileName).to.be.a('string');
              expect(data.data.fileName).to.be("");
              expect(data.data.downloadUrl).to.be.a('string');
              expect(data.data.downloadUrl).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatsthreatIdExploreEventsGet', function() {
        it('should call webApiThreatsthreatIdExploreEventsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatsthreatIdExploreEventsGet call and complete the assertions
          /*
          var threatId = "threatId_example";
          var opts = {};
          opts.cursor = "null";
          opts.eventId = "eventId_example";
          opts.skip = 56;
          opts.eventTypes = ["eventTypes_example"];
          opts.skipCount = null;
          opts.sortOrder = "null";
          opts.sortBy = "null";
          opts.eventSubTypes = ["eventSubTypes_example"];
          opts.countOnly = false;
          opts.processNameLike = "processNameLike_example";
          opts.limit = 10;

          instance.webApiThreatsthreatIdExploreEventsGet(threatId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ThreatAnalysisSchemasThreatEventEntitySchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.ThreatAnalysisSchemasThreatEventEntitySchemaMany200Data);
                expect(data.activeContentHash).to.be.a('string');
                expect(data.activeContentHash).to.be("");
                expect(data.indicatorCategory).to.be.a('string');
                expect(data.indicatorCategory).to.be("");
                expect(data.objectType).to.be.a('string');
                expect(data.objectType).to.be("events");
                expect(data.parentProcessName).to.be.a('string');
                expect(data.parentProcessName).to.be("");
                expect(data.dnsResponse).to.be.a('string');
                expect(data.dnsResponse).to.be("");
                expect(data.signedStatus).to.be.a('string');
                expect(data.signedStatus).to.be("");
                expect(data.tid).to.be.a('string');
                expect(data.tid).to.be("");
                expect(data.processSubSystem).to.be.a('string');
                expect(data.processSubSystem).to.be("");
                expect(data.processGroupId).to.be.a('string');
                expect(data.processGroupId).to.be("");
                expect(data.agentIsActive).to.be.a('boolean');
                expect(data.agentIsActive).to.be(false);
                expect(data.registryPath).to.be.a('string');
                expect(data.registryPath).to.be("");
                expect(data.indicatorMetadata).to.be.a('string');
                expect(data.indicatorMetadata).to.be("");
                expect(data.processImagePath).to.be.a('string');
                expect(data.processImagePath).to.be("");
                expect(data.dnsRequest).to.be.a('string');
                expect(data.dnsRequest).to.be("");
                expect(data.networkSource).to.be.a('string');
                expect(data.networkSource).to.be("");
                expect(data.taskName).to.be.a('string');
                expect(data.taskName).to.be("");
                expect(data.storyline).to.be.a('string');
                expect(data.storyline).to.be("");
                expect(data.fileSha1).to.be.a('string');
                expect(data.fileSha1).to.be("");
                expect(data.oldFileName).to.be.a('string');
                expect(data.oldFileName).to.be("");
                expect(data.agentVersion).to.be.a('string');
                expect(data.agentVersion).to.be("");
                expect(data.processIsRedirectedCommandProcessor).to.be.a('string');
                expect(data.processIsRedirectedCommandProcessor).to.be("");
                expect(data.oldFileSha1).to.be.a('string');
                expect(data.oldFileSha1).to.be("");
                expect(data.verifiedStatus).to.be.a('string');
                expect(data.verifiedStatus).to.be("");
                expect(data.agentInfected).to.be.a('boolean');
                expect(data.agentInfected).to.be(false);
                expect(data.activeContentFileId).to.be.a('string');
                expect(data.activeContentFileId).to.be("");
                expect(data.loginsUserName).to.be.a('string');
                expect(data.loginsUserName).to.be("");
                expect(data.fileSha256).to.be.a('string');
                expect(data.fileSha256).to.be("");
                expect(data.processUserName).to.be.a('string');
                expect(data.processUserName).to.be("");
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.processRoot).to.be.a('string');
                expect(data.processRoot).to.be("");
                expect(data.md5).to.be.a('string');
                expect(data.md5).to.be("");
                expect(data.registryId).to.be.a('string');
                expect(data.registryId).to.be("");
                expect(data.fileSize).to.be.a('string');
                expect(data.fileSize).to.be("");
                expect(data.agentOs).to.be.a('string');
                expect(data.agentOs).to.be("windows");
                expect(data.activeContentPath).to.be.a('string');
                expect(data.activeContentPath).to.be("");
                expect(data.dstIp).to.be.a('string');
                expect(data.dstIp).to.be("");
                expect(data.hasActiveContent).to.be.a('boolean');
                expect(data.hasActiveContent).to.be(false);
                expect(data.agentIsDecommissioned).to.be.a('boolean');
                expect(data.agentIsDecommissioned).to.be(false);
                expect(data.sha256).to.be.a('string');
                expect(data.sha256).to.be("");
                expect(data.processIsWow64).to.be.a('string');
                expect(data.processIsWow64).to.be("");
                expect(data.processDisplayName).to.be.a('string');
                expect(data.processDisplayName).to.be("");
                expect(data.networkUrl).to.be.a('string');
                expect(data.networkUrl).to.be("");
                expect(data.processCmd).to.be.a('string');
                expect(data.processCmd).to.be("");
                expect(data.siteName).to.be.a('string');
                expect(data.siteName).to.be("");
                expect(data.loginsBaseType).to.be.a('string');
                expect(data.loginsBaseType).to.be("");
                expect(data.processIntegrityLevel).to.be.a('string');
                expect(data.processIntegrityLevel).to.be("");
                expect(data.direction).to.be.a('string');
                expect(data.direction).to.be("");
                expect(data.processName).to.be.a('string');
                expect(data.processName).to.be("");
                expect(data.processSessionId).to.be.a('string');
                expect(data.processSessionId).to.be("");
                expect(data.srcPort).to.be.a('number');
                expect(data.srcPort).to.be(0);
                expect(data.agentUuid).to.be.a('string');
                expect(data.agentUuid).to.be("");
                expect(data.signatureSignedInvalidReason).to.be.a('string');
                expect(data.signatureSignedInvalidReason).to.be("");
                expect(data.taskPath).to.be.a('string');
                expect(data.taskPath).to.be("");
                expect(data.oldFileMd5).to.be.a('string');
                expect(data.oldFileMd5).to.be("");
                expect(data.indicatorName).to.be.a('string');
                expect(data.indicatorName).to.be("");
                expect(data.dstPort).to.be.a('number');
                expect(data.dstPort).to.be(0);
                expect(data.eventType).to.be.a('string');
                expect(data.eventType).to.be("");
                expect(data.rpid).to.be.a('string');
                expect(data.rpid).to.be("");
                expect(data.threatStatus).to.be.a('string');
                expect(data.threatStatus).to.be("");
                expect(data.agentId).to.be.a('string');
                expect(data.agentId).to.be("");
                expect(data.processUniqueKey).to.be.a('string');
                expect(data.processUniqueKey).to.be("");
                expect(data.registryClassification).to.be.a('string');
                expect(data.registryClassification).to.be("");
                expect(data.processStartTime).to.be.a(Date);
                expect(data.processStartTime).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.parentProcessGroupId).to.be.a('string');
                expect(data.parentProcessGroupId).to.be("");
                expect(data.srcIp).to.be.a('string');
                expect(data.srcIp).to.be("");
                expect(data.protocol).to.be.a('string');
                expect(data.protocol).to.be("");
                expect(data.relatedToThreat).to.be.a('boolean');
                expect(data.relatedToThreat).to.be(false);
                expect(data.networkMethod).to.be.a('string');
                expect(data.networkMethod).to.be("");
                expect(data.fileMd5).to.be.a('string');
                expect(data.fileMd5).to.be("");
                expect(data.connectionStatus).to.be.a('string');
                expect(data.connectionStatus).to.be("");
                expect(data.agentName).to.be.a('string');
                expect(data.agentName).to.be("");
                expect(data.fileType).to.be.a('string');
                expect(data.fileType).to.be("");
                expect(data.agentDomain).to.be.a('string');
                expect(data.agentDomain).to.be("");
                expect(data.parentProcessIsMalicious).to.be.a('boolean');
                expect(data.parentProcessIsMalicious).to.be(false);
                expect(data.agentMachineType).to.be.a('string');
                expect(data.agentMachineType).to.be("");
                expect(data.siteId).to.be.a('string');
                expect(data.siteId).to.be("");
                expect(data.agentNetworkStatus).to.be.a('string');
                expect(data.agentNetworkStatus).to.be("");
                expect(data.fileFullName).to.be.a('string');
                expect(data.fileFullName).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.agentGroupId).to.be.a('string');
                expect(data.agentGroupId).to.be("");
                expect(data.oldFileSha256).to.be.a('string');
                expect(data.oldFileSha256).to.be("");
                expect(data.sha1).to.be.a('string');
                expect(data.sha1).to.be("");
                expect(data.agentIp).to.be.a('string');
                expect(data.agentIp).to.be("");
                expect(data.publisher).to.be.a('string');
                expect(data.publisher).to.be("");
                expect(data.parentProcessUniqueKey).to.be.a('string');
                expect(data.parentProcessUniqueKey).to.be("");
                expect(data.processImageSha1Hash).to.be.a('string');
                expect(data.processImageSha1Hash).to.be("");
                expect(data.parentPid).to.be.a('string');
                expect(data.parentPid).to.be("");
                expect(data.pid).to.be.a('string');
                expect(data.pid).to.be("");
                expect(data.trueContext).to.be.a('string');
                expect(data.trueContext).to.be("");
                expect(data.fileId).to.be.a('string');
                expect(data.fileId).to.be("");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.processIsMalicious).to.be.a('boolean');
                expect(data.processIsMalicious).to.be(false);
                expect(data.indicatorDescription).to.be.a('string');
                expect(data.indicatorDescription).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatsthreatIdTimelineGet', function() {
        it('should call webApiThreatsthreatIdTimelineGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatsthreatIdTimelineGet call and complete the assertions
          /*
          var threatId = "threatId_example";
          var opts = {};
          opts.cursor = "null";
          opts.skip = 56;
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.activityTypes = ["activityTypes_example"];
          opts.skipCount = null;
          opts.sortOrder = "null";
          opts.sortBy = "null";
          opts.query = "query_example";
          opts.groupIds = ["groupIds_example"];
          opts.countOnly = false;
          opts.limit = 10;

          instance.webApiThreatsthreatIdTimelineGet(threatId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ThreatAnalysisSchemasTimelineViewSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.ThreatAnalysisSchemasTimelineViewSchemaMany200Data);
                expect(data.groupId).to.be.a('string');
                expect(data.groupId).to.be("225494730938493804");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.secondaryDescription).to.be.a('string');
                expect(data.secondaryDescription).to.be("");
                expect(data.agentUpdatedVersion).to.be.a('string');
                expect(data.agentUpdatedVersion).to.be("2.5.1.1320");
                expect(data.osFamily).to.be.a('string');
                expect(data.osFamily).to.be("windows");
                expect(data.accountId).to.be.a('string');
                expect(data.accountId).to.be("225494730938493804");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.hash).to.be.a('string');
                expect(data.hash).to.be("");
                expect(data.activityType).to.be.a('number');
                expect(data.activityType).to.be(0);
                expect(data.threatId).to.be.a('string');
                expect(data.threatId).to.be("225494730938493804");
                expect(data.siteId).to.be.a('string');
                expect(data.siteId).to.be("225494730938493804");
                expect(data.userId).to.be.a('string');
                expect(data.userId).to.be("225494730938493804");
                expect(data.primaryDescription).to.be.a('string');
                expect(data.primaryDescription).to.be("");
                expect(data.agentId).to.be.a('string');
                expect(data.agentId).to.be("225494730938493804");
                expect(data.data).to.be.a(Object);
                expect(data.data).to.be({"computer_name":"COMP_1234","username":"my_user"});

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiThreatsthreatIdWhiteningOptionsGet', function() {
        it('should call webApiThreatsthreatIdWhiteningOptionsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiThreatsthreatIdWhiteningOptionsGet call and complete the assertions
          /*
          var threatId = "threatId_example";

          instance.webApiThreatsthreatIdWhiteningOptionsGet(threatId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ThreatsSchemasWhiteningOptionsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.ThreatsSchemasWhiteningOptionsSchema200Data);
                  expect(data.data.threatPolicy).to.be.a('string');
              expect(data.data.threatPolicy).to.be("225494730938493804");
              {
                let dataCtr = data.data.threatType;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.data.whiteningOptions;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
