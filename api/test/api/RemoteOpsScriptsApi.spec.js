/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.RemoteOpsScriptsApi();
  });

  describe('(package)', function() {
    describe('RemoteOpsScriptsApi', function() {
      describe('webApiRemoteScriptsDelete', function() {
        it('should call webApiRemoteScriptsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteScriptsDelete call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21RsoSchemasScriptDeleteSchema();
          opts.body.consoleData = "";
          opts.body.sendActivity = false;
          opts.body.filter = new S1MgmtApi.V21RsoSchemasScriptDeleteSchemaFilter();
          opts.body.filter.osTypes = ["linux"];
          opts.body.filter.scriptType = ["artifactCollection"];
          opts.body.filter.query = "";
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];

          instance.webApiRemoteScriptsDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21RsoSchemasEnrichedScriptSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21RsoSchemasEnrichedScriptSchemaMany200Data);
                expect(data.isAvailableForLite).to.be.a('boolean');
                expect(data.isAvailableForLite).to.be(false);
                expect(data.inputInstructions).to.be.a('string');
                expect(data.inputInstructions).to.be("");
                {
                  let dataCtr = data.supportedDestinations;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data._package).to.be.a(S1MgmtApi.V21RsoSchemasEnrichedScriptSchemaMany200Package);
                      expect(data._package.fileName).to.be.a('string');
                  expect(data._package.fileName).to.be("");
                  expect(data._package.bucketName).to.be.a('string');
                  expect(data._package.bucketName).to.be("");
                  expect(data._package.endpointExpiration).to.be.a('string');
                  expect(data._package.endpointExpiration).to.be("");
                  expect(data._package.fileSize).to.be.a('number');
                  expect(data._package.fileSize).to.be(0);
                  expect(data._package.signature).to.be.a('string');
                  expect(data._package.signature).to.be("");
                  expect(data._package.endpointExpirationSeconds).to.be.a('number');
                  expect(data._package.endpointExpirationSeconds).to.be(0);
                  expect(data._package.signatureType).to.be.a('string');
                  expect(data._package.signatureType).to.be("");
                  expect(data._package.id).to.be.a('string');
                  expect(data._package.id).to.be("225494730938493804");
                expect(data.isAvailableForArs).to.be.a('boolean');
                expect(data.isAvailableForArs).to.be(false);
                expect(data.scriptType).to.be.a('string');
                expect(data.scriptType).to.be("");
                expect(data.inputExample).to.be.a('string');
                expect(data.inputExample).to.be("");
                {
                  let dataCtr = data.osTypes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.scopeId).to.be.a('string');
                expect(data.scopeId).to.be("225494730938493804");
                expect(data.createdByUserId).to.be.a('string');
                expect(data.createdByUserId).to.be("225494730938493804");
                expect(data.inputRequired).to.be.a('boolean');
                expect(data.inputRequired).to.be(false);
                expect(data.bucketName).to.be.a('string');
                expect(data.bucketName).to.be("");
                expect(data.mgmtId).to.be.a('number');
                expect(data.mgmtId).to.be(0);
                expect(data.scriptName).to.be.a('string');
                expect(data.scriptName).to.be("");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.scopeLevel).to.be.a('string');
                expect(data.scopeLevel).to.be("tenant");
                expect(data.signatureType).to.be.a('string');
                expect(data.signatureType).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.updaterId).to.be.a('string');
                expect(data.updaterId).to.be("225494730938493804");
                expect(data.version).to.be.a('string');
                expect(data.version).to.be("");
                expect(data.createdByUser).to.be.a('string');
                expect(data.createdByUser).to.be("");
                expect(data.scriptDescription).to.be.a('string');
                expect(data.scriptDescription).to.be("");
                expect(data.fileSize).to.be.a('number');
                expect(data.fileSize).to.be(0);
                {
                  let dataCtr = data.outputFilePaths;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.creator).to.be.a('string');
                expect(data.creator).to.be("");
                expect(data.signature).to.be.a('string');
                expect(data.signature).to.be("");
                expect(data.scopeName).to.be.a('string');
                expect(data.scopeName).to.be("");
                expect(data.scopePath).to.be.a('string');
                expect(data.scopePath).to.be("");
                expect(data.fileName).to.be.a('string');
                expect(data.fileName).to.be("");
                expect(data.updater).to.be.a('string');
                expect(data.updater).to.be("");
                expect(data.shortFileName).to.be.a('string');
                expect(data.shortFileName).to.be("");
                expect(data.scriptRuntimeTimeoutSeconds).to.be.a('number');
                expect(data.scriptRuntimeTimeoutSeconds).to.be(0);
                expect(data.creatorId).to.be.a('string');
                expect(data.creatorId).to.be("225494730938493804");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteScriptsEditscriptIdPut', function() {
        it('should call webApiRemoteScriptsEditscriptIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteScriptsEditscriptIdPut call and complete the assertions
          /*
          var scriptId = "scriptId_example";
          var inputRequired = true;
          var inputInstructions = "inputInstructions_example";
          var scriptName = "scriptName_example";
          var inputExample = "inputExample_example";
          var scriptType = "scriptType_example";
          var scriptRuntimeTimeoutSeconds = 56;
          var osTypes = ["osTypes_example"];
          var opts = {};
          opts.sendActivity = false;
          opts.scriptContent = "scriptContent_example";
          opts.packageMaxSize = "209715200";
          opts.scriptDescription = "scriptDescription_example";
          opts.consoleData = "consoleData_example";
          opts.packageRemoved = true;
          opts.packageEndpointExpirationSeconds = 56;
          opts.packageEndpointExpiration = "None";
          opts.isScriptContentEncoded = true;
          opts.packageFile = "/path/to/file.txt";
          opts.scriptFile = "/path/to/file.txt";

          instance.webApiRemoteScriptsEditscriptIdPut(scriptId, inputRequired, inputInstructions, scriptName, inputExample, scriptType, scriptRuntimeTimeoutSeconds, osTypes, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21RsoSchemasEnrichedScriptSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21RsoSchemasEnrichedScriptSchema200Data);
                  expect(data.data.isAvailableForLite).to.be.a('boolean');
              expect(data.data.isAvailableForLite).to.be(false);
              expect(data.data.inputInstructions).to.be.a('string');
              expect(data.data.inputInstructions).to.be("");
              {
                let dataCtr = data.data.supportedDestinations;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data._package).to.be.a(S1MgmtApi.V21RsoSchemasEnrichedScriptSchemaMany200Package);
                    expect(data.data._package.fileName).to.be.a('string');
                expect(data.data._package.fileName).to.be("");
                expect(data.data._package.bucketName).to.be.a('string');
                expect(data.data._package.bucketName).to.be("");
                expect(data.data._package.endpointExpiration).to.be.a('string');
                expect(data.data._package.endpointExpiration).to.be("");
                expect(data.data._package.fileSize).to.be.a('number');
                expect(data.data._package.fileSize).to.be(0);
                expect(data.data._package.signature).to.be.a('string');
                expect(data.data._package.signature).to.be("");
                expect(data.data._package.endpointExpirationSeconds).to.be.a('number');
                expect(data.data._package.endpointExpirationSeconds).to.be(0);
                expect(data.data._package.signatureType).to.be.a('string');
                expect(data.data._package.signatureType).to.be("");
                expect(data.data._package.id).to.be.a('string');
                expect(data.data._package.id).to.be("225494730938493804");
              expect(data.data.isAvailableForArs).to.be.a('boolean');
              expect(data.data.isAvailableForArs).to.be(false);
              expect(data.data.scriptType).to.be.a('string');
              expect(data.data.scriptType).to.be("");
              expect(data.data.inputExample).to.be.a('string');
              expect(data.data.inputExample).to.be("");
              {
                let dataCtr = data.data.osTypes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.createdByUserId).to.be.a('string');
              expect(data.data.createdByUserId).to.be("225494730938493804");
              expect(data.data.inputRequired).to.be.a('boolean');
              expect(data.data.inputRequired).to.be(false);
              expect(data.data.bucketName).to.be.a('string');
              expect(data.data.bucketName).to.be("");
              expect(data.data.mgmtId).to.be.a('number');
              expect(data.data.mgmtId).to.be(0);
              expect(data.data.scriptName).to.be.a('string');
              expect(data.data.scriptName).to.be("");
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.scopeLevel).to.be.a('string');
              expect(data.data.scopeLevel).to.be("tenant");
              expect(data.data.signatureType).to.be.a('string');
              expect(data.data.signatureType).to.be("");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.updaterId).to.be.a('string');
              expect(data.data.updaterId).to.be("225494730938493804");
              expect(data.data.version).to.be.a('string');
              expect(data.data.version).to.be("");
              expect(data.data.createdByUser).to.be.a('string');
              expect(data.data.createdByUser).to.be("");
              expect(data.data.scriptDescription).to.be.a('string');
              expect(data.data.scriptDescription).to.be("");
              expect(data.data.fileSize).to.be.a('number');
              expect(data.data.fileSize).to.be(0);
              {
                let dataCtr = data.data.outputFilePaths;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("");
              expect(data.data.signature).to.be.a('string');
              expect(data.data.signature).to.be("");
              expect(data.data.scopeName).to.be.a('string');
              expect(data.data.scopeName).to.be("");
              expect(data.data.scopePath).to.be.a('string');
              expect(data.data.scopePath).to.be("");
              expect(data.data.fileName).to.be.a('string');
              expect(data.data.fileName).to.be("");
              expect(data.data.updater).to.be.a('string');
              expect(data.data.updater).to.be("");
              expect(data.data.shortFileName).to.be.a('string');
              expect(data.data.shortFileName).to.be("");
              expect(data.data.scriptRuntimeTimeoutSeconds).to.be.a('number');
              expect(data.data.scriptRuntimeTimeoutSeconds).to.be(0);
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteScriptsExecutePost', function() {
        it('should call webApiRemoteScriptsExecutePost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteScriptsExecutePost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.CloudProxyRemoteScriptsExecuteScriptSchema();
          opts.body.filter = new S1MgmtApi.CloudProxyRemoteScriptsExecuteScriptSchemaFilter();
          opts.body.filter.agentVersionsNin = ["2.0.0.0","2.1.5.144"];
          opts.body.filter.registeredAtBetween = "1514978764288-1514978999999";
          opts.body.filter.registeredAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.adComputerQueryContains = ["DC=sentinelone","Windows"];
          opts.body.filter.mitigationModeSuspicious = "detect";
          opts.body.filter.hasLocalConfiguration = false;
          opts.body.filter.adUserQueryContains = ["DC=sentinelone","John"];
          opts.body.filter.query = "Linux";
          opts.body.filter.cloudProvider = [""];
          opts.body.filter.coreCountGt = 0;
          opts.body.filter.decommissionedAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.registeredAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.totalMemoryGt = 0;
          opts.body.filter.updatedAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.hasContainerizedWorkload = false;
          opts.body.filter.cloudImageContains = [""];
          opts.body.filter.threatCreatedAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.appsVulnerabilityStatusesNin = ["patch_required"];
          opts.body.filter.scanStatusesNin = ["started","aborted"];
          opts.body.filter.adComputerMemberContains = ["DC=sentinelone"];
          opts.body.filter.coreCountLte = 0;
          opts.body.filter.rangerVersions = ["2.0.0.0","2.1.5.144"];
          opts.body.filter.machineTypes = ["laptop","desktop"];
          opts.body.filter.coreCountGte = 0;
          opts.body.filter.locationIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.locationIdsNin = ["225494730938493804","225494730938493915"];
          opts.body.filter.gatewayIp = "192.168.0.1";
          opts.body.filter.updatedAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.missingPermissionsNin = ["user_action_needed_bluetooth_per","user_action_needed_fda_helper"];
          opts.body.filter.migrationStatus = "N/A";
          opts.body.filter.threatRebootRequired = [false];
          opts.body.filter.serialNumberContains = [""];
          opts.body.filter.decommissionedAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.lastSuccessfulScanDateBetween = "1514978764288-1514978999999";
          opts.body.filter.lastActiveDateLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.lastActiveDateBetween = "1514978764288-1514978999999";
          opts.body.filter.networkQuarantineEnabled = [false];
          opts.body.filter.cloudTagsContains = [""];
          opts.body.filter.threatCreatedAtBetween = "1514978764288-1514978999999";
          opts.body.filter.encryptedApplications = false;
          opts.body.filter.isUninstalled = [true,false];
          opts.body.filter.networkInterfacePhysicalContains = ["aa:0f",":41:"];
          opts.body.filter.agentVersionGte = "2.5.1.1320";
          opts.body.filter.lastSuccessfulScanDateGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.operationalStates = [""];
          opts.body.filter.adUserNameContains = ["DC=sentinelone"];
          opts.body.filter.osTypesNin = ["windows"];
          opts.body.filter.csvFilterId = "225494730938493804";
          opts.body.filter.isActive = false;
          opts.body.filter.mitigationMode = "detect";
          opts.body.filter.awsSubnetIdsContains = [""];
          opts.body.filter.agentVersionLte = "2.5.1.1320";
          opts.body.filter.updatedAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.osVersionContains = ["Service Pack 1"];
          opts.body.filter.externalIpContains = ["205","127.0"];
          opts.body.filter.awsSecurityGroupsContains = [""];
          opts.body.filter.k8sNodeNameContains = [""];
          opts.body.filter.agentVersionBetween = "2.0.0.0-2.1.5.144";
          opts.body.filter.activeThreats = 3;
          opts.body.filter.hasTags = false;
          opts.body.filter.agentNamespaceContains = [""];
          opts.body.filter.cpuCountLt = 0;
          opts.body.filter.registeredAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.networkInterfaceInetContains = ["192","10.0.0"];
          opts.body.filter.computerNameContains = ["john-office","WIN"];
          opts.body.filter.cloudNetworkContains = [""];
          opts.body.filter.remoteOpsForensicsSupported = false;
          opts.body.filter.remoteProfilingStates = [""];
          opts.body.filter.filteredGroupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.agentPodNameContains = [""];
          opts.body.filter.userActionsNeededNin = ["reboot_needed","upgrade_needed"];
          opts.body.filter.rangerStatuses = ["NotApplicable"];
          opts.body.filter.computerNameLike = "Lab1";
          opts.body.filter.externalIdContains = ["Tag#1 - monitoring","Performance machine"];
          opts.body.filter.createdAtBetween = "1514978890136-1514978650130";
          opts.body.filter.consoleMigrationStatusesNin = ["N/A"];
          opts.body.filter.cpuIdContains = ["Intel","AMD"];
          opts.body.filter.coreCountBetween = "2-8";
          opts.body.filter.isUpToDate = false;
          opts.body.filter.threatCreatedAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.rangerStatus = "NotApplicable";
          opts.body.filter.totalMemoryBetween = "4-8";
          opts.body.filter.lastSuccessfulScanDateLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.domains = ["mybusiness.net","workgroup"];
          opts.body.filter.awsRoleContains = [""];
          opts.body.filter.lastLoggedInUserNameContains = ["admin","johnd1"];
          opts.body.filter.cpuCountGt = 0;
          opts.body.filter.cloudAccountContains = [""];
          opts.body.filter.clusterNameContains = [""];
          opts.body.filter.scanStatuses = ["started","aborted"];
          opts.body.filter.updatedAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.liveUpdateIdContains = [""];
          opts.body.filter.computerName = "My Office Desktop";
          opts.body.filter.uuid = "ff819e70af13be381993075eb0ce5f2f6de05be2";
          opts.body.filter.osTypes = ["windows"];
          opts.body.filter.appsVulnerabilityStatuses = ["patch_required"];
          opts.body.filter.lastActiveDateGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.threatContentHash = "cf23df2207d99a74fbe169e3eba035e633b65d94";
          opts.body.filter.remoteProfilingStatesNin = [""];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.scanStatus = "none";
          opts.body.filter.filteredSiteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.userActionsNeeded = ["reboot_needed","upgrade_needed"];
          opts.body.filter.registeredAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.osArch = "32 bit";
          opts.body.filter.adComputerNameContains = ["DC=sentinelone"];
          opts.body.filter.totalMemoryGte = 0;
          opts.body.filter.threatHidden = false;
          opts.body.filter.lastActiveDateGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.tenant = false;
          opts.body.filter.threatCreatedAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.cpuCountGte = 0;
          opts.body.filter.cloudInstanceIdContains = [""];
          opts.body.filter.agentVersions = ["2.0.0.0","2.1.5.144"];
          opts.body.filter.adQueryContains = ["DC=sentinelone"];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.locationEnabled = [false];
          opts.body.filter.cloudProviderNin = [""];
          opts.body.filter.isPendingUninstall = false;
          opts.body.filter.k8sNodeLabelsContains = [""];
          opts.body.filter.decommissionedAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.tagsData = "{"key1": ["value1_1", "value1_2"], "key2__nin": ["value2"]}";
          opts.body.filter.agentVersionGt = "2.5.1.1320";
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.threatMitigationStatus = "mitigated";
          opts.body.filter.lastSuccessfulScanDateGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.firewallEnabled = [false];
          opts.body.filter.decommissionedAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.decommissionedAtBetween = "1514978890136-1514978650130";
          opts.body.filter.domainsNin = ["mybusiness.net","workgroup"];
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.gcpServiceAccountContains = [""];
          opts.body.filter.threatResolved = false;
          opts.body.filter.cloudLocationContains = [""];
          opts.body.filter.lastActiveDateLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.networkStatuses = ["connected","connecting"];
          opts.body.filter.k8sTypeContains = [""];
          opts.body.filter.networkInterfaceGatewayMacAddressContains = ["aa:0f",":41:"];
          opts.body.filter.cpuCountBetween = "2-8";
          opts.body.filter.operationalStatesNin = [""];
          opts.body.filter.totalMemoryLt = 0;
          opts.body.filter.k8sVersionContains = [""];
          opts.body.filter.installerTypes = [".msi"];
          opts.body.filter.adUserMemberContains = ["DC=sentinelone"];
          opts.body.filter.infected = false;
          opts.body.filter.coreCountLt = 0;
          opts.body.filter.missingPermissions = ["user_action_needed_bluetooth_per","user_action_needed_fda_helper"];
          opts.body.filter.installerTypesNin = [".msi"];
          opts.body.filter.machineTypesNin = ["laptop","desktop"];
          opts.body.filter.filterId = "225494730938493804";
          opts.body.filter.isDecommissioned = [true,false];
          opts.body.filter.agentVersionLt = "2.5.1.1320";
          opts.body.filter.rangerStatusesNin = ["NotApplicable"];
          opts.body.filter.cloudInstanceSizeContains = [""];
          opts.body.filter.rangerVersionsNin = ["2.0.0.0","2.1.5.144"];
          opts.body.filter.rsoLevel = "none";
          opts.body.filter.cpuCountLte = 0;
          opts.body.filter.updatedAtBetween = "1514978890136-1514978650130";
          opts.body.filter.consoleMigrationStatuses = ["N/A"];
          opts.body.filter.azureResourceGroupContains = [""];
          opts.body.filter.threatCreatedAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.uuidContains = ["e92-01928","b055"];
          opts.body.filter.networkStatusesNin = ["connected","connecting"];
          opts.body.filter.totalMemoryLte = 0;
          opts.body.filter.activeThreatsGt = 5;
          opts.body.filter.lastSuccessfulScanDateLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.adQuery = "CN=Managers,DC=sentinelone,DC=com";
          opts.body.filter.uuids = ["ff819e70af13be381993075eb0ce5f2f6de05b11","ff819e70af13be381993075eb0ce5f2f6de05c22"];
          opts.body.data = new S1MgmtApi.CloudProxyRemoteScriptsExecuteScriptSchemaData();
          opts.body.data.outputDestination = "SentinelCloud";
          opts.body.data.requiresApproval = false;
          opts.body.data.outputFilePaths = [""];
          opts.body.data.inputParams = "";
          opts.body.data.destinationProfileId = "225494730938493804";
          opts.body.data.scriptId = "225494730938493804";
          opts.body.data.outputDirectory = "";
          opts.body.data.destinationProfileKeyword = "";
          opts.body.data.taskDescription = "";
          opts.body.data.scriptRuntimeTimeoutSeconds = 3600;
          opts.body.data.singularityxdrKeyword = "";
          opts.body.data.apiKey = "";
          opts.body.data.singularityxdrUrl = "";
          opts.body.data.passwordFromScope = new S1MgmtApi.AgentsSchemasStartRemoteShellSchemaDataPasswordFromScope();
          opts.body.data.passwordFromScope.scopeId = "225494730938493804";
          opts.body.data.passwordFromScope.scopeLevel = "tenant";
          opts.body.data.password = "";

          instance.webApiRemoteScriptsExecutePost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.RemoteScriptsExecuteSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.RemoteScriptsExecuteSchema200Data);
                  expect(data.data.parentTaskId).to.be.a('string');
              expect(data.data.parentTaskId).to.be("");
              expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);
              expect(data.data.pendingExecutionId).to.be.a('string');
              expect(data.data.pendingExecutionId).to.be("");
              expect(data.data.pending).to.be.a('boolean');
              expect(data.data.pending).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteScriptsFetchFilesPost', function() {
        it('should call webApiRemoteScriptsFetchFilesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteScriptsFetchFilesPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.FetchScriptsResultsSchema();
          opts.body.data = new S1MgmtApi.FetchScriptsResultsSchemaData();
          opts.body.data.computerNames = [""];
          opts.body.data.taskIds = ["225494730938493804","225494730938493915"];

          instance.webApiRemoteScriptsFetchFilesPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.DownloadMultipleScriptsResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.DownloadMultipleScriptsResultsSchema200Data);
                  expect(data.data.data).to.be.a(S1MgmtApi.DownloadMultipleScriptsResultsSchema200DataData);
                    {
                  let dataCtr = data.data.data.errors;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.DownloadMultipleScriptsResultsSchema200DataDataErrors);
                    expect(data.errorString).to.be.a('string');
                    expect(data.errorString).to.be("");
                    expect(data.taskId).to.be.a('string');
                    expect(data.taskId).to.be("");
    
                          }
                }
                {
                  let dataCtr = data.data.data.downloadLinks;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.DownloadMultipleScriptsResultsSchema200DataDataDownloadLinks);
                    expect(data.fileName).to.be.a('string');
                    expect(data.fileName).to.be("");
                    expect(data.taskId).to.be.a('string');
                    expect(data.taskId).to.be("");
                    expect(data.downloadUrl).to.be.a('string');
                    expect(data.downloadUrl).to.be("");
    
                          }
                }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteScriptsGet', function() {
        it('should call webApiRemoteScriptsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteScriptsGet call and complete the assertions
          /*
          var opts = {};
          opts.countOnly = false;
          opts.limit = 10;
          opts.osTypes = ["osTypes_example"];
          opts.scriptType = ["scriptType_example"];
          opts.cursor = "null";
          opts.sortBy = "null";
          opts.isAvailableForArs = true;
          opts.query = "query_example";
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.sortOrder = "null";
          opts.skipCount = null;
          opts.skip = 56;
          opts.ids = ["ids_example"];
          opts.groupIds = ["groupIds_example"];

          instance.webApiRemoteScriptsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21RsoSchemasEnrichedScriptSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21RsoSchemasEnrichedScriptSchemaMany200Data);
                expect(data.isAvailableForLite).to.be.a('boolean');
                expect(data.isAvailableForLite).to.be(false);
                expect(data.inputInstructions).to.be.a('string');
                expect(data.inputInstructions).to.be("");
                {
                  let dataCtr = data.supportedDestinations;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data._package).to.be.a(S1MgmtApi.V21RsoSchemasEnrichedScriptSchemaMany200Package);
                      expect(data._package.fileName).to.be.a('string');
                  expect(data._package.fileName).to.be("");
                  expect(data._package.bucketName).to.be.a('string');
                  expect(data._package.bucketName).to.be("");
                  expect(data._package.endpointExpiration).to.be.a('string');
                  expect(data._package.endpointExpiration).to.be("");
                  expect(data._package.fileSize).to.be.a('number');
                  expect(data._package.fileSize).to.be(0);
                  expect(data._package.signature).to.be.a('string');
                  expect(data._package.signature).to.be("");
                  expect(data._package.endpointExpirationSeconds).to.be.a('number');
                  expect(data._package.endpointExpirationSeconds).to.be(0);
                  expect(data._package.signatureType).to.be.a('string');
                  expect(data._package.signatureType).to.be("");
                  expect(data._package.id).to.be.a('string');
                  expect(data._package.id).to.be("225494730938493804");
                expect(data.isAvailableForArs).to.be.a('boolean');
                expect(data.isAvailableForArs).to.be(false);
                expect(data.scriptType).to.be.a('string');
                expect(data.scriptType).to.be("");
                expect(data.inputExample).to.be.a('string');
                expect(data.inputExample).to.be("");
                {
                  let dataCtr = data.osTypes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.scopeId).to.be.a('string');
                expect(data.scopeId).to.be("225494730938493804");
                expect(data.createdByUserId).to.be.a('string');
                expect(data.createdByUserId).to.be("225494730938493804");
                expect(data.inputRequired).to.be.a('boolean');
                expect(data.inputRequired).to.be(false);
                expect(data.bucketName).to.be.a('string');
                expect(data.bucketName).to.be("");
                expect(data.mgmtId).to.be.a('number');
                expect(data.mgmtId).to.be(0);
                expect(data.scriptName).to.be.a('string');
                expect(data.scriptName).to.be("");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.scopeLevel).to.be.a('string');
                expect(data.scopeLevel).to.be("tenant");
                expect(data.signatureType).to.be.a('string');
                expect(data.signatureType).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.updaterId).to.be.a('string');
                expect(data.updaterId).to.be("225494730938493804");
                expect(data.version).to.be.a('string');
                expect(data.version).to.be("");
                expect(data.createdByUser).to.be.a('string');
                expect(data.createdByUser).to.be("");
                expect(data.scriptDescription).to.be.a('string');
                expect(data.scriptDescription).to.be("");
                expect(data.fileSize).to.be.a('number');
                expect(data.fileSize).to.be(0);
                {
                  let dataCtr = data.outputFilePaths;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.creator).to.be.a('string');
                expect(data.creator).to.be("");
                expect(data.signature).to.be.a('string');
                expect(data.signature).to.be("");
                expect(data.scopeName).to.be.a('string');
                expect(data.scopeName).to.be("");
                expect(data.scopePath).to.be.a('string');
                expect(data.scopePath).to.be("");
                expect(data.fileName).to.be.a('string');
                expect(data.fileName).to.be("");
                expect(data.updater).to.be.a('string');
                expect(data.updater).to.be("");
                expect(data.shortFileName).to.be.a('string');
                expect(data.shortFileName).to.be("");
                expect(data.scriptRuntimeTimeoutSeconds).to.be.a('number');
                expect(data.scriptRuntimeTimeoutSeconds).to.be(0);
                expect(data.creatorId).to.be.a('string');
                expect(data.creatorId).to.be("225494730938493804");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteScriptsGuardrailsCheckPost', function() {
        it('should call webApiRemoteScriptsGuardrailsCheckPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteScriptsGuardrailsCheckPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21RsoSchemasEncapsulatedPostGuardrailCheckSchema();
          opts.body.data = new S1MgmtApi.V21RsoSchemasEncapsulatedPostGuardrailCheckSchemaData();
          opts.body.data.agentIds = ["225494730938493804"];
          opts.body.data.scriptId = "225494730938493804";

          instance.webApiRemoteScriptsGuardrailsCheckPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21RsoSchemasPostGuardrailCheckResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21RsoSchemasPostGuardrailCheckResponseSchema200Data);
                  expect(data.data.requiresApproval).to.be.a('boolean');
              expect(data.data.requiresApproval).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteScriptsGuardrailsConfigurationDelete', function() {
        it('should call webApiRemoteScriptsGuardrailsConfigurationDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteScriptsGuardrailsConfigurationDelete call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21RsoSchemasEncapsulatedDeleteGuardrailsSchema();
          opts.body.data = new S1MgmtApi.V21RsoSchemasEncapsulatedDeleteGuardrailsSchemaData();
          opts.body.data.scopeLevel = "account";
          opts.body.data.scopeId = "225494730938493804";

          instance.webApiRemoteScriptsGuardrailsConfigurationDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21RsoSchemasOperationResultStatusSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21RsoSchemasOperationResultStatusSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteScriptsGuardrailsConfigurationGet', function() {
        it('should call webApiRemoteScriptsGuardrailsConfigurationGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteScriptsGuardrailsConfigurationGet call and complete the assertions
          /*
          var scopeLevel = "scopeLevel_example";
          var scopeId = "scopeId_example";

          instance.webApiRemoteScriptsGuardrailsConfigurationGet(scopeLevel, scopeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21RsoSchemasGetGuardrailsResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21RsoSchemasGetGuardrailsResponseSchema200Data);
                  expect(data.data.enabled).to.be.a('boolean');
              expect(data.data.enabled).to.be(false);
              {
                let dataCtr = data.data.scriptTypes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.endpointsQuantity).to.be.a('number');
              expect(data.data.endpointsQuantity).to.be(0);
              expect(data.data.inherited).to.be.a('boolean');
              expect(data.data.inherited).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteScriptsGuardrailsConfigurationPost', function() {
        it('should call webApiRemoteScriptsGuardrailsConfigurationPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteScriptsGuardrailsConfigurationPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21RsoSchemasEncapsulatedPostGuardrailsSchema();
          opts.body.data = new S1MgmtApi.V21RsoSchemasEncapsulatedPostGuardrailsSchemaData();
          opts.body.data.scriptTypes = [""];
          opts.body.data.enabled = false;
          opts.body.data.endpointsQuantity = 0;
          opts.body.data.scopeLevel = "account";
          opts.body.data.scopeId = "225494730938493804";

          instance.webApiRemoteScriptsGuardrailsConfigurationPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21RsoSchemasOperationResultStatusSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21RsoSchemasOperationResultStatusSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteScriptsPendingExecutionsGet', function() {
        it('should call webApiRemoteScriptsPendingExecutionsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteScriptsPendingExecutionsGet call and complete the assertions
          /*
          var opts = {};
          opts.countOnly = false;
          opts.limit = 10;
          opts.cursor = "null";
          opts.sortBy = "null";
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.sortOrder = "null";
          opts.skipCount = null;
          opts.skip = 56;
          opts.groupIds = ["groupIds_example"];

          instance.webApiRemoteScriptsPendingExecutionsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200Data);
                expect(data.totalEndpoints).to.be.a('number');
                expect(data.totalEndpoints).to.be(0);
                expect(data.scriptData).to.be.a(S1MgmtApi.V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200ScriptData);
                      expect(data.scriptData.isAvailableForLite).to.be.a('boolean');
                  expect(data.scriptData.isAvailableForLite).to.be(false);
                  expect(data.scriptData.inputInstructions).to.be.a('string');
                  expect(data.scriptData.inputInstructions).to.be("");
                  {
                    let dataCtr = data.scriptData.supportedDestinations;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.scriptData._package).to.be.a(S1MgmtApi.V21RsoSchemasEnrichedScriptSchemaMany200Package);
                        expect(data.scriptData._package.fileName).to.be.a('string');
                    expect(data.scriptData._package.fileName).to.be("");
                    expect(data.scriptData._package.bucketName).to.be.a('string');
                    expect(data.scriptData._package.bucketName).to.be("");
                    expect(data.scriptData._package.endpointExpiration).to.be.a('string');
                    expect(data.scriptData._package.endpointExpiration).to.be("");
                    expect(data.scriptData._package.fileSize).to.be.a('number');
                    expect(data.scriptData._package.fileSize).to.be(0);
                    expect(data.scriptData._package.signature).to.be.a('string');
                    expect(data.scriptData._package.signature).to.be("");
                    expect(data.scriptData._package.endpointExpirationSeconds).to.be.a('number');
                    expect(data.scriptData._package.endpointExpirationSeconds).to.be(0);
                    expect(data.scriptData._package.signatureType).to.be.a('string');
                    expect(data.scriptData._package.signatureType).to.be("");
                    expect(data.scriptData._package.id).to.be.a('string');
                    expect(data.scriptData._package.id).to.be("225494730938493804");
                  expect(data.scriptData.isAvailableForArs).to.be.a('boolean');
                  expect(data.scriptData.isAvailableForArs).to.be(false);
                  expect(data.scriptData.scriptType).to.be.a('string');
                  expect(data.scriptData.scriptType).to.be("");
                  expect(data.scriptData.inputExample).to.be.a('string');
                  expect(data.scriptData.inputExample).to.be("");
                  {
                    let dataCtr = data.scriptData.osTypes;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.scriptData.scopeId).to.be.a('string');
                  expect(data.scriptData.scopeId).to.be("225494730938493804");
                  expect(data.scriptData.createdByUserId).to.be.a('string');
                  expect(data.scriptData.createdByUserId).to.be("225494730938493804");
                  expect(data.scriptData.inputRequired).to.be.a('boolean');
                  expect(data.scriptData.inputRequired).to.be(false);
                  expect(data.scriptData.bucketName).to.be.a('string');
                  expect(data.scriptData.bucketName).to.be("");
                  expect(data.scriptData.mgmtId).to.be.a('number');
                  expect(data.scriptData.mgmtId).to.be(0);
                  expect(data.scriptData.scriptName).to.be.a('string');
                  expect(data.scriptData.scriptName).to.be("");
                  expect(data.scriptData.updatedAt).to.be.a(Date);
                  expect(data.scriptData.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                  expect(data.scriptData.scopeLevel).to.be.a('string');
                  expect(data.scriptData.scopeLevel).to.be("tenant");
                  expect(data.scriptData.signatureType).to.be.a('string');
                  expect(data.scriptData.signatureType).to.be("");
                  expect(data.scriptData.id).to.be.a('string');
                  expect(data.scriptData.id).to.be("225494730938493804");
                  expect(data.scriptData.updaterId).to.be.a('string');
                  expect(data.scriptData.updaterId).to.be("225494730938493804");
                  expect(data.scriptData.version).to.be.a('string');
                  expect(data.scriptData.version).to.be("");
                  expect(data.scriptData.createdByUser).to.be.a('string');
                  expect(data.scriptData.createdByUser).to.be("");
                  expect(data.scriptData.scriptDescription).to.be.a('string');
                  expect(data.scriptData.scriptDescription).to.be("");
                  expect(data.scriptData.fileSize).to.be.a('number');
                  expect(data.scriptData.fileSize).to.be(0);
                  {
                    let dataCtr = data.scriptData.outputFilePaths;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.scriptData.creator).to.be.a('string');
                  expect(data.scriptData.creator).to.be("");
                  expect(data.scriptData.signature).to.be.a('string');
                  expect(data.scriptData.signature).to.be("");
                  expect(data.scriptData.scopeName).to.be.a('string');
                  expect(data.scriptData.scopeName).to.be("");
                  expect(data.scriptData.scopePath).to.be.a('string');
                  expect(data.scriptData.scopePath).to.be("");
                  expect(data.scriptData.fileName).to.be.a('string');
                  expect(data.scriptData.fileName).to.be("");
                  expect(data.scriptData.updater).to.be.a('string');
                  expect(data.scriptData.updater).to.be("");
                  expect(data.scriptData.shortFileName).to.be.a('string');
                  expect(data.scriptData.shortFileName).to.be("");
                  expect(data.scriptData.scriptRuntimeTimeoutSeconds).to.be.a('number');
                  expect(data.scriptData.scriptRuntimeTimeoutSeconds).to.be(0);
                  expect(data.scriptData.creatorId).to.be.a('string');
                  expect(data.scriptData.creatorId).to.be("225494730938493804");
                  expect(data.scriptData.createdAt).to.be.a(Date);
                  expect(data.scriptData.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                {
                  let dataCtr = data.endpointsByScope;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200EndpointsByScope);
                    expect(data.totalEndpoints).to.be.a('number');
                    expect(data.totalEndpoints).to.be(0);
                    expect(data.scopeName).to.be.a('string');
                    expect(data.scopeName).to.be("");
    
                          }
                }
                expect(data.pendingExecutionId).to.be.a('string');
                expect(data.pendingExecutionId).to.be("225494730938493804");
                expect(data.state).to.be.a('string');
                expect(data.state).to.be("waiting");
                expect(data.executionData).to.be.a(S1MgmtApi.V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200ExecutionData);
                      expect(data.executionData.destinationProfileKeyword).to.be.a('string');
                  expect(data.executionData.destinationProfileKeyword).to.be("");
                  expect(data.executionData.taskDescription).to.be.a('string');
                  expect(data.executionData.taskDescription).to.be("");
                  expect(data.executionData.singularityxdrKeyword).to.be.a('string');
                  expect(data.executionData.singularityxdrKeyword).to.be("");
                  expect(data.executionData.outputDirectory).to.be.a('string');
                  expect(data.executionData.outputDirectory).to.be("");
                  expect(data.executionData.requiresApproval).to.be.a('boolean');
                  expect(data.executionData.requiresApproval).to.be(false);
                  expect(data.executionData.password).to.be.a('string');
                  expect(data.executionData.password).to.be("");
                  expect(data.executionData.passwordFromScope).to.be.a(S1MgmtApi.V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200ExecutionDataPasswordFromScope);
                        expect(data.executionData.passwordFromScope.scopeLevel).to.be.a('string');
                    expect(data.executionData.passwordFromScope.scopeLevel).to.be("group");
                    expect(data.executionData.passwordFromScope.scopeId).to.be.a('string');
                    expect(data.executionData.passwordFromScope.scopeId).to.be("225494730938493804");
                  expect(data.executionData.inputParams).to.be.a('string');
                  expect(data.executionData.inputParams).to.be("");
                  expect(data.executionData.destinationProfileId).to.be.a('string');
                  expect(data.executionData.destinationProfileId).to.be("225494730938493804");
                  expect(data.executionData.apiKey).to.be.a('string');
                  expect(data.executionData.apiKey).to.be("");
                  {
                    let dataCtr = data.executionData.outputFilePaths;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.executionData.scriptRuntimeTimeoutSeconds).to.be.a('number');
                  expect(data.executionData.scriptRuntimeTimeoutSeconds).to.be(3600);
                  expect(data.executionData.scriptId).to.be.a('string');
                  expect(data.executionData.scriptId).to.be("225494730938493804");
                  expect(data.executionData.outputDestination).to.be.a('string');
                  expect(data.executionData.outputDestination).to.be("None");
                  expect(data.executionData.singularityxdrUrl).to.be.a('string');
                  expect(data.executionData.singularityxdrUrl).to.be("");
                expect(data.reviewer).to.be.a('string');
                expect(data.reviewer).to.be("");
                expect(data.creator).to.be.a('string');
                expect(data.creator).to.be("");
                expect(data.creatorId).to.be.a('string');
                expect(data.creatorId).to.be("225494730938493804");
                expect(data.reviewerId).to.be.a('string');
                expect(data.reviewerId).to.be("225494730938493804");
                expect(data.canApproveOrDecline).to.be.a('boolean');
                expect(data.canApproveOrDecline).to.be(false);
                expect(data.scheduledTaskId).to.be.a('string');
                expect(data.scheduledTaskId).to.be("225494730938493804");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteScriptsPendingExecutionspendingExecutionIdPut', function() {
        it('should call webApiRemoteScriptsPendingExecutionspendingExecutionIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteScriptsPendingExecutionspendingExecutionIdPut call and complete the assertions
          /*
          var pendingExecutionId = "pendingExecutionId_example";
          var opts = {};
          opts.body = new S1MgmtApi.V21RsoSchemasApproveDeclinePendingExecutionRequestSchema();
          opts.body.data = new S1MgmtApi.V21RsoSchemasApproveDeclinePendingExecutionRequestSchemaData();
          opts.body.data.action = "approve";

          instance.webApiRemoteScriptsPendingExecutionspendingExecutionIdPut(pendingExecutionId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21RsoSchemasOperationResultStatusSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21RsoSchemasOperationResultStatusSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteScriptsPost', function() {
        it('should call webApiRemoteScriptsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteScriptsPost call and complete the assertions
          /*
          var scriptType = "scriptType_example";
          var osTypes = ["osTypes_example"];
          var inputRequired = true;
          var scriptName = "scriptName_example";
          var scopeLevel = "scopeLevel_example";
          var opts = {};
          opts.isDuplication = false;
          opts.inputInstructions = "inputInstructions_example";
          opts.inputExample = "inputExample_example";
          opts.consoleData = "consoleData_example";
          opts.scopeId = "scopeId_example";
          opts.sendActivity = false;
          opts.scriptContent = "null";
          opts.packageMaxSize = "209715200";
          opts.packageEndpointExpiration = "packageEndpointExpiration_example";
          opts.scriptDescription = "scriptDescription_example";
          opts.originalScriptId = "originalScriptId_example";
          opts.packageEndpointExpirationSeconds = 56;
          opts.isScriptContentEncoded = false;
          opts.packageRemoved = false;
          opts.scriptRuntimeTimeoutSeconds = 3600;
          opts.file = "/path/to/file.txt";
          opts.packageFile = "/path/to/file.txt";

          instance.webApiRemoteScriptsPost(scriptType, osTypes, inputRequired, scriptName, scopeLevel, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21RsoSchemasEnrichedScriptSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21RsoSchemasEnrichedScriptSchema200Data);
                  expect(data.data.isAvailableForLite).to.be.a('boolean');
              expect(data.data.isAvailableForLite).to.be(false);
              expect(data.data.inputInstructions).to.be.a('string');
              expect(data.data.inputInstructions).to.be("");
              {
                let dataCtr = data.data.supportedDestinations;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data._package).to.be.a(S1MgmtApi.V21RsoSchemasEnrichedScriptSchemaMany200Package);
                    expect(data.data._package.fileName).to.be.a('string');
                expect(data.data._package.fileName).to.be("");
                expect(data.data._package.bucketName).to.be.a('string');
                expect(data.data._package.bucketName).to.be("");
                expect(data.data._package.endpointExpiration).to.be.a('string');
                expect(data.data._package.endpointExpiration).to.be("");
                expect(data.data._package.fileSize).to.be.a('number');
                expect(data.data._package.fileSize).to.be(0);
                expect(data.data._package.signature).to.be.a('string');
                expect(data.data._package.signature).to.be("");
                expect(data.data._package.endpointExpirationSeconds).to.be.a('number');
                expect(data.data._package.endpointExpirationSeconds).to.be(0);
                expect(data.data._package.signatureType).to.be.a('string');
                expect(data.data._package.signatureType).to.be("");
                expect(data.data._package.id).to.be.a('string');
                expect(data.data._package.id).to.be("225494730938493804");
              expect(data.data.isAvailableForArs).to.be.a('boolean');
              expect(data.data.isAvailableForArs).to.be(false);
              expect(data.data.scriptType).to.be.a('string');
              expect(data.data.scriptType).to.be("");
              expect(data.data.inputExample).to.be.a('string');
              expect(data.data.inputExample).to.be("");
              {
                let dataCtr = data.data.osTypes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.createdByUserId).to.be.a('string');
              expect(data.data.createdByUserId).to.be("225494730938493804");
              expect(data.data.inputRequired).to.be.a('boolean');
              expect(data.data.inputRequired).to.be(false);
              expect(data.data.bucketName).to.be.a('string');
              expect(data.data.bucketName).to.be("");
              expect(data.data.mgmtId).to.be.a('number');
              expect(data.data.mgmtId).to.be(0);
              expect(data.data.scriptName).to.be.a('string');
              expect(data.data.scriptName).to.be("");
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.scopeLevel).to.be.a('string');
              expect(data.data.scopeLevel).to.be("tenant");
              expect(data.data.signatureType).to.be.a('string');
              expect(data.data.signatureType).to.be("");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.updaterId).to.be.a('string');
              expect(data.data.updaterId).to.be("225494730938493804");
              expect(data.data.version).to.be.a('string');
              expect(data.data.version).to.be("");
              expect(data.data.createdByUser).to.be.a('string');
              expect(data.data.createdByUser).to.be("");
              expect(data.data.scriptDescription).to.be.a('string');
              expect(data.data.scriptDescription).to.be("");
              expect(data.data.fileSize).to.be.a('number');
              expect(data.data.fileSize).to.be(0);
              {
                let dataCtr = data.data.outputFilePaths;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("");
              expect(data.data.signature).to.be.a('string');
              expect(data.data.signature).to.be("");
              expect(data.data.scopeName).to.be.a('string');
              expect(data.data.scopeName).to.be("");
              expect(data.data.scopePath).to.be.a('string');
              expect(data.data.scopePath).to.be("");
              expect(data.data.fileName).to.be.a('string');
              expect(data.data.fileName).to.be("");
              expect(data.data.updater).to.be.a('string');
              expect(data.data.updater).to.be("");
              expect(data.data.shortFileName).to.be.a('string');
              expect(data.data.shortFileName).to.be("");
              expect(data.data.scriptRuntimeTimeoutSeconds).to.be.a('number');
              expect(data.data.scriptRuntimeTimeoutSeconds).to.be(0);
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteScriptsScriptContentGet', function() {
        it('should call webApiRemoteScriptsScriptContentGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteScriptsScriptContentGet call and complete the assertions
          /*
          var opts = {};
          opts.scriptId = "scriptId_example";

          instance.webApiRemoteScriptsScriptContentGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21RsoSchemasScriptContentSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21RsoSchemasScriptContentSchema200Data);
                  expect(data.data.scriptContent).to.be.a('string');
              expect(data.data.scriptContent).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteScriptsStatusGet', function() {
        it('should call webApiRemoteScriptsStatusGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteScriptsStatusGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "null";
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.detailedStatusContains = ["detailedStatusContains_example"];
          opts.initiatedByContains = ["initiatedByContains_example"];
          opts.updatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.ids = ["ids_example"];
          opts.query = "query_example";
          opts.countOnly = false;
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.limit = 10;
          opts.updatedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.skip = 56;
          opts.skipCount = null;
          opts.sortOrder = "null";
          opts.updatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.status = ["status_example"];
          opts.computerNameContains = ["computerNameContains_example"];
          opts.type = "type_example";
          opts.sortBy = "null";
          opts.updatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.tenant = true;
          opts.groupIds = ["groupIds_example"];
          opts.parentTaskId = "parentTaskId_example";
          opts.parentTaskIdIn = ["parentTaskIdIn_example"];
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.descriptionContains = ["descriptionContains_example"];
          opts.uuidContains = ["uuidContains_example"];
          opts.types = ["types_example"];

          instance.webApiRemoteScriptsStatusGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.TasksSchemasTaskSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.TasksSchemasTaskSchemaMany200Data);
                expect(data.detailedStatus).to.be.a('string');
                expect(data.detailedStatus).to.be("");
                expect(data.agentUuid).to.be.a('string');
                expect(data.agentUuid).to.be("225494730938493804");
                expect(data.accountId).to.be.a('string');
                expect(data.accountId).to.be("225494730938493804");
                expect(data.agentMachineType).to.be.a('string');
                expect(data.agentMachineType).to.be("");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.siteId).to.be.a('string');
                expect(data.siteId).to.be("225494730938493804");
                expect(data.scriptResultsPath).to.be.a('string');
                expect(data.scriptResultsPath).to.be("");
                expect(data.accountName).to.be.a('string');
                expect(data.accountName).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.agentIsActive).to.be.a('boolean');
                expect(data.agentIsActive).to.be(false);
                expect(data.scriptResultsSignature).to.be.a('string');
                expect(data.scriptResultsSignature).to.be("");
                expect(data.groupName).to.be.a('string');
                expect(data.groupName).to.be("");
                expect(data.initiatedById).to.be.a('string');
                expect(data.initiatedById).to.be("225494730938493804");
                expect(data.statusCode).to.be.a('number');
                expect(data.statusCode).to.be(0);
                expect(data.agentId).to.be.a('string');
                expect(data.agentId).to.be("225494730938493804");
                expect(data.agentIsDecommissioned).to.be.a('boolean');
                expect(data.agentIsDecommissioned).to.be(false);
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
                expect(data.agentOsType).to.be.a('string');
                expect(data.agentOsType).to.be("windows");
                expect(data.parentTaskId).to.be.a('string');
                expect(data.parentTaskId).to.be("225494730938493804");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.groupId).to.be.a('string');
                expect(data.groupId).to.be("225494730938493804");
                expect(data.siteName).to.be.a('string');
                expect(data.siteName).to.be("");
                expect(data.statusDescription).to.be.a(Object);
                expect(data.statusDescription).to.be();
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.initiatedBy).to.be.a('string');
                expect(data.initiatedBy).to.be("");
                expect(data.scriptResultsBucket).to.be.a('string');
                expect(data.scriptResultsBucket).to.be("");
                expect(data.agentComputerName).to.be.a('string');
                expect(data.agentComputerName).to.be("");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("created");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiRemoteScriptsscriptIdPut', function() {
        it('should call webApiRemoteScriptsscriptIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiRemoteScriptsscriptIdPut call and complete the assertions
          /*
          var scriptId = "scriptId_example";
          var opts = {};
          opts.body = new S1MgmtApi.V21RsoSchemasUpdateScript();
          opts.body.consoleData = "";
          opts.body.sendActivity = false;
          opts.body.data = new S1MgmtApi.V21RsoSchemasUpdateScriptData();
          opts.body.data.inputRequired = false;
          opts.body.data.inputInstructions = "";
          opts.body.data.scriptName = "";
          opts.body.data.inputExample = "";
          opts.body.data.scriptType = "artifactCollection";
          opts.body.data.scriptDescription = "";
          opts.body.data.packageEndpointExpirationSeconds = 0;
          opts.body.data.scriptRuntimeTimeoutSeconds = 0;
          opts.body.data.osTypes = "macos,linux";
          opts.body.data.packageEndpointExpiration = "None";

          instance.webApiRemoteScriptsscriptIdPut(scriptId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21RsoSchemasEnrichedScriptSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21RsoSchemasEnrichedScriptSchema200Data);
                  expect(data.data.isAvailableForLite).to.be.a('boolean');
              expect(data.data.isAvailableForLite).to.be(false);
              expect(data.data.inputInstructions).to.be.a('string');
              expect(data.data.inputInstructions).to.be("");
              {
                let dataCtr = data.data.supportedDestinations;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data._package).to.be.a(S1MgmtApi.V21RsoSchemasEnrichedScriptSchemaMany200Package);
                    expect(data.data._package.fileName).to.be.a('string');
                expect(data.data._package.fileName).to.be("");
                expect(data.data._package.bucketName).to.be.a('string');
                expect(data.data._package.bucketName).to.be("");
                expect(data.data._package.endpointExpiration).to.be.a('string');
                expect(data.data._package.endpointExpiration).to.be("");
                expect(data.data._package.fileSize).to.be.a('number');
                expect(data.data._package.fileSize).to.be(0);
                expect(data.data._package.signature).to.be.a('string');
                expect(data.data._package.signature).to.be("");
                expect(data.data._package.endpointExpirationSeconds).to.be.a('number');
                expect(data.data._package.endpointExpirationSeconds).to.be(0);
                expect(data.data._package.signatureType).to.be.a('string');
                expect(data.data._package.signatureType).to.be("");
                expect(data.data._package.id).to.be.a('string');
                expect(data.data._package.id).to.be("225494730938493804");
              expect(data.data.isAvailableForArs).to.be.a('boolean');
              expect(data.data.isAvailableForArs).to.be(false);
              expect(data.data.scriptType).to.be.a('string');
              expect(data.data.scriptType).to.be("");
              expect(data.data.inputExample).to.be.a('string');
              expect(data.data.inputExample).to.be("");
              {
                let dataCtr = data.data.osTypes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.createdByUserId).to.be.a('string');
              expect(data.data.createdByUserId).to.be("225494730938493804");
              expect(data.data.inputRequired).to.be.a('boolean');
              expect(data.data.inputRequired).to.be(false);
              expect(data.data.bucketName).to.be.a('string');
              expect(data.data.bucketName).to.be("");
              expect(data.data.mgmtId).to.be.a('number');
              expect(data.data.mgmtId).to.be(0);
              expect(data.data.scriptName).to.be.a('string');
              expect(data.data.scriptName).to.be("");
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.scopeLevel).to.be.a('string');
              expect(data.data.scopeLevel).to.be("tenant");
              expect(data.data.signatureType).to.be.a('string');
              expect(data.data.signatureType).to.be("");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.updaterId).to.be.a('string');
              expect(data.data.updaterId).to.be("225494730938493804");
              expect(data.data.version).to.be.a('string');
              expect(data.data.version).to.be("");
              expect(data.data.createdByUser).to.be.a('string');
              expect(data.data.createdByUser).to.be("");
              expect(data.data.scriptDescription).to.be.a('string');
              expect(data.data.scriptDescription).to.be("");
              expect(data.data.fileSize).to.be.a('number');
              expect(data.data.fileSize).to.be(0);
              {
                let dataCtr = data.data.outputFilePaths;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("");
              expect(data.data.signature).to.be.a('string');
              expect(data.data.signature).to.be("");
              expect(data.data.scopeName).to.be.a('string');
              expect(data.data.scopeName).to.be("");
              expect(data.data.scopePath).to.be.a('string');
              expect(data.data.scopePath).to.be("");
              expect(data.data.fileName).to.be.a('string');
              expect(data.data.fileName).to.be("");
              expect(data.data.updater).to.be.a('string');
              expect(data.data.updater).to.be("");
              expect(data.data.shortFileName).to.be.a('string');
              expect(data.data.shortFileName).to.be("");
              expect(data.data.scriptRuntimeTimeoutSeconds).to.be.a('number');
              expect(data.data.scriptRuntimeTimeoutSeconds).to.be(0);
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
