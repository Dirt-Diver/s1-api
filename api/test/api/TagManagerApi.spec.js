/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.TagManagerApi();
  });

  describe('(package)', function() {
    describe('TagManagerApi', function() {
      describe('webApiTagManagerDelete', function() {
        it('should call webApiTagManagerDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiTagManagerDelete call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21MgmtTagManagerSchemasTagsDeleteSchema();
          opts.body.filter = new S1MgmtApi.V21MgmtTagManagerSchemasTagsDeleteSchemaFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.includeChildren = false;
          opts.body.filter.includeParents = false;
          opts.body.filter.tagIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.query = "";

          instance.webApiTagManagerDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiTagManagerPost', function() {
        it('should call webApiTagManagerPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiTagManagerPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21MgmtTagManagerSchemasPostTagSchema();
          opts.body.filter = new S1MgmtApi.V21MgmtTagManagerSchemasPostTagSchemaFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.V21MgmtTagManagerSchemasPostTagSchemaData();
          opts.body.data.key = "";
          opts.body.data.description = "";
          opts.body.data.value = "";
          opts.body.data.type = "";

          instance.webApiTagManagerPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21MgmtTagManagerSchemasTagsViewSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21MgmtTagManagerSchemasTagsViewSchema200Data);
                  expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.type).to.be.a('string');
              expect(data.data.type).to.be("");
              expect(data.data.key).to.be.a('string');
              expect(data.data.key).to.be("");
              expect(data.data.value).to.be.a('string');
              expect(data.data.value).to.be("");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.scopeLevel).to.be.a('string');
              expect(data.data.scopeLevel).to.be("");
              expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("");
              expect(data.data.createdById).to.be.a('string');
              expect(data.data.createdById).to.be("225494730938493804");
              expect(data.data.updatedById).to.be.a('string');
              expect(data.data.updatedById).to.be("225494730938493804");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiTagManagertagIdPut', function() {
        it('should call webApiTagManagertagIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiTagManagertagIdPut call and complete the assertions
          /*
          var tagId = "tagId_example";
          var opts = {};
          opts.body = new S1MgmtApi.V21MgmtTagManagerSchemasPutTagSchema();
          opts.body.data = new S1MgmtApi.V21MgmtTagManagerSchemasPutTagSchemaData();
          opts.body.data.key = "";
          opts.body.data.description = "";
          opts.body.data.value = "";

          instance.webApiTagManagertagIdPut(tagId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21MgmtTagManagerSchemasTagsViewSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.V21MgmtTagManagerSchemasTagsViewSchema200Data);
                  expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.type).to.be.a('string');
              expect(data.data.type).to.be("");
              expect(data.data.key).to.be.a('string');
              expect(data.data.key).to.be("");
              expect(data.data.value).to.be.a('string');
              expect(data.data.value).to.be("");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.scopeLevel).to.be.a('string');
              expect(data.data.scopeLevel).to.be("");
              expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("");
              expect(data.data.createdById).to.be.a('string');
              expect(data.data.createdById).to.be("225494730938493804");
              expect(data.data.updatedById).to.be.a('string');
              expect(data.data.updatedById).to.be("225494730938493804");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
