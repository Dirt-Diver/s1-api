/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.FirewallControlApi();
  });

  describe('(package)', function() {
    describe('FirewallControlApi', function() {
      describe('webApiFirewallControlAddTagsPost', function() {
        it('should call webApiFirewallControlAddTagsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFirewallControlAddTagsPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.FirewallControlSchemasChangeRulesTagsSchema();
          opts.body.filter = new S1MgmtApi.FirewallControlSchemasRuleDeleteSchemaFilter();
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.nameContains = [""];
          opts.body.filter.serviceContains = [""];
          opts.body.filter.actions = ["Allow"];
          opts.body.filter.tagIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.directions = ["any"];
          opts.body.filter.protocols = [""];
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.query = "";
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.osTypes = ["windows"];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.scopes = ["site"];
          opts.body.filter.statuses = ["Enabled"];
          opts.body.filter.protocolContains = [""];
          opts.body.filter.applicationContains = [""];
          opts.body.filter.locationIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.createdAtBetween = "1514978764288-1514978999999";
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.name = "";
          opts.body.filter.tagNameContains = [""];
          opts.body.filter.applications = [""];
          opts.body.data = new S1MgmtApi.FirewallControlSchemasChangeRulesTagsSchemaData();
          opts.body.data.tagIds = ["225494730938493804","225494730938493915"];

          instance.webApiFirewallControlAddTagsPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFirewallControlConfigurationGet', function() {
        it('should call webApiFirewallControlConfigurationGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFirewallControlConfigurationGet call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.groupIds = ["groupIds_example"];
          opts.tenant = true;
          opts.siteIds = ["siteIds_example"];

          instance.webApiFirewallControlConfigurationGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSettingsSchema200Data);
                  {
                let dataCtr = data.data.selectedTags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("225494730938493804");
                }
              }
              expect(data.data.inheritAllFirewallRules).to.be.a('boolean');
              expect(data.data.inheritAllFirewallRules).to.be(false);
              expect(data.data.reportBlocked).to.be.a('boolean');
              expect(data.data.reportBlocked).to.be(false);
              expect(data.data.locationAware).to.be.a('boolean');
              expect(data.data.locationAware).to.be(false);
              expect(data.data.enabled).to.be.a('boolean');
              expect(data.data.enabled).to.be(false);
              expect(data.data.inherits).to.be.a('boolean');
              expect(data.data.inherits).to.be(false);
              expect(data.data.inheritSettings).to.be.a('boolean');
              expect(data.data.inheritSettings).to.be(false);
              expect(data.data.inheritedFrom).to.be.a('string');
              expect(data.data.inheritedFrom).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFirewallControlConfigurationPut', function() {
        it('should call webApiFirewallControlConfigurationPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFirewallControlConfigurationPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.FirewallControlSchemasPostFirewallSettingsSchema();
          opts.body.filter = new S1MgmtApi.ExclusionsSchemasPostExclusionSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.FirewallControlSchemasPostFirewallSettingsSchemaData();
          opts.body.data.selectedTags = ["225494730938493804","225494730938493915"];
          opts.body.data.inheritAllFirewallRules = false;
          opts.body.data.reportBlocked = false;
          opts.body.data.locationAware = false;
          opts.body.data.enabled = false;
          opts.body.data.inherits = false;
          opts.body.data.inheritSettings = false;
          opts.body.data.inheritedFrom = "";

          instance.webApiFirewallControlConfigurationPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSettingsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSettingsSchema200Data);
                  {
                let dataCtr = data.data.selectedTags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("225494730938493804");
                }
              }
              expect(data.data.inheritAllFirewallRules).to.be.a('boolean');
              expect(data.data.inheritAllFirewallRules).to.be(false);
              expect(data.data.reportBlocked).to.be.a('boolean');
              expect(data.data.reportBlocked).to.be(false);
              expect(data.data.locationAware).to.be.a('boolean');
              expect(data.data.locationAware).to.be(false);
              expect(data.data.enabled).to.be.a('boolean');
              expect(data.data.enabled).to.be(false);
              expect(data.data.inherits).to.be.a('boolean');
              expect(data.data.inherits).to.be(false);
              expect(data.data.inheritSettings).to.be.a('boolean');
              expect(data.data.inheritSettings).to.be(false);
              expect(data.data.inheritedFrom).to.be.a('string');
              expect(data.data.inheritedFrom).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFirewallControlCopyRulesPost', function() {
        it('should call webApiFirewallControlCopyRulesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFirewallControlCopyRulesPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.FirewallControlSchemasCopyRuleSchema();
          opts.body.filter = new S1MgmtApi.FirewallControlSchemasRuleDeleteSchemaFilter();
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.nameContains = [""];
          opts.body.filter.serviceContains = [""];
          opts.body.filter.actions = ["Allow"];
          opts.body.filter.tagIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.directions = ["any"];
          opts.body.filter.protocols = [""];
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.query = "";
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.osTypes = ["windows"];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.scopes = ["site"];
          opts.body.filter.statuses = ["Enabled"];
          opts.body.filter.protocolContains = [""];
          opts.body.filter.applicationContains = [""];
          opts.body.filter.locationIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.createdAtBetween = "1514978764288-1514978999999";
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.name = "";
          opts.body.filter.tagNameContains = [""];
          opts.body.filter.applications = [""];
          opts.body.data = [new S1MgmtApi.FirewallControlSchemasCopyRuleSchemaData()];
          opts.body.data[0].groupId = "225494730938493804";
          opts.body.data[0].siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data[0].accountIds = ["225494730938493804","225494730938493915"];
          opts.body.data[0].accountId = "225494730938493804";
          opts.body.data[0].siteId = "225494730938493804";
          opts.body.data[0].tenant = false;
          opts.body.data[0].groupIds = ["225494730938493804"];

          instance.webApiFirewallControlCopyRulesPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFirewallControlDelete', function() {
        it('should call webApiFirewallControlDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFirewallControlDelete call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.FirewallControlSchemasRuleDeleteSchema();
          opts.body.filter = new S1MgmtApi.FirewallControlSchemasRuleDeleteSchemaFilter();
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.nameContains = [""];
          opts.body.filter.serviceContains = [""];
          opts.body.filter.actions = ["Allow"];
          opts.body.filter.tagIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.directions = ["any"];
          opts.body.filter.protocols = [""];
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.query = "";
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.osTypes = ["windows"];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.scopes = ["site"];
          opts.body.filter.statuses = ["Enabled"];
          opts.body.filter.protocolContains = [""];
          opts.body.filter.applicationContains = [""];
          opts.body.filter.locationIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.createdAtBetween = "1514978764288-1514978999999";
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.name = "";
          opts.body.filter.tagNameContains = [""];
          opts.body.filter.applications = [""];

          instance.webApiFirewallControlDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFirewallControlEnablePut', function() {
        it('should call webApiFirewallControlEnablePut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFirewallControlEnablePut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.FirewallControlSchemasEnableRuleSchema();
          opts.body.filter = new S1MgmtApi.FirewallControlSchemasRuleDeleteSchemaFilter();
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.nameContains = [""];
          opts.body.filter.serviceContains = [""];
          opts.body.filter.actions = ["Allow"];
          opts.body.filter.tagIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.directions = ["any"];
          opts.body.filter.protocols = [""];
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.query = "";
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.osTypes = ["windows"];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.scopes = ["site"];
          opts.body.filter.statuses = ["Enabled"];
          opts.body.filter.protocolContains = [""];
          opts.body.filter.applicationContains = [""];
          opts.body.filter.locationIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.createdAtBetween = "1514978764288-1514978999999";
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.name = "";
          opts.body.filter.tagNameContains = [""];
          opts.body.filter.applications = [""];
          opts.body.data = new S1MgmtApi.DeviceControlSchemasEnableRuleSchemaData();
          opts.body.data.status = "Enabled";

          instance.webApiFirewallControlEnablePut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFirewallControlExportGet', function() {
        it('should call webApiFirewallControlExportGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFirewallControlExportGet call
          /*
          var opts = {};
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.nameContains = ["nameContains_example"];
          opts.serviceContains = ["serviceContains_example"];
          opts.actions = ["actions_example"];
          opts.tagIds = ["tagIds_example"];
          opts.directions = ["directions_example"];
          opts.protocols = ["protocols_example"];
          opts.ids = ["ids_example"];
          opts.query = "query_example";
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.osTypes = ["osTypes_example"];
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.scopes = ["scopes_example"];
          opts.statuses = ["statuses_example"];
          opts.protocolContains = ["protocolContains_example"];
          opts.applicationContains = ["applicationContains_example"];
          opts.locationIds = ["locationIds_example"];
          opts.tenant = true;
          opts.createdAtBetween = "createdAtBetween_example";
          opts.groupIds = ["groupIds_example"];
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.name = "name_example";
          opts.tagNameContains = ["tagNameContains_example"];
          opts.applications = ["applications_example"];

          instance.webApiFirewallControlExportGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFirewallControlGet', function() {
        it('should call webApiFirewallControlGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFirewallControlGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "null";
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.nameContains = ["nameContains_example"];
          opts.serviceContains = ["serviceContains_example"];
          opts.actions = ["actions_example"];
          opts.tagIds = ["tagIds_example"];
          opts.directions = ["directions_example"];
          opts.protocols = ["protocols_example"];
          opts.query = "query_example";
          opts.ids = ["ids_example"];
          opts.countOnly = false;
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.limit = 10;
          opts.osTypes = ["osTypes_example"];
          opts.skip = 56;
          opts.skipCount = null;
          opts.sortOrder = "null";
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.scopes = ["scopes_example"];
          opts.statuses = ["statuses_example"];
          opts.protocolContains = ["protocolContains_example"];
          opts.applicationContains = ["applicationContains_example"];
          opts.disablePagination = true;
          opts.locationIds = ["locationIds_example"];
          opts.sortBy = "null";
          opts.tenant = true;
          opts.createdAtBetween = "createdAtBetween_example";
          opts.groupIds = ["groupIds_example"];
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.name = "name_example";
          opts.tagNameContains = ["tagNameContains_example"];
          opts.applications = ["applications_example"];

          instance.webApiFirewallControlGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200Data);
                expect(data.scopeId).to.be.a('string');
                expect(data.scopeId).to.be("225494730938493804");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.productId).to.be.a('string');
                expect(data.productId).to.be("");
                expect(data.application).to.be.a(Object);
                expect(data.application).to.be();
                expect(data.remotePort).to.be.a(Object);
                expect(data.remotePort).to.be();
                {
                  let dataCtr = data.tagIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("225494730938493804");
                  }
                }
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                {
                  let dataCtr = data.tagNames;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.remoteHost).to.be.a(Object);
                expect(data.remoteHost).to.be();
                expect(data.creatorId).to.be.a('string');
                expect(data.creatorId).to.be("225494730938493804");
                {
                  let dataCtr = data.osTypes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("windows");
                  }
                }
                expect(data.localHost).to.be.a(Object);
                expect(data.localHost).to.be();
                expect(data.location).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200Location);
                      {
                    let dataCtr = data.location.values;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200LocationValues);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("office1");
                      expect(data.scope).to.be.a('string');
                      expect(data.scope).to.be("site");
                      expect(data.id).to.be.a('string');
                      expect(data.id).to.be("225494730938493804");
      
                            }
                  }
                  expect(data.location.type).to.be.a('string');
                  expect(data.location.type).to.be("all");
                {
                  let dataCtr = data.remoteHosts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200RemoteHosts);
                    {
                      let dataCtr = data.values;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("any");
    
                          }
                }
                expect(data.protocol).to.be.a('string');
                expect(data.protocol).to.be("");
                expect(data.localPort).to.be.a(Object);
                expect(data.localPort).to.be();
                expect(data.ruleCategory).to.be.a('string');
                expect(data.ruleCategory).to.be("firewall");
                expect(data.scope).to.be.a('string');
                expect(data.scope).to.be("site");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.action).to.be.a('string');
                expect(data.action).to.be("Allow");
                expect(data.order).to.be.a('number');
                expect(data.order).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.editable).to.be.a('boolean');
                expect(data.editable).to.be(false);
                expect(data.creator).to.be.a('string');
                expect(data.creator).to.be("");
                expect(data.osType).to.be.a('string');
                expect(data.osType).to.be("windows");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200Tags);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("225494730938493804");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("My Tag");
    
                          }
                }
                expect(data.direction).to.be.a('string');
                expect(data.direction).to.be("any");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("Enabled");
                expect(data.tag).to.be.a('string');
                expect(data.tag).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFirewallControlImportPost', function() {
        it('should call webApiFirewallControlImportPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFirewallControlImportPost call and complete the assertions
          /*
          var file = "/path/to/file.txt";
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.groupIds = ["groupIds_example"];
          opts.tenant = true;
          opts.siteIds = ["siteIds_example"];

          instance.webApiFirewallControlImportPost(file, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFirewallControlMoveRulesPost', function() {
        it('should call webApiFirewallControlMoveRulesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFirewallControlMoveRulesPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.FirewallControlSchemasCopyRuleSchema();
          opts.body.filter = new S1MgmtApi.FirewallControlSchemasRuleDeleteSchemaFilter();
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.nameContains = [""];
          opts.body.filter.serviceContains = [""];
          opts.body.filter.actions = ["Allow"];
          opts.body.filter.tagIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.directions = ["any"];
          opts.body.filter.protocols = [""];
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.query = "";
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.osTypes = ["windows"];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.scopes = ["site"];
          opts.body.filter.statuses = ["Enabled"];
          opts.body.filter.protocolContains = [""];
          opts.body.filter.applicationContains = [""];
          opts.body.filter.locationIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.createdAtBetween = "1514978764288-1514978999999";
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.name = "";
          opts.body.filter.tagNameContains = [""];
          opts.body.filter.applications = [""];
          opts.body.data = [new S1MgmtApi.FirewallControlSchemasCopyRuleSchemaData()];
          opts.body.data[0].groupId = "225494730938493804";
          opts.body.data[0].siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data[0].accountIds = ["225494730938493804","225494730938493915"];
          opts.body.data[0].accountId = "225494730938493804";
          opts.body.data[0].siteId = "225494730938493804";
          opts.body.data[0].tenant = false;
          opts.body.data[0].groupIds = ["225494730938493804"];

          instance.webApiFirewallControlMoveRulesPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFirewallControlPost', function() {
        it('should call webApiFirewallControlPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFirewallControlPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.FirewallControlSchemasPostFirewallSchema();
          opts.body.filter = new S1MgmtApi.ExclusionsSchemasPostExclusionSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.FirewallControlSchemasPostFirewallSchemaData();
          opts.body.data.description = "";
          opts.body.data.action = "Allow";
          opts.body.data.name = "";
          opts.body.data.remotePort = new S1MgmtApi.FirewallControlSchemasPostFirewallSchemaDataRemotePort();
          opts.body.data.remotePort.values = [80,443];
          opts.body.data.remotePort.type = "any";
          opts.body.data.protocol = "";
          opts.body.data.osType = "windows";
          opts.body.data.localPort = new S1MgmtApi.FirewallControlSchemasPostFirewallSchemaDataLocalPort();
          opts.body.data.localPort.values = [80,443];
          opts.body.data.localPort.type = "any";
          opts.body.data.remoteHost = new S1MgmtApi.FirewallControlSchemasPostFirewallSchemaDataRemoteHost();
          opts.body.data.remoteHost.values = [""];
          opts.body.data.remoteHost.type = "any";
          opts.body.data.tagIds = ["225494730938493804","225494730938493915"];
          opts.body.data.osTypes = ["windows"];
          opts.body.data.localHost = new S1MgmtApi.FirewallControlSchemasPostFirewallSchemaDataLocalHost();
          opts.body.data.localHost.values = [""];
          opts.body.data.localHost.type = "any";
          opts.body.data.direction = "any";
          opts.body.data.status = "Enabled";
          opts.body.data.application = new S1MgmtApi.FirewallControlSchemasPostFirewallSchemaDataApplication();
          opts.body.data.application.values = [""];
          opts.body.data.application.type = "any";
          opts.body.data.location = new S1MgmtApi.FirewallControlSchemasPostFirewallSchemaDataLocation();
          opts.body.data.location.values = [new S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200LocationValues()];
          opts.body.data.location.values[0].name = "office1";
          opts.body.data.location.values[0].scope = "site";
          opts.body.data.location.values[0].id = "225494730938493804";
          opts.body.data.location.type = "all";
          opts.body.data.tag = "";
          opts.body.data.remoteHosts = [new S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200RemoteHosts()];
          opts.body.data.remoteHosts[0].values = [""];
          opts.body.data.remoteHosts[0].type = "any";

          instance.webApiFirewallControlPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchema200Data);
                  expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.productId).to.be.a('string');
              expect(data.data.productId).to.be("");
              expect(data.data.application).to.be.a(Object);
              expect(data.data.application).to.be();
              expect(data.data.remotePort).to.be.a(Object);
              expect(data.data.remotePort).to.be();
              {
                let dataCtr = data.data.tagIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("225494730938493804");
                }
              }
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              {
                let dataCtr = data.data.tagNames;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.remoteHost).to.be.a(Object);
              expect(data.data.remoteHost).to.be();
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              {
                let dataCtr = data.data.osTypes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("windows");
                }
              }
              expect(data.data.localHost).to.be.a(Object);
              expect(data.data.localHost).to.be();
              expect(data.data.location).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200Location);
                    {
                  let dataCtr = data.data.location.values;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200LocationValues);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("office1");
                    expect(data.scope).to.be.a('string');
                    expect(data.scope).to.be("site");
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("225494730938493804");
    
                          }
                }
                expect(data.data.location.type).to.be.a('string');
                expect(data.data.location.type).to.be("all");
              {
                let dataCtr = data.data.remoteHosts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200RemoteHosts);
                  {
                    let dataCtr = data.values;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("any");
  
                        }
              }
              expect(data.data.protocol).to.be.a('string');
              expect(data.data.protocol).to.be("");
              expect(data.data.localPort).to.be.a(Object);
              expect(data.data.localPort).to.be();
              expect(data.data.ruleCategory).to.be.a('string');
              expect(data.data.ruleCategory).to.be("firewall");
              expect(data.data.scope).to.be.a('string');
              expect(data.data.scope).to.be("site");
              expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("");
              expect(data.data.action).to.be.a('string');
              expect(data.data.action).to.be("Allow");
              expect(data.data.order).to.be.a('number');
              expect(data.data.order).to.be(0);
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.editable).to.be.a('boolean');
              expect(data.data.editable).to.be(false);
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("");
              expect(data.data.osType).to.be.a('string');
              expect(data.data.osType).to.be("windows");
              {
                let dataCtr = data.data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200Tags);
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("225494730938493804");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("My Tag");
  
                        }
              }
              expect(data.data.direction).to.be.a('string');
              expect(data.data.direction).to.be("any");
              expect(data.data.status).to.be.a('string');
              expect(data.data.status).to.be("Enabled");
              expect(data.data.tag).to.be.a('string');
              expect(data.data.tag).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFirewallControlProtocolsGet', function() {
        it('should call webApiFirewallControlProtocolsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFirewallControlProtocolsGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "null";
          opts.skip = 56;
          opts.skipCount = null;
          opts.disablePagination = true;
          opts.sortOrder = "null";
          opts.sortBy = "null";
          opts.query = "query_example";
          opts.countOnly = false;
          opts.limit = 10;

          instance.webApiFirewallControlProtocolsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasProtocolSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasProtocolSchemaMany200Data);
                {
                  let dataCtr = data.siteIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("225494730938493804");
                  }
                }
                {
                  let dataCtr = data.accountIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("225494730938493804");
                  }
                }
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
                expect(data.tenant).to.be.a('boolean');
                expect(data.tenant).to.be(false);
                {
                  let dataCtr = data.groupIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("225494730938493804");
                  }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFirewallControlRemoveTagsPost', function() {
        it('should call webApiFirewallControlRemoveTagsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFirewallControlRemoveTagsPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.FirewallControlSchemasChangeRulesTagsSchema();
          opts.body.filter = new S1MgmtApi.FirewallControlSchemasRuleDeleteSchemaFilter();
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.nameContains = [""];
          opts.body.filter.serviceContains = [""];
          opts.body.filter.actions = ["Allow"];
          opts.body.filter.tagIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.directions = ["any"];
          opts.body.filter.protocols = [""];
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.query = "";
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.osTypes = ["windows"];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.scopes = ["site"];
          opts.body.filter.statuses = ["Enabled"];
          opts.body.filter.protocolContains = [""];
          opts.body.filter.applicationContains = [""];
          opts.body.filter.locationIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.createdAtBetween = "1514978764288-1514978999999";
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.name = "";
          opts.body.filter.tagNameContains = [""];
          opts.body.filter.applications = [""];
          opts.body.data = new S1MgmtApi.FirewallControlSchemasChangeRulesTagsSchemaData();
          opts.body.data.tagIds = ["225494730938493804","225494730938493915"];

          instance.webApiFirewallControlRemoveTagsPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFirewallControlReorderPut', function() {
        it('should call webApiFirewallControlReorderPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFirewallControlReorderPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.FirewallControlSchemasReorderSchema();
          opts.body.filter = new S1MgmtApi.FirewallControlSchemasReorderSchemaFilter();
          opts.body.filter.osTypes = ["windows"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.data = [new S1MgmtApi.DeviceControlSchemasReorderSchemaData()];
          opts.body.data[0].order = 1;
          opts.body.data[0].id = "225494730938493804";

          instance.webApiFirewallControlReorderPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFirewallControlSetLocationPost', function() {
        it('should call webApiFirewallControlSetLocationPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFirewallControlSetLocationPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.FirewallControlSchemasSetLocationSchema();
          opts.body.filter = new S1MgmtApi.FirewallControlSchemasRuleDeleteSchemaFilter();
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.nameContains = [""];
          opts.body.filter.serviceContains = [""];
          opts.body.filter.actions = ["Allow"];
          opts.body.filter.tagIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.directions = ["any"];
          opts.body.filter.protocols = [""];
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.query = "";
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.osTypes = ["windows"];
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.scopes = ["site"];
          opts.body.filter.statuses = ["Enabled"];
          opts.body.filter.protocolContains = [""];
          opts.body.filter.applicationContains = [""];
          opts.body.filter.locationIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.createdAtBetween = "1514978764288-1514978999999";
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.name = "";
          opts.body.filter.tagNameContains = [""];
          opts.body.filter.applications = [""];
          opts.body.data = new S1MgmtApi.FirewallControlSchemasSetLocationSchemaData();
          opts.body.data.values = [new S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200LocationValues()];
          opts.body.data.values[0].name = "office1";
          opts.body.data.values[0].scope = "site";
          opts.body.data.values[0].id = "225494730938493804";
          opts.body.data.type = "all";

          instance.webApiFirewallControlSetLocationPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFirewallControlTagRulestagIdGet', function() {
        it('should call webApiFirewallControlTagRulestagIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFirewallControlTagRulestagIdGet call and complete the assertions
          /*
          var tagId = "tagId_example";
          var opts = {};
          opts.cursor = "null";
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.nameContains = ["nameContains_example"];
          opts.serviceContains = ["serviceContains_example"];
          opts.actions = ["actions_example"];
          opts.tagIds = ["tagIds_example"];
          opts.directions = ["directions_example"];
          opts.protocols = ["protocols_example"];
          opts.query = "query_example";
          opts.ids = ["ids_example"];
          opts.countOnly = false;
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.limit = 10;
          opts.osTypes = ["osTypes_example"];
          opts.skip = 56;
          opts.skipCount = null;
          opts.sortOrder = "null";
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.scopes = ["scopes_example"];
          opts.statuses = ["statuses_example"];
          opts.protocolContains = ["protocolContains_example"];
          opts.applicationContains = ["applicationContains_example"];
          opts.disablePagination = true;
          opts.locationIds = ["locationIds_example"];
          opts.sortBy = "null";
          opts.tenant = true;
          opts.createdAtBetween = "createdAtBetween_example";
          opts.groupIds = ["groupIds_example"];
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.name = "name_example";
          opts.tagNameContains = ["tagNameContains_example"];
          opts.applications = ["applications_example"];

          instance.webApiFirewallControlTagRulestagIdGet(tagId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200Data);
                expect(data.scopeId).to.be.a('string');
                expect(data.scopeId).to.be("225494730938493804");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.productId).to.be.a('string');
                expect(data.productId).to.be("");
                expect(data.application).to.be.a(Object);
                expect(data.application).to.be();
                expect(data.remotePort).to.be.a(Object);
                expect(data.remotePort).to.be();
                {
                  let dataCtr = data.tagIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("225494730938493804");
                  }
                }
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                {
                  let dataCtr = data.tagNames;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.remoteHost).to.be.a(Object);
                expect(data.remoteHost).to.be();
                expect(data.creatorId).to.be.a('string');
                expect(data.creatorId).to.be("225494730938493804");
                {
                  let dataCtr = data.osTypes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("windows");
                  }
                }
                expect(data.localHost).to.be.a(Object);
                expect(data.localHost).to.be();
                expect(data.location).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200Location);
                      {
                    let dataCtr = data.location.values;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200LocationValues);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("office1");
                      expect(data.scope).to.be.a('string');
                      expect(data.scope).to.be("site");
                      expect(data.id).to.be.a('string');
                      expect(data.id).to.be("225494730938493804");
      
                            }
                  }
                  expect(data.location.type).to.be.a('string');
                  expect(data.location.type).to.be("all");
                {
                  let dataCtr = data.remoteHosts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200RemoteHosts);
                    {
                      let dataCtr = data.values;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("any");
    
                          }
                }
                expect(data.protocol).to.be.a('string');
                expect(data.protocol).to.be("");
                expect(data.localPort).to.be.a(Object);
                expect(data.localPort).to.be();
                expect(data.ruleCategory).to.be.a('string');
                expect(data.ruleCategory).to.be("firewall");
                expect(data.scope).to.be.a('string');
                expect(data.scope).to.be("site");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.action).to.be.a('string');
                expect(data.action).to.be("Allow");
                expect(data.order).to.be.a('number');
                expect(data.order).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.editable).to.be.a('boolean');
                expect(data.editable).to.be(false);
                expect(data.creator).to.be.a('string');
                expect(data.creator).to.be("");
                expect(data.osType).to.be.a('string');
                expect(data.osType).to.be("windows");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200Tags);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("225494730938493804");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("My Tag");
    
                          }
                }
                expect(data.direction).to.be.a('string');
                expect(data.direction).to.be("any");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("Enabled");
                expect(data.tag).to.be.a('string');
                expect(data.tag).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFirewallControlfirewallRuleCategoryPut', function() {
        it('should call webApiFirewallControlfirewallRuleCategoryPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFirewallControlfirewallRuleCategoryPut call and complete the assertions
          /*
          var firewallRuleCategory = "firewallRuleCategory_example";
          var opts = {};
          opts.body = new S1MgmtApi.FirewallControlSchemasPutFirewallSchema();
          opts.body.data = new S1MgmtApi.FirewallControlSchemasPutFirewallSchemaData();
          opts.body.data.description = "";
          opts.body.data.action = "Allow";
          opts.body.data.name = "";
          opts.body.data.remotePort = new S1MgmtApi.FirewallControlSchemasPostFirewallSchemaDataRemotePort();
          opts.body.data.remotePort.values = [80,443];
          opts.body.data.remotePort.type = "any";
          opts.body.data.protocol = "";
          opts.body.data.osType = "windows";
          opts.body.data.localPort = new S1MgmtApi.FirewallControlSchemasPostFirewallSchemaDataLocalPort();
          opts.body.data.localPort.values = [80,443];
          opts.body.data.localPort.type = "any";
          opts.body.data.remoteHost = new S1MgmtApi.FirewallControlSchemasPostFirewallSchemaDataRemoteHost();
          opts.body.data.remoteHost.values = [""];
          opts.body.data.remoteHost.type = "any";
          opts.body.data.tagIds = ["225494730938493804","225494730938493915"];
          opts.body.data.osTypes = ["windows"];
          opts.body.data.localHost = new S1MgmtApi.FirewallControlSchemasPostFirewallSchemaDataLocalHost();
          opts.body.data.localHost.values = [""];
          opts.body.data.localHost.type = "any";
          opts.body.data.direction = "any";
          opts.body.data.status = "Enabled";
          opts.body.data.application = new S1MgmtApi.FirewallControlSchemasPostFirewallSchemaDataApplication();
          opts.body.data.application.values = [""];
          opts.body.data.application.type = "any";
          opts.body.data.location = new S1MgmtApi.FirewallControlSchemasPostFirewallSchemaDataLocation();
          opts.body.data.location.values = [new S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200LocationValues()];
          opts.body.data.location.values[0].name = "office1";
          opts.body.data.location.values[0].scope = "site";
          opts.body.data.location.values[0].id = "225494730938493804";
          opts.body.data.location.type = "all";
          opts.body.data.tag = "";
          opts.body.data.remoteHosts = [new S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200RemoteHosts()];
          opts.body.data.remoteHosts[0].values = [""];
          opts.body.data.remoteHosts[0].type = "any";

          instance.webApiFirewallControlfirewallRuleCategoryPut(firewallRuleCategory, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchema200Data);
                  expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.productId).to.be.a('string');
              expect(data.data.productId).to.be("");
              expect(data.data.application).to.be.a(Object);
              expect(data.data.application).to.be();
              expect(data.data.remotePort).to.be.a(Object);
              expect(data.data.remotePort).to.be();
              {
                let dataCtr = data.data.tagIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("225494730938493804");
                }
              }
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              {
                let dataCtr = data.data.tagNames;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.remoteHost).to.be.a(Object);
              expect(data.data.remoteHost).to.be();
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              {
                let dataCtr = data.data.osTypes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("windows");
                }
              }
              expect(data.data.localHost).to.be.a(Object);
              expect(data.data.localHost).to.be();
              expect(data.data.location).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200Location);
                    {
                  let dataCtr = data.data.location.values;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200LocationValues);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("office1");
                    expect(data.scope).to.be.a('string');
                    expect(data.scope).to.be("site");
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("225494730938493804");
    
                          }
                }
                expect(data.data.location.type).to.be.a('string');
                expect(data.data.location.type).to.be("all");
              {
                let dataCtr = data.data.remoteHosts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200RemoteHosts);
                  {
                    let dataCtr = data.values;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("any");
  
                        }
              }
              expect(data.data.protocol).to.be.a('string');
              expect(data.data.protocol).to.be("");
              expect(data.data.localPort).to.be.a(Object);
              expect(data.data.localPort).to.be();
              expect(data.data.ruleCategory).to.be.a('string');
              expect(data.data.ruleCategory).to.be("firewall");
              expect(data.data.scope).to.be.a('string');
              expect(data.data.scope).to.be("site");
              expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("");
              expect(data.data.action).to.be.a('string');
              expect(data.data.action).to.be("Allow");
              expect(data.data.order).to.be.a('number');
              expect(data.data.order).to.be(0);
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.editable).to.be.a('boolean');
              expect(data.data.editable).to.be(false);
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("");
              expect(data.data.osType).to.be.a('string');
              expect(data.data.osType).to.be("windows");
              {
                let dataCtr = data.data.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.FirewallControlSchemasFirewallSchemaMany200Tags);
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("225494730938493804");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("My Tag");
  
                        }
              }
              expect(data.data.direction).to.be.a('string');
              expect(data.data.direction).to.be("any");
              expect(data.data.status).to.be.a('string');
              expect(data.data.status).to.be("Enabled");
              expect(data.data.tag).to.be.a('string');
              expect(data.data.tag).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
