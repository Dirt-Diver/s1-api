/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.TasksApi();
  });

  describe('(package)', function() {
    describe('TasksApi', function() {
      describe('webApiTasksConfigurationExplicitSubscopesGet', function() {
        it('should call webApiTasksConfigurationExplicitSubscopesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiTasksConfigurationExplicitSubscopesGet call and complete the assertions
          /*
          var taskType = "taskType_example";
          var opts = {};
          opts.cursor = "null";
          opts.skip = 56;
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.query = "query_example";
          opts.skipCount = null;
          opts.sortOrder = "null";
          opts.sortBy = "null";
          opts.tenant = true;
          opts.groupIds = ["groupIds_example"];
          opts.countOnly = false;
          opts.limit = 10;

          instance.webApiTasksConfigurationExplicitSubscopesGet(taskType, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.TasksSchemasSubscopeFullHierarchySchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.TasksSchemasSubscopeFullHierarchySchemaMany200Data);
                expect(data.groupId).to.be.a('string');
                expect(data.groupId).to.be("225494730938493804");
                expect(data.siteName).to.be.a('string');
                expect(data.siteName).to.be("");
                expect(data.accountName).to.be.a('string');
                expect(data.accountName).to.be("");
                expect(data.accountId).to.be.a('string');
                expect(data.accountId).to.be("225494730938493804");
                expect(data.groupName).to.be.a('string');
                expect(data.groupName).to.be("");
                expect(data.siteId).to.be.a('string');
                expect(data.siteId).to.be("225494730938493804");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiTasksConfigurationGet', function() {
        it('should call webApiTasksConfigurationGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiTasksConfigurationGet call and complete the assertions
          /*
          var taskType = "taskType_example";
          var opts = {};
          opts.cursor = "null";
          opts.skip = 56;
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.skipCount = null;
          opts.sortOrder = "null";
          opts.sortBy = "null";
          opts.tenant = true;
          opts.groupIds = ["groupIds_example"];
          opts.countOnly = false;
          opts.limit = 10;

          instance.webApiTasksConfigurationGet(taskType, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.TasksSchemasResponseTaskSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.TasksSchemasResponseTaskSchema200Data);
                  {
                let dataCtr = data.data.maintenanceWindowsByDay;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }
              expect(data.data.maxConcurrent).to.be.a('number');
              expect(data.data.maxConcurrent).to.be(0);
              expect(data.data.maintenanceConfigUpdatedAt).to.be.a(Date);
              expect(data.data.maintenanceConfigUpdatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.inheritParentMaintenanceConfig).to.be.a('boolean');
              expect(data.data.inheritParentMaintenanceConfig).to.be(false);
              expect(data.data.taskType).to.be.a('string');
              expect(data.data.taskType).to.be("agents_upgrade");
              expect(data.data.timezoneGmt).to.be.a('string');
              expect(data.data.timezoneGmt).to.be("");
              expect(data.data.parentMaxConcurrent).to.be.a('number');
              expect(data.data.parentMaxConcurrent).to.be(0);
              expect(data.data.concurrencyConfigUpdatedAt).to.be.a(Date);
              expect(data.data.concurrencyConfigUpdatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.inheritParentConcurrencyConfig).to.be.a('boolean');
              expect(data.data.inheritParentConcurrencyConfig).to.be(false);
              expect(data.data.concurrencyConfigUpdatedBy).to.be.a('string');
              expect(data.data.concurrencyConfigUpdatedBy).to.be("");
              expect(data.data.maintenanceConfigUpdatedBy).to.be.a('string');
              expect(data.data.maintenanceConfigUpdatedBy).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiTasksConfigurationHasExplicitSubscopeGet', function() {
        it('should call webApiTasksConfigurationHasExplicitSubscopeGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiTasksConfigurationHasExplicitSubscopeGet call and complete the assertions
          /*
          var taskType = "taskType_example";
          var opts = {};
          opts.cursor = "null";
          opts.skip = 56;
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.skipCount = null;
          opts.sortOrder = "null";
          opts.sortBy = "null";
          opts.tenant = true;
          opts.groupIds = ["groupIds_example"];
          opts.countOnly = false;
          opts.limit = 10;

          instance.webApiTasksConfigurationHasExplicitSubscopeGet(taskType, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.TasksSchemasBooleanSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.TasksSchemasBooleanSchema200Data);
                  expect(data.data.flag).to.be.a('boolean');
              expect(data.data.flag).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiTasksConfigurationPut', function() {
        it('should call webApiTasksConfigurationPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiTasksConfigurationPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.TasksSchemasPutTaskSchema();
          opts.body.filter = new S1MgmtApi.TasksSchemasPutTaskSchemaFilter();
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.taskType = "agents_upgrade";
          opts.body.filter.tenant = false;
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.TasksSchemasPutTaskSchemaData();
          opts.body.data.maintenanceWindowsByDay = {key: };
          opts.body.data.maxConcurrent = 0;
          opts.body.data.inheritParentMaintenanceConfig = false;
          opts.body.data.timezoneGmt = "";
          opts.body.data.inheritParentConcurrencyConfig = false;

          instance.webApiTasksConfigurationPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.TasksSchemasResponseTaskSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.TasksSchemasResponseTaskSchema200Data);
                  {
                let dataCtr = data.data.maintenanceWindowsByDay;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }
              expect(data.data.maxConcurrent).to.be.a('number');
              expect(data.data.maxConcurrent).to.be(0);
              expect(data.data.maintenanceConfigUpdatedAt).to.be.a(Date);
              expect(data.data.maintenanceConfigUpdatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.inheritParentMaintenanceConfig).to.be.a('boolean');
              expect(data.data.inheritParentMaintenanceConfig).to.be(false);
              expect(data.data.taskType).to.be.a('string');
              expect(data.data.taskType).to.be("agents_upgrade");
              expect(data.data.timezoneGmt).to.be.a('string');
              expect(data.data.timezoneGmt).to.be("");
              expect(data.data.parentMaxConcurrent).to.be.a('number');
              expect(data.data.parentMaxConcurrent).to.be(0);
              expect(data.data.concurrencyConfigUpdatedAt).to.be.a(Date);
              expect(data.data.concurrencyConfigUpdatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.inheritParentConcurrencyConfig).to.be.a('boolean');
              expect(data.data.inheritParentConcurrencyConfig).to.be(false);
              expect(data.data.concurrencyConfigUpdatedBy).to.be.a('string');
              expect(data.data.concurrencyConfigUpdatedBy).to.be("");
              expect(data.data.maintenanceConfigUpdatedBy).to.be.a('string');
              expect(data.data.maintenanceConfigUpdatedBy).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
