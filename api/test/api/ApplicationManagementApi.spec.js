/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.ApplicationManagementApi();
  });

  describe('(package)', function() {
    describe('ApplicationManagementApi', function() {
      describe('webApiApplicationManagementInventoryApplicationsGet', function() {
        it('should call webApiApplicationManagementInventoryApplicationsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiApplicationManagementInventoryApplicationsGet call and complete the assertions
          /*
          var ids = ["ids_example"];

          instance.webApiApplicationManagementInventoryApplicationsGet(ids, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasAgentApplicationsSchemaMany200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasAgentApplicationsSchemaMany200Data);
                expect(data.installedDate).to.be.a(Date);
                expect(data.installedDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.publisher).to.be.a('string');
                expect(data.publisher).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.version).to.be.a('string');
                expect(data.version).to.be("");
                expect(data.size).to.be.a('number');
                expect(data.size).to.be(0);

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiApplicationManagementInventoryEndpointsExportCsvGet', function() {
        it('should call webApiApplicationManagementInventoryEndpointsExportCsvGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiApplicationManagementInventoryEndpointsExportCsvGet call
          /*
          var applicationName = "applicationName_example";
          var applicationVendor = "applicationVendor_example";
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.versions = ["versions_example"];
          opts.osArchitectures = ["osArchitectures_example"];
          opts.osTypes = ["osTypes_example"];
          opts.osVersions = ["osVersions_example"];
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiApplicationManagementInventoryEndpointsExportCsvGet(applicationName, applicationVendor, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiApplicationManagementInventoryEndpointsGet', function() {
        it('should call webApiApplicationManagementInventoryEndpointsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiApplicationManagementInventoryEndpointsGet call and complete the assertions
          /*
          var applicationName = "applicationName_example";
          var applicationVendor = "applicationVendor_example";
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.sortBy = "null";
          opts.versions = ["versions_example"];
          opts.limit = 10;
          opts.cursor = "null";
          opts.osArchitectures = ["osArchitectures_example"];
          opts.osTypes = ["osTypes_example"];
          opts.sortOrder = "null";
          opts.osVersions = ["osVersions_example"];
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.skipCount = null;
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.skip = 56;
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.countOnly = false;
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiApplicationManagementInventoryEndpointsGet(applicationName, applicationVendor, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasApplicationInventoryEndpointsSchemaMany200);
            expect(data.pagination).to.be.a(S1MgmtApi.V21RulesSchemasRuleViewSchemaMany200Pagination);
                  expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
              expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasApplicationInventoryEndpointsSchemaMany200Data);
                expect(data.osType).to.be.a('string');
                expect(data.osType).to.be("linux");
                expect(data.coreCount).to.be.a('number');
                expect(data.coreCount).to.be(0);
                expect(data.endpointName).to.be.a('string');
                expect(data.endpointName).to.be("");
                expect(data.endpointUuid).to.be.a('string');
                expect(data.endpointUuid).to.be("");
                expect(data.fileSize).to.be.a('number');
                expect(data.fileSize).to.be(0);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.groupName).to.be.a('string');
                expect(data.groupName).to.be("");
                expect(data.siteName).to.be.a('string');
                expect(data.siteName).to.be("");
                expect(data.cpe).to.be.a(Object);
                expect(data.cpe).to.be();
                expect(data.accountName).to.be.a('string');
                expect(data.accountName).to.be("");
                expect(data.endpointId).to.be.a('string');
                expect(data.endpointId).to.be("");
                expect(data.applicationInstallationDate).to.be.a(Date);
                expect(data.applicationInstallationDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.cpuCount).to.be.a('number');
                expect(data.cpuCount).to.be(0);
                expect(data.version).to.be.a('string');
                expect(data.version).to.be("");
                expect(data.osName).to.be.a('string');
                expect(data.osName).to.be("");
                expect(data.applicationName).to.be.a('string');
                expect(data.applicationName).to.be("");
                expect(data.applicationInstallationPath).to.be.a('string');
                expect(data.applicationInstallationPath).to.be("");
                expect(data.detectionDate).to.be.a(Date);
                expect(data.detectionDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.osArch).to.be.a('string');
                expect(data.osArch).to.be("");
                expect(data.osVersion).to.be.a('string');
                expect(data.osVersion).to.be("");
                expect(data.endpointType).to.be.a('string');
                expect(data.endpointType).to.be("");

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiApplicationManagementInventoryExportCsvGet', function() {
        it('should call webApiApplicationManagementInventoryExportCsvGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiApplicationManagementInventoryExportCsvGet call
          /*
          var opts = {};
          opts.osArchitectures = ["osArchitectures_example"];
          opts.vendors = ["vendors_example"];
          opts.osTypes = ["osTypes_example"];
          opts.osVersions = ["osVersions_example"];
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.nameContains = ["nameContains_example"];
          opts.osVersionContains = ["osVersionContains_example"];
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.vendorContains = ["vendorContains_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiApplicationManagementInventoryExportCsvGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiApplicationManagementInventoryGet', function() {
        it('should call webApiApplicationManagementInventoryGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiApplicationManagementInventoryGet call and complete the assertions
          /*
          var opts = {};
          opts.sortBy = "null";
          opts.limit = 10;
          opts.cursor = "null";
          opts.osArchitectures = ["osArchitectures_example"];
          opts.vendors = ["vendors_example"];
          opts.osTypes = ["osTypes_example"];
          opts.sortOrder = "null";
          opts.osVersions = ["osVersions_example"];
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.skipCount = null;
          opts.nameContains = ["nameContains_example"];
          opts.skip = 56;
          opts.osVersionContains = ["osVersionContains_example"];
          opts.countOnly = false;
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.vendorContains = ["vendorContains_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiApplicationManagementInventoryGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasApplicationInventorySchemaMany200);
            expect(data.pagination).to.be.a(S1MgmtApi.V21RulesSchemasRuleViewSchemaMany200Pagination);
                  expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
              expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasApplicationInventorySchemaMany200Data);
                expect(data.estimate).to.be.a('boolean');
                expect(data.estimate).to.be(false);
                expect(data.applicationName).to.be.a('string');
                expect(data.applicationName).to.be("");
                expect(data.applicationVersionsCount).to.be.a('number');
                expect(data.applicationVersionsCount).to.be(0);
                expect(data.applicationVendor).to.be.a('string');
                expect(data.applicationVendor).to.be("");
                expect(data.endpointsCount).to.be.a('number');
                expect(data.endpointsCount).to.be(0);

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiApplicationManagementRisksAggregatedApplicationsExportCsvGet', function() {
        it('should call webApiApplicationManagementRisksAggregatedApplicationsExportCsvGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiApplicationManagementRisksAggregatedApplicationsExportCsvGet call
          /*
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.domains = ["domains_example"];
          opts.vendors = ["vendors_example"];
          opts.exploitedInTheWild = ["exploitedInTheWild_example"];
          opts.osTypes = ["osTypes_example"];
          opts.highestSeverities = ["highestSeverities_example"];
          opts.exploitCodeMaturity = ["exploitCodeMaturity_example"];
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.daysFromDetection = 56;
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.cveIdContains = ["cveIdContains_example"];
          opts.nameContains = ["nameContains_example"];
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.remediationLevels = ["remediationLevels_example"];
          opts.applicationTypes = ["applicationTypes_example"];
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.endpointTypes = ["endpointTypes_example"];
          opts.vendorContains = ["vendorContains_example"];
          opts.mostCommonStatuses = ["mostCommonStatuses_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiApplicationManagementRisksAggregatedApplicationsExportCsvGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiApplicationManagementRisksAggregatedApplicationsGet', function() {
        it('should call webApiApplicationManagementRisksAggregatedApplicationsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiApplicationManagementRisksAggregatedApplicationsGet call and complete the assertions
          /*
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.sortBy = "null";
          opts.domains = ["domains_example"];
          opts.limit = 10;
          opts.cursor = "null";
          opts.vendors = ["vendors_example"];
          opts.exploitedInTheWild = ["exploitedInTheWild_example"];
          opts.osTypes = ["osTypes_example"];
          opts.highestSeverities = ["highestSeverities_example"];
          opts.sortOrder = "null";
          opts.exploitCodeMaturity = ["exploitCodeMaturity_example"];
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.daysFromDetection = 56;
          opts.skipCount = null;
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.cveIdContains = ["cveIdContains_example"];
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.nameContains = ["nameContains_example"];
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.skip = 56;
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.countOnly = false;
          opts.remediationLevels = ["remediationLevels_example"];
          opts.applicationTypes = ["applicationTypes_example"];
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.endpointTypes = ["endpointTypes_example"];
          opts.vendorContains = ["vendorContains_example"];
          opts.mostCommonStatuses = ["mostCommonStatuses_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiApplicationManagementRisksAggregatedApplicationsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRisksByAggregatedApplicationsSchemaMany200);
            expect(data.pagination).to.be.a(S1MgmtApi.V21RulesSchemasRuleViewSchemaMany200Pagination);
                  expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
              expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRisksByAggregatedApplicationsSchemaMany200Data);
                expect(data.daysDetected).to.be.a(Object);
                expect(data.daysDetected).to.be();
                expect(data.cveCount).to.be.a('number');
                expect(data.cveCount).to.be(0);
                expect(data.endpointsWithoutTicket).to.be.a('number');
                expect(data.endpointsWithoutTicket).to.be(0);
                expect(data.detectionDate).to.be.a(Date);
                expect(data.detectionDate).to.be(2018-02-27T04:49:26.257525Z);
                {
                  let dataCtr = data.statuses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRisksByAggregatedApplicationsSchemaMany200Statuses);
                    expect(data.ticketCategory).to.be.a('string');
                    expect(data.ticketCategory).to.be("");
                    expect(data.count).to.be.a('number');
                    expect(data.count).to.be(0);
                    expect(data.label).to.be.a(Object);
                    expect(data.label).to.be();
                    expect(data.key).to.be.a(Object);
                    expect(data.key).to.be();
    
                          }
                }
                expect(data.estimate).to.be.a('boolean');
                expect(data.estimate).to.be(false);
                expect(data.highestSeverity).to.be.a('string');
                expect(data.highestSeverity).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.exploitedInTheWild).to.be.a('string');
                expect(data.exploitedInTheWild).to.be("Not Defined");
                expect(data.applicationType).to.be.a('string');
                expect(data.applicationType).to.be("");
                expect(data.highestRiskScore).to.be.a('string');
                expect(data.highestRiskScore).to.be("");
                expect(data.vendor).to.be.a('string');
                expect(data.vendor).to.be("");
                expect(data.remediationLevel).to.be.a('string');
                expect(data.remediationLevel).to.be("Official Fix");
                expect(data.versionCount).to.be.a('number');
                expect(data.versionCount).to.be(0);
                expect(data.exploitCodeMaturity).to.be.a('string');
                expect(data.exploitCodeMaturity).to.be("Not Defined");
                expect(data.highestNvdBaseScore).to.be.a('string');
                expect(data.highestNvdBaseScore).to.be("");
                expect(data.endpointCount).to.be.a('number');
                expect(data.endpointCount).to.be(0);

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiApplicationManagementRisksApplicationsExportCsvGet', function() {
        it('should call webApiApplicationManagementRisksApplicationsExportCsvGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiApplicationManagementRisksApplicationsExportCsvGet call
          /*
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.domains = ["domains_example"];
          opts.applicationContains = ["applicationContains_example"];
          opts.vendors = ["vendors_example"];
          opts.exploitedInTheWild = ["exploitedInTheWild_example"];
          opts.osTypes = ["osTypes_example"];
          opts.highestSeverities = ["highestSeverities_example"];
          opts.exploitCodeMaturity = ["exploitCodeMaturity_example"];
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.daysFromDetection = 56;
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.cveIdContains = ["cveIdContains_example"];
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.remediationLevels = ["remediationLevels_example"];
          opts.applicationTypes = ["applicationTypes_example"];
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.endpointTypes = ["endpointTypes_example"];
          opts.vendorContains = ["vendorContains_example"];
          opts.mostCommonStatuses = ["mostCommonStatuses_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiApplicationManagementRisksApplicationsExportCsvGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiApplicationManagementRisksApplicationsGet', function() {
        it('should call webApiApplicationManagementRisksApplicationsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiApplicationManagementRisksApplicationsGet call and complete the assertions
          /*
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.sortBy = "null";
          opts.domains = ["domains_example"];
          opts.limit = 10;
          opts.cursor = "null";
          opts.applicationContains = ["applicationContains_example"];
          opts.vendors = ["vendors_example"];
          opts.exploitedInTheWild = ["exploitedInTheWild_example"];
          opts.osTypes = ["osTypes_example"];
          opts.highestSeverities = ["highestSeverities_example"];
          opts.sortOrder = "null";
          opts.exploitCodeMaturity = ["exploitCodeMaturity_example"];
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.daysFromDetection = 56;
          opts.skipCount = null;
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.cveIdContains = ["cveIdContains_example"];
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.skip = 56;
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.countOnly = false;
          opts.remediationLevels = ["remediationLevels_example"];
          opts.applicationTypes = ["applicationTypes_example"];
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.endpointTypes = ["endpointTypes_example"];
          opts.vendorContains = ["vendorContains_example"];
          opts.mostCommonStatuses = ["mostCommonStatuses_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiApplicationManagementRisksApplicationsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRisksByApplicationsSchemaMany200);
            expect(data.pagination).to.be.a(S1MgmtApi.V21RulesSchemasRuleViewSchemaMany200Pagination);
                  expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
              expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRisksByApplicationsSchemaMany200Data);
                expect(data.applicationId).to.be.a('string');
                expect(data.applicationId).to.be("225494730938493804");
                expect(data.daysDetected).to.be.a(Object);
                expect(data.daysDetected).to.be();
                expect(data.cveCount).to.be.a('number');
                expect(data.cveCount).to.be(0);
                expect(data.endpointsWithoutTicket).to.be.a('number');
                expect(data.endpointsWithoutTicket).to.be(0);
                expect(data.detectionDate).to.be.a(Date);
                expect(data.detectionDate).to.be(2018-02-27T04:49:26.257525Z);
                {
                  let dataCtr = data.statuses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRisksByAggregatedApplicationsSchemaMany200Statuses);
                    expect(data.ticketCategory).to.be.a('string');
                    expect(data.ticketCategory).to.be("");
                    expect(data.count).to.be.a('number');
                    expect(data.count).to.be(0);
                    expect(data.label).to.be.a(Object);
                    expect(data.label).to.be();
                    expect(data.key).to.be.a(Object);
                    expect(data.key).to.be();
    
                          }
                }
                expect(data.estimate).to.be.a('boolean');
                expect(data.estimate).to.be(false);
                expect(data.highestSeverity).to.be.a('string');
                expect(data.highestSeverity).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.exploitedInTheWild).to.be.a('string');
                expect(data.exploitedInTheWild).to.be("Not Defined");
                expect(data.applicationType).to.be.a('string');
                expect(data.applicationType).to.be("");
                expect(data.highestRiskScore).to.be.a('string');
                expect(data.highestRiskScore).to.be("");
                expect(data.vendor).to.be.a('string');
                expect(data.vendor).to.be("");
                expect(data.remediationLevel).to.be.a('string');
                expect(data.remediationLevel).to.be("Official Fix");
                expect(data.exploitCodeMaturity).to.be.a('string');
                expect(data.exploitCodeMaturity).to.be("Not Defined");
                expect(data.highestNvdBaseScore).to.be.a('string');
                expect(data.highestNvdBaseScore).to.be("");
                expect(data.endpointCount).to.be.a('number');
                expect(data.endpointCount).to.be(0);

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiApplicationManagementRisksCvesExportCsvGet', function() {
        it('should call webApiApplicationManagementRisksCvesExportCsvGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiApplicationManagementRisksCvesExportCsvGet call
          /*
          var opts = {};
          opts.publishedDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.exploitedInTheWild = ["exploitedInTheWild_example"];
          opts.publishedDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.severities = ["severities_example"];
          opts.publishedDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.exploitCodeMaturity = ["exploitCodeMaturity_example"];
          opts.groupIds = ["groupIds_example"];
          opts.publishedDateBetween = "publishedDateBetween_example";
          opts.siteIds = ["siteIds_example"];
          opts.applicationIds = ["applicationIds_example"];
          opts.cveIdContains = ["cveIdContains_example"];
          opts.remediationLevels = ["remediationLevels_example"];
          opts.applicationName = "applicationName_example";
          opts.reportConfidence = ["reportConfidence_example"];
          opts.analystVerdict = ["analystVerdict_example"];
          opts.publishedDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.applicationVendor = "applicationVendor_example";
          opts.accountIds = ["accountIds_example"];
          opts.applicationVersions = ["applicationVersions_example"];

          instance.webApiApplicationManagementRisksCvesExportCsvGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiApplicationManagementRisksCvesGet', function() {
        it('should call webApiApplicationManagementRisksCvesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiApplicationManagementRisksCvesGet call and complete the assertions
          /*
          var opts = {};
          opts.sortBy = "null";
          opts.limit = 10;
          opts.cursor = "null";
          opts.publishedDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.exploitedInTheWild = ["exploitedInTheWild_example"];
          opts.publishedDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.severities = ["severities_example"];
          opts.sortOrder = "null";
          opts.publishedDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.exploitCodeMaturity = ["exploitCodeMaturity_example"];
          opts.groupIds = ["groupIds_example"];
          opts.publishedDateBetween = "publishedDateBetween_example";
          opts.siteIds = ["siteIds_example"];
          opts.skipCount = null;
          opts.applicationIds = ["applicationIds_example"];
          opts.cveIdContains = ["cveIdContains_example"];
          opts.skip = 56;
          opts.countOnly = false;
          opts.remediationLevels = ["remediationLevels_example"];
          opts.applicationName = "applicationName_example";
          opts.reportConfidence = ["reportConfidence_example"];
          opts.analystVerdict = ["analystVerdict_example"];
          opts.publishedDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.applicationVendor = "applicationVendor_example";
          opts.accountIds = ["accountIds_example"];
          opts.applicationVersions = ["applicationVersions_example"];

          instance.webApiApplicationManagementRisksCvesGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200);
            expect(data.pagination).to.be.a(S1MgmtApi.V21RulesSchemasRuleViewSchemaMany200Pagination);
                  expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
              expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200Data);
                expect(data.nvdBaseScore).to.be.a('string');
                expect(data.nvdBaseScore).to.be("");
                expect(data.cveId).to.be.a('string');
                expect(data.cveId).to.be("");
                expect(data.publishedDate).to.be.a(Date);
                expect(data.publishedDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.exploitedInTheWild).to.be.a('string');
                expect(data.exploitedInTheWild).to.be("Not Defined");
                expect(data.cvssVersion).to.be.a('string');
                expect(data.cvssVersion).to.be("");
                {
                  let dataCtr = data.fpFnMarks;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200FpFnMarks);
                    expect(data.markedBy).to.be.a('string');
                    expect(data.markedBy).to.be("");
                    expect(data.markedOnScope).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200MarkedOnScope);
                          expect(data.markedOnScope.id).to.be.a('string');
                      expect(data.markedOnScope.id).to.be("");
                      expect(data.markedOnScope.type).to.be.a('string');
                      expect(data.markedOnScope.type).to.be("");
                      expect(data.markedOnScope.name).to.be.a('string');
                      expect(data.markedOnScope.name).to.be("");
                    expect(data.reason).to.be.a('string');
                    expect(data.reason).to.be("");
                    expect(data.type).to.be.a(Object);
                    expect(data.type).to.be();
                    expect(data.markedDate).to.be.a(Date);
                    expect(data.markedDate).to.be(2018-02-27T04:49:26.257525Z);
    
                          }
                }
                expect(data.nvdUrl).to.be.a(Object);
                expect(data.nvdUrl).to.be();
                expect(data.riskScore).to.be.a('string');
                expect(data.riskScore).to.be("");
                expect(data.remediationLevel).to.be.a('string');
                expect(data.remediationLevel).to.be("Official Fix");
                expect(data.exploitCodeMaturity).to.be.a('string');
                expect(data.exploitCodeMaturity).to.be("Not Defined");
                expect(data.description).to.be.a(Object);
                expect(data.description).to.be();
                expect(data.severity).to.be.a(Object);
                expect(data.severity).to.be();
                expect(data.reportConfidence).to.be.a('string');
                expect(data.reportConfidence).to.be("Reasonable");
                expect(data.mitreUrl).to.be.a(Object);
                expect(data.mitreUrl).to.be();

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiApplicationManagementRisksEndpointsExportCsvGet', function() {
        it('should call webApiApplicationManagementRisksEndpointsExportCsvGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiApplicationManagementRisksEndpointsExportCsvGet call
          /*
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.domains = ["domains_example"];
          opts.statusMessageContains = ["statusMessageContains_example"];
          opts.statuses = ["statuses_example"];
          opts.osTypes = ["osTypes_example"];
          opts.lastScanDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.lastScanDateBetween = "lastScanDateBetween_example";
          opts.osVersions = ["osVersions_example"];
          opts.groupIds = ["groupIds_example"];
          opts.lastScanDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.daysFromDetection = 56;
          opts.applicationIds = ["applicationIds_example"];
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.lastScanDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.ticketIdContains = ["ticketIdContains_example"];
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.daysToMitigationBetween = "daysToMitigationBetween_example";
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.domainContains = ["domainContains_example"];
          opts.applicationName = "applicationName_example";
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.endpointTypes = ["endpointTypes_example"];
          opts.endpointIdContains = ["endpointIdContains_example"];
          opts.applicationVendor = "applicationVendor_example";
          opts.accountIds = ["accountIds_example"];
          opts.lastScanDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.lastScanResults = ["lastScanResults_example"];
          opts.applicationVersions = ["applicationVersions_example"];

          instance.webApiApplicationManagementRisksEndpointsExportCsvGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiApplicationManagementRisksEndpointsGet', function() {
        it('should call webApiApplicationManagementRisksEndpointsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiApplicationManagementRisksEndpointsGet call and complete the assertions
          /*
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.sortBy = "null";
          opts.domains = ["domains_example"];
          opts.limit = 10;
          opts.statusMessageContains = ["statusMessageContains_example"];
          opts.cursor = "null";
          opts.statuses = ["statuses_example"];
          opts.osTypes = ["osTypes_example"];
          opts.lastScanDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.lastScanDateBetween = "lastScanDateBetween_example";
          opts.sortOrder = "null";
          opts.osVersions = ["osVersions_example"];
          opts.groupIds = ["groupIds_example"];
          opts.lastScanDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.daysFromDetection = 56;
          opts.skipCount = null;
          opts.applicationIds = ["applicationIds_example"];
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.lastScanDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.ticketIdContains = ["ticketIdContains_example"];
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.skip = 56;
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.daysToMitigationBetween = "daysToMitigationBetween_example";
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.domainContains = ["domainContains_example"];
          opts.countOnly = false;
          opts.applicationName = "applicationName_example";
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.endpointTypes = ["endpointTypes_example"];
          opts.endpointIdContains = ["endpointIdContains_example"];
          opts.applicationVendor = "applicationVendor_example";
          opts.accountIds = ["accountIds_example"];
          opts.lastScanDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.lastScanResults = ["lastScanResults_example"];
          opts.applicationVersions = ["applicationVersions_example"];

          instance.webApiApplicationManagementRisksEndpointsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskyEndpointsSchemaMany200);
            expect(data.pagination).to.be.a(S1MgmtApi.V21RulesSchemasRuleViewSchemaMany200Pagination);
                  expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
              expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskyEndpointsSchemaMany200Data);
                expect(data.domain).to.be.a('string');
                expect(data.domain).to.be("");
                expect(data.groupName).to.be.a('string');
                expect(data.groupName).to.be("");
                {
                  let dataCtr = data.statusHistory;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskyEndpointsSchemaMany200StatusHistory);
                    expect(data.changedAt).to.be.a(Date);
                    expect(data.changedAt).to.be(2018-02-27T04:49:26.257525Z);
                    expect(data.currentLabel).to.be.a('string');
                    expect(data.currentLabel).to.be("Not mitigated");
                    expect(data.previousKey).to.be.a('string');
                    expect(data.previousKey).to.be("");
                    expect(data.currentKey).to.be.a('string');
                    expect(data.currentKey).to.be("");
                    expect(data.changedBy).to.be.a('string');
                    expect(data.changedBy).to.be("");
                    expect(data.reason).to.be.a('string');
                    expect(data.reason).to.be("");
                    expect(data.previousLabel).to.be.a('string');
                    expect(data.previousLabel).to.be("Not mitigated");
    
                          }
                }
                expect(data.lastScanDate).to.be.a(Date);
                expect(data.lastScanDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.osType).to.be.a('string');
                expect(data.osType).to.be("linux");
                expect(data.applicationDetectionDate).to.be.a(Date);
                expect(data.applicationDetectionDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.applicationDaysDetected).to.be.a(Object);
                expect(data.applicationDaysDetected).to.be();
                expect(data.ticket).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskyEndpointsSchemaMany200Ticket);
                      expect(data.ticket.status).to.be.a('string');
                  expect(data.ticket.status).to.be("");
                  expect(data.ticket.projectName).to.be.a('string');
                  expect(data.ticket.projectName).to.be("");
                  expect(data.ticket.metaData).to.be.a(Object);
                  expect(data.ticket.metaData).to.be();
                  expect(data.ticket.name).to.be.a('string');
                  expect(data.ticket.name).to.be("");
                  expect(data.ticket.title).to.be.a('string');
                  expect(data.ticket.title).to.be("");
                  expect(data.ticket.daysToMitigation).to.be.a('number');
                  expect(data.ticket.daysToMitigation).to.be(0);
                  expect(data.ticket.analystReason).to.be.a('string');
                  expect(data.ticket.analystReason).to.be("");
                  expect(data.ticket.statusCategory).to.be.a('string');
                  expect(data.ticket.statusCategory).to.be("");
                  expect(data.ticket.reporter).to.be.a('string');
                  expect(data.ticket.reporter).to.be("");
                  expect(data.ticket.endpointsCount).to.be.a('number');
                  expect(data.ticket.endpointsCount).to.be(0);
                  expect(data.ticket.url).to.be.a('string');
                  expect(data.ticket.url).to.be("");
                expect(data.applicationVersion).to.be.a('string');
                expect(data.applicationVersion).to.be("");
                expect(data.siteName).to.be.a('string');
                expect(data.siteName).to.be("");
                expect(data.endpointName).to.be.a('string');
                expect(data.endpointName).to.be("");
                expect(data.endpointUuid).to.be.a('string');
                expect(data.endpointUuid).to.be("");
                expect(data.osVersion).to.be.a('string');
                expect(data.osVersion).to.be("");
                expect(data.endpointId).to.be.a('string');
                expect(data.endpointId).to.be("");
                expect(data.endpointType).to.be.a('string');
                expect(data.endpointType).to.be("");
                expect(data.accountName).to.be.a('string');
                expect(data.accountName).to.be("");
                expect(data.lastScanResult).to.be.a('string');
                expect(data.lastScanResult).to.be("");
                expect(data.externalTicketSystem).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskyEndpointsSchemaMany200ExternalTicketSystem);
                      expect(data.externalTicketSystem.type).to.be.a('string');
                  expect(data.externalTicketSystem.type).to.be("");
                  expect(data.externalTicketSystem.available).to.be.a('boolean');
                  expect(data.externalTicketSystem.available).to.be(false);

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiApplicationManagementRisksExportCsvGet', function() {
        it('should call webApiApplicationManagementRisksExportCsvGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiApplicationManagementRisksExportCsvGet call
          /*
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.riskUpdatedDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.domains = ["domains_example"];
          opts.analystVerdict = ["analystVerdict_example"];
          opts.riskUpdatedDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.applicationNames = ["applicationNames_example"];
          opts.publishedDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.applicationVendorContains = ["applicationVendorContains_example"];
          opts.applicationContains = ["applicationContains_example"];
          opts.includeRemovals = true;
          opts.exploitedInTheWild = ["exploitedInTheWild_example"];
          opts.mitigationStatus = ["mitigationStatus_example"];
          opts.osTypes = ["osTypes_example"];
          opts.severities = ["severities_example"];
          opts.publishedDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.vendors = ["vendors_example"];
          opts.osVersions = ["osVersions_example"];
          opts.publishedDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.exploitCodeMaturity = ["exploitCodeMaturity_example"];
          opts.groupIds = ["groupIds_example"];
          opts.publishedDateBetween = "publishedDateBetween_example";
          opts.siteIds = ["siteIds_example"];
          opts.daysFromCveDetection = 56;
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.cveIdContains = ["cveIdContains_example"];
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.riskUpdatedDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.domainContains = ["domainContains_example"];
          opts.remediationLevels = ["remediationLevels_example"];
          opts.riskUpdatedDateBetween = "riskUpdatedDateBetween_example";
          opts.endpointTypes = ["endpointTypes_example"];
          opts.reportConfidence = ["reportConfidence_example"];
          opts.publishedDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.riskUpdatedDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.accountIds = ["accountIds_example"];
          opts.riskScoreBetween = "riskScoreBetween_example";
          opts.lastScanResults = ["lastScanResults_example"];

          instance.webApiApplicationManagementRisksExportCsvGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiApplicationManagementRisksGet', function() {
        it('should call webApiApplicationManagementRisksGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiApplicationManagementRisksGet call and complete the assertions
          /*
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.riskUpdatedDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.sortBy = "null";
          opts.domains = ["domains_example"];
          opts.analystVerdict = ["analystVerdict_example"];
          opts.limit = 10;
          opts.riskUpdatedDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.applicationNames = ["applicationNames_example"];
          opts.cursor = "null";
          opts.publishedDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.applicationVendorContains = ["applicationVendorContains_example"];
          opts.applicationContains = ["applicationContains_example"];
          opts.includeRemovals = true;
          opts.exploitedInTheWild = ["exploitedInTheWild_example"];
          opts.mitigationStatus = ["mitigationStatus_example"];
          opts.osTypes = ["osTypes_example"];
          opts.severities = ["severities_example"];
          opts.publishedDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.sortOrder = "null";
          opts.vendors = ["vendors_example"];
          opts.osVersions = ["osVersions_example"];
          opts.publishedDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.exploitCodeMaturity = ["exploitCodeMaturity_example"];
          opts.groupIds = ["groupIds_example"];
          opts.publishedDateBetween = "publishedDateBetween_example";
          opts.siteIds = ["siteIds_example"];
          opts.daysFromCveDetection = 56;
          opts.skipCount = null;
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.cveIdContains = ["cveIdContains_example"];
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.skip = 56;
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.riskUpdatedDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.countOnly = false;
          opts.domainContains = ["domainContains_example"];
          opts.remediationLevels = ["remediationLevels_example"];
          opts.riskUpdatedDateBetween = "riskUpdatedDateBetween_example";
          opts.endpointTypes = ["endpointTypes_example"];
          opts.reportConfidence = ["reportConfidence_example"];
          opts.publishedDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.riskUpdatedDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.accountIds = ["accountIds_example"];
          opts.riskScoreBetween = "riskScoreBetween_example";
          opts.lastScanResults = ["lastScanResults_example"];

          instance.webApiApplicationManagementRisksGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasBaseRisksCveSchemaMany200);
            expect(data.pagination).to.be.a(S1MgmtApi.V21RulesSchemasRuleViewSchemaMany200Pagination);
                  expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
              expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasBaseRisksCveSchemaMany200Data);
                expect(data.osType).to.be.a('string');
                expect(data.osType).to.be("linux");
                expect(data.mitigationStatusChangedBy).to.be.a('string');
                expect(data.mitigationStatusChangedBy).to.be("");
                expect(data.mitigationStatusChangeTime).to.be.a(Date);
                expect(data.mitigationStatusChangeTime).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.nvdCvssVersion).to.be.a('string');
                expect(data.nvdCvssVersion).to.be("");
                expect(data.lastScanResult).to.be.a('string');
                expect(data.lastScanResult).to.be("");
                expect(data.endpointName).to.be.a('string');
                expect(data.endpointName).to.be("");
                expect(data.applicationVersion).to.be.a('string');
                expect(data.applicationVersion).to.be("");
                expect(data.severity).to.be.a('string');
                expect(data.severity).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.mitigationStatusReason).to.be.a('string');
                expect(data.mitigationStatusReason).to.be("");
                expect(data.endpointId).to.be.a('string');
                expect(data.endpointId).to.be("");
                expect(data.nvdBaseScore).to.be.a('string');
                expect(data.nvdBaseScore).to.be("");
                expect(data.daysDetected).to.be.a('number');
                expect(data.daysDetected).to.be(0);
                expect(data.publishedDate).to.be.a(Date);
                expect(data.publishedDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.cvssVersion).to.be.a('string');
                expect(data.cvssVersion).to.be("");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("Detected");
                expect(data.markedBy).to.be.a('string');
                expect(data.markedBy).to.be("");
                expect(data.riskScore).to.be.a('string');
                expect(data.riskScore).to.be("");
                expect(data.markType).to.be.a(Object);
                expect(data.markType).to.be();
                expect(data.exploitCodeMaturity).to.be.a('string');
                expect(data.exploitCodeMaturity).to.be("Not Defined");
                expect(data.applicationName).to.be.a('string');
                expect(data.applicationName).to.be("");
                expect(data.lastScanDate).to.be.a(Date);
                expect(data.lastScanDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.reportConfidence).to.be.a('string');
                expect(data.reportConfidence).to.be("Not Defined");
                expect(data.markedDate).to.be.a(Date);
                expect(data.markedDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.cveId).to.be.a('string');
                expect(data.cveId).to.be("");
                expect(data.application).to.be.a('string');
                expect(data.application).to.be("");
                expect(data.baseScore).to.be.a('string');
                expect(data.baseScore).to.be("");
                expect(data.detectionDate).to.be.a(Date);
                expect(data.detectionDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.mitigationStatus).to.be.a('string');
                expect(data.mitigationStatus).to.be("Not mitigated");
                expect(data.applicationVendor).to.be.a('string');
                expect(data.applicationVendor).to.be("");
                expect(data.remediationLevel).to.be.a('string');
                expect(data.remediationLevel).to.be("Not Defined");
                expect(data.endpointType).to.be.a('string');
                expect(data.endpointType).to.be("");

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiApplicationManagementScanPost', function() {
        it('should call webApiApplicationManagementScanPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiApplicationManagementScanPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasScanPostSchema();
          opts.body.filter = new S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasScanPostSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;

          instance.webApiApplicationManagementScanPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementInventoryApplicationsGet', function() {
        it('should call webApiPrivateApplicationManagementInventoryApplicationsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementInventoryApplicationsGet call and complete the assertions
          /*
          var ids = ["ids_example"];

          instance.webApiPrivateApplicationManagementInventoryApplicationsGet(ids, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasAgentApplicationsSchemaMany200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasAgentApplicationsSchemaMany200Data);
                expect(data.installedDate).to.be.a(Date);
                expect(data.installedDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.publisher).to.be.a('string');
                expect(data.publisher).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.version).to.be.a('string');
                expect(data.version).to.be("");
                expect(data.size).to.be.a('number');
                expect(data.size).to.be(0);

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementInventoryEndpointsFiltersAutocompleteGet', function() {
        it('should call webApiPrivateApplicationManagementInventoryEndpointsFiltersAutocompleteGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementInventoryEndpointsFiltersAutocompleteGet call and complete the assertions
          /*
          var applicationName = "applicationName_example";
          var key = "key_example";
          var applicationVendor = "applicationVendor_example";
          var text = "text_example";
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.versions = ["versions_example"];
          opts.limit = 56;
          opts.osArchitectures = ["osArchitectures_example"];
          opts.osTypes = ["osTypes_example"];
          opts.osVersions = ["osVersions_example"];
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiPrivateApplicationManagementInventoryEndpointsFiltersAutocompleteGet(applicationName, key, applicationVendor, text, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AutoCompleteResponseSchema200);
            expect(data.data).to.be.a(S1MgmtApi.AutoCompleteResponseSchema200Data);
                  {
                let dataCtr = data.data.values;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.AutoCompleteResponseSchema200DataValues);
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("JohnD_WORKSTATION");
                  expect(data.count).to.be.a('number');
                  expect(data.count).to.be(51);
  
                        }
              }
              expect(data.data.title).to.be.a('string');
              expect(data.data.title).to.be("Computer name");
              expect(data.data.key).to.be.a('string');
              expect(data.data.key).to.be("computerName__contains");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementInventoryEndpointsFiltersCountGet', function() {
        it('should call webApiPrivateApplicationManagementInventoryEndpointsFiltersCountGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementInventoryEndpointsFiltersCountGet call and complete the assertions
          /*
          var applicationName = "applicationName_example";
          var applicationVendor = "applicationVendor_example";
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.versions = ["versions_example"];
          opts.osArchitectures = ["osArchitectures_example"];
          opts.osTypes = ["osTypes_example"];
          opts.osVersions = ["osVersions_example"];
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiPrivateApplicationManagementInventoryEndpointsFiltersCountGet(applicationName, applicationVendor, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.CountFiltersResponseSchemaMany200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.CountFiltersResponseSchemaMany200Data);
                expect(data.disableSorting).to.be.a('boolean');
                expect(data.disableSorting).to.be(false);
                {
                  let dataCtr = data.values;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.CountFiltersResponseSchemaMany200Values);
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                    expect(data.count).to.be.a('number');
                    expect(data.count).to.be(0);
                    expect(data.title).to.be.a('string');
                    expect(data.title).to.be("");
    
                          }
                }
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.key).to.be.a('string');
                expect(data.key).to.be("");
                expect(data.enableNegation).to.be.a('boolean');
                expect(data.enableNegation).to.be(false);

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementInventoryEndpointsFreeTextFiltersGet', function() {
        it('should call webApiPrivateApplicationManagementInventoryEndpointsFreeTextFiltersGet successfully', function(done) {
          // TODO: uncomment webApiPrivateApplicationManagementInventoryEndpointsFreeTextFiltersGet call and complete the assertions
          /*

          instance.webApiPrivateApplicationManagementInventoryEndpointsFreeTextFiltersGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.FreeTextFilterResponseSchemaMany200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.FreeTextFilterResponseSchemaMany200Data);
                expect(data.validation).to.be.a('string');
                expect(data.validation).to.be("");
                expect(data.icon).to.be.a('string');
                expect(data.icon).to.be("upload");
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("Computer name");
                expect(data.key).to.be.a('string');
                expect(data.key).to.be("computerName__contains");
                expect(data.autoComplete).to.be.a('string');
                expect(data.autoComplete).to.be("");

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementInventoryEndpointsGet', function() {
        it('should call webApiPrivateApplicationManagementInventoryEndpointsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementInventoryEndpointsGet call and complete the assertions
          /*
          var applicationName = "applicationName_example";
          var applicationVendor = "applicationVendor_example";
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.sortBy = "null";
          opts.versions = ["versions_example"];
          opts.limit = 10;
          opts.cursor = "null";
          opts.osArchitectures = ["osArchitectures_example"];
          opts.osTypes = ["osTypes_example"];
          opts.sortOrder = "null";
          opts.osVersions = ["osVersions_example"];
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.skipCount = null;
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.skip = 56;
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.countOnly = false;
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiPrivateApplicationManagementInventoryEndpointsGet(applicationName, applicationVendor, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasApplicationInventoryEndpointsSchemaMany200);
            expect(data.pagination).to.be.a(S1MgmtApi.V21RulesSchemasRuleViewSchemaMany200Pagination);
                  expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
              expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasApplicationInventoryEndpointsSchemaMany200Data);
                expect(data.osType).to.be.a('string');
                expect(data.osType).to.be("linux");
                expect(data.coreCount).to.be.a('number');
                expect(data.coreCount).to.be(0);
                expect(data.endpointName).to.be.a('string');
                expect(data.endpointName).to.be("");
                expect(data.endpointUuid).to.be.a('string');
                expect(data.endpointUuid).to.be("");
                expect(data.fileSize).to.be.a('number');
                expect(data.fileSize).to.be(0);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.groupName).to.be.a('string');
                expect(data.groupName).to.be("");
                expect(data.siteName).to.be.a('string');
                expect(data.siteName).to.be("");
                expect(data.cpe).to.be.a(Object);
                expect(data.cpe).to.be();
                expect(data.accountName).to.be.a('string');
                expect(data.accountName).to.be("");
                expect(data.endpointId).to.be.a('string');
                expect(data.endpointId).to.be("");
                expect(data.applicationInstallationDate).to.be.a(Date);
                expect(data.applicationInstallationDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.cpuCount).to.be.a('number');
                expect(data.cpuCount).to.be(0);
                expect(data.version).to.be.a('string');
                expect(data.version).to.be("");
                expect(data.osName).to.be.a('string');
                expect(data.osName).to.be("");
                expect(data.applicationName).to.be.a('string');
                expect(data.applicationName).to.be("");
                expect(data.applicationInstallationPath).to.be.a('string');
                expect(data.applicationInstallationPath).to.be("");
                expect(data.detectionDate).to.be.a(Date);
                expect(data.detectionDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.osArch).to.be.a('string');
                expect(data.osArch).to.be("");
                expect(data.osVersion).to.be.a('string');
                expect(data.osVersion).to.be("");
                expect(data.endpointType).to.be.a('string');
                expect(data.endpointType).to.be("");

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementInventoryFiltersAutocompleteGet', function() {
        it('should call webApiPrivateApplicationManagementInventoryFiltersAutocompleteGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementInventoryFiltersAutocompleteGet call and complete the assertions
          /*
          var key = "key_example";
          var text = "text_example";
          var opts = {};
          opts.limit = 56;
          opts.osArchitectures = ["osArchitectures_example"];
          opts.vendors = ["vendors_example"];
          opts.osTypes = ["osTypes_example"];
          opts.osVersions = ["osVersions_example"];
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.nameContains = ["nameContains_example"];
          opts.osVersionContains = ["osVersionContains_example"];
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.vendorContains = ["vendorContains_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiPrivateApplicationManagementInventoryFiltersAutocompleteGet(key, text, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AutoCompleteResponseSchema200);
            expect(data.data).to.be.a(S1MgmtApi.AutoCompleteResponseSchema200Data);
                  {
                let dataCtr = data.data.values;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.AutoCompleteResponseSchema200DataValues);
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("JohnD_WORKSTATION");
                  expect(data.count).to.be.a('number');
                  expect(data.count).to.be(51);
  
                        }
              }
              expect(data.data.title).to.be.a('string');
              expect(data.data.title).to.be("Computer name");
              expect(data.data.key).to.be.a('string');
              expect(data.data.key).to.be("computerName__contains");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementInventoryFiltersCountGet', function() {
        it('should call webApiPrivateApplicationManagementInventoryFiltersCountGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementInventoryFiltersCountGet call and complete the assertions
          /*
          var opts = {};
          opts.osArchitectures = ["osArchitectures_example"];
          opts.vendors = ["vendors_example"];
          opts.osTypes = ["osTypes_example"];
          opts.osVersions = ["osVersions_example"];
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.nameContains = ["nameContains_example"];
          opts.osVersionContains = ["osVersionContains_example"];
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.vendorContains = ["vendorContains_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiPrivateApplicationManagementInventoryFiltersCountGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.CountFiltersResponseSchemaMany200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.CountFiltersResponseSchemaMany200Data);
                expect(data.disableSorting).to.be.a('boolean');
                expect(data.disableSorting).to.be(false);
                {
                  let dataCtr = data.values;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.CountFiltersResponseSchemaMany200Values);
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                    expect(data.count).to.be.a('number');
                    expect(data.count).to.be(0);
                    expect(data.title).to.be.a('string');
                    expect(data.title).to.be("");
    
                          }
                }
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.key).to.be.a('string');
                expect(data.key).to.be("");
                expect(data.enableNegation).to.be.a('boolean');
                expect(data.enableNegation).to.be(false);

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementInventoryFreeTextFiltersGet', function() {
        it('should call webApiPrivateApplicationManagementInventoryFreeTextFiltersGet successfully', function(done) {
          // TODO: uncomment webApiPrivateApplicationManagementInventoryFreeTextFiltersGet call and complete the assertions
          /*

          instance.webApiPrivateApplicationManagementInventoryFreeTextFiltersGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.FreeTextFilterResponseSchemaMany200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.FreeTextFilterResponseSchemaMany200Data);
                expect(data.validation).to.be.a('string');
                expect(data.validation).to.be("");
                expect(data.icon).to.be.a('string');
                expect(data.icon).to.be("upload");
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("Computer name");
                expect(data.key).to.be.a('string');
                expect(data.key).to.be("computerName__contains");
                expect(data.autoComplete).to.be.a('string');
                expect(data.autoComplete).to.be("");

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementInventoryVersionsCountGet', function() {
        it('should call webApiPrivateApplicationManagementInventoryVersionsCountGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementInventoryVersionsCountGet call and complete the assertions
          /*
          var applicationName = "applicationName_example";
          var applicationVendor = "applicationVendor_example";
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];

          instance.webApiPrivateApplicationManagementInventoryVersionsCountGet(applicationName, applicationVendor, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasVersionsCountSchema200);
            expect(data.data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasVersionsCountSchema200Data);
                  expect(data.data.applicationName).to.be.a('string');
              expect(data.data.applicationName).to.be("");
              {
                let dataCtr = data.data.versions;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasVersionsCountSchema200DataVersions);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.version).to.be.a('string');
                  expect(data.version).to.be("");
                  expect(data.applicationName).to.be.a('string');
                  expect(data.applicationName).to.be("");
                  expect(data.endpointsCount).to.be.a('number');
                  expect(data.endpointsCount).to.be(0);
  
                        }
              }
              expect(data.data.versionsCount).to.be.a('number');
              expect(data.data.versionsCount).to.be(0);
              expect(data.data.applicationVendor).to.be.a('string');
              expect(data.data.applicationVendor).to.be("");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementRisksAggregatedApplicationsExportCsvExtendedGet', function() {
        it('should call webApiPrivateApplicationManagementRisksAggregatedApplicationsExportCsvExtendedGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementRisksAggregatedApplicationsExportCsvExtendedGet call
          /*
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.sortBy = ["sortBy_example"];
          opts.vendors = ["vendors_example"];
          opts.mitigationStatuses = ["mitigationStatuses_example"];
          opts.exploitedInTheWild = ["exploitedInTheWild_example"];
          opts.highestSeverities = ["highestSeverities_example"];
          opts.sortOrder = ["sortOrder_example"];
          opts.exploitCodeMaturity = ["exploitCodeMaturity_example"];
          opts.groupIds = ["groupIds_example"];
          opts.daysFromDetection = 56;
          opts.siteIds = ["siteIds_example"];
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.cveIdContains = ["cveIdContains_example"];
          opts.nameContains = ["nameContains_example"];
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.remediationLevels = ["remediationLevels_example"];
          opts.applicationTypes = ["applicationTypes_example"];
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.vendorContains = ["vendorContains_example"];
          opts.mostCommonStatuses = ["mostCommonStatuses_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiPrivateApplicationManagementRisksAggregatedApplicationsExportCsvExtendedGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementRisksAggregatedApplicationsFiltersAutocompleteGet', function() {
        it('should call webApiPrivateApplicationManagementRisksAggregatedApplicationsFiltersAutocompleteGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementRisksAggregatedApplicationsFiltersAutocompleteGet call and complete the assertions
          /*
          var key = "key_example";
          var text = "text_example";
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.domains = ["domains_example"];
          opts.limit = 56;
          opts.vendors = ["vendors_example"];
          opts.exploitedInTheWild = ["exploitedInTheWild_example"];
          opts.osTypes = ["osTypes_example"];
          opts.highestSeverities = ["highestSeverities_example"];
          opts.exploitCodeMaturity = ["exploitCodeMaturity_example"];
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.daysFromDetection = 56;
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.cveIdContains = ["cveIdContains_example"];
          opts.nameContains = ["nameContains_example"];
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.remediationLevels = ["remediationLevels_example"];
          opts.applicationTypes = ["applicationTypes_example"];
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.endpointTypes = ["endpointTypes_example"];
          opts.vendorContains = ["vendorContains_example"];
          opts.mostCommonStatuses = ["mostCommonStatuses_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiPrivateApplicationManagementRisksAggregatedApplicationsFiltersAutocompleteGet(key, text, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AutoCompleteResponseSchema200);
            expect(data.data).to.be.a(S1MgmtApi.AutoCompleteResponseSchema200Data);
                  {
                let dataCtr = data.data.values;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.AutoCompleteResponseSchema200DataValues);
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("JohnD_WORKSTATION");
                  expect(data.count).to.be.a('number');
                  expect(data.count).to.be(51);
  
                        }
              }
              expect(data.data.title).to.be.a('string');
              expect(data.data.title).to.be("Computer name");
              expect(data.data.key).to.be.a('string');
              expect(data.data.key).to.be("computerName__contains");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementRisksAggregatedApplicationsFiltersCountGet', function() {
        it('should call webApiPrivateApplicationManagementRisksAggregatedApplicationsFiltersCountGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementRisksAggregatedApplicationsFiltersCountGet call and complete the assertions
          /*
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.domains = ["domains_example"];
          opts.vendors = ["vendors_example"];
          opts.exploitedInTheWild = ["exploitedInTheWild_example"];
          opts.osTypes = ["osTypes_example"];
          opts.highestSeverities = ["highestSeverities_example"];
          opts.exploitCodeMaturity = ["exploitCodeMaturity_example"];
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.daysFromDetection = 56;
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.cveIdContains = ["cveIdContains_example"];
          opts.nameContains = ["nameContains_example"];
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.remediationLevels = ["remediationLevels_example"];
          opts.applicationTypes = ["applicationTypes_example"];
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.endpointTypes = ["endpointTypes_example"];
          opts.vendorContains = ["vendorContains_example"];
          opts.mostCommonStatuses = ["mostCommonStatuses_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiPrivateApplicationManagementRisksAggregatedApplicationsFiltersCountGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.CountFiltersResponseSchemaMany200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.CountFiltersResponseSchemaMany200Data);
                expect(data.disableSorting).to.be.a('boolean');
                expect(data.disableSorting).to.be(false);
                {
                  let dataCtr = data.values;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.CountFiltersResponseSchemaMany200Values);
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                    expect(data.count).to.be.a('number');
                    expect(data.count).to.be(0);
                    expect(data.title).to.be.a('string');
                    expect(data.title).to.be("");
    
                          }
                }
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.key).to.be.a('string');
                expect(data.key).to.be("");
                expect(data.enableNegation).to.be.a('boolean');
                expect(data.enableNegation).to.be(false);

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementRisksAggregatedApplicationsFreeTextFiltersGet', function() {
        it('should call webApiPrivateApplicationManagementRisksAggregatedApplicationsFreeTextFiltersGet successfully', function(done) {
          // TODO: uncomment webApiPrivateApplicationManagementRisksAggregatedApplicationsFreeTextFiltersGet call and complete the assertions
          /*

          instance.webApiPrivateApplicationManagementRisksAggregatedApplicationsFreeTextFiltersGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.FreeTextFilterResponseSchemaMany200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.FreeTextFilterResponseSchemaMany200Data);
                expect(data.validation).to.be.a('string');
                expect(data.validation).to.be("");
                expect(data.icon).to.be.a('string');
                expect(data.icon).to.be("upload");
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("Computer name");
                expect(data.key).to.be.a('string');
                expect(data.key).to.be("computerName__contains");
                expect(data.autoComplete).to.be.a('string');
                expect(data.autoComplete).to.be("");

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementRisksApplicationsFiltersAutocompleteGet', function() {
        it('should call webApiPrivateApplicationManagementRisksApplicationsFiltersAutocompleteGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementRisksApplicationsFiltersAutocompleteGet call and complete the assertions
          /*
          var key = "key_example";
          var text = "text_example";
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.domains = ["domains_example"];
          opts.limit = 56;
          opts.applicationContains = ["applicationContains_example"];
          opts.vendors = ["vendors_example"];
          opts.exploitedInTheWild = ["exploitedInTheWild_example"];
          opts.osTypes = ["osTypes_example"];
          opts.highestSeverities = ["highestSeverities_example"];
          opts.exploitCodeMaturity = ["exploitCodeMaturity_example"];
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.daysFromDetection = 56;
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.cveIdContains = ["cveIdContains_example"];
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.remediationLevels = ["remediationLevels_example"];
          opts.applicationTypes = ["applicationTypes_example"];
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.endpointTypes = ["endpointTypes_example"];
          opts.vendorContains = ["vendorContains_example"];
          opts.mostCommonStatuses = ["mostCommonStatuses_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiPrivateApplicationManagementRisksApplicationsFiltersAutocompleteGet(key, text, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AutoCompleteResponseSchema200);
            expect(data.data).to.be.a(S1MgmtApi.AutoCompleteResponseSchema200Data);
                  {
                let dataCtr = data.data.values;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.AutoCompleteResponseSchema200DataValues);
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("JohnD_WORKSTATION");
                  expect(data.count).to.be.a('number');
                  expect(data.count).to.be(51);
  
                        }
              }
              expect(data.data.title).to.be.a('string');
              expect(data.data.title).to.be("Computer name");
              expect(data.data.key).to.be.a('string');
              expect(data.data.key).to.be("computerName__contains");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementRisksApplicationsFiltersCountGet', function() {
        it('should call webApiPrivateApplicationManagementRisksApplicationsFiltersCountGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementRisksApplicationsFiltersCountGet call and complete the assertions
          /*
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.domains = ["domains_example"];
          opts.applicationContains = ["applicationContains_example"];
          opts.vendors = ["vendors_example"];
          opts.exploitedInTheWild = ["exploitedInTheWild_example"];
          opts.osTypes = ["osTypes_example"];
          opts.highestSeverities = ["highestSeverities_example"];
          opts.exploitCodeMaturity = ["exploitCodeMaturity_example"];
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.daysFromDetection = 56;
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.cveIdContains = ["cveIdContains_example"];
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.remediationLevels = ["remediationLevels_example"];
          opts.applicationTypes = ["applicationTypes_example"];
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.endpointTypes = ["endpointTypes_example"];
          opts.vendorContains = ["vendorContains_example"];
          opts.mostCommonStatuses = ["mostCommonStatuses_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiPrivateApplicationManagementRisksApplicationsFiltersCountGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.CountFiltersResponseSchemaMany200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.CountFiltersResponseSchemaMany200Data);
                expect(data.disableSorting).to.be.a('boolean');
                expect(data.disableSorting).to.be(false);
                {
                  let dataCtr = data.values;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.CountFiltersResponseSchemaMany200Values);
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                    expect(data.count).to.be.a('number');
                    expect(data.count).to.be(0);
                    expect(data.title).to.be.a('string');
                    expect(data.title).to.be("");
    
                          }
                }
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.key).to.be.a('string');
                expect(data.key).to.be("");
                expect(data.enableNegation).to.be.a('boolean');
                expect(data.enableNegation).to.be(false);

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementRisksApplicationsFreeTextFiltersGet', function() {
        it('should call webApiPrivateApplicationManagementRisksApplicationsFreeTextFiltersGet successfully', function(done) {
          // TODO: uncomment webApiPrivateApplicationManagementRisksApplicationsFreeTextFiltersGet call and complete the assertions
          /*

          instance.webApiPrivateApplicationManagementRisksApplicationsFreeTextFiltersGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.FreeTextFilterResponseSchemaMany200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.FreeTextFilterResponseSchemaMany200Data);
                expect(data.validation).to.be.a('string');
                expect(data.validation).to.be("");
                expect(data.icon).to.be.a('string');
                expect(data.icon).to.be("upload");
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("Computer name");
                expect(data.key).to.be.a('string');
                expect(data.key).to.be("computerName__contains");
                expect(data.autoComplete).to.be.a('string');
                expect(data.autoComplete).to.be("");

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementRisksCvesFiltersAutocompleteGet', function() {
        it('should call webApiPrivateApplicationManagementRisksCvesFiltersAutocompleteGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementRisksCvesFiltersAutocompleteGet call and complete the assertions
          /*
          var key = "key_example";
          var text = "text_example";
          var opts = {};
          opts.limit = 56;
          opts.publishedDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.exploitedInTheWild = ["exploitedInTheWild_example"];
          opts.publishedDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.severities = ["severities_example"];
          opts.publishedDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.exploitCodeMaturity = ["exploitCodeMaturity_example"];
          opts.groupIds = ["groupIds_example"];
          opts.publishedDateBetween = "publishedDateBetween_example";
          opts.siteIds = ["siteIds_example"];
          opts.applicationIds = ["applicationIds_example"];
          opts.cveIdContains = ["cveIdContains_example"];
          opts.remediationLevels = ["remediationLevels_example"];
          opts.applicationName = "applicationName_example";
          opts.reportConfidence = ["reportConfidence_example"];
          opts.analystVerdict = ["analystVerdict_example"];
          opts.publishedDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.applicationVendor = "applicationVendor_example";
          opts.accountIds = ["accountIds_example"];
          opts.applicationVersions = ["applicationVersions_example"];

          instance.webApiPrivateApplicationManagementRisksCvesFiltersAutocompleteGet(key, text, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AutoCompleteResponseSchema200);
            expect(data.data).to.be.a(S1MgmtApi.AutoCompleteResponseSchema200Data);
                  {
                let dataCtr = data.data.values;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.AutoCompleteResponseSchema200DataValues);
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("JohnD_WORKSTATION");
                  expect(data.count).to.be.a('number');
                  expect(data.count).to.be(51);
  
                        }
              }
              expect(data.data.title).to.be.a('string');
              expect(data.data.title).to.be("Computer name");
              expect(data.data.key).to.be.a('string');
              expect(data.data.key).to.be("computerName__contains");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementRisksCvesFiltersCountGet', function() {
        it('should call webApiPrivateApplicationManagementRisksCvesFiltersCountGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementRisksCvesFiltersCountGet call and complete the assertions
          /*
          var opts = {};
          opts.publishedDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.exploitedInTheWild = ["exploitedInTheWild_example"];
          opts.publishedDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.severities = ["severities_example"];
          opts.publishedDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.exploitCodeMaturity = ["exploitCodeMaturity_example"];
          opts.groupIds = ["groupIds_example"];
          opts.publishedDateBetween = "publishedDateBetween_example";
          opts.siteIds = ["siteIds_example"];
          opts.applicationIds = ["applicationIds_example"];
          opts.cveIdContains = ["cveIdContains_example"];
          opts.remediationLevels = ["remediationLevels_example"];
          opts.applicationName = "applicationName_example";
          opts.reportConfidence = ["reportConfidence_example"];
          opts.analystVerdict = ["analystVerdict_example"];
          opts.publishedDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.applicationVendor = "applicationVendor_example";
          opts.accountIds = ["accountIds_example"];
          opts.applicationVersions = ["applicationVersions_example"];

          instance.webApiPrivateApplicationManagementRisksCvesFiltersCountGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.CountFiltersResponseSchemaMany200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.CountFiltersResponseSchemaMany200Data);
                expect(data.disableSorting).to.be.a('boolean');
                expect(data.disableSorting).to.be(false);
                {
                  let dataCtr = data.values;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.CountFiltersResponseSchemaMany200Values);
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                    expect(data.count).to.be.a('number');
                    expect(data.count).to.be(0);
                    expect(data.title).to.be.a('string');
                    expect(data.title).to.be("");
    
                          }
                }
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.key).to.be.a('string');
                expect(data.key).to.be("");
                expect(data.enableNegation).to.be.a('boolean');
                expect(data.enableNegation).to.be(false);

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementRisksCvesFreeTextFiltersGet', function() {
        it('should call webApiPrivateApplicationManagementRisksCvesFreeTextFiltersGet successfully', function(done) {
          // TODO: uncomment webApiPrivateApplicationManagementRisksCvesFreeTextFiltersGet call and complete the assertions
          /*

          instance.webApiPrivateApplicationManagementRisksCvesFreeTextFiltersGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.FreeTextFilterResponseSchemaMany200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.FreeTextFilterResponseSchemaMany200Data);
                expect(data.validation).to.be.a('string');
                expect(data.validation).to.be("");
                expect(data.icon).to.be.a('string');
                expect(data.icon).to.be("upload");
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("Computer name");
                expect(data.key).to.be.a('string');
                expect(data.key).to.be("computerName__contains");
                expect(data.autoComplete).to.be.a('string');
                expect(data.autoComplete).to.be("");

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementRisksEndpointsFiltersAutocompleteGet', function() {
        it('should call webApiPrivateApplicationManagementRisksEndpointsFiltersAutocompleteGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementRisksEndpointsFiltersAutocompleteGet call and complete the assertions
          /*
          var key = "key_example";
          var text = "text_example";
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.domains = ["domains_example"];
          opts.limit = 56;
          opts.statusMessageContains = ["statusMessageContains_example"];
          opts.statuses = ["statuses_example"];
          opts.osTypes = ["osTypes_example"];
          opts.lastScanDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.lastScanDateBetween = "lastScanDateBetween_example";
          opts.osVersions = ["osVersions_example"];
          opts.groupIds = ["groupIds_example"];
          opts.lastScanDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.daysFromDetection = 56;
          opts.applicationIds = ["applicationIds_example"];
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.lastScanDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.ticketIdContains = ["ticketIdContains_example"];
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.daysToMitigationBetween = "daysToMitigationBetween_example";
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.domainContains = ["domainContains_example"];
          opts.applicationName = "applicationName_example";
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.endpointTypes = ["endpointTypes_example"];
          opts.endpointIdContains = ["endpointIdContains_example"];
          opts.applicationVendor = "applicationVendor_example";
          opts.accountIds = ["accountIds_example"];
          opts.lastScanDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.lastScanResults = ["lastScanResults_example"];
          opts.applicationVersions = ["applicationVersions_example"];

          instance.webApiPrivateApplicationManagementRisksEndpointsFiltersAutocompleteGet(key, text, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AutoCompleteResponseSchema200);
            expect(data.data).to.be.a(S1MgmtApi.AutoCompleteResponseSchema200Data);
                  {
                let dataCtr = data.data.values;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.AutoCompleteResponseSchema200DataValues);
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("JohnD_WORKSTATION");
                  expect(data.count).to.be.a('number');
                  expect(data.count).to.be(51);
  
                        }
              }
              expect(data.data.title).to.be.a('string');
              expect(data.data.title).to.be("Computer name");
              expect(data.data.key).to.be.a('string');
              expect(data.data.key).to.be("computerName__contains");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementRisksEndpointsFiltersCountGet', function() {
        it('should call webApiPrivateApplicationManagementRisksEndpointsFiltersCountGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementRisksEndpointsFiltersCountGet call and complete the assertions
          /*
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.domains = ["domains_example"];
          opts.statusMessageContains = ["statusMessageContains_example"];
          opts.statuses = ["statuses_example"];
          opts.osTypes = ["osTypes_example"];
          opts.lastScanDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.lastScanDateBetween = "lastScanDateBetween_example";
          opts.osVersions = ["osVersions_example"];
          opts.groupIds = ["groupIds_example"];
          opts.lastScanDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.daysFromDetection = 56;
          opts.applicationIds = ["applicationIds_example"];
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.lastScanDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.ticketIdContains = ["ticketIdContains_example"];
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.daysToMitigationBetween = "daysToMitigationBetween_example";
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.domainContains = ["domainContains_example"];
          opts.applicationName = "applicationName_example";
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.endpointTypes = ["endpointTypes_example"];
          opts.endpointIdContains = ["endpointIdContains_example"];
          opts.applicationVendor = "applicationVendor_example";
          opts.accountIds = ["accountIds_example"];
          opts.lastScanDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.lastScanResults = ["lastScanResults_example"];
          opts.applicationVersions = ["applicationVersions_example"];

          instance.webApiPrivateApplicationManagementRisksEndpointsFiltersCountGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.CountFiltersResponseSchemaMany200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.CountFiltersResponseSchemaMany200Data);
                expect(data.disableSorting).to.be.a('boolean');
                expect(data.disableSorting).to.be(false);
                {
                  let dataCtr = data.values;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.CountFiltersResponseSchemaMany200Values);
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                    expect(data.count).to.be.a('number');
                    expect(data.count).to.be(0);
                    expect(data.title).to.be.a('string');
                    expect(data.title).to.be("");
    
                          }
                }
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.key).to.be.a('string');
                expect(data.key).to.be("");
                expect(data.enableNegation).to.be.a('boolean');
                expect(data.enableNegation).to.be(false);

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementRisksEndpointsFreeTextFiltersGet', function() {
        it('should call webApiPrivateApplicationManagementRisksEndpointsFreeTextFiltersGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementRisksEndpointsFreeTextFiltersGet call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.groupIds = ["groupIds_example"];

          instance.webApiPrivateApplicationManagementRisksEndpointsFreeTextFiltersGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.FreeTextFilterResponseSchemaMany200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.FreeTextFilterResponseSchemaMany200Data);
                expect(data.validation).to.be.a('string');
                expect(data.validation).to.be("");
                expect(data.icon).to.be.a('string');
                expect(data.icon).to.be("upload");
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("Computer name");
                expect(data.key).to.be.a('string');
                expect(data.key).to.be("computerName__contains");
                expect(data.autoComplete).to.be.a('string');
                expect(data.autoComplete).to.be("");

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementRisksExpandedGet', function() {
        it('should call webApiPrivateApplicationManagementRisksExpandedGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementRisksExpandedGet call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.id = "id_example";
          opts.groupIds = ["groupIds_example"];

          instance.webApiPrivateApplicationManagementRisksExpandedGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskAdditionalDataSchemaMany200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskAdditionalDataSchemaMany200Data1);
                expect(data.data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskAdditionalDataSchemaMany200Data);
                      expect(data.data.osType).to.be.a('string');
                  expect(data.data.osType).to.be("linux");
                  expect(data.data.endpointName).to.be.a('string');
                  expect(data.data.endpointName).to.be("");
                  expect(data.data.applicationVersion).to.be.a('string');
                  expect(data.data.applicationVersion).to.be("");
                  expect(data.data.severity).to.be.a('string');
                  expect(data.data.severity).to.be("");
                  expect(data.data.mitreUrl).to.be.a('string');
                  expect(data.data.mitreUrl).to.be("");
                  expect(data.data.id).to.be.a('string');
                  expect(data.data.id).to.be("225494730938493804");
                  expect(data.data.groupName).to.be.a('string');
                  expect(data.data.groupName).to.be("");
                  expect(data.data.installationPath).to.be.a('string');
                  expect(data.data.installationPath).to.be("");
                  expect(data.data.siteName).to.be.a('string');
                  expect(data.data.siteName).to.be("");
                  expect(data.data.accountName).to.be.a('string');
                  expect(data.data.accountName).to.be("");
                  expect(data.data.endpointId).to.be.a('string');
                  expect(data.data.endpointId).to.be("");
                  expect(data.data.daysDetected).to.be.a('number');
                  expect(data.data.daysDetected).to.be(0);
                  expect(data.data.publishedDate).to.be.a(Date);
                  expect(data.data.publishedDate).to.be(2018-02-27T04:49:26.257525Z);
                  expect(data.data.cvssVersion).to.be.a('string');
                  expect(data.data.cvssVersion).to.be("");
                  expect(data.data.nvdUrl).to.be.a('string');
                  expect(data.data.nvdUrl).to.be("");
                  expect(data.data.applicationName).to.be.a('string');
                  expect(data.data.applicationName).to.be("");
                  expect(data.data.vulnerabilityDescription).to.be.a('string');
                  expect(data.data.vulnerabilityDescription).to.be("");
                  expect(data.data.domain).to.be.a('string');
                  expect(data.data.domain).to.be("");
                  expect(data.data.cveId).to.be.a('string');
                  expect(data.data.cveId).to.be("");
                  expect(data.data.application).to.be.a('string');
                  expect(data.data.application).to.be("");
                  expect(data.data.baseScore).to.be.a('string');
                  expect(data.data.baseScore).to.be("");
                  expect(data.data.detectionDate).to.be.a(Date);
                  expect(data.data.detectionDate).to.be(2018-02-27T04:49:26.257525Z);
                  expect(data.data.applicationVendor).to.be.a('string');
                  expect(data.data.applicationVendor).to.be("");
                  expect(data.data.endpointType).to.be.a('string');
                  expect(data.data.endpointType).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementRisksExportCsvExtendedGet', function() {
        it('should call webApiPrivateApplicationManagementRisksExportCsvExtendedGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementRisksExportCsvExtendedGet call
          /*
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.sortBy = ["sortBy_example"];
          opts.applicationContains = ["applicationContains_example"];
          opts.vendors = ["vendors_example"];
          opts.mitigationStatuses = ["mitigationStatuses_example"];
          opts.exploitedInTheWild = ["exploitedInTheWild_example"];
          opts.highestSeverities = ["highestSeverities_example"];
          opts.sortOrder = ["sortOrder_example"];
          opts.exploitCodeMaturity = ["exploitCodeMaturity_example"];
          opts.groupIds = ["groupIds_example"];
          opts.daysFromDetection = 56;
          opts.siteIds = ["siteIds_example"];
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.cveIdContains = ["cveIdContains_example"];
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.remediationLevels = ["remediationLevels_example"];
          opts.applicationTypes = ["applicationTypes_example"];
          opts.endpointUuidContains = ["endpointUuidContains_example"];
          opts.vendorContains = ["vendorContains_example"];
          opts.mostCommonStatuses = ["mostCommonStatuses_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiPrivateApplicationManagementRisksExportCsvExtendedGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementRisksFiltersAutocompleteGet', function() {
        it('should call webApiPrivateApplicationManagementRisksFiltersAutocompleteGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementRisksFiltersAutocompleteGet call and complete the assertions
          /*
          var key = "key_example";
          var text = "text_example";
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.riskUpdatedDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.domains = ["domains_example"];
          opts.analystVerdict = ["analystVerdict_example"];
          opts.limit = 56;
          opts.riskUpdatedDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.applicationNames = ["applicationNames_example"];
          opts.publishedDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.applicationVendorContains = ["applicationVendorContains_example"];
          opts.applicationContains = ["applicationContains_example"];
          opts.includeRemovals = true;
          opts.exploitedInTheWild = ["exploitedInTheWild_example"];
          opts.mitigationStatus = ["mitigationStatus_example"];
          opts.osTypes = ["osTypes_example"];
          opts.severities = ["severities_example"];
          opts.publishedDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.vendors = ["vendors_example"];
          opts.osVersions = ["osVersions_example"];
          opts.publishedDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.exploitCodeMaturity = ["exploitCodeMaturity_example"];
          opts.groupIds = ["groupIds_example"];
          opts.publishedDateBetween = "publishedDateBetween_example";
          opts.siteIds = ["siteIds_example"];
          opts.daysFromCveDetection = 56;
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.cveIdContains = ["cveIdContains_example"];
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.riskUpdatedDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.domainContains = ["domainContains_example"];
          opts.remediationLevels = ["remediationLevels_example"];
          opts.riskUpdatedDateBetween = "riskUpdatedDateBetween_example";
          opts.endpointTypes = ["endpointTypes_example"];
          opts.reportConfidence = ["reportConfidence_example"];
          opts.publishedDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.riskUpdatedDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.accountIds = ["accountIds_example"];
          opts.riskScoreBetween = "riskScoreBetween_example";
          opts.lastScanResults = ["lastScanResults_example"];

          instance.webApiPrivateApplicationManagementRisksFiltersAutocompleteGet(key, text, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AutoCompleteResponseSchema200);
            expect(data.data).to.be.a(S1MgmtApi.AutoCompleteResponseSchema200Data);
                  {
                let dataCtr = data.data.values;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.AutoCompleteResponseSchema200DataValues);
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("JohnD_WORKSTATION");
                  expect(data.count).to.be.a('number');
                  expect(data.count).to.be(51);
  
                        }
              }
              expect(data.data.title).to.be.a('string');
              expect(data.data.title).to.be("Computer name");
              expect(data.data.key).to.be.a('string');
              expect(data.data.key).to.be("computerName__contains");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementRisksFiltersCountGet', function() {
        it('should call webApiPrivateApplicationManagementRisksFiltersCountGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementRisksFiltersCountGet call and complete the assertions
          /*
          var opts = {};
          opts.detectionDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.riskUpdatedDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.domains = ["domains_example"];
          opts.analystVerdict = ["analystVerdict_example"];
          opts.riskUpdatedDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.applicationNames = ["applicationNames_example"];
          opts.publishedDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.applicationVendorContains = ["applicationVendorContains_example"];
          opts.applicationContains = ["applicationContains_example"];
          opts.includeRemovals = true;
          opts.exploitedInTheWild = ["exploitedInTheWild_example"];
          opts.mitigationStatus = ["mitigationStatus_example"];
          opts.osTypes = ["osTypes_example"];
          opts.severities = ["severities_example"];
          opts.publishedDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.vendors = ["vendors_example"];
          opts.osVersions = ["osVersions_example"];
          opts.publishedDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.exploitCodeMaturity = ["exploitCodeMaturity_example"];
          opts.groupIds = ["groupIds_example"];
          opts.publishedDateBetween = "publishedDateBetween_example";
          opts.siteIds = ["siteIds_example"];
          opts.daysFromCveDetection = 56;
          opts.detectionDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.endpointNameContains = ["endpointNameContains_example"];
          opts.cveIdContains = ["cveIdContains_example"];
          opts.detectionDateGt = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.detectionDateBetween = "detectionDateBetween_example";
          opts.riskUpdatedDateLte = new Date("2013-10-20T19:20:30+01:00");
          opts.domainContains = ["domainContains_example"];
          opts.remediationLevels = ["remediationLevels_example"];
          opts.riskUpdatedDateBetween = "riskUpdatedDateBetween_example";
          opts.endpointTypes = ["endpointTypes_example"];
          opts.reportConfidence = ["reportConfidence_example"];
          opts.publishedDateGte = new Date("2013-10-20T19:20:30+01:00");
          opts.riskUpdatedDateLt = new Date("2013-10-20T19:20:30+01:00");
          opts.accountIds = ["accountIds_example"];
          opts.riskScoreBetween = "riskScoreBetween_example";
          opts.lastScanResults = ["lastScanResults_example"];

          instance.webApiPrivateApplicationManagementRisksFiltersCountGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.CountFiltersResponseSchemaMany200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.CountFiltersResponseSchemaMany200Data);
                expect(data.disableSorting).to.be.a('boolean');
                expect(data.disableSorting).to.be(false);
                {
                  let dataCtr = data.values;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.CountFiltersResponseSchemaMany200Values);
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                    expect(data.count).to.be.a('number');
                    expect(data.count).to.be(0);
                    expect(data.title).to.be.a('string');
                    expect(data.title).to.be("");
    
                          }
                }
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.key).to.be.a('string');
                expect(data.key).to.be("");
                expect(data.enableNegation).to.be.a('boolean');
                expect(data.enableNegation).to.be(false);

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementRisksFreeTextFiltersGet', function() {
        it('should call webApiPrivateApplicationManagementRisksFreeTextFiltersGet successfully', function(done) {
          // TODO: uncomment webApiPrivateApplicationManagementRisksFreeTextFiltersGet call and complete the assertions
          /*

          instance.webApiPrivateApplicationManagementRisksFreeTextFiltersGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.FreeTextFilterResponseSchemaMany200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.FreeTextFilterResponseSchemaMany200Data);
                expect(data.validation).to.be.a('string');
                expect(data.validation).to.be("");
                expect(data.icon).to.be.a('string');
                expect(data.icon).to.be("upload");
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("Computer name");
                expect(data.key).to.be.a('string');
                expect(data.key).to.be("computerName__contains");
                expect(data.autoComplete).to.be.a('string');
                expect(data.autoComplete).to.be("");

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementRisksidGet', function() {
        it('should call webApiPrivateApplicationManagementRisksidGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementRisksidGet call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.groupIds = ["groupIds_example"];

          instance.webApiPrivateApplicationManagementRisksidGet(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200);
            expect(data.data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200Data);
                  expect(data.data.riskScore).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataRiskScore);
                    expect(data.data.riskScore.nvdBaseScore).to.be.a('string');
                expect(data.data.riskScore.nvdBaseScore).to.be("");
                expect(data.data.riskScore.isExploitedInTheWild).to.be.a('boolean');
                expect(data.data.riskScore.isExploitedInTheWild).to.be(false);
                expect(data.data.riskScore.baseScore).to.be.a('string');
                expect(data.data.riskScore.baseScore).to.be("");
                expect(data.data.riskScore.riskScore).to.be.a('string');
                expect(data.data.riskScore.riskScore).to.be("");
                expect(data.data.riskScore.remediationLevel).to.be.a('string');
                expect(data.data.riskScore.remediationLevel).to.be("Not Defined");
                expect(data.data.riskScore.temporalScore).to.be.a('string');
                expect(data.data.riskScore.temporalScore).to.be("");
                expect(data.data.riskScore.order).to.be.a('number');
                expect(data.data.riskScore.order).to.be(0);
                expect(data.data.riskScore.exploitCodeMaturity).to.be.a('string');
                expect(data.data.riskScore.exploitCodeMaturity).to.be("Not Defined");
                expect(data.data.riskScore.severity).to.be.a('string');
                expect(data.data.riskScore.severity).to.be("");
                expect(data.data.riskScore.reportConfidence).to.be.a('string');
                expect(data.data.riskScore.reportConfidence).to.be("Not Defined");
                expect(data.data.riskScore.type).to.be.a('string');
                expect(data.data.riskScore.type).to.be("");
                expect(data.data.riskScore.attackVectors).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataRiskScoreAttackVectors);
                      expect(data.data.riskScore.attackVectors.nvdBaseScore).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataRiskScoreAttackVectorsNvdBaseScore);
                        expect(data.data.riskScore.attackVectors.nvdBaseScore.confidentiality).to.be.a('string');
                    expect(data.data.riskScore.attackVectors.nvdBaseScore.confidentiality).to.be("");
                    expect(data.data.riskScore.attackVectors.nvdBaseScore.privilegesRequired).to.be.a('string');
                    expect(data.data.riskScore.attackVectors.nvdBaseScore.privilegesRequired).to.be("");
                    expect(data.data.riskScore.attackVectors.nvdBaseScore.integrity).to.be.a('string');
                    expect(data.data.riskScore.attackVectors.nvdBaseScore.integrity).to.be("");
                    expect(data.data.riskScore.attackVectors.nvdBaseScore.attackComplexity).to.be.a('string');
                    expect(data.data.riskScore.attackVectors.nvdBaseScore.attackComplexity).to.be("");
                    expect(data.data.riskScore.attackVectors.nvdBaseScore.attackVector).to.be.a('string');
                    expect(data.data.riskScore.attackVectors.nvdBaseScore.attackVector).to.be("");
                    expect(data.data.riskScore.attackVectors.nvdBaseScore.userInteraction).to.be.a('string');
                    expect(data.data.riskScore.attackVectors.nvdBaseScore.userInteraction).to.be("");
                    expect(data.data.riskScore.attackVectors.nvdBaseScore.scope).to.be.a('string');
                    expect(data.data.riskScore.attackVectors.nvdBaseScore.scope).to.be("");
                    expect(data.data.riskScore.attackVectors.nvdBaseScore.availability).to.be.a('string');
                    expect(data.data.riskScore.attackVectors.nvdBaseScore.availability).to.be("");
                  expect(data.data.riskScore.attackVectors.baseScore).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataRiskScoreAttackVectorsBaseScore);
                        expect(data.data.riskScore.attackVectors.baseScore.confidentiality).to.be.a('string');
                    expect(data.data.riskScore.attackVectors.baseScore.confidentiality).to.be("");
                    expect(data.data.riskScore.attackVectors.baseScore.privilegesRequired).to.be.a('string');
                    expect(data.data.riskScore.attackVectors.baseScore.privilegesRequired).to.be("");
                    expect(data.data.riskScore.attackVectors.baseScore.integrity).to.be.a('string');
                    expect(data.data.riskScore.attackVectors.baseScore.integrity).to.be("");
                    expect(data.data.riskScore.attackVectors.baseScore.attackComplexity).to.be.a('string');
                    expect(data.data.riskScore.attackVectors.baseScore.attackComplexity).to.be("");
                    expect(data.data.riskScore.attackVectors.baseScore.attackVector).to.be.a('string');
                    expect(data.data.riskScore.attackVectors.baseScore.attackVector).to.be("");
                    expect(data.data.riskScore.attackVectors.baseScore.userInteraction).to.be.a('string');
                    expect(data.data.riskScore.attackVectors.baseScore.userInteraction).to.be("");
                    expect(data.data.riskScore.attackVectors.baseScore.scope).to.be.a('string');
                    expect(data.data.riskScore.attackVectors.baseScore.scope).to.be("");
                    expect(data.data.riskScore.attackVectors.baseScore.availability).to.be.a('string');
                    expect(data.data.riskScore.attackVectors.baseScore.availability).to.be("");
              expect(data.data.vulnerabilityIndicators).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataVulnerabilityIndicators);
                    {
                  let dataCtr = data.data.vulnerabilityIndicators.data;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataVulnerabilityIndicatorsData);
                    {
                      let dataCtr = data.items;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataVulnerabilityIndicatorsItems);
                        expect(data.url).to.be.a('string');
                        expect(data.url).to.be("");
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
        
                              }
                    }
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.severity).to.be.a('string');
                    expect(data.severity).to.be("LOW");
    
                          }
                }
                expect(data.data.vulnerabilityIndicators.order).to.be.a('number');
                expect(data.data.vulnerabilityIndicators.order).to.be(0);
                expect(data.data.vulnerabilityIndicators.cveId).to.be.a('string');
                expect(data.data.vulnerabilityIndicators.cveId).to.be("");
                expect(data.data.vulnerabilityIndicators.type).to.be.a('string');
                expect(data.data.vulnerabilityIndicators.type).to.be("");
              expect(data.data.vulnerabilityTimeline).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataVulnerabilityTimeline);
                    expect(data.data.vulnerabilityTimeline.vulnerabilityIdentified).to.be.a(Date);
                expect(data.data.vulnerabilityTimeline.vulnerabilityIdentified).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.vulnerabilityTimeline.order).to.be.a('number');
                expect(data.data.vulnerabilityTimeline.order).to.be(0);
                expect(data.data.vulnerabilityTimeline.advisoryPublished).to.be.a(Date);
                expect(data.data.vulnerabilityTimeline.advisoryPublished).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.vulnerabilityTimeline.pocPublished).to.be.a(Date);
                expect(data.data.vulnerabilityTimeline.pocPublished).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.vulnerabilityTimeline.cveAssigned).to.be.a(Date);
                expect(data.data.vulnerabilityTimeline.cveAssigned).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.vulnerabilityTimeline.type).to.be.a('string');
                expect(data.data.vulnerabilityTimeline.type).to.be("");
                expect(data.data.vulnerabilityTimeline.mitigationPublished).to.be.a(Date);
                expect(data.data.vulnerabilityTimeline.mitigationPublished).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.vulnerabilityTimeline.exploitedInTheWild).to.be.a(Date);
                expect(data.data.vulnerabilityTimeline.exploitedInTheWild).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.endpointDetails).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataEndpointDetails);
                    expect(data.data.endpointDetails.domain).to.be.a('string');
                expect(data.data.endpointDetails.domain).to.be("");
                expect(data.data.endpointDetails.groupName).to.be.a('string');
                expect(data.data.endpointDetails.groupName).to.be("");
                expect(data.data.endpointDetails.osType).to.be.a('string');
                expect(data.data.endpointDetails.osType).to.be("linux");
                expect(data.data.endpointDetails.installationPath).to.be.a('string');
                expect(data.data.endpointDetails.installationPath).to.be("");
                expect(data.data.endpointDetails.order).to.be.a('number');
                expect(data.data.endpointDetails.order).to.be(0);
                expect(data.data.endpointDetails.siteName).to.be.a('string');
                expect(data.data.endpointDetails.siteName).to.be("");
                expect(data.data.endpointDetails.endpointName).to.be.a('string');
                expect(data.data.endpointDetails.endpointName).to.be("");
                expect(data.data.endpointDetails.accountName).to.be.a('string');
                expect(data.data.endpointDetails.accountName).to.be("");
                expect(data.data.endpointDetails.endpointId).to.be.a('string');
                expect(data.data.endpointDetails.endpointId).to.be("");
                expect(data.data.endpointDetails.endpointType).to.be.a('string');
                expect(data.data.endpointDetails.endpointType).to.be("");
                expect(data.data.endpointDetails.type).to.be.a('string');
                expect(data.data.endpointDetails.type).to.be("");
              expect(data.data.vulnerabilityDetails).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataVulnerabilityDetails);
                    expect(data.data.vulnerabilityDetails.daysDetected).to.be.a('number');
                expect(data.data.vulnerabilityDetails.daysDetected).to.be(0);
                expect(data.data.vulnerabilityDetails.cveId).to.be.a('string');
                expect(data.data.vulnerabilityDetails.cveId).to.be("");
                expect(data.data.vulnerabilityDetails.publishedDate).to.be.a(Date);
                expect(data.data.vulnerabilityDetails.publishedDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.vulnerabilityDetails.cvssVersion).to.be.a('string');
                expect(data.data.vulnerabilityDetails.cvssVersion).to.be("");
                expect(data.data.vulnerabilityDetails.baseScore).to.be.a('string');
                expect(data.data.vulnerabilityDetails.baseScore).to.be("");
                expect(data.data.vulnerabilityDetails.detectionDate).to.be.a(Date);
                expect(data.data.vulnerabilityDetails.detectionDate).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.vulnerabilityDetails.nvdUrl).to.be.a('string');
                expect(data.data.vulnerabilityDetails.nvdUrl).to.be("");
                expect(data.data.vulnerabilityDetails.riskScore).to.be.a('string');
                expect(data.data.vulnerabilityDetails.riskScore).to.be("");
                expect(data.data.vulnerabilityDetails.applicationVendor).to.be.a('string');
                expect(data.data.vulnerabilityDetails.applicationVendor).to.be("");
                expect(data.data.vulnerabilityDetails.order).to.be.a('number');
                expect(data.data.vulnerabilityDetails.order).to.be(0);
                expect(data.data.vulnerabilityDetails.application).to.be.a('string');
                expect(data.data.vulnerabilityDetails.application).to.be("");
                expect(data.data.vulnerabilityDetails.applicationName).to.be.a('string');
                expect(data.data.vulnerabilityDetails.applicationName).to.be("");
                expect(data.data.vulnerabilityDetails.severity).to.be.a('string');
                expect(data.data.vulnerabilityDetails.severity).to.be("");
                expect(data.data.vulnerabilityDetails.mitreUrl).to.be.a('string');
                expect(data.data.vulnerabilityDetails.mitreUrl).to.be("");
                expect(data.data.vulnerabilityDetails.type).to.be.a('string');
                expect(data.data.vulnerabilityDetails.type).to.be("");
                expect(data.data.vulnerabilityDetails.vulnerabilityDescription).to.be.a('string');
                expect(data.data.vulnerabilityDetails.vulnerabilityDescription).to.be("");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementScanGet', function() {
        it('should call webApiPrivateApplicationManagementScanGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementScanGet call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.siteIds = ["siteIds_example"];

          instance.webApiPrivateApplicationManagementScanGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasApplicationManagementScanSchema200);
            expect(data.data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasApplicationManagementScanSchema200Data);
                  expect(data.data.scanDisabledUntil).to.be.a(Date);
              expect(data.data.scanDisabledUntil).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.isAvailable).to.be.a('boolean');
              expect(data.data.isAvailable).to.be(false);
              expect(data.data.lastScan).to.be.a(Date);
              expect(data.data.lastScan).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.nextScan).to.be.a(Date);
              expect(data.data.nextScan).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.scanDisabledSecondsPeriod).to.be.a('number');
              expect(data.data.scanDisabledSecondsPeriod).to.be(0);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiPrivateApplicationManagementSkuGet', function() {
        it('should call webApiPrivateApplicationManagementSkuGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiPrivateApplicationManagementSkuGet call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.groupIds = ["groupIds_example"];

          instance.webApiPrivateApplicationManagementSkuGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasApplicationManagementSkuGetSchema200);
            expect(data.data).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasApplicationManagementSkuGetSchema200Data);
                  expect(data.data.isSkuAvailable).to.be.a('boolean');
              expect(data.data.isSkuAvailable).to.be(false);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
