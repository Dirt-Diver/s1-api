/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.MobileIntegrationApi();
  });

  describe('(package)', function() {
    describe('MobileIntegrationApi', function() {
      describe('webApiMobileIntegrationAccountsaccountIdPolicyDelete', function() {
        it('should call webApiMobileIntegrationAccountsaccountIdPolicyDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationAccountsaccountIdPolicyDelete call
          /*
          var accountId = "accountId_example";

          instance.webApiMobileIntegrationAccountsaccountIdPolicyDelete(accountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationAccountsaccountIdPolicyGet', function() {
        it('should call webApiMobileIntegrationAccountsaccountIdPolicyGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationAccountsaccountIdPolicyGet call and complete the assertions
          /*
          var accountId = "accountId_example";

          instance.webApiMobileIntegrationAccountsaccountIdPolicyGet(accountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200);
            expect(data.data).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200Data);
                  expect(data.data.updatedBy).to.be.a('string');
              expect(data.data.updatedBy).to.be("");
              expect(data.data.threatResponseGroupId).to.be.a('string');
              expect(data.data.threatResponseGroupId).to.be("");
              expect(data.data.alertResponseGroupId).to.be.a('string');
              expect(data.data.alertResponseGroupId).to.be("");
              expect(data.data.updatedAt).to.be.a('string');
              expect(data.data.updatedAt).to.be("");
              expect(data.data.userFullName).to.be.a('string');
              expect(data.data.userFullName).to.be("");
              expect(data.data.alertOnDeviceAlert).to.be.a('string');
              expect(data.data.alertOnDeviceAlert).to.be("");
              expect(data.data.alerts).to.be.a('string');
              expect(data.data.alerts).to.be("");
              expect(data.data.connectionScopeId).to.be.a('string');
              expect(data.data.connectionScopeId).to.be("");
              expect(data.data.connectionId).to.be.a('string');
              expect(data.data.connectionId).to.be("");
              expect(data.data.engines).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200DataEngines);
                    expect(data.data.engines.appBehavioralAi).to.be.a('string');
                expect(data.data.engines.appBehavioralAi).to.be("");
                expect(data.data.engines.systemBehavioralAi).to.be.a('string');
                expect(data.data.engines.systemBehavioralAi).to.be("");
                expect(data.data.engines.appStaticAi).to.be.a('string');
                expect(data.data.engines.appStaticAi).to.be("");
                expect(data.data.engines.vulnerabilityScanner).to.be.a('string');
                expect(data.data.engines.vulnerabilityScanner).to.be("");
                expect(data.data.engines.systemStaticAi).to.be.a('string');
                expect(data.data.engines.systemStaticAi).to.be("");
                expect(data.data.engines.networkAnalysis).to.be.a('string');
                expect(data.data.engines.networkAnalysis).to.be("");
                expect(data.data.engines.phishingScanner).to.be.a('string');
                expect(data.data.engines.phishingScanner).to.be("");
              expect(data.data.connectionScopeLevel).to.be.a('string');
              expect(data.data.connectionScopeLevel).to.be("");
              expect(data.data.inheritedFrom).to.be.a('string');
              expect(data.data.inheritedFrom).to.be("");
              expect(data.data.responseActions).to.be.a('string');
              expect(data.data.responseActions).to.be("");
              expect(data.data.threatPhishingPrevention).to.be.a('string');
              expect(data.data.threatPhishingPrevention).to.be("");
              expect(data.data._default).to.be.a('boolean');
              expect(data.data._default).to.be(false);
              expect(data.data.threatOnDeviceAlert).to.be.a('string');
              expect(data.data.threatOnDeviceAlert).to.be("");
              expect(data.data.threats).to.be.a('string');
              expect(data.data.threats).to.be("");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationAccountsaccountIdPolicyPut', function() {
        it('should call webApiMobileIntegrationAccountsaccountIdPolicyPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationAccountsaccountIdPolicyPut call and complete the assertions
          /*
          var accountId = "accountId_example";
          var opts = {};
          opts.body = new S1MgmtApi.V21PolicySchemasPolicyRequest();
          opts.body.data = new S1MgmtApi.V21PolicySchemasPolicyRequestData();
          opts.body.data.threatResponseGroupId = "";
          opts.body.data.alertResponseGroupId = "";
          opts.body.data.alertOnDeviceAlert = "";
          opts.body.data.alerts = "";
          opts.body.data.engines = new S1MgmtApi.V21PolicySchemasPolicy200DataEngines();
          opts.body.data.engines.appBehavioralAi = "";
          opts.body.data.engines.systemBehavioralAi = "";
          opts.body.data.engines.appStaticAi = "";
          opts.body.data.engines.vulnerabilityScanner = "";
          opts.body.data.engines.systemStaticAi = "";
          opts.body.data.engines.networkAnalysis = "";
          opts.body.data.engines.phishingScanner = "";
          opts.body.data.threatPhishingPrevention = "";
          opts.body.data.threatOnDeviceAlert = "";
          opts.body.data.threats = "";
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationAccountsaccountIdPolicyPut(accountId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200);
            expect(data.data).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200Data);
                  expect(data.data.updatedBy).to.be.a('string');
              expect(data.data.updatedBy).to.be("");
              expect(data.data.threatResponseGroupId).to.be.a('string');
              expect(data.data.threatResponseGroupId).to.be("");
              expect(data.data.alertResponseGroupId).to.be.a('string');
              expect(data.data.alertResponseGroupId).to.be("");
              expect(data.data.updatedAt).to.be.a('string');
              expect(data.data.updatedAt).to.be("");
              expect(data.data.userFullName).to.be.a('string');
              expect(data.data.userFullName).to.be("");
              expect(data.data.alertOnDeviceAlert).to.be.a('string');
              expect(data.data.alertOnDeviceAlert).to.be("");
              expect(data.data.alerts).to.be.a('string');
              expect(data.data.alerts).to.be("");
              expect(data.data.connectionScopeId).to.be.a('string');
              expect(data.data.connectionScopeId).to.be("");
              expect(data.data.connectionId).to.be.a('string');
              expect(data.data.connectionId).to.be("");
              expect(data.data.engines).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200DataEngines);
                    expect(data.data.engines.appBehavioralAi).to.be.a('string');
                expect(data.data.engines.appBehavioralAi).to.be("");
                expect(data.data.engines.systemBehavioralAi).to.be.a('string');
                expect(data.data.engines.systemBehavioralAi).to.be("");
                expect(data.data.engines.appStaticAi).to.be.a('string');
                expect(data.data.engines.appStaticAi).to.be("");
                expect(data.data.engines.vulnerabilityScanner).to.be.a('string');
                expect(data.data.engines.vulnerabilityScanner).to.be("");
                expect(data.data.engines.systemStaticAi).to.be.a('string');
                expect(data.data.engines.systemStaticAi).to.be("");
                expect(data.data.engines.networkAnalysis).to.be.a('string');
                expect(data.data.engines.networkAnalysis).to.be("");
                expect(data.data.engines.phishingScanner).to.be.a('string');
                expect(data.data.engines.phishingScanner).to.be("");
              expect(data.data.connectionScopeLevel).to.be.a('string');
              expect(data.data.connectionScopeLevel).to.be("");
              expect(data.data.inheritedFrom).to.be.a('string');
              expect(data.data.inheritedFrom).to.be("");
              expect(data.data.responseActions).to.be.a('string');
              expect(data.data.responseActions).to.be("");
              expect(data.data.threatPhishingPrevention).to.be.a('string');
              expect(data.data.threatPhishingPrevention).to.be("");
              expect(data.data._default).to.be.a('boolean');
              expect(data.data._default).to.be(false);
              expect(data.data.threatOnDeviceAlert).to.be.a('string');
              expect(data.data.threatOnDeviceAlert).to.be("");
              expect(data.data.threats).to.be.a('string');
              expect(data.data.threats).to.be("");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationActivationAnonymousGet', function() {
        it('should call webApiMobileIntegrationActivationAnonymousGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationActivationAnonymousGet call and complete the assertions
          /*
          var opts = {};
          opts.countOnly = false;
          opts.sortBy = "null";
          opts.tenant = true;
          opts.siteIds = ["siteIds_example"];
          opts.limit = 10;
          opts.skipCount = null;
          opts.cursor = "null";
          opts.skip = 56;
          opts.groupIds = ["groupIds_example"];
          opts.sortOrder = "null";
          opts.accountIds = ["accountIds_example"];

          instance.webApiMobileIntegrationActivationAnonymousGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ActivationSchemasAnonymousActivationListItemMany200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21ActivationSchemasAnonymousActivationListItemMany200Data);
                expect(data.activationLimit).to.be.a('number');
                expect(data.activationLimit).to.be(0);
                expect(data.createdAt).to.be.a('string');
                expect(data.createdAt).to.be("");
                expect(data.linkExpiry).to.be.a('string');
                expect(data.linkExpiry).to.be("");
                expect(data.activationLink).to.be.a('string');
                expect(data.activationLink).to.be("");
                expect(data.createdBy).to.be.a('string');
                expect(data.createdBy).to.be("");
                expect(data.scope).to.be.a(S1MgmtApi.V21ActivationSchemasAnonymousActivationListItemMany200Scope);
                      expect(data.scope.groupName).to.be.a('string');
                  expect(data.scope.groupName).to.be("");
                  expect(data.scope.accountName).to.be.a('string');
                  expect(data.scope.accountName).to.be("");
                  expect(data.scope.siteName).to.be.a('string');
                  expect(data.scope.siteName).to.be("");
                expect(data.mgmtGroupName).to.be.a('string');
                expect(data.mgmtGroupName).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.activationCount).to.be.a('number');
                expect(data.activationCount).to.be(0);

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationActivationAnonymousPost', function() {
        it('should call webApiMobileIntegrationActivationAnonymousPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationActivationAnonymousPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21ActivationSchemasAnonymousActivationRequestWrapper();
          opts.body.data = new S1MgmtApi.V21ActivationSchemasAnonymousActivationRequestWrapperData();
          opts.body.data.activationLimit = 0;
          opts.body.data.mgmtGroupId = "";
          opts.body.data.name = "";
          opts.body.data.description = "";
          opts.body.data.expiryDays = 0;
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationActivationAnonymousPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ActivationSchemasAnonymousActivationResponse201);
            expect(data.data).to.be.a(S1MgmtApi.V21ActivationSchemasAnonymousActivationResponse201Data);
                  expect(data.data.expiryDays).to.be.a('string');
              expect(data.data.expiryDays).to.be("");
              expect(data.data.activationLink).to.be.a('string');
              expect(data.data.activationLink).to.be("");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationActivationUserActivationCancelActivationsPut', function() {
        it('should call webApiMobileIntegrationActivationUserActivationCancelActivationsPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationActivationUserActivationCancelActivationsPut call
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapper();
          opts.body.data = [""];
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationActivationUserActivationCancelActivationsPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationActivationUserActivationGet', function() {
        it('should call webApiMobileIntegrationActivationUserActivationGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationActivationUserActivationGet call and complete the assertions
          /*
          var opts = {};
          opts.countOnly = false;
          opts.sortBy = "null";
          opts.tenant = true;
          opts.siteIds = ["siteIds_example"];
          opts.limit = 10;
          opts.skipCount = null;
          opts.cursor = "null";
          opts.skip = 56;
          opts.groupIds = ["groupIds_example"];
          opts.statusIn = ["statusIn_example"];
          opts.sortOrder = "null";
          opts.accountIds = ["accountIds_example"];

          instance.webApiMobileIntegrationActivationUserActivationGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ActivationSchemasUserActivationItemMany200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21ActivationSchemasUserActivationItemMany200Data);
                expect(data.activationLimit).to.be.a('number');
                expect(data.activationLimit).to.be(0);
                expect(data.createdAt).to.be.a('string');
                expect(data.createdAt).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("");
                expect(data.createdBy).to.be.a('string');
                expect(data.createdBy).to.be("");
                expect(data.scope).to.be.a(S1MgmtApi.V21ActivationSchemasUserActivationItemMany200Scope);
                      expect(data.scope.groupName).to.be.a('string');
                  expect(data.scope.groupName).to.be("");
                  expect(data.scope.accountName).to.be.a('string');
                  expect(data.scope.accountName).to.be("");
                  expect(data.scope.siteName).to.be.a('string');
                  expect(data.scope.siteName).to.be("");
                expect(data.mgmtGroupName).to.be.a('string');
                expect(data.mgmtGroupName).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.activationCount).to.be.a('number');
                expect(data.activationCount).to.be(0);

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationActivationUserActivationImportPost', function() {
        it('should call webApiMobileIntegrationActivationUserActivationImportPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationActivationUserActivationImportPost call and complete the assertions
          /*
          var file = "/path/to/file.txt";
          var opts = {};
          opts.filter = "filter_example";
          opts.mgmtGroupId = "null";

          instance.webApiMobileIntegrationActivationUserActivationImportPost(file, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ActivationSchemasCheckBulkUserActivationImportResponse200);
            expect(data.data).to.be.a(S1MgmtApi.V21ActivationSchemasCheckBulkUserActivationImportResponse200Data);
                  {
                let dataCtr = data.data.errors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.V21ActivationSchemasCheckBulkUserActivationImportResponse200DataErrors);
                  {
                    let dataCtr = data.params;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.errorCode).to.be.a('string');
                  expect(data.errorCode).to.be("");
  
                        }
              }
              expect(data.data.total).to.be.a('number');
              expect(data.data.total).to.be(0);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationActivationUserActivationPost', function() {
        it('should call webApiMobileIntegrationActivationUserActivationPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationActivationUserActivationPost call
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21ActivationSchemasUserActivationRequestWrapper();
          opts.body.data = new S1MgmtApi.V21ActivationSchemasUserActivationRequestWrapperData();
          opts.body.data.details = [new S1MgmtApi.V21ActivationSchemasUserActivationRequestWrapperDataDetails()];
          opts.body.data.details[0].activationLimit = 0;
          opts.body.data.details[0].email = "";
          opts.body.data.details[0].lastName = "";
          opts.body.data.details[0].firstName = "";
          opts.body.data.mgmtGroupId = "";
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationActivationUserActivationPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationActivationUserActivationResendActivationsPut', function() {
        it('should call webApiMobileIntegrationActivationUserActivationResendActivationsPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationActivationUserActivationResendActivationsPut call
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapper();
          opts.body.data = [""];
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationActivationUserActivationResendActivationsPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationActivationUserActivationValidateImportPost', function() {
        it('should call webApiMobileIntegrationActivationUserActivationValidateImportPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationActivationUserActivationValidateImportPost call and complete the assertions
          /*
          var file = "/path/to/file.txt";
          var opts = {};
          opts.filter = "filter_example";

          instance.webApiMobileIntegrationActivationUserActivationValidateImportPost(file, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ActivationSchemasCheckBulkUserActivationImportResponse200);
            expect(data.data).to.be.a(S1MgmtApi.V21ActivationSchemasCheckBulkUserActivationImportResponse200Data);
                  {
                let dataCtr = data.data.errors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.V21ActivationSchemasCheckBulkUserActivationImportResponse200DataErrors);
                  {
                    let dataCtr = data.params;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.errorCode).to.be.a('string');
                  expect(data.errorCode).to.be("");
  
                        }
              }
              expect(data.data.total).to.be.a('number');
              expect(data.data.total).to.be(0);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationDevicesGet', function() {
        it('should call webApiMobileIntegrationDevicesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationDevicesGet call and complete the assertions
          /*
          var opts = {};
          opts.sortBy = "null";
          opts.appVersionIn = ["appVersionIn_example"];
          opts.tenant = true;
          opts.healthStateIn = ["healthStateIn_example"];
          opts.sortOrder = "null";
          opts.accountIds = ["accountIds_example"];
          opts.trackingId1Contains = "trackingId1Contains_example";
          opts.privilegesIn = ["privilegesIn_example"];
          opts.modelContains = "modelContains_example";
          opts.osVersionContains = "osVersionContains_example";
          opts.platformIn = ["platformIn_example"];
          opts.countOnly = false;
          opts.siteIds = ["siteIds_example"];
          opts.limit = 10;
          opts.skipCount = null;
          opts.userContains = "userContains_example";
          opts.skip = 56;
          opts.deviceIdContains = "deviceIdContains_example";
          opts.trackingId2Contains = "trackingId2Contains_example";
          opts.cursor = "null";
          opts.groupIds = ["groupIds_example"];

          instance.webApiMobileIntegrationDevicesGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21DevicesSchemasDeviceDataSchemaMany200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21DevicesSchemasDeviceDataSchemaMany200Data);
                expect(data.stagefreightVulnerable).to.be.a('boolean');
                expect(data.stagefreightVulnerable).to.be(false);
                expect(data.appState).to.be.a('string');
                expect(data.appState).to.be("registered");
                expect(data.lastActiveOn).to.be.a('string');
                expect(data.lastActiveOn).to.be("2018-02-27T04:49:26.257525Z");
                expect(data.siteId).to.be.a('string');
                expect(data.siteId).to.be("");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.accountId).to.be.a('string');
                expect(data.accountId).to.be("");
                expect(data.encrypted).to.be.a('boolean');
                expect(data.encrypted).to.be(false);
                expect(data.screenLocked).to.be.a('boolean');
                expect(data.screenLocked).to.be(false);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.alertCounts).to.be.a(S1MgmtApi.V21DevicesSchemasDeviceDataSchemaMany200AlertCounts);
                      expect(data.alertCounts.notMitigatedCount).to.be.a('number');
                  expect(data.alertCounts.notMitigatedCount).to.be(0);
                  expect(data.alertCounts.adminResolvedCount).to.be.a('number');
                  expect(data.alertCounts.adminResolvedCount).to.be(1);
                  expect(data.alertCounts.conditionalAccessCount).to.be.a('number');
                  expect(data.alertCounts.conditionalAccessCount).to.be(1);
                  expect(data.alertCounts.mitigatedCount).to.be.a('number');
                  expect(data.alertCounts.mitigatedCount).to.be(2);
                expect(data.groupId).to.be.a('string');
                expect(data.groupId).to.be("");
                expect(data.privileges).to.be.a('string');
                expect(data.privileges).to.be("rooted");
                expect(data.accountName).to.be.a('string');
                expect(data.accountName).to.be("");
                expect(data.siteName).to.be.a('string');
                expect(data.siteName).to.be("");
                expect(data.registrationDate).to.be.a('string');
                expect(data.registrationDate).to.be("2022-03-17T04:49:26.257525Z");
                expect(data.debugMode).to.be.a('boolean');
                expect(data.debugMode).to.be(false);
                expect(data.registrationSource).to.be.a('string');
                expect(data.registrationSource).to.be("Intune Connection");
                expect(data.model).to.be.a('string');
                expect(data.model).to.be("Samsung S9");
                expect(data.deviceId).to.be.a('string');
                expect(data.deviceId).to.be("");
                expect(data.policyUpdatedAt).to.be.a('string');
                expect(data.policyUpdatedAt).to.be("2018-02-27T04:49:26.257525Z");
                expect(data.healthState).to.be.a('string');
                expect(data.healthState).to.be("low");
                expect(data.appVersion).to.be.a('string');
                expect(data.appVersion).to.be("2.3.5");
                expect(data.unofficialAppstore).to.be.a('boolean');
                expect(data.unofficialAppstore).to.be(false);
                expect(data._protected).to.be.a('boolean');
                expect(data._protected).to.be(false);
                expect(data.trackingId1).to.be.a('string');
                expect(data.trackingId1).to.be("iphone-tom-dawn");
                expect(data.developerMode).to.be.a('boolean');
                expect(data.developerMode).to.be(false);
                expect(data.groupName).to.be.a('string');
                expect(data.groupName).to.be("");
                expect(data.trackingId2).to.be.a('string');
                expect(data.trackingId2).to.be("samsung-galaxy-bob-junior");
                expect(data.managedState).to.be.a('string');
                expect(data.managedState).to.be("synced");
                expect(data.registrationType).to.be.a('string');
                expect(data.registrationType).to.be("mdm");
                expect(data.threatCounts).to.be.a(S1MgmtApi.V21DevicesSchemasDeviceDataSchemaMany200ThreatCounts);
                      expect(data.threatCounts.notMitigatedCount).to.be.a('number');
                  expect(data.threatCounts.notMitigatedCount).to.be(0);
                  expect(data.threatCounts.adminResolvedCount).to.be.a('number');
                  expect(data.threatCounts.adminResolvedCount).to.be(1);
                  expect(data.threatCounts.conditionalAccessCount).to.be.a('number');
                  expect(data.threatCounts.conditionalAccessCount).to.be(1);
                  expect(data.threatCounts.mitigatedCount).to.be.a('number');
                  expect(data.threatCounts.mitigatedCount).to.be(2);
                expect(data.osVersion).to.be.a('string');
                expect(data.osVersion).to.be("11.1");
                expect(data.registeredOn).to.be.a('string');
                expect(data.registeredOn).to.be("2022-03-17T04:49:26.257525Z");
                expect(data.platform).to.be.a('string');
                expect(data.platform).to.be("android");

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationDevicesdeviceIdGet', function() {
        it('should call webApiMobileIntegrationDevicesdeviceIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationDevicesdeviceIdGet call and complete the assertions
          /*
          var deviceId = "deviceId_example";
          var opts = {};
          opts.groupIds = ["groupIds_example"];
          opts.tenant = true;
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiMobileIntegrationDevicesdeviceIdGet(deviceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21DevicesSchemasDeviceDataSchema200);
            expect(data.data).to.be.a(S1MgmtApi.V21DevicesSchemasDeviceDataSchema200Data);
                  expect(data.data.stagefreightVulnerable).to.be.a('boolean');
              expect(data.data.stagefreightVulnerable).to.be(false);
              expect(data.data.appState).to.be.a('string');
              expect(data.data.appState).to.be("registered");
              expect(data.data.lastActiveOn).to.be.a('string');
              expect(data.data.lastActiveOn).to.be("2018-02-27T04:49:26.257525Z");
              expect(data.data.siteId).to.be.a('string');
              expect(data.data.siteId).to.be("");
              expect(data.data.owner).to.be.a('string');
              expect(data.data.owner).to.be("");
              expect(data.data.accountId).to.be.a('string');
              expect(data.data.accountId).to.be("");
              expect(data.data.encrypted).to.be.a('boolean');
              expect(data.data.encrypted).to.be(false);
              expect(data.data.screenLocked).to.be.a('boolean');
              expect(data.data.screenLocked).to.be(false);
              expect(data.data.id).to.be.a('number');
              expect(data.data.id).to.be(0);
              expect(data.data.alertCounts).to.be.a(S1MgmtApi.V21DevicesSchemasDeviceDataSchemaMany200AlertCounts);
                    expect(data.data.alertCounts.notMitigatedCount).to.be.a('number');
                expect(data.data.alertCounts.notMitigatedCount).to.be(0);
                expect(data.data.alertCounts.adminResolvedCount).to.be.a('number');
                expect(data.data.alertCounts.adminResolvedCount).to.be(1);
                expect(data.data.alertCounts.conditionalAccessCount).to.be.a('number');
                expect(data.data.alertCounts.conditionalAccessCount).to.be(1);
                expect(data.data.alertCounts.mitigatedCount).to.be.a('number');
                expect(data.data.alertCounts.mitigatedCount).to.be(2);
              expect(data.data.groupId).to.be.a('string');
              expect(data.data.groupId).to.be("");
              expect(data.data.privileges).to.be.a('string');
              expect(data.data.privileges).to.be("rooted");
              expect(data.data.accountName).to.be.a('string');
              expect(data.data.accountName).to.be("");
              expect(data.data.siteName).to.be.a('string');
              expect(data.data.siteName).to.be("");
              expect(data.data.registrationDate).to.be.a('string');
              expect(data.data.registrationDate).to.be("2022-03-17T04:49:26.257525Z");
              expect(data.data.debugMode).to.be.a('boolean');
              expect(data.data.debugMode).to.be(false);
              expect(data.data.registrationSource).to.be.a('string');
              expect(data.data.registrationSource).to.be("Intune Connection");
              expect(data.data.model).to.be.a('string');
              expect(data.data.model).to.be("Samsung S9");
              expect(data.data.deviceId).to.be.a('string');
              expect(data.data.deviceId).to.be("");
              expect(data.data.policyUpdatedAt).to.be.a('string');
              expect(data.data.policyUpdatedAt).to.be("2018-02-27T04:49:26.257525Z");
              expect(data.data.healthState).to.be.a('string');
              expect(data.data.healthState).to.be("low");
              expect(data.data.appVersion).to.be.a('string');
              expect(data.data.appVersion).to.be("2.3.5");
              expect(data.data.unofficialAppstore).to.be.a('boolean');
              expect(data.data.unofficialAppstore).to.be(false);
              expect(data.data._protected).to.be.a('boolean');
              expect(data.data._protected).to.be(false);
              expect(data.data.trackingId1).to.be.a('string');
              expect(data.data.trackingId1).to.be("iphone-tom-dawn");
              expect(data.data.developerMode).to.be.a('boolean');
              expect(data.data.developerMode).to.be(false);
              expect(data.data.groupName).to.be.a('string');
              expect(data.data.groupName).to.be("");
              expect(data.data.trackingId2).to.be.a('string');
              expect(data.data.trackingId2).to.be("samsung-galaxy-bob-junior");
              expect(data.data.managedState).to.be.a('string');
              expect(data.data.managedState).to.be("synced");
              expect(data.data.registrationType).to.be.a('string');
              expect(data.data.registrationType).to.be("mdm");
              expect(data.data.threatCounts).to.be.a(S1MgmtApi.V21DevicesSchemasDeviceDataSchemaMany200ThreatCounts);
                    expect(data.data.threatCounts.notMitigatedCount).to.be.a('number');
                expect(data.data.threatCounts.notMitigatedCount).to.be(0);
                expect(data.data.threatCounts.adminResolvedCount).to.be.a('number');
                expect(data.data.threatCounts.adminResolvedCount).to.be(1);
                expect(data.data.threatCounts.conditionalAccessCount).to.be.a('number');
                expect(data.data.threatCounts.conditionalAccessCount).to.be(1);
                expect(data.data.threatCounts.mitigatedCount).to.be.a('number');
                expect(data.data.threatCounts.mitigatedCount).to.be(2);
              expect(data.data.osVersion).to.be.a('string');
              expect(data.data.osVersion).to.be("11.1");
              expect(data.data.registeredOn).to.be.a('string');
              expect(data.data.registeredOn).to.be("2022-03-17T04:49:26.257525Z");
              expect(data.data.platform).to.be.a('string');
              expect(data.data.platform).to.be("android");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationGroupsgroupIdPolicyDelete', function() {
        it('should call webApiMobileIntegrationGroupsgroupIdPolicyDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationGroupsgroupIdPolicyDelete call
          /*
          var groupId = "groupId_example";

          instance.webApiMobileIntegrationGroupsgroupIdPolicyDelete(groupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationGroupsgroupIdPolicyGet', function() {
        it('should call webApiMobileIntegrationGroupsgroupIdPolicyGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationGroupsgroupIdPolicyGet call and complete the assertions
          /*
          var groupId = "groupId_example";

          instance.webApiMobileIntegrationGroupsgroupIdPolicyGet(groupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200);
            expect(data.data).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200Data);
                  expect(data.data.updatedBy).to.be.a('string');
              expect(data.data.updatedBy).to.be("");
              expect(data.data.threatResponseGroupId).to.be.a('string');
              expect(data.data.threatResponseGroupId).to.be("");
              expect(data.data.alertResponseGroupId).to.be.a('string');
              expect(data.data.alertResponseGroupId).to.be("");
              expect(data.data.updatedAt).to.be.a('string');
              expect(data.data.updatedAt).to.be("");
              expect(data.data.userFullName).to.be.a('string');
              expect(data.data.userFullName).to.be("");
              expect(data.data.alertOnDeviceAlert).to.be.a('string');
              expect(data.data.alertOnDeviceAlert).to.be("");
              expect(data.data.alerts).to.be.a('string');
              expect(data.data.alerts).to.be("");
              expect(data.data.connectionScopeId).to.be.a('string');
              expect(data.data.connectionScopeId).to.be("");
              expect(data.data.connectionId).to.be.a('string');
              expect(data.data.connectionId).to.be("");
              expect(data.data.engines).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200DataEngines);
                    expect(data.data.engines.appBehavioralAi).to.be.a('string');
                expect(data.data.engines.appBehavioralAi).to.be("");
                expect(data.data.engines.systemBehavioralAi).to.be.a('string');
                expect(data.data.engines.systemBehavioralAi).to.be("");
                expect(data.data.engines.appStaticAi).to.be.a('string');
                expect(data.data.engines.appStaticAi).to.be("");
                expect(data.data.engines.vulnerabilityScanner).to.be.a('string');
                expect(data.data.engines.vulnerabilityScanner).to.be("");
                expect(data.data.engines.systemStaticAi).to.be.a('string');
                expect(data.data.engines.systemStaticAi).to.be("");
                expect(data.data.engines.networkAnalysis).to.be.a('string');
                expect(data.data.engines.networkAnalysis).to.be("");
                expect(data.data.engines.phishingScanner).to.be.a('string');
                expect(data.data.engines.phishingScanner).to.be("");
              expect(data.data.connectionScopeLevel).to.be.a('string');
              expect(data.data.connectionScopeLevel).to.be("");
              expect(data.data.inheritedFrom).to.be.a('string');
              expect(data.data.inheritedFrom).to.be("");
              expect(data.data.responseActions).to.be.a('string');
              expect(data.data.responseActions).to.be("");
              expect(data.data.threatPhishingPrevention).to.be.a('string');
              expect(data.data.threatPhishingPrevention).to.be("");
              expect(data.data._default).to.be.a('boolean');
              expect(data.data._default).to.be(false);
              expect(data.data.threatOnDeviceAlert).to.be.a('string');
              expect(data.data.threatOnDeviceAlert).to.be("");
              expect(data.data.threats).to.be.a('string');
              expect(data.data.threats).to.be("");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationGroupsgroupIdPolicyPut', function() {
        it('should call webApiMobileIntegrationGroupsgroupIdPolicyPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationGroupsgroupIdPolicyPut call and complete the assertions
          /*
          var groupId = "groupId_example";
          var opts = {};
          opts.body = new S1MgmtApi.V21PolicySchemasPolicyRequest();
          opts.body.data = new S1MgmtApi.V21PolicySchemasPolicyRequestData();
          opts.body.data.threatResponseGroupId = "";
          opts.body.data.alertResponseGroupId = "";
          opts.body.data.alertOnDeviceAlert = "";
          opts.body.data.alerts = "";
          opts.body.data.engines = new S1MgmtApi.V21PolicySchemasPolicy200DataEngines();
          opts.body.data.engines.appBehavioralAi = "";
          opts.body.data.engines.systemBehavioralAi = "";
          opts.body.data.engines.appStaticAi = "";
          opts.body.data.engines.vulnerabilityScanner = "";
          opts.body.data.engines.systemStaticAi = "";
          opts.body.data.engines.networkAnalysis = "";
          opts.body.data.engines.phishingScanner = "";
          opts.body.data.threatPhishingPrevention = "";
          opts.body.data.threatOnDeviceAlert = "";
          opts.body.data.threats = "";
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationGroupsgroupIdPolicyPut(groupId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200);
            expect(data.data).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200Data);
                  expect(data.data.updatedBy).to.be.a('string');
              expect(data.data.updatedBy).to.be("");
              expect(data.data.threatResponseGroupId).to.be.a('string');
              expect(data.data.threatResponseGroupId).to.be("");
              expect(data.data.alertResponseGroupId).to.be.a('string');
              expect(data.data.alertResponseGroupId).to.be("");
              expect(data.data.updatedAt).to.be.a('string');
              expect(data.data.updatedAt).to.be("");
              expect(data.data.userFullName).to.be.a('string');
              expect(data.data.userFullName).to.be("");
              expect(data.data.alertOnDeviceAlert).to.be.a('string');
              expect(data.data.alertOnDeviceAlert).to.be("");
              expect(data.data.alerts).to.be.a('string');
              expect(data.data.alerts).to.be("");
              expect(data.data.connectionScopeId).to.be.a('string');
              expect(data.data.connectionScopeId).to.be("");
              expect(data.data.connectionId).to.be.a('string');
              expect(data.data.connectionId).to.be("");
              expect(data.data.engines).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200DataEngines);
                    expect(data.data.engines.appBehavioralAi).to.be.a('string');
                expect(data.data.engines.appBehavioralAi).to.be("");
                expect(data.data.engines.systemBehavioralAi).to.be.a('string');
                expect(data.data.engines.systemBehavioralAi).to.be("");
                expect(data.data.engines.appStaticAi).to.be.a('string');
                expect(data.data.engines.appStaticAi).to.be("");
                expect(data.data.engines.vulnerabilityScanner).to.be.a('string');
                expect(data.data.engines.vulnerabilityScanner).to.be("");
                expect(data.data.engines.systemStaticAi).to.be.a('string');
                expect(data.data.engines.systemStaticAi).to.be("");
                expect(data.data.engines.networkAnalysis).to.be.a('string');
                expect(data.data.engines.networkAnalysis).to.be("");
                expect(data.data.engines.phishingScanner).to.be.a('string');
                expect(data.data.engines.phishingScanner).to.be("");
              expect(data.data.connectionScopeLevel).to.be.a('string');
              expect(data.data.connectionScopeLevel).to.be("");
              expect(data.data.inheritedFrom).to.be.a('string');
              expect(data.data.inheritedFrom).to.be("");
              expect(data.data.responseActions).to.be.a('string');
              expect(data.data.responseActions).to.be("");
              expect(data.data.threatPhishingPrevention).to.be.a('string');
              expect(data.data.threatPhishingPrevention).to.be("");
              expect(data.data._default).to.be.a('boolean');
              expect(data.data._default).to.be(false);
              expect(data.data.threatOnDeviceAlert).to.be.a('string');
              expect(data.data.threatOnDeviceAlert).to.be("");
              expect(data.data.threats).to.be.a('string');
              expect(data.data.threats).to.be("");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationIncidentsAnalystVerdictPost', function() {
        it('should call webApiMobileIntegrationIncidentsAnalystVerdictPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationIncidentsAnalystVerdictPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21IncidentsSchemasUpdateAnalystVerdictRequestSchema();
          opts.body.data = new S1MgmtApi.V21IncidentsSchemasUpdateAnalystVerdictRequestSchemaData();
          opts.body.data.analystVerdict = "";
          opts.body.filter = new S1MgmtApi.V21IncidentsSchemasUpdateAnalystVerdictRequestSchemaFilter();
          opts.body.filter.ids = [0];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationIncidentsAnalystVerdictPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21IncidentsSchemasAffectedCountResponseSchema200);
            expect(data.data).to.be.a(S1MgmtApi.V21IncidentsSchemasAffectedCountResponseSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationIncidentsGet', function() {
        it('should call webApiMobileIntegrationIncidentsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationIncidentsGet call and complete the assertions
          /*
          var opts = {};
          opts.sortBy = "null";
          opts.tenant = true;
          opts.sortOrder = "null";
          opts.accountIds = ["accountIds_example"];
          opts.analystVerdictIn = ["analystVerdictIn_example"];
          opts.incidentStatusIn = ["incidentStatusIn_example"];
          opts.statusActionIn = ["statusActionIn_example"];
          opts.countOnly = false;
          opts.kindIn = ["kindIn_example"];
          opts.siteIds = ["siteIds_example"];
          opts.limit = 10;
          opts.deviceIdIn = ["deviceIdIn_example"];
          opts.skipCount = null;
          opts.userContains = "userContains_example";
          opts.skip = 56;
          opts.deviceIdContains = "deviceIdContains_example";
          opts.cursor = "null";
          opts.statusIn = ["statusIn_example"];
          opts.groupIds = ["groupIds_example"];
          opts.severityIn = ["severityIn_example"];

          instance.webApiMobileIntegrationIncidentsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21IncidentsSchemasListIncidentsSchema200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21IncidentsSchemasListIncidentsSchema200Data);
                expect(data.userEmail).to.be.a('string');
                expect(data.userEmail).to.be("");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reportedTime).to.be.a('string');
                expect(data.reportedTime).to.be("");
                expect(data.siteId).to.be.a('string');
                expect(data.siteId).to.be("");
                expect(data.accountId).to.be.a('string');
                expect(data.accountId).to.be("");
                expect(data.detail).to.be.a('string');
                expect(data.detail).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.osType).to.be.a('string');
                expect(data.osType).to.be("");
                expect(data.incidentStatus).to.be.a('string');
                expect(data.incidentStatus).to.be("");
                expect(data.groupId).to.be.a('string');
                expect(data.groupId).to.be("");
                expect(data.remediationStep).to.be.a('string');
                expect(data.remediationStep).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
                expect(data.accountName).to.be.a('string');
                expect(data.accountName).to.be("");
                expect(data.siteName).to.be.a('string');
                expect(data.siteName).to.be("");
                {
                  let dataCtr = data.notes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.V21IncidentsSchemasListIncidentsSchema200Notes);
                    expect(data.createdAt).to.be.a('string');
                    expect(data.createdAt).to.be("");
                    expect(data.edited).to.be.a('boolean');
                    expect(data.edited).to.be(false);
                    expect(data.text).to.be.a('string');
                    expect(data.text).to.be("");
                    expect(data.authorId).to.be.a('string');
                    expect(data.authorId).to.be("");
                    expect(data.id).to.be.a('number');
                    expect(data.id).to.be(0);
                    expect(data.author).to.be.a('string');
                    expect(data.author).to.be("");
                    expect(data.updatedAt).to.be.a('string');
                    expect(data.updatedAt).to.be("");
    
                          }
                }
                expect(data.network).to.be.a('string');
                expect(data.network).to.be("");
                expect(data.severity).to.be.a('string');
                expect(data.severity).to.be("");
                expect(data.detectionType).to.be.a('string');
                expect(data.detectionType).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("");
                expect(data.deviceId).to.be.a('string');
                expect(data.deviceId).to.be("");
                expect(data.statusAction).to.be.a('string');
                expect(data.statusAction).to.be("");
                expect(data.detectionEngine).to.be.a('string');
                expect(data.detectionEngine).to.be("");
                expect(data.trackingId1).to.be.a('string');
                expect(data.trackingId1).to.be("");
                expect(data.trackingId2).to.be.a('string');
                expect(data.trackingId2).to.be("");
                expect(data.groupName).to.be.a('string');
                expect(data.groupName).to.be("");
                expect(data.investigation).to.be.a('string');
                expect(data.investigation).to.be("");
                expect(data.analystVerdict).to.be.a('string');
                expect(data.analystVerdict).to.be("");
                expect(data.details).to.be.a(S1MgmtApi.V21IncidentsSchemasListIncidentsSchema200Details);
                      expect(data.details.applicationDeveloper).to.be.a('string');
                  expect(data.details.applicationDeveloper).to.be("");
                  expect(data.details.processName).to.be.a('string');
                  expect(data.details.processName).to.be("");
                  expect(data.details.fileName).to.be.a('string');
                  expect(data.details.fileName).to.be("");
                  expect(data.details.malwareThreatName).to.be.a('string');
                  expect(data.details.malwareThreatName).to.be("");
                  expect(data.details.networkInterface).to.be.a('string');
                  expect(data.details.networkInterface).to.be("");
                  expect(data.details.applicationPackage).to.be.a('string');
                  expect(data.details.applicationPackage).to.be("");
                  expect(data.details.installerSource).to.be.a('string');
                  expect(data.details.installerSource).to.be("");
                  expect(data.details.routerSSID).to.be.a('string');
                  expect(data.details.routerSSID).to.be("");
                  expect(data.details.routerBSSID).to.be.a('string');
                  expect(data.details.routerBSSID).to.be("");
                  expect(data.details.applicationName).to.be.a('string');
                  expect(data.details.applicationName).to.be("");
                  expect(data.details.fileHash).to.be.a('string');
                  expect(data.details.fileHash).to.be("");
                  expect(data.details.suspectedUrl).to.be.a('string');
                  expect(data.details.suspectedUrl).to.be("");
                  expect(data.details.deviceTime).to.be.a('string');
                  expect(data.details.deviceTime).to.be("");
                expect(data.userNotified).to.be.a('boolean');
                expect(data.userNotified).to.be(false);
                expect(data.osVersion).to.be.a('string');
                expect(data.osVersion).to.be("");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationIncidentsIncidentStatusPost', function() {
        it('should call webApiMobileIntegrationIncidentsIncidentStatusPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationIncidentsIncidentStatusPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21IncidentsSchemasUpdateIncidentStatusRequestSchema();
          opts.body.data = new S1MgmtApi.V21IncidentsSchemasUpdateIncidentStatusRequestSchemaData();
          opts.body.data.incidentStatus = "";
          opts.body.filter = new S1MgmtApi.V21IncidentsSchemasUpdateAnalystVerdictRequestSchemaFilter();
          opts.body.filter.ids = [0];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationIncidentsIncidentStatusPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21IncidentsSchemasAffectedCountResponseSchema200);
            expect(data.data).to.be.a(S1MgmtApi.V21IncidentsSchemasAffectedCountResponseSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationIncidentsMitigatemitigationActionPost', function() {
        it('should call webApiMobileIntegrationIncidentsMitigatemitigationActionPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationIncidentsMitigatemitigationActionPost call and complete the assertions
          /*
          var mitigationAction = "mitigationAction_example";
          var opts = {};
          opts.body = new S1MgmtApi.V21IncidentsSchemasMitigateIncidentRequestSchema();
          opts.body.filter = new S1MgmtApi.V21IncidentsSchemasUpdateAnalystVerdictRequestSchemaFilter();
          opts.body.filter.ids = [0];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationIncidentsMitigatemitigationActionPost(mitigationAction, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21IncidentsSchemasAffectedCountResponseSchema200);
            expect(data.data).to.be.a(S1MgmtApi.V21IncidentsSchemasAffectedCountResponseSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationIncidentsincidentIdNotesPost', function() {
        it('should call webApiMobileIntegrationIncidentsincidentIdNotesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationIncidentsincidentIdNotesPost call and complete the assertions
          /*
          var incidentId = "incidentId_example";
          var opts = {};
          opts.body = new S1MgmtApi.V21IncidentsSchemasIncidentNoteRequestSchema();
          opts.body.data = new S1MgmtApi.V21IncidentsSchemasIncidentNoteRequestSchemaData();
          opts.body.data.text = "";
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationIncidentsincidentIdNotesPost(incidentId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21IncidentsSchemasIncidentNote200);
            expect(data.data).to.be.a(S1MgmtApi.V21IncidentsSchemasIncidentNote200Data);
                  expect(data.data.createdAt).to.be.a('string');
              expect(data.data.createdAt).to.be("");
              expect(data.data.edited).to.be.a('boolean');
              expect(data.data.edited).to.be(false);
              expect(data.data.text).to.be.a('string');
              expect(data.data.text).to.be("");
              expect(data.data.authorId).to.be.a('string');
              expect(data.data.authorId).to.be("");
              expect(data.data.id).to.be.a('number');
              expect(data.data.id).to.be(0);
              expect(data.data.author).to.be.a('string');
              expect(data.data.author).to.be("");
              expect(data.data.updatedAt).to.be.a('string');
              expect(data.data.updatedAt).to.be("");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationIncidentsincidentIdNotesnoteIdDelete', function() {
        it('should call webApiMobileIntegrationIncidentsincidentIdNotesnoteIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationIncidentsincidentIdNotesnoteIdDelete call
          /*
          var noteId = "noteId_example";
          var incidentId = "incidentId_example";
          var opts = {};
          opts.body = new S1MgmtApi.V21IncidentsSchemasDeleteIncidentNoteRequestSchema();
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationIncidentsincidentIdNotesnoteIdDelete(noteId, incidentId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationIncidentsincidentIdNotesnoteIdPut', function() {
        it('should call webApiMobileIntegrationIncidentsincidentIdNotesnoteIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationIncidentsincidentIdNotesnoteIdPut call and complete the assertions
          /*
          var noteId = "noteId_example";
          var incidentId = "incidentId_example";
          var opts = {};
          opts.body = new S1MgmtApi.V21IncidentsSchemasIncidentNoteRequestSchema();
          opts.body.data = new S1MgmtApi.V21IncidentsSchemasIncidentNoteRequestSchemaData();
          opts.body.data.text = "";
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationIncidentsincidentIdNotesnoteIdPut(noteId, incidentId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21IncidentsSchemasIncidentNote200);
            expect(data.data).to.be.a(S1MgmtApi.V21IncidentsSchemasIncidentNote200Data);
                  expect(data.data.createdAt).to.be.a('string');
              expect(data.data.createdAt).to.be("");
              expect(data.data.edited).to.be.a('boolean');
              expect(data.data.edited).to.be(false);
              expect(data.data.text).to.be.a('string');
              expect(data.data.text).to.be("");
              expect(data.data.authorId).to.be.a('string');
              expect(data.data.authorId).to.be("");
              expect(data.data.id).to.be.a('number');
              expect(data.data.id).to.be(0);
              expect(data.data.author).to.be.a('string');
              expect(data.data.author).to.be("");
              expect(data.data.updatedAt).to.be.a('string');
              expect(data.data.updatedAt).to.be("");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationManagementAppConfigGet', function() {
        it('should call webApiMobileIntegrationManagementAppConfigGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationManagementAppConfigGet call and complete the assertions
          /*
          var opts = {};
          opts.groupIds = ["groupIds_example"];
          opts.tenant = true;
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiMobileIntegrationManagementAppConfigGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ManagementSchemasAppConfigurationSchema200);
            expect(data.data).to.be.a(S1MgmtApi.V21ManagementSchemasAppConfigurationSchema200Data);
                  expect(data.data.defaultChannel).to.be.a('string');
              expect(data.data.defaultChannel).to.be("");
              expect(data.data.tenantId).to.be.a('string');
              expect(data.data.tenantId).to.be("");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationManagementCanCreateConnectionGet', function() {
        it('should call webApiMobileIntegrationManagementCanCreateConnectionGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationManagementCanCreateConnectionGet call and complete the assertions
          /*
          var opts = {};
          opts.groupIds = ["groupIds_example"];
          opts.tenant = true;
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiMobileIntegrationManagementCanCreateConnectionGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ManagementSchemasCanCreateConnectionResponseSchema200);
            expect(data.data).to.be.a(S1MgmtApi.V21ManagementSchemasCanCreateConnectionResponseSchema200Data);
                  expect(data.data.canCreateConnection).to.be.a('boolean');
              expect(data.data.canCreateConnection).to.be(false);
              expect(data.data.reason).to.be.a('string');
              expect(data.data.reason).to.be("");
              {
                let dataCtr = data.data.affectingScopes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.V21ManagementSchemasCanCreateConnectionResponseSchema200DataAffectingScopes);
                  expect(data.scopeLevel).to.be.a('string');
                  expect(data.scopeLevel).to.be("");
                  expect(data.scopeId).to.be.a('string');
                  expect(data.scopeId).to.be("");
  
                        }
              }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationManagementConnectionsGet', function() {
        it('should call webApiMobileIntegrationManagementConnectionsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationManagementConnectionsGet call and complete the assertions
          /*
          var opts = {};
          opts.groupIds = ["groupIds_example"];
          opts.tenant = true;
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiMobileIntegrationManagementConnectionsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ManagementSchemasListConnectionsSchema200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21ManagementSchemasListConnectionsSchema200Data);
                {
                  let dataCtr = data.responseGroupIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.scopeId).to.be.a('string');
                expect(data.scopeId).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.details).to.be.a(S1MgmtApi.V21ManagementSchemasListConnectionsSchema200Details);
                      expect(data.details.syncStatus).to.be.a('string');
                  expect(data.details.syncStatus).to.be("completed");
                  expect(data.details.syncErrorMessage).to.be.a('string');
                  expect(data.details.syncErrorMessage).to.be("");
                  expect(data.details.lastSyncOn).to.be.a('string');
                  expect(data.details.lastSyncOn).to.be("2022-03-17T04:49:26.257525Z");
                expect(data.connector).to.be.a(S1MgmtApi.V21ManagementSchemasCreateConnectionRequestSchemaDataConnector);
                      expect(data.connector.mobileIronCloudConnector).to.be.a(S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnector);
                        expect(data.connector.mobileIronCloudConnector.auth).to.be.a(S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnectorAuth);
                          expect(data.connector.mobileIronCloudConnector.auth.basic).to.be.a(S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnectorAuthBasic);
                            expect(data.connector.mobileIronCloudConnector.auth.basic.userId).to.be.a('string');
                        expect(data.connector.mobileIronCloudConnector.auth.basic.userId).to.be("");
                        expect(data.connector.mobileIronCloudConnector.auth.basic.password).to.be.a('string');
                        expect(data.connector.mobileIronCloudConnector.auth.basic.password).to.be("");
                    expect(data.connector.mobileIronCloudConnector.baseUrl).to.be.a('string');
                    expect(data.connector.mobileIronCloudConnector.baseUrl).to.be("");
                  expect(data.connector.workspaceOneConnector).to.be.a(S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataWorkspaceOneConnector);
                        expect(data.connector.workspaceOneConnector.auth).to.be.a(S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataWorkspaceOneConnectorAuth);
                          expect(data.connector.workspaceOneConnector.auth.certificate).to.be.a(S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataWorkspaceOneConnectorAuthCertificate);
                            expect(data.connector.workspaceOneConnector.auth.certificate.certificate).to.be.a('string');
                        expect(data.connector.workspaceOneConnector.auth.certificate.certificate).to.be("");
                        expect(data.connector.workspaceOneConnector.auth.certificate.passphrase).to.be.a('string');
                        expect(data.connector.workspaceOneConnector.auth.certificate.passphrase).to.be("");
                        expect(data.connector.workspaceOneConnector.auth.certificate.apiKey).to.be.a('string');
                        expect(data.connector.workspaceOneConnector.auth.certificate.apiKey).to.be("");
                      expect(data.connector.workspaceOneConnector.auth.basic).to.be.a(S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataWorkspaceOneConnectorAuthBasic);
                            expect(data.connector.workspaceOneConnector.auth.basic.apiKey).to.be.a('string');
                        expect(data.connector.workspaceOneConnector.auth.basic.apiKey).to.be("");
                        expect(data.connector.workspaceOneConnector.auth.basic.userId).to.be.a('string');
                        expect(data.connector.workspaceOneConnector.auth.basic.userId).to.be("");
                        expect(data.connector.workspaceOneConnector.auth.basic.password).to.be.a('string');
                        expect(data.connector.workspaceOneConnector.auth.basic.password).to.be("");
                    expect(data.connector.workspaceOneConnector.baseUrl).to.be.a('string');
                    expect(data.connector.workspaceOneConnector.baseUrl).to.be("");
                  expect(data.connector.microsoftEndpointManagerConnector).to.be.a(S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMicrosoftEndpointManagerConnector);
                        expect(data.connector.microsoftEndpointManagerConnector.mode).to.be.a('string');
                    expect(data.connector.microsoftEndpointManagerConnector.mode).to.be("mdm_mode");
                    expect(data.connector.microsoftEndpointManagerConnector.maskUserInformation).to.be.a('boolean');
                    expect(data.connector.microsoftEndpointManagerConnector.maskUserInformation).to.be(false);
                    expect(data.connector.microsoftEndpointManagerConnector.backgroundSync).to.be.a('boolean');
                    expect(data.connector.microsoftEndpointManagerConnector.backgroundSync).to.be(false);
                    expect(data.connector.microsoftEndpointManagerConnector.auth).to.be.a(S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMicrosoftEndpointManagerConnectorAuth);
                          expect(data.connector.microsoftEndpointManagerConnector.auth.oauth).to.be.a(S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMicrosoftEndpointManagerConnectorAuthOauth);
                            expect(data.connector.microsoftEndpointManagerConnector.auth.oauth.cloud).to.be.a('string');
                        expect(data.connector.microsoftEndpointManagerConnector.auth.oauth.cloud).to.be("");
                        expect(data.connector.microsoftEndpointManagerConnector.auth.oauth.tenantId).to.be.a('string');
                        expect(data.connector.microsoftEndpointManagerConnector.auth.oauth.tenantId).to.be("");
                    expect(data.connector.microsoftEndpointManagerConnector.baseUrl).to.be.a('string');
                    expect(data.connector.microsoftEndpointManagerConnector.baseUrl).to.be("");
                  expect(data.connector.mobileIronCoreConnector).to.be.a(S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCoreConnector);
                        expect(data.connector.mobileIronCoreConnector.auth).to.be.a(S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnectorAuth);
                          expect(data.connector.mobileIronCoreConnector.auth.basic).to.be.a(S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnectorAuthBasic);
                            expect(data.connector.mobileIronCoreConnector.auth.basic.userId).to.be.a('string');
                        expect(data.connector.mobileIronCoreConnector.auth.basic.userId).to.be("");
                        expect(data.connector.mobileIronCoreConnector.auth.basic.password).to.be.a('string');
                        expect(data.connector.mobileIronCoreConnector.auth.basic.password).to.be("");
                    expect(data.connector.mobileIronCoreConnector.baseUrl).to.be.a('string');
                    expect(data.connector.mobileIronCoreConnector.baseUrl).to.be("");
                expect(data.connectionId).to.be.a('string');
                expect(data.connectionId).to.be("");
                {
                  let dataCtr = data.deviceGroupMappings;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.V21ManagementSchemasCreateConnectionRequestSchemaDataDeviceGroupMappings);
                    expect(data.mdmGroupId).to.be.a('string');
                    expect(data.mdmGroupId).to.be("");
                    expect(data.s1GroupId).to.be.a('string');
                    expect(data.s1GroupId).to.be("");
    
                          }
                }
                expect(data.defaultS1GroupId).to.be.a('string');
                expect(data.defaultS1GroupId).to.be("");
                expect(data.scopeLevel).to.be.a('string');
                expect(data.scopeLevel).to.be("");

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationManagementConnectionsconnIdDeviceGroupsGet', function() {
        it('should call webApiMobileIntegrationManagementConnectionsconnIdDeviceGroupsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationManagementConnectionsconnIdDeviceGroupsGet call and complete the assertions
          /*
          var connId = "connId_example";
          var opts = {};
          opts.countOnly = false;
          opts.sortBy = "null";
          opts.tenant = true;
          opts.siteIds = ["siteIds_example"];
          opts.limit = 10;
          opts.skipCount = null;
          opts.cursor = "null";
          opts.skip = 56;
          opts.groupIds = ["groupIds_example"];
          opts.sortOrder = "null";
          opts.accountIds = ["accountIds_example"];
          opts.query = "query_example";

          instance.webApiMobileIntegrationManagementConnectionsconnIdDeviceGroupsGet(connId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ManagementSchemasManagedGroupSchemaMany200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21ManagementSchemasManagedGroupSchemaMany200Data);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationManagementConnectionsconnIdManagedGroupsGet', function() {
        it('should call webApiMobileIntegrationManagementConnectionsconnIdManagedGroupsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationManagementConnectionsconnIdManagedGroupsGet call and complete the assertions
          /*
          var connId = "connId_example";
          var opts = {};
          opts.groupIds = ["groupIds_example"];
          opts.tenant = true;
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiMobileIntegrationManagementConnectionsconnIdManagedGroupsGet(connId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ManagementSchemasManagedGroupsResponseSchema200);
            expect(data.data).to.be.a(S1MgmtApi.V21ManagementSchemasManagedGroupsResponseSchema200Data);
                  {
                let dataCtr = data.data.managedGroups;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.V21ManagementSchemasManagedGroupsResponseSchema200DataManagedGroups);
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationManagementConnectionsconnIdResponseGroupsGet', function() {
        it('should call webApiMobileIntegrationManagementConnectionsconnIdResponseGroupsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationManagementConnectionsconnIdResponseGroupsGet call and complete the assertions
          /*
          var connId = "connId_example";
          var opts = {};
          opts.groupIds = ["groupIds_example"];
          opts.tenant = true;
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiMobileIntegrationManagementConnectionsconnIdResponseGroupsGet(connId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ManagementSchemasManagedGroupsResponseSchema200);
            expect(data.data).to.be.a(S1MgmtApi.V21ManagementSchemasManagedGroupsResponseSchema200Data);
                  {
                let dataCtr = data.data.managedGroups;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.V21ManagementSchemasManagedGroupsResponseSchema200DataManagedGroups);
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationManagementConnectionsconnectionIdDelete', function() {
        it('should call webApiMobileIntegrationManagementConnectionsconnectionIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationManagementConnectionsconnectionIdDelete call
          /*
          var connectionId = "connectionId_example";
          var opts = {};
          opts.body = new S1MgmtApi.V21ManagementSchemasDeleteConnectionRequestSchema();
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationManagementConnectionsconnectionIdDelete(connectionId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationManagementConnectionsconnectionIdGroupsPut', function() {
        it('should call webApiMobileIntegrationManagementConnectionsconnectionIdGroupsPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationManagementConnectionsconnectionIdGroupsPut call
          /*
          var connectionId = "connectionId_example";
          var opts = {};
          opts.body = new S1MgmtApi.V21ManagementSchemasUpdateGroupsRequestSchema();
          opts.body.data = new S1MgmtApi.V21ManagementSchemasUpdateGroupsRequestSchemaData();
          opts.body.data.responseGroupIds = [""];
          opts.body.data.deviceGroupMappings = [new S1MgmtApi.V21ManagementSchemasCreateConnectionRequestSchemaDataDeviceGroupMappings()];
          opts.body.data.deviceGroupMappings[0].mdmGroupId = "";
          opts.body.data.deviceGroupMappings[0].s1GroupId = "";
          opts.body.data.defaultS1GroupId = "";
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationManagementConnectionsconnectionIdGroupsPut(connectionId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationManagementConnectionsconnectionIdPut', function() {
        it('should call webApiMobileIntegrationManagementConnectionsconnectionIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationManagementConnectionsconnectionIdPut call
          /*
          var connectionId = "connectionId_example";
          var opts = {};
          opts.body = new S1MgmtApi.V21ManagementSchemasUpdateConnectionRequestSchema();
          opts.body.data = new S1MgmtApi.V21ManagementSchemasUpdateConnectionRequestSchemaData();
          opts.body.data.responseGroupIds = [""];
          opts.body.data.name = "";
          opts.body.data.connector = new S1MgmtApi.V21ManagementSchemasCreateConnectionRequestSchemaDataConnector();
          opts.body.data.connector.mobileIronCloudConnector = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnector();
          opts.body.data.connector.mobileIronCloudConnector.auth = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnectorAuth();
          opts.body.data.connector.mobileIronCloudConnector.auth.basic = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnectorAuthBasic();
          opts.body.data.connector.mobileIronCloudConnector.auth.basic.userId = "";
          opts.body.data.connector.mobileIronCloudConnector.auth.basic.password = "";
          opts.body.data.connector.mobileIronCloudConnector.baseUrl = "";
          opts.body.data.connector.workspaceOneConnector = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataWorkspaceOneConnector();
          opts.body.data.connector.workspaceOneConnector.auth = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataWorkspaceOneConnectorAuth();
          opts.body.data.connector.workspaceOneConnector.auth.certificate = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataWorkspaceOneConnectorAuthCertificate();
          opts.body.data.connector.workspaceOneConnector.auth.certificate.certificate = "";
          opts.body.data.connector.workspaceOneConnector.auth.certificate.passphrase = "";
          opts.body.data.connector.workspaceOneConnector.auth.certificate.apiKey = "";
          opts.body.data.connector.workspaceOneConnector.auth.basic = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataWorkspaceOneConnectorAuthBasic();
          opts.body.data.connector.workspaceOneConnector.auth.basic.apiKey = "";
          opts.body.data.connector.workspaceOneConnector.auth.basic.userId = "";
          opts.body.data.connector.workspaceOneConnector.auth.basic.password = "";
          opts.body.data.connector.workspaceOneConnector.baseUrl = "";
          opts.body.data.connector.microsoftEndpointManagerConnector = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMicrosoftEndpointManagerConnector();
          opts.body.data.connector.microsoftEndpointManagerConnector.mode = "mdm_mode";
          opts.body.data.connector.microsoftEndpointManagerConnector.maskUserInformation = false;
          opts.body.data.connector.microsoftEndpointManagerConnector.backgroundSync = false;
          opts.body.data.connector.microsoftEndpointManagerConnector.auth = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMicrosoftEndpointManagerConnectorAuth();
          opts.body.data.connector.microsoftEndpointManagerConnector.auth.oauth = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMicrosoftEndpointManagerConnectorAuthOauth();
          opts.body.data.connector.microsoftEndpointManagerConnector.auth.oauth.cloud = "";
          opts.body.data.connector.microsoftEndpointManagerConnector.auth.oauth.tenantId = "";
          opts.body.data.connector.microsoftEndpointManagerConnector.baseUrl = "";
          opts.body.data.connector.mobileIronCoreConnector = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCoreConnector();
          opts.body.data.connector.mobileIronCoreConnector.auth = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnectorAuth();
          opts.body.data.connector.mobileIronCoreConnector.auth.basic = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnectorAuthBasic();
          opts.body.data.connector.mobileIronCoreConnector.auth.basic.userId = "";
          opts.body.data.connector.mobileIronCoreConnector.auth.basic.password = "";
          opts.body.data.connector.mobileIronCoreConnector.baseUrl = "";
          opts.body.data.deviceGroupMappings = [new S1MgmtApi.V21ManagementSchemasCreateConnectionRequestSchemaDataDeviceGroupMappings()];
          opts.body.data.deviceGroupMappings[0].mdmGroupId = "";
          opts.body.data.deviceGroupMappings[0].s1GroupId = "";
          opts.body.data.defaultS1GroupId = "";
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationManagementConnectionsconnectionIdPut(connectionId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationManagementConnectionsconnectionIdSyncDevicesPost', function() {
        it('should call webApiMobileIntegrationManagementConnectionsconnectionIdSyncDevicesPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationManagementConnectionsconnectionIdSyncDevicesPost call
          /*
          var connectionId = "connectionId_example";
          var opts = {};
          opts.body = new S1MgmtApi.V21ManagementSchemasSyncDevicesRequestSchema();
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationManagementConnectionsconnectionIdSyncDevicesPost(connectionId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationManagementConnectorsGet', function() {
        it('should call webApiMobileIntegrationManagementConnectorsGet successfully', function(done) {
          // TODO: uncomment webApiMobileIntegrationManagementConnectorsGet call and complete the assertions
          /*

          instance.webApiMobileIntegrationManagementConnectorsGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ConnectorTypesSchemasConnectorTypes200);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.V21ConnectorTypesSchemasConnectorTypes200Data);
                {
                  let dataCtr = data.supportedModes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                {
                  let dataCtr = data.azureApps;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.V21ConnectorTypesSchemasConnectorTypes200AzureApps);
                    expect(data.clientId).to.be.a('string');
                    expect(data.clientId).to.be("");
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.requestUri).to.be.a('string');
                    expect(data.requestUri).to.be("");
    
                          }
                }
                expect(data.logo).to.be.a('string');
                expect(data.logo).to.be("");

                      }
            }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationManagementCreateConnectionPost', function() {
        it('should call webApiMobileIntegrationManagementCreateConnectionPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationManagementCreateConnectionPost call
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21ManagementSchemasCreateConnectionRequestSchema();
          opts.body.data = new S1MgmtApi.V21ManagementSchemasCreateConnectionRequestSchemaData();
          opts.body.data.responseGroupIds = [""];
          opts.body.data.name = "";
          opts.body.data.connector = new S1MgmtApi.V21ManagementSchemasCreateConnectionRequestSchemaDataConnector();
          opts.body.data.connector.mobileIronCloudConnector = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnector();
          opts.body.data.connector.mobileIronCloudConnector.auth = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnectorAuth();
          opts.body.data.connector.mobileIronCloudConnector.auth.basic = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnectorAuthBasic();
          opts.body.data.connector.mobileIronCloudConnector.auth.basic.userId = "";
          opts.body.data.connector.mobileIronCloudConnector.auth.basic.password = "";
          opts.body.data.connector.mobileIronCloudConnector.baseUrl = "";
          opts.body.data.connector.workspaceOneConnector = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataWorkspaceOneConnector();
          opts.body.data.connector.workspaceOneConnector.auth = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataWorkspaceOneConnectorAuth();
          opts.body.data.connector.workspaceOneConnector.auth.certificate = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataWorkspaceOneConnectorAuthCertificate();
          opts.body.data.connector.workspaceOneConnector.auth.certificate.certificate = "";
          opts.body.data.connector.workspaceOneConnector.auth.certificate.passphrase = "";
          opts.body.data.connector.workspaceOneConnector.auth.certificate.apiKey = "";
          opts.body.data.connector.workspaceOneConnector.auth.basic = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataWorkspaceOneConnectorAuthBasic();
          opts.body.data.connector.workspaceOneConnector.auth.basic.apiKey = "";
          opts.body.data.connector.workspaceOneConnector.auth.basic.userId = "";
          opts.body.data.connector.workspaceOneConnector.auth.basic.password = "";
          opts.body.data.connector.workspaceOneConnector.baseUrl = "";
          opts.body.data.connector.microsoftEndpointManagerConnector = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMicrosoftEndpointManagerConnector();
          opts.body.data.connector.microsoftEndpointManagerConnector.mode = "mdm_mode";
          opts.body.data.connector.microsoftEndpointManagerConnector.maskUserInformation = false;
          opts.body.data.connector.microsoftEndpointManagerConnector.backgroundSync = false;
          opts.body.data.connector.microsoftEndpointManagerConnector.auth = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMicrosoftEndpointManagerConnectorAuth();
          opts.body.data.connector.microsoftEndpointManagerConnector.auth.oauth = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMicrosoftEndpointManagerConnectorAuthOauth();
          opts.body.data.connector.microsoftEndpointManagerConnector.auth.oauth.cloud = "";
          opts.body.data.connector.microsoftEndpointManagerConnector.auth.oauth.tenantId = "";
          opts.body.data.connector.microsoftEndpointManagerConnector.baseUrl = "";
          opts.body.data.connector.mobileIronCoreConnector = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCoreConnector();
          opts.body.data.connector.mobileIronCoreConnector.auth = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnectorAuth();
          opts.body.data.connector.mobileIronCoreConnector.auth.basic = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnectorAuthBasic();
          opts.body.data.connector.mobileIronCoreConnector.auth.basic.userId = "";
          opts.body.data.connector.mobileIronCoreConnector.auth.basic.password = "";
          opts.body.data.connector.mobileIronCoreConnector.baseUrl = "";
          opts.body.data.connectionId = "";
          opts.body.data.deviceGroupMappings = [new S1MgmtApi.V21ManagementSchemasCreateConnectionRequestSchemaDataDeviceGroupMappings()];
          opts.body.data.deviceGroupMappings[0].mdmGroupId = "";
          opts.body.data.deviceGroupMappings[0].s1GroupId = "";
          opts.body.data.defaultS1GroupId = "";
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationManagementCreateConnectionPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationManagementCreateInterimConnectionPost', function() {
        it('should call webApiMobileIntegrationManagementCreateInterimConnectionPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationManagementCreateInterimConnectionPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchema();
          opts.body.data = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaData();
          opts.body.data.mobileIronCloudConnector = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnector();
          opts.body.data.mobileIronCloudConnector.auth = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnectorAuth();
          opts.body.data.mobileIronCloudConnector.auth.basic = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnectorAuthBasic();
          opts.body.data.mobileIronCloudConnector.auth.basic.userId = "";
          opts.body.data.mobileIronCloudConnector.auth.basic.password = "";
          opts.body.data.mobileIronCloudConnector.baseUrl = "";
          opts.body.data.workspaceOneConnector = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataWorkspaceOneConnector();
          opts.body.data.workspaceOneConnector.auth = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataWorkspaceOneConnectorAuth();
          opts.body.data.workspaceOneConnector.auth.certificate = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataWorkspaceOneConnectorAuthCertificate();
          opts.body.data.workspaceOneConnector.auth.certificate.certificate = "";
          opts.body.data.workspaceOneConnector.auth.certificate.passphrase = "";
          opts.body.data.workspaceOneConnector.auth.certificate.apiKey = "";
          opts.body.data.workspaceOneConnector.auth.basic = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataWorkspaceOneConnectorAuthBasic();
          opts.body.data.workspaceOneConnector.auth.basic.apiKey = "";
          opts.body.data.workspaceOneConnector.auth.basic.userId = "";
          opts.body.data.workspaceOneConnector.auth.basic.password = "";
          opts.body.data.workspaceOneConnector.baseUrl = "";
          opts.body.data.microsoftEndpointManagerConnector = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMicrosoftEndpointManagerConnector();
          opts.body.data.microsoftEndpointManagerConnector.mode = "mdm_mode";
          opts.body.data.microsoftEndpointManagerConnector.maskUserInformation = false;
          opts.body.data.microsoftEndpointManagerConnector.backgroundSync = false;
          opts.body.data.microsoftEndpointManagerConnector.auth = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMicrosoftEndpointManagerConnectorAuth();
          opts.body.data.microsoftEndpointManagerConnector.auth.oauth = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMicrosoftEndpointManagerConnectorAuthOauth();
          opts.body.data.microsoftEndpointManagerConnector.auth.oauth.cloud = "";
          opts.body.data.microsoftEndpointManagerConnector.auth.oauth.tenantId = "";
          opts.body.data.microsoftEndpointManagerConnector.baseUrl = "";
          opts.body.data.mobileIronCoreConnector = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCoreConnector();
          opts.body.data.mobileIronCoreConnector.auth = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnectorAuth();
          opts.body.data.mobileIronCoreConnector.auth.basic = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnectorAuthBasic();
          opts.body.data.mobileIronCoreConnector.auth.basic.userId = "";
          opts.body.data.mobileIronCoreConnector.auth.basic.password = "";
          opts.body.data.mobileIronCoreConnector.baseUrl = "";
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationManagementCreateInterimConnectionPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ManagementSchemasCreateInterimConnectionResponseSchema200);
            expect(data.data).to.be.a(S1MgmtApi.V21ManagementSchemasCreateInterimConnectionResponseSchema200Data);
                  expect(data.data.connectionId).to.be.a('string');
              expect(data.data.connectionId).to.be("");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationManagementTestConnectionPost', function() {
        it('should call webApiMobileIntegrationManagementTestConnectionPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationManagementTestConnectionPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchema();
          opts.body.data = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaData();
          opts.body.data.mobileIronCloudConnector = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnector();
          opts.body.data.mobileIronCloudConnector.auth = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnectorAuth();
          opts.body.data.mobileIronCloudConnector.auth.basic = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnectorAuthBasic();
          opts.body.data.mobileIronCloudConnector.auth.basic.userId = "";
          opts.body.data.mobileIronCloudConnector.auth.basic.password = "";
          opts.body.data.mobileIronCloudConnector.baseUrl = "";
          opts.body.data.workspaceOneConnector = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataWorkspaceOneConnector();
          opts.body.data.workspaceOneConnector.auth = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataWorkspaceOneConnectorAuth();
          opts.body.data.workspaceOneConnector.auth.certificate = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataWorkspaceOneConnectorAuthCertificate();
          opts.body.data.workspaceOneConnector.auth.certificate.certificate = "";
          opts.body.data.workspaceOneConnector.auth.certificate.passphrase = "";
          opts.body.data.workspaceOneConnector.auth.certificate.apiKey = "";
          opts.body.data.workspaceOneConnector.auth.basic = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataWorkspaceOneConnectorAuthBasic();
          opts.body.data.workspaceOneConnector.auth.basic.apiKey = "";
          opts.body.data.workspaceOneConnector.auth.basic.userId = "";
          opts.body.data.workspaceOneConnector.auth.basic.password = "";
          opts.body.data.workspaceOneConnector.baseUrl = "";
          opts.body.data.microsoftEndpointManagerConnector = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMicrosoftEndpointManagerConnector();
          opts.body.data.microsoftEndpointManagerConnector.mode = "mdm_mode";
          opts.body.data.microsoftEndpointManagerConnector.maskUserInformation = false;
          opts.body.data.microsoftEndpointManagerConnector.backgroundSync = false;
          opts.body.data.microsoftEndpointManagerConnector.auth = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMicrosoftEndpointManagerConnectorAuth();
          opts.body.data.microsoftEndpointManagerConnector.auth.oauth = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMicrosoftEndpointManagerConnectorAuthOauth();
          opts.body.data.microsoftEndpointManagerConnector.auth.oauth.cloud = "";
          opts.body.data.microsoftEndpointManagerConnector.auth.oauth.tenantId = "";
          opts.body.data.microsoftEndpointManagerConnector.baseUrl = "";
          opts.body.data.mobileIronCoreConnector = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCoreConnector();
          opts.body.data.mobileIronCoreConnector.auth = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnectorAuth();
          opts.body.data.mobileIronCoreConnector.auth.basic = new S1MgmtApi.V21ManagementSchemasTestConnectionRequestSchemaDataMobileIronCloudConnectorAuthBasic();
          opts.body.data.mobileIronCoreConnector.auth.basic.userId = "";
          opts.body.data.mobileIronCoreConnector.auth.basic.password = "";
          opts.body.data.mobileIronCoreConnector.baseUrl = "";
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationManagementTestConnectionPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ManagementSchemasManagedGroupsResponseSchema200);
            expect(data.data).to.be.a(S1MgmtApi.V21ManagementSchemasManagedGroupsResponseSchema200Data);
                  {
                let dataCtr = data.data.managedGroups;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.V21ManagementSchemasManagedGroupsResponseSchema200DataManagedGroups);
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationPolicyPost', function() {
        it('should call webApiMobileIntegrationPolicyPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationPolicyPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21PolicySchemasPolicyRequest();
          opts.body.data = new S1MgmtApi.V21PolicySchemasPolicyRequestData();
          opts.body.data.threatResponseGroupId = "";
          opts.body.data.alertResponseGroupId = "";
          opts.body.data.alertOnDeviceAlert = "";
          opts.body.data.alerts = "";
          opts.body.data.engines = new S1MgmtApi.V21PolicySchemasPolicy200DataEngines();
          opts.body.data.engines.appBehavioralAi = "";
          opts.body.data.engines.systemBehavioralAi = "";
          opts.body.data.engines.appStaticAi = "";
          opts.body.data.engines.vulnerabilityScanner = "";
          opts.body.data.engines.systemStaticAi = "";
          opts.body.data.engines.networkAnalysis = "";
          opts.body.data.engines.phishingScanner = "";
          opts.body.data.threatPhishingPrevention = "";
          opts.body.data.threatOnDeviceAlert = "";
          opts.body.data.threats = "";
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationPolicyPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200);
            expect(data.data).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200Data);
                  expect(data.data.updatedBy).to.be.a('string');
              expect(data.data.updatedBy).to.be("");
              expect(data.data.threatResponseGroupId).to.be.a('string');
              expect(data.data.threatResponseGroupId).to.be("");
              expect(data.data.alertResponseGroupId).to.be.a('string');
              expect(data.data.alertResponseGroupId).to.be("");
              expect(data.data.updatedAt).to.be.a('string');
              expect(data.data.updatedAt).to.be("");
              expect(data.data.userFullName).to.be.a('string');
              expect(data.data.userFullName).to.be("");
              expect(data.data.alertOnDeviceAlert).to.be.a('string');
              expect(data.data.alertOnDeviceAlert).to.be("");
              expect(data.data.alerts).to.be.a('string');
              expect(data.data.alerts).to.be("");
              expect(data.data.connectionScopeId).to.be.a('string');
              expect(data.data.connectionScopeId).to.be("");
              expect(data.data.connectionId).to.be.a('string');
              expect(data.data.connectionId).to.be("");
              expect(data.data.engines).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200DataEngines);
                    expect(data.data.engines.appBehavioralAi).to.be.a('string');
                expect(data.data.engines.appBehavioralAi).to.be("");
                expect(data.data.engines.systemBehavioralAi).to.be.a('string');
                expect(data.data.engines.systemBehavioralAi).to.be("");
                expect(data.data.engines.appStaticAi).to.be.a('string');
                expect(data.data.engines.appStaticAi).to.be("");
                expect(data.data.engines.vulnerabilityScanner).to.be.a('string');
                expect(data.data.engines.vulnerabilityScanner).to.be("");
                expect(data.data.engines.systemStaticAi).to.be.a('string');
                expect(data.data.engines.systemStaticAi).to.be("");
                expect(data.data.engines.networkAnalysis).to.be.a('string');
                expect(data.data.engines.networkAnalysis).to.be("");
                expect(data.data.engines.phishingScanner).to.be.a('string');
                expect(data.data.engines.phishingScanner).to.be("");
              expect(data.data.connectionScopeLevel).to.be.a('string');
              expect(data.data.connectionScopeLevel).to.be("");
              expect(data.data.inheritedFrom).to.be.a('string');
              expect(data.data.inheritedFrom).to.be("");
              expect(data.data.responseActions).to.be.a('string');
              expect(data.data.responseActions).to.be("");
              expect(data.data.threatPhishingPrevention).to.be.a('string');
              expect(data.data.threatPhishingPrevention).to.be("");
              expect(data.data._default).to.be.a('boolean');
              expect(data.data._default).to.be(false);
              expect(data.data.threatOnDeviceAlert).to.be.a('string');
              expect(data.data.threatOnDeviceAlert).to.be("");
              expect(data.data.threats).to.be.a('string');
              expect(data.data.threats).to.be("");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationProvisioningCanProvisionTenantGet', function() {
        it('should call webApiMobileIntegrationProvisioningCanProvisionTenantGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationProvisioningCanProvisionTenantGet call and complete the assertions
          /*
          var opts = {};
          opts.groupIds = ["groupIds_example"];
          opts.tenant = true;
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiMobileIntegrationProvisioningCanProvisionTenantGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ProvisioningSchemasCanProvisionTenant200);
            expect(data.data).to.be.a(S1MgmtApi.V21ProvisioningSchemasCanProvisionTenant200Data);
                  expect(data.data.reasonCode).to.be.a('string');
              expect(data.data.reasonCode).to.be("");
              expect(data.data.canProvision).to.be.a('boolean');
              expect(data.data.canProvision).to.be(false);
              expect(data.data.underMSSPScope).to.be.a('boolean');
              expect(data.data.underMSSPScope).to.be(false);
              expect(data.data.reason).to.be.a('string');
              expect(data.data.reason).to.be("");
              {
                let dataCtr = data.data.affectingScopes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.V21ProvisioningSchemasCanProvisionTenant200DataAffectingScopes);
                  expect(data.level).to.be.a('string');
                  expect(data.level).to.be("");
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("");
  
                        }
              }
              expect(data.data.msspScope).to.be.a('boolean');
              expect(data.data.msspScope).to.be(false);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationProvisioningPartnerKeyGet', function() {
        it('should call webApiMobileIntegrationProvisioningPartnerKeyGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationProvisioningPartnerKeyGet call and complete the assertions
          /*
          var opts = {};
          opts.groupIds = ["groupIds_example"];
          opts.tenant = true;
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiMobileIntegrationProvisioningPartnerKeyGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ProvisioningSchemasPartnerKeyItem200);
            expect(data.data).to.be.a(S1MgmtApi.V21ProvisioningSchemasPartnerKeyItem200Data);
                  expect(data.data.clientId).to.be.a('string');
              expect(data.data.clientId).to.be("");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationProvisioningPartnerKeyPost', function() {
        it('should call webApiMobileIntegrationProvisioningPartnerKeyPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationProvisioningPartnerKeyPost call
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21ProvisioningSchemasPartnerKeyRequestWrapper();
          opts.body.data = new S1MgmtApi.V21ProvisioningSchemasPartnerKeyRequestWrapperData();
          opts.body.data.clientId = "";
          opts.body.data.secret = "";
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationProvisioningPartnerKeyPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationProvisioningPartnerKeyPut', function() {
        it('should call webApiMobileIntegrationProvisioningPartnerKeyPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationProvisioningPartnerKeyPut call
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21ProvisioningSchemasPartnerKeyRequestWrapper();
          opts.body.data = new S1MgmtApi.V21ProvisioningSchemasPartnerKeyRequestWrapperData();
          opts.body.data.clientId = "";
          opts.body.data.secret = "";
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationProvisioningPartnerKeyPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationProvisioningPartnerKeyclientIdDelete', function() {
        it('should call webApiMobileIntegrationProvisioningPartnerKeyclientIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationProvisioningPartnerKeyclientIdDelete call
          /*
          var clientId = "clientId_example";
          var opts = {};
          opts.body = new S1MgmtApi.V21ProvisioningSchemasDeletePartnerKeyRequestSchema();
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationProvisioningPartnerKeyclientIdDelete(clientId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationProvisioningTenantGet', function() {
        it('should call webApiMobileIntegrationProvisioningTenantGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationProvisioningTenantGet call and complete the assertions
          /*
          var opts = {};
          opts.groupIds = ["groupIds_example"];
          opts.tenant = true;
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiMobileIntegrationProvisioningTenantGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21ProvisioningSchemasTenantWithUsersResponse200);
            expect(data.data).to.be.a(S1MgmtApi.V21ProvisioningSchemasTenantWithUsersResponse200Data);
                  expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("");
              expect(data.data.adminUser).to.be.a(S1MgmtApi.V21ProvisioningSchemasTenantWithUsersResponse200DataAdminUser);
                    expect(data.data.adminUser.role).to.be.a(S1MgmtApi.V21ProvisioningSchemasTenantWithUsersResponse200DataAdminUserRole);
                      expect(data.data.adminUser.role.id).to.be.a('string');
                  expect(data.data.adminUser.role.id).to.be("");
                  expect(data.data.adminUser.role.name).to.be.a('string');
                  expect(data.data.adminUser.role.name).to.be("");
                expect(data.data.adminUser.firstName).to.be.a('string');
                expect(data.data.adminUser.firstName).to.be("");
                expect(data.data.adminUser.email).to.be.a('string');
                expect(data.data.adminUser.email).to.be("");
                expect(data.data.adminUser.notificationEmail).to.be.a('string');
                expect(data.data.adminUser.notificationEmail).to.be("");
                expect(data.data.adminUser.created).to.be.a('string');
                expect(data.data.adminUser.created).to.be("");
                expect(data.data.adminUser.id).to.be.a('string');
                expect(data.data.adminUser.id).to.be("");
                expect(data.data.adminUser.lastName).to.be.a('string');
                expect(data.data.adminUser.lastName).to.be("");
              {
                let dataCtr = data.data.users;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.V21ProvisioningSchemasTenantWithUsersResponse200DataUsers);
                  expect(data.role).to.be.a(S1MgmtApi.V21ProvisioningSchemasTenantWithUsersResponse200DataAdminUserRole);
                        expect(data.role.id).to.be.a('string');
                    expect(data.role.id).to.be("");
                    expect(data.role.name).to.be.a('string');
                    expect(data.role.name).to.be("");
                  expect(data.firstName).to.be.a('string');
                  expect(data.firstName).to.be("");
                  expect(data.email).to.be.a('string');
                  expect(data.email).to.be("");
                  expect(data.notificationEmail).to.be.a('string');
                  expect(data.notificationEmail).to.be("");
                  expect(data.created).to.be.a('string');
                  expect(data.created).to.be("");
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("");
                  expect(data.lastName).to.be.a('string');
                  expect(data.lastName).to.be("");
  
                        }
              }
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationProvisioningTenantPost', function() {
        it('should call webApiMobileIntegrationProvisioningTenantPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationProvisioningTenantPost call
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21ProvisioningSchemasProvisionWithUserRequestWrapper();
          opts.body.data = new S1MgmtApi.V21ProvisioningSchemasProvisionWithUserRequestWrapperData();
          opts.body.data.adminEmail = "";
          opts.body.data.adminNotificationEmail = "";
          opts.body.data.adminFirstName = "";
          opts.body.data.adminLastName = "";
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationProvisioningTenantPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationSitessiteIdPolicyDelete', function() {
        it('should call webApiMobileIntegrationSitessiteIdPolicyDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationSitessiteIdPolicyDelete call
          /*
          var siteId = "siteId_example";

          instance.webApiMobileIntegrationSitessiteIdPolicyDelete(siteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationSitessiteIdPolicyGet', function() {
        it('should call webApiMobileIntegrationSitessiteIdPolicyGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationSitessiteIdPolicyGet call and complete the assertions
          /*
          var siteId = "siteId_example";

          instance.webApiMobileIntegrationSitessiteIdPolicyGet(siteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200);
            expect(data.data).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200Data);
                  expect(data.data.updatedBy).to.be.a('string');
              expect(data.data.updatedBy).to.be("");
              expect(data.data.threatResponseGroupId).to.be.a('string');
              expect(data.data.threatResponseGroupId).to.be("");
              expect(data.data.alertResponseGroupId).to.be.a('string');
              expect(data.data.alertResponseGroupId).to.be("");
              expect(data.data.updatedAt).to.be.a('string');
              expect(data.data.updatedAt).to.be("");
              expect(data.data.userFullName).to.be.a('string');
              expect(data.data.userFullName).to.be("");
              expect(data.data.alertOnDeviceAlert).to.be.a('string');
              expect(data.data.alertOnDeviceAlert).to.be("");
              expect(data.data.alerts).to.be.a('string');
              expect(data.data.alerts).to.be("");
              expect(data.data.connectionScopeId).to.be.a('string');
              expect(data.data.connectionScopeId).to.be("");
              expect(data.data.connectionId).to.be.a('string');
              expect(data.data.connectionId).to.be("");
              expect(data.data.engines).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200DataEngines);
                    expect(data.data.engines.appBehavioralAi).to.be.a('string');
                expect(data.data.engines.appBehavioralAi).to.be("");
                expect(data.data.engines.systemBehavioralAi).to.be.a('string');
                expect(data.data.engines.systemBehavioralAi).to.be("");
                expect(data.data.engines.appStaticAi).to.be.a('string');
                expect(data.data.engines.appStaticAi).to.be("");
                expect(data.data.engines.vulnerabilityScanner).to.be.a('string');
                expect(data.data.engines.vulnerabilityScanner).to.be("");
                expect(data.data.engines.systemStaticAi).to.be.a('string');
                expect(data.data.engines.systemStaticAi).to.be("");
                expect(data.data.engines.networkAnalysis).to.be.a('string');
                expect(data.data.engines.networkAnalysis).to.be("");
                expect(data.data.engines.phishingScanner).to.be.a('string');
                expect(data.data.engines.phishingScanner).to.be("");
              expect(data.data.connectionScopeLevel).to.be.a('string');
              expect(data.data.connectionScopeLevel).to.be("");
              expect(data.data.inheritedFrom).to.be.a('string');
              expect(data.data.inheritedFrom).to.be("");
              expect(data.data.responseActions).to.be.a('string');
              expect(data.data.responseActions).to.be("");
              expect(data.data.threatPhishingPrevention).to.be.a('string');
              expect(data.data.threatPhishingPrevention).to.be("");
              expect(data.data._default).to.be.a('boolean');
              expect(data.data._default).to.be(false);
              expect(data.data.threatOnDeviceAlert).to.be.a('string');
              expect(data.data.threatOnDeviceAlert).to.be("");
              expect(data.data.threats).to.be.a('string');
              expect(data.data.threats).to.be("");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationSitessiteIdPolicyPut', function() {
        it('should call webApiMobileIntegrationSitessiteIdPolicyPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationSitessiteIdPolicyPut call and complete the assertions
          /*
          var siteId = "siteId_example";
          var opts = {};
          opts.body = new S1MgmtApi.V21PolicySchemasPolicyRequest();
          opts.body.data = new S1MgmtApi.V21PolicySchemasPolicyRequestData();
          opts.body.data.threatResponseGroupId = "";
          opts.body.data.alertResponseGroupId = "";
          opts.body.data.alertOnDeviceAlert = "";
          opts.body.data.alerts = "";
          opts.body.data.engines = new S1MgmtApi.V21PolicySchemasPolicy200DataEngines();
          opts.body.data.engines.appBehavioralAi = "";
          opts.body.data.engines.systemBehavioralAi = "";
          opts.body.data.engines.appStaticAi = "";
          opts.body.data.engines.vulnerabilityScanner = "";
          opts.body.data.engines.systemStaticAi = "";
          opts.body.data.engines.networkAnalysis = "";
          opts.body.data.engines.phishingScanner = "";
          opts.body.data.threatPhishingPrevention = "";
          opts.body.data.threatOnDeviceAlert = "";
          opts.body.data.threats = "";
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationSitessiteIdPolicyPut(siteId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200);
            expect(data.data).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200Data);
                  expect(data.data.updatedBy).to.be.a('string');
              expect(data.data.updatedBy).to.be("");
              expect(data.data.threatResponseGroupId).to.be.a('string');
              expect(data.data.threatResponseGroupId).to.be("");
              expect(data.data.alertResponseGroupId).to.be.a('string');
              expect(data.data.alertResponseGroupId).to.be("");
              expect(data.data.updatedAt).to.be.a('string');
              expect(data.data.updatedAt).to.be("");
              expect(data.data.userFullName).to.be.a('string');
              expect(data.data.userFullName).to.be("");
              expect(data.data.alertOnDeviceAlert).to.be.a('string');
              expect(data.data.alertOnDeviceAlert).to.be("");
              expect(data.data.alerts).to.be.a('string');
              expect(data.data.alerts).to.be("");
              expect(data.data.connectionScopeId).to.be.a('string');
              expect(data.data.connectionScopeId).to.be("");
              expect(data.data.connectionId).to.be.a('string');
              expect(data.data.connectionId).to.be("");
              expect(data.data.engines).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200DataEngines);
                    expect(data.data.engines.appBehavioralAi).to.be.a('string');
                expect(data.data.engines.appBehavioralAi).to.be("");
                expect(data.data.engines.systemBehavioralAi).to.be.a('string');
                expect(data.data.engines.systemBehavioralAi).to.be("");
                expect(data.data.engines.appStaticAi).to.be.a('string');
                expect(data.data.engines.appStaticAi).to.be("");
                expect(data.data.engines.vulnerabilityScanner).to.be.a('string');
                expect(data.data.engines.vulnerabilityScanner).to.be("");
                expect(data.data.engines.systemStaticAi).to.be.a('string');
                expect(data.data.engines.systemStaticAi).to.be("");
                expect(data.data.engines.networkAnalysis).to.be.a('string');
                expect(data.data.engines.networkAnalysis).to.be("");
                expect(data.data.engines.phishingScanner).to.be.a('string');
                expect(data.data.engines.phishingScanner).to.be("");
              expect(data.data.connectionScopeLevel).to.be.a('string');
              expect(data.data.connectionScopeLevel).to.be("");
              expect(data.data.inheritedFrom).to.be.a('string');
              expect(data.data.inheritedFrom).to.be("");
              expect(data.data.responseActions).to.be.a('string');
              expect(data.data.responseActions).to.be("");
              expect(data.data.threatPhishingPrevention).to.be.a('string');
              expect(data.data.threatPhishingPrevention).to.be("");
              expect(data.data._default).to.be.a('boolean');
              expect(data.data._default).to.be(false);
              expect(data.data.threatOnDeviceAlert).to.be.a('string');
              expect(data.data.threatOnDeviceAlert).to.be("");
              expect(data.data.threats).to.be.a('string');
              expect(data.data.threats).to.be("");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationTenantPolicyDelete', function() {
        it('should call webApiMobileIntegrationTenantPolicyDelete successfully', function(done) {
          // TODO: uncomment webApiMobileIntegrationTenantPolicyDelete call
          /*

          instance.webApiMobileIntegrationTenantPolicyDelete(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationTenantPolicyGet', function() {
        it('should call webApiMobileIntegrationTenantPolicyGet successfully', function(done) {
          // TODO: uncomment webApiMobileIntegrationTenantPolicyGet call and complete the assertions
          /*

          instance.webApiMobileIntegrationTenantPolicyGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200);
            expect(data.data).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200Data);
                  expect(data.data.updatedBy).to.be.a('string');
              expect(data.data.updatedBy).to.be("");
              expect(data.data.threatResponseGroupId).to.be.a('string');
              expect(data.data.threatResponseGroupId).to.be("");
              expect(data.data.alertResponseGroupId).to.be.a('string');
              expect(data.data.alertResponseGroupId).to.be("");
              expect(data.data.updatedAt).to.be.a('string');
              expect(data.data.updatedAt).to.be("");
              expect(data.data.userFullName).to.be.a('string');
              expect(data.data.userFullName).to.be("");
              expect(data.data.alertOnDeviceAlert).to.be.a('string');
              expect(data.data.alertOnDeviceAlert).to.be("");
              expect(data.data.alerts).to.be.a('string');
              expect(data.data.alerts).to.be("");
              expect(data.data.connectionScopeId).to.be.a('string');
              expect(data.data.connectionScopeId).to.be("");
              expect(data.data.connectionId).to.be.a('string');
              expect(data.data.connectionId).to.be("");
              expect(data.data.engines).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200DataEngines);
                    expect(data.data.engines.appBehavioralAi).to.be.a('string');
                expect(data.data.engines.appBehavioralAi).to.be("");
                expect(data.data.engines.systemBehavioralAi).to.be.a('string');
                expect(data.data.engines.systemBehavioralAi).to.be("");
                expect(data.data.engines.appStaticAi).to.be.a('string');
                expect(data.data.engines.appStaticAi).to.be("");
                expect(data.data.engines.vulnerabilityScanner).to.be.a('string');
                expect(data.data.engines.vulnerabilityScanner).to.be("");
                expect(data.data.engines.systemStaticAi).to.be.a('string');
                expect(data.data.engines.systemStaticAi).to.be("");
                expect(data.data.engines.networkAnalysis).to.be.a('string');
                expect(data.data.engines.networkAnalysis).to.be("");
                expect(data.data.engines.phishingScanner).to.be.a('string');
                expect(data.data.engines.phishingScanner).to.be("");
              expect(data.data.connectionScopeLevel).to.be.a('string');
              expect(data.data.connectionScopeLevel).to.be("");
              expect(data.data.inheritedFrom).to.be.a('string');
              expect(data.data.inheritedFrom).to.be("");
              expect(data.data.responseActions).to.be.a('string');
              expect(data.data.responseActions).to.be("");
              expect(data.data.threatPhishingPrevention).to.be.a('string');
              expect(data.data.threatPhishingPrevention).to.be("");
              expect(data.data._default).to.be.a('boolean');
              expect(data.data._default).to.be(false);
              expect(data.data.threatOnDeviceAlert).to.be.a('string');
              expect(data.data.threatOnDeviceAlert).to.be("");
              expect(data.data.threats).to.be.a('string');
              expect(data.data.threats).to.be("");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiMobileIntegrationTenantPolicyPut', function() {
        it('should call webApiMobileIntegrationTenantPolicyPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiMobileIntegrationTenantPolicyPut call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.V21PolicySchemasPolicyRequest();
          opts.body.data = new S1MgmtApi.V21PolicySchemasPolicyRequestData();
          opts.body.data.threatResponseGroupId = "";
          opts.body.data.alertResponseGroupId = "";
          opts.body.data.alertOnDeviceAlert = "";
          opts.body.data.alerts = "";
          opts.body.data.engines = new S1MgmtApi.V21PolicySchemasPolicy200DataEngines();
          opts.body.data.engines.appBehavioralAi = "";
          opts.body.data.engines.systemBehavioralAi = "";
          opts.body.data.engines.appStaticAi = "";
          opts.body.data.engines.vulnerabilityScanner = "";
          opts.body.data.engines.systemStaticAi = "";
          opts.body.data.engines.networkAnalysis = "";
          opts.body.data.engines.phishingScanner = "";
          opts.body.data.threatPhishingPrevention = "";
          opts.body.data.threatOnDeviceAlert = "";
          opts.body.data.threats = "";
          opts.body.filter = new S1MgmtApi.V21ActivationSchemasUserActivationIdsRequestWrapperFilter();
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];

          instance.webApiMobileIntegrationTenantPolicyPut(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200);
            expect(data.data).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200Data);
                  expect(data.data.updatedBy).to.be.a('string');
              expect(data.data.updatedBy).to.be("");
              expect(data.data.threatResponseGroupId).to.be.a('string');
              expect(data.data.threatResponseGroupId).to.be("");
              expect(data.data.alertResponseGroupId).to.be.a('string');
              expect(data.data.alertResponseGroupId).to.be("");
              expect(data.data.updatedAt).to.be.a('string');
              expect(data.data.updatedAt).to.be("");
              expect(data.data.userFullName).to.be.a('string');
              expect(data.data.userFullName).to.be("");
              expect(data.data.alertOnDeviceAlert).to.be.a('string');
              expect(data.data.alertOnDeviceAlert).to.be("");
              expect(data.data.alerts).to.be.a('string');
              expect(data.data.alerts).to.be("");
              expect(data.data.connectionScopeId).to.be.a('string');
              expect(data.data.connectionScopeId).to.be("");
              expect(data.data.connectionId).to.be.a('string');
              expect(data.data.connectionId).to.be("");
              expect(data.data.engines).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200DataEngines);
                    expect(data.data.engines.appBehavioralAi).to.be.a('string');
                expect(data.data.engines.appBehavioralAi).to.be("");
                expect(data.data.engines.systemBehavioralAi).to.be.a('string');
                expect(data.data.engines.systemBehavioralAi).to.be("");
                expect(data.data.engines.appStaticAi).to.be.a('string');
                expect(data.data.engines.appStaticAi).to.be("");
                expect(data.data.engines.vulnerabilityScanner).to.be.a('string');
                expect(data.data.engines.vulnerabilityScanner).to.be("");
                expect(data.data.engines.systemStaticAi).to.be.a('string');
                expect(data.data.engines.systemStaticAi).to.be("");
                expect(data.data.engines.networkAnalysis).to.be.a('string');
                expect(data.data.engines.networkAnalysis).to.be("");
                expect(data.data.engines.phishingScanner).to.be.a('string');
                expect(data.data.engines.phishingScanner).to.be("");
              expect(data.data.connectionScopeLevel).to.be.a('string');
              expect(data.data.connectionScopeLevel).to.be("");
              expect(data.data.inheritedFrom).to.be.a('string');
              expect(data.data.inheritedFrom).to.be("");
              expect(data.data.responseActions).to.be.a('string');
              expect(data.data.responseActions).to.be("");
              expect(data.data.threatPhishingPrevention).to.be.a('string');
              expect(data.data.threatPhishingPrevention).to.be("");
              expect(data.data._default).to.be.a('boolean');
              expect(data.data._default).to.be(false);
              expect(data.data.threatOnDeviceAlert).to.be.a('string');
              expect(data.data.threatOnDeviceAlert).to.be("");
              expect(data.data.threats).to.be.a('string');
              expect(data.data.threats).to.be("");
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
