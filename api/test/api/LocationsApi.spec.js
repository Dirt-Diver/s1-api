/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.LocationsApi();
  });

  describe('(package)', function() {
    describe('LocationsApi', function() {
      describe('webApiLocationsDelete', function() {
        it('should call webApiLocationsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiLocationsDelete call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.LocationsSchemasDeleteLocationsSchema();
          opts.body.data = new S1MgmtApi.LocationsSchemasDeleteLocationsSchemaData();
          opts.body.data.ids = ["225494730938493804","225494730938493915"];

          instance.webApiLocationsDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiLocationsGet', function() {
        it('should call webApiLocationsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiLocationsGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "null";
          opts.nameContains = ["nameContains_example"];
          opts.registryKeyContains = ["registryKeyContains_example"];
          opts.ids = ["ids_example"];
          opts.creatorContains = ["creatorContains_example"];
          opts.countOnly = false;
          opts.limit = 10;
          opts.skip = 56;
          opts.skipCount = null;
          opts.sortOrder = "null";
          opts.scopes = ["scopes_example"];
          opts.hasFirewallRules = true;
          opts.sortBy = "null";
          opts.groupIds = ["groupIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.descriptionContains = ["descriptionContains_example"];
          opts.hostnameContains = ["hostnameContains_example"];
          opts.scopeNameContains = ["scopeNameContains_example"];
          opts.ipAddressContains = ["ipAddressContains_example"];

          instance.webApiLocationsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.LocationsSchemasLocationViewSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.LocationsSchemasLocationViewSchemaMany200Data);
                expect(data.operator).to.be.a('string');
                expect(data.operator).to.be("all");
                expect(data.dnsLookup).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsLookup);
                      expect(data.dnsLookup.operator).to.be.a('string');
                  expect(data.dnsLookup.operator).to.be("all");
                  {
                    let dataCtr = data.dnsLookup.identifiers;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsLookupIdentifiers);
                      expect(data.host).to.be.a('string');
                      expect(data.host).to.be("sentinelone.com");
                      expect(data.ip).to.be.a('string');
                      expect(data.ip).to.be("127.0.0.1");
      
                            }
                  }
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.scopeId).to.be.a('string');
                expect(data.scopeId).to.be("225494730938493804");
                expect(data.updaterId).to.be.a('string');
                expect(data.updaterId).to.be("225494730938493804");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.creatorId).to.be.a('string');
                expect(data.creatorId).to.be("225494730938493804");
                expect(data.reportingAgents).to.be.a('number');
                expect(data.reportingAgents).to.be(0);
                expect(data.updater).to.be.a('string');
                expect(data.updater).to.be("John Doe");
                expect(data.scopeName).to.be.a('string');
                expect(data.scopeName).to.be("");
                expect(data.dnsServers).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsServers);
                      expect(data.dnsServers.operator).to.be.a('string');
                  expect(data.dnsServers.operator).to.be("all");
                  {
                    let dataCtr = data.dnsServers.identifiers;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsServersIdentifiers);
                      {
                        let dataCtr = data.values;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("address");
      
                            }
                  }
                expect(data.networkInterfaces).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataNetworkInterfaces);
                      expect(data.networkInterfaces.enabled).to.be.a('boolean');
                  expect(data.networkInterfaces.enabled).to.be(false);
                  expect(data.networkInterfaces.value).to.be.a('string');
                  expect(data.networkInterfaces.value).to.be("wired");
                expect(data.ipAddresses).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataIpAddresses);
                      expect(data.ipAddresses.operator).to.be.a('string');
                  expect(data.ipAddresses.operator).to.be("all");
                  {
                    let dataCtr = data.ipAddresses.identifiers;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsServersIdentifiers);
                      {
                        let dataCtr = data.values;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("address");
      
                            }
                  }
                expect(data.registryKeys).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataRegistryKeys);
                      expect(data.registryKeys.key).to.be.a('string');
                  expect(data.registryKeys.key).to.be("HKEY_LOCAL_MACHINE\SOFTWARE\Sentinel\EndpointLocation");
                  expect(data.registryKeys.value).to.be.a('string');
                  expect(data.registryKeys.value).to.be("SerialNumber");
                  expect(data.registryKeys.data).to.be.a('string');
                  expect(data.registryKeys.data).to.be("a1b2c3d4");
                expect(data.scope).to.be.a('string');
                expect(data.scope).to.be("site");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("This location represents our new office building");
                expect(data.activeFirewallRules).to.be.a('number');
                expect(data.activeFirewallRules).to.be(0);
                expect(data.serverConnectivity).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataServerConnectivity);
                      expect(data.serverConnectivity.enabled).to.be.a('boolean');
                  expect(data.serverConnectivity.enabled).to.be(false);
                  expect(data.serverConnectivity.value).to.be.a('string');
                  expect(data.serverConnectivity.value).to.be("connected");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("office1");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.creator).to.be.a('string');
                expect(data.creator).to.be("John Doe");
                expect(data.editable).to.be.a('boolean');
                expect(data.editable).to.be(false);
                expect(data.isFallback).to.be.a('boolean');
                expect(data.isFallback).to.be(false);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiLocationsPost', function() {
        it('should call webApiLocationsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiLocationsPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.LocationsSchemasNewLocationSchema();
          opts.body.filter = new S1MgmtApi.LocationsSchemasNewLocationSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.LocationsSchemasNewLocationSchemaData();
          opts.body.data.description = "This location represents our new office building";
          opts.body.data.operator = "all";
          opts.body.data.dnsLookup = new S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsLookup();
          opts.body.data.dnsLookup.operator = "all";
          opts.body.data.dnsLookup.identifiers = [new S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsLookupIdentifiers()];
          opts.body.data.dnsLookup.identifiers[0].host = "sentinelone.com";
          opts.body.data.dnsLookup.identifiers[0].ip = "127.0.0.1";
          opts.body.data.serverConnectivity = new S1MgmtApi.LocationsSchemasNewLocationSchemaDataServerConnectivity();
          opts.body.data.serverConnectivity.enabled = false;
          opts.body.data.serverConnectivity.value = "connected";
          opts.body.data.name = "office1";
          opts.body.data.dnsServers = new S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsServers();
          opts.body.data.dnsServers.operator = "all";
          opts.body.data.dnsServers.identifiers = [new S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsServersIdentifiers()];
          opts.body.data.dnsServers.identifiers[0].values = ["192.168.43.199"];
          opts.body.data.dnsServers.identifiers[0].type = "address";
          opts.body.data.networkInterfaces = new S1MgmtApi.LocationsSchemasNewLocationSchemaDataNetworkInterfaces();
          opts.body.data.networkInterfaces.enabled = false;
          opts.body.data.networkInterfaces.value = "wired";
          opts.body.data.ipAddresses = new S1MgmtApi.LocationsSchemasNewLocationSchemaDataIpAddresses();
          opts.body.data.ipAddresses.operator = "all";
          opts.body.data.ipAddresses.identifiers = [new S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsServersIdentifiers()];
          opts.body.data.ipAddresses.identifiers[0].values = ["192.168.43.199"];
          opts.body.data.ipAddresses.identifiers[0].type = "address";
          opts.body.data.registryKeys = new S1MgmtApi.LocationsSchemasNewLocationSchemaDataRegistryKeys();
          opts.body.data.registryKeys.key = "HKEY_LOCAL_MACHINE\SOFTWARE\Sentinel\EndpointLocation";
          opts.body.data.registryKeys.value = "SerialNumber";
          opts.body.data.registryKeys.data = "a1b2c3d4";

          instance.webApiLocationsPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.LocationsSchemasLocationViewSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.LocationsSchemasLocationViewSchema200Data);
                  expect(data.data.operator).to.be.a('string');
              expect(data.data.operator).to.be("all");
              expect(data.data.dnsLookup).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsLookup);
                    expect(data.data.dnsLookup.operator).to.be.a('string');
                expect(data.data.dnsLookup.operator).to.be("all");
                {
                  let dataCtr = data.data.dnsLookup.identifiers;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsLookupIdentifiers);
                    expect(data.host).to.be.a('string');
                    expect(data.host).to.be("sentinelone.com");
                    expect(data.ip).to.be.a('string');
                    expect(data.ip).to.be("127.0.0.1");
    
                          }
                }
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.updaterId).to.be.a('string');
              expect(data.data.updaterId).to.be("225494730938493804");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              expect(data.data.reportingAgents).to.be.a('number');
              expect(data.data.reportingAgents).to.be(0);
              expect(data.data.updater).to.be.a('string');
              expect(data.data.updater).to.be("John Doe");
              expect(data.data.scopeName).to.be.a('string');
              expect(data.data.scopeName).to.be("");
              expect(data.data.dnsServers).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsServers);
                    expect(data.data.dnsServers.operator).to.be.a('string');
                expect(data.data.dnsServers.operator).to.be("all");
                {
                  let dataCtr = data.data.dnsServers.identifiers;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsServersIdentifiers);
                    {
                      let dataCtr = data.values;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("address");
    
                          }
                }
              expect(data.data.networkInterfaces).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataNetworkInterfaces);
                    expect(data.data.networkInterfaces.enabled).to.be.a('boolean');
                expect(data.data.networkInterfaces.enabled).to.be(false);
                expect(data.data.networkInterfaces.value).to.be.a('string');
                expect(data.data.networkInterfaces.value).to.be("wired");
              expect(data.data.ipAddresses).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataIpAddresses);
                    expect(data.data.ipAddresses.operator).to.be.a('string');
                expect(data.data.ipAddresses.operator).to.be("all");
                {
                  let dataCtr = data.data.ipAddresses.identifiers;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsServersIdentifiers);
                    {
                      let dataCtr = data.values;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("address");
    
                          }
                }
              expect(data.data.registryKeys).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataRegistryKeys);
                    expect(data.data.registryKeys.key).to.be.a('string');
                expect(data.data.registryKeys.key).to.be("HKEY_LOCAL_MACHINE\SOFTWARE\Sentinel\EndpointLocation");
                expect(data.data.registryKeys.value).to.be.a('string');
                expect(data.data.registryKeys.value).to.be("SerialNumber");
                expect(data.data.registryKeys.data).to.be.a('string');
                expect(data.data.registryKeys.data).to.be("a1b2c3d4");
              expect(data.data.scope).to.be.a('string');
              expect(data.data.scope).to.be("site");
              expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("This location represents our new office building");
              expect(data.data.activeFirewallRules).to.be.a('number');
              expect(data.data.activeFirewallRules).to.be(0);
              expect(data.data.serverConnectivity).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataServerConnectivity);
                    expect(data.data.serverConnectivity.enabled).to.be.a('boolean');
                expect(data.data.serverConnectivity.enabled).to.be(false);
                expect(data.data.serverConnectivity.value).to.be.a('string');
                expect(data.data.serverConnectivity.value).to.be("connected");
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("office1");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("John Doe");
              expect(data.data.editable).to.be.a('boolean');
              expect(data.data.editable).to.be(false);
              expect(data.data.isFallback).to.be.a('boolean');
              expect(data.data.isFallback).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiLocationslocationIdPut', function() {
        it('should call webApiLocationslocationIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiLocationslocationIdPut call and complete the assertions
          /*
          var locationId = "locationId_example";
          var opts = {};
          opts.body = new S1MgmtApi.LocationsSchemasUpdateLocationSchema();
          opts.body.data = new S1MgmtApi.LocationsSchemasUpdateLocationSchemaData();
          opts.body.data.description = "This location represents our new office building";
          opts.body.data.operator = "all";
          opts.body.data.dnsLookup = new S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsLookup();
          opts.body.data.dnsLookup.operator = "all";
          opts.body.data.dnsLookup.identifiers = [new S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsLookupIdentifiers()];
          opts.body.data.dnsLookup.identifiers[0].host = "sentinelone.com";
          opts.body.data.dnsLookup.identifiers[0].ip = "127.0.0.1";
          opts.body.data.serverConnectivity = new S1MgmtApi.LocationsSchemasNewLocationSchemaDataServerConnectivity();
          opts.body.data.serverConnectivity.enabled = false;
          opts.body.data.serverConnectivity.value = "connected";
          opts.body.data.name = "office1";
          opts.body.data.dnsServers = new S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsServers();
          opts.body.data.dnsServers.operator = "all";
          opts.body.data.dnsServers.identifiers = [new S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsServersIdentifiers()];
          opts.body.data.dnsServers.identifiers[0].values = ["192.168.43.199"];
          opts.body.data.dnsServers.identifiers[0].type = "address";
          opts.body.data.networkInterfaces = new S1MgmtApi.LocationsSchemasNewLocationSchemaDataNetworkInterfaces();
          opts.body.data.networkInterfaces.enabled = false;
          opts.body.data.networkInterfaces.value = "wired";
          opts.body.data.ipAddresses = new S1MgmtApi.LocationsSchemasNewLocationSchemaDataIpAddresses();
          opts.body.data.ipAddresses.operator = "all";
          opts.body.data.ipAddresses.identifiers = [new S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsServersIdentifiers()];
          opts.body.data.ipAddresses.identifiers[0].values = ["192.168.43.199"];
          opts.body.data.ipAddresses.identifiers[0].type = "address";
          opts.body.data.registryKeys = new S1MgmtApi.LocationsSchemasNewLocationSchemaDataRegistryKeys();
          opts.body.data.registryKeys.key = "HKEY_LOCAL_MACHINE\SOFTWARE\Sentinel\EndpointLocation";
          opts.body.data.registryKeys.value = "SerialNumber";
          opts.body.data.registryKeys.data = "a1b2c3d4";

          instance.webApiLocationslocationIdPut(locationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.LocationsSchemasLocationViewSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.LocationsSchemasLocationViewSchema200Data);
                  expect(data.data.operator).to.be.a('string');
              expect(data.data.operator).to.be("all");
              expect(data.data.dnsLookup).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsLookup);
                    expect(data.data.dnsLookup.operator).to.be.a('string');
                expect(data.data.dnsLookup.operator).to.be("all");
                {
                  let dataCtr = data.data.dnsLookup.identifiers;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsLookupIdentifiers);
                    expect(data.host).to.be.a('string');
                    expect(data.host).to.be("sentinelone.com");
                    expect(data.ip).to.be.a('string');
                    expect(data.ip).to.be("127.0.0.1");
    
                          }
                }
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.updaterId).to.be.a('string');
              expect(data.data.updaterId).to.be("225494730938493804");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              expect(data.data.reportingAgents).to.be.a('number');
              expect(data.data.reportingAgents).to.be(0);
              expect(data.data.updater).to.be.a('string');
              expect(data.data.updater).to.be("John Doe");
              expect(data.data.scopeName).to.be.a('string');
              expect(data.data.scopeName).to.be("");
              expect(data.data.dnsServers).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsServers);
                    expect(data.data.dnsServers.operator).to.be.a('string');
                expect(data.data.dnsServers.operator).to.be("all");
                {
                  let dataCtr = data.data.dnsServers.identifiers;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsServersIdentifiers);
                    {
                      let dataCtr = data.values;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("address");
    
                          }
                }
              expect(data.data.networkInterfaces).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataNetworkInterfaces);
                    expect(data.data.networkInterfaces.enabled).to.be.a('boolean');
                expect(data.data.networkInterfaces.enabled).to.be(false);
                expect(data.data.networkInterfaces.value).to.be.a('string');
                expect(data.data.networkInterfaces.value).to.be("wired");
              expect(data.data.ipAddresses).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataIpAddresses);
                    expect(data.data.ipAddresses.operator).to.be.a('string');
                expect(data.data.ipAddresses.operator).to.be("all");
                {
                  let dataCtr = data.data.ipAddresses.identifiers;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataDnsServersIdentifiers);
                    {
                      let dataCtr = data.values;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("address");
    
                          }
                }
              expect(data.data.registryKeys).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataRegistryKeys);
                    expect(data.data.registryKeys.key).to.be.a('string');
                expect(data.data.registryKeys.key).to.be("HKEY_LOCAL_MACHINE\SOFTWARE\Sentinel\EndpointLocation");
                expect(data.data.registryKeys.value).to.be.a('string');
                expect(data.data.registryKeys.value).to.be("SerialNumber");
                expect(data.data.registryKeys.data).to.be.a('string');
                expect(data.data.registryKeys.data).to.be("a1b2c3d4");
              expect(data.data.scope).to.be.a('string');
              expect(data.data.scope).to.be("site");
              expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("This location represents our new office building");
              expect(data.data.activeFirewallRules).to.be.a('number');
              expect(data.data.activeFirewallRules).to.be(0);
              expect(data.data.serverConnectivity).to.be.a(S1MgmtApi.LocationsSchemasNewLocationSchemaDataServerConnectivity);
                    expect(data.data.serverConnectivity.enabled).to.be.a('boolean');
                expect(data.data.serverConnectivity.enabled).to.be(false);
                expect(data.data.serverConnectivity.value).to.be.a('string');
                expect(data.data.serverConnectivity.value).to.be("connected");
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("office1");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("John Doe");
              expect(data.data.editable).to.be.a('boolean');
              expect(data.data.editable).to.be(false);
              expect(data.data.isFallback).to.be.a('boolean');
              expect(data.data.isFallback).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
