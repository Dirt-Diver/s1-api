/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.TagsApi();
  });

  describe('(package)', function() {
    describe('TagsApi', function() {
      describe('webApiTagsDelete', function() {
        it('should call webApiTagsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiTagsDelete call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.TagsSchemasTagDeleteSchema();
          opts.body.filter = new S1MgmtApi.TagsSchemasTagDeleteSchemaFilter();
          opts.body.filter.nameContains = ["tag_name","tag_na"];
          opts.body.filter.onlyParents = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.query = "";
          opts.body.filter.kind = "";
          opts.body.filter.tenant = false;
          opts.body.filter.type = ["firewall"];
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.scope = "site";

          instance.webApiTagsDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiTagsGet', function() {
        it('should call webApiTagsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiTagsGet call and complete the assertions
          /*
          var type = ["type_example"];
          var opts = {};
          opts.cursor = "null";
          opts.nameContains = ["nameContains_example"];
          opts.kind = "kind_example";
          opts.query = "query_example";
          opts.ids = ["ids_example"];
          opts.countOnly = false;
          opts.limit = 10;
          opts.skip = 56;
          opts.skipCount = null;
          opts.sortOrder = "null";
          opts.disablePagination = true;
          opts.sortBy = "null";
          opts.tenant = true;
          opts.groupIds = ["groupIds_example"];
          opts.scope = "scope_example";
          opts.onlyParents = false;
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];

          instance.webApiTagsGet(type, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.TagsSchemasGetTagSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.TagsSchemasGetTagSchemaMany200Data);
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.updaterId).to.be.a('string');
                expect(data.updaterId).to.be("225494730938493804");
                expect(data.linkedRules).to.be.a('number');
                expect(data.linkedRules).to.be(0);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("My Tag");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.creator).to.be.a('string');
                expect(data.creator).to.be("John Doe");
                expect(data.creatorId).to.be.a('string');
                expect(data.creatorId).to.be("225494730938493804");
                expect(data.affectedScopes).to.be.a('number');
                expect(data.affectedScopes).to.be(0);
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("firewall");
                expect(data.scopeId).to.be.a('string');
                expect(data.scopeId).to.be("225494730938493804");
                expect(data.scopeName).to.be.a('string');
                expect(data.scopeName).to.be("");
                expect(data.updater).to.be.a('string');
                expect(data.updater).to.be("John Doe");
                expect(data.scope).to.be.a('string');
                expect(data.scope).to.be("site");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiTagsPost', function() {
        it('should call webApiTagsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiTagsPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.TagsSchemasPostTagSchema();
          opts.body.filter = new S1MgmtApi.ExclusionsSchemasPostExclusionSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.tenant = false;
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.TagsSchemasPostTagSchemaData();
          opts.body.data.description = "";
          opts.body.data.id = "225494730938493804";
          opts.body.data.name = "My Tag";
          opts.body.data.kind = "";
          opts.body.data.type = "firewall";

          instance.webApiTagsPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.TagsSchemasGetTagSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.TagsSchemasGetTagSchema200Data);
                  expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("");
              expect(data.data.updaterId).to.be.a('string');
              expect(data.data.updaterId).to.be("225494730938493804");
              expect(data.data.linkedRules).to.be.a('number');
              expect(data.data.linkedRules).to.be(0);
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("My Tag");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("John Doe");
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              expect(data.data.affectedScopes).to.be.a('number');
              expect(data.data.affectedScopes).to.be(0);
              expect(data.data.kind).to.be.a('string');
              expect(data.data.kind).to.be("");
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.type).to.be.a('string');
              expect(data.data.type).to.be("firewall");
              expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.scopeName).to.be.a('string');
              expect(data.data.scopeName).to.be("");
              expect(data.data.updater).to.be.a('string');
              expect(data.data.updater).to.be("John Doe");
              expect(data.data.scope).to.be.a('string');
              expect(data.data.scope).to.be("site");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiTagstagIdDelete', function() {
        it('should call webApiTagstagIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiTagstagIdDelete call and complete the assertions
          /*
          var tagId = "tagId_example";

          instance.webApiTagstagIdDelete(tagId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiTagstagIdPut', function() {
        it('should call webApiTagstagIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiTagstagIdPut call and complete the assertions
          /*
          var tagId = "tagId_example";
          var opts = {};
          opts.body = new S1MgmtApi.TagsSchemasPutTagSchema();
          opts.body.data = new S1MgmtApi.TagsSchemasPutTagSchemaData();
          opts.body.data.description = "";
          opts.body.data.id = "225494730938493804";
          opts.body.data.kind = "";
          opts.body.data.name = "My Tag";

          instance.webApiTagstagIdPut(tagId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.TagsSchemasGetTagSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.TagsSchemasGetTagSchema200Data);
                  expect(data.data.description).to.be.a('string');
              expect(data.data.description).to.be("");
              expect(data.data.updaterId).to.be.a('string');
              expect(data.data.updaterId).to.be("225494730938493804");
              expect(data.data.linkedRules).to.be.a('number');
              expect(data.data.linkedRules).to.be(0);
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("My Tag");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.creator).to.be.a('string');
              expect(data.data.creator).to.be("John Doe");
              expect(data.data.creatorId).to.be.a('string');
              expect(data.data.creatorId).to.be("225494730938493804");
              expect(data.data.affectedScopes).to.be.a('number');
              expect(data.data.affectedScopes).to.be(0);
              expect(data.data.kind).to.be.a('string');
              expect(data.data.kind).to.be("");
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.type).to.be.a('string');
              expect(data.data.type).to.be("firewall");
              expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.scopeName).to.be.a('string');
              expect(data.data.scopeName).to.be("");
              expect(data.data.updater).to.be.a('string');
              expect(data.data.updater).to.be("John Doe");
              expect(data.data.scope).to.be.a('string');
              expect(data.data.scope).to.be("site");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
