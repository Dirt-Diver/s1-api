/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.UsersApi();
  });

  describe('(package)', function() {
    describe('UsersApi', function() {
      describe('webApiExportUsersGet', function() {
        it('should call webApiExportUsersGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiExportUsersGet call
          /*
          var opts = {};
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.emailVerified = true;
          opts.canGenerateApiToken = true;
          opts.lastActivationBetween = "lastActivationBetween_example";
          opts.ids = ["ids_example"];
          opts.query = "query_example";
          opts.apiTokenExpiresAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.lastActivationLte = new Date("2013-10-20T19:20:30+01:00");
          opts.sources = ["sources_example"];
          opts.primaryTwoFaMethod = "primaryTwoFaMethod_example";
          opts.lastLogin = new Date("2013-10-20T19:20:30+01:00");
          opts.lastActivationLt = new Date("2013-10-20T19:20:30+01:00");
          opts.hasValidApiToken = true;
          opts.source = "source_example";
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.dateJoined = new Date("2013-10-20T19:20:30+01:00");
          opts.fullNameContains = ["fullNameContains_example"];
          opts.roleIds = ["roleIds_example"];
          opts.email = "email_example";
          opts.apiTokenExpiresAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.twoFaStatuses = ["twoFaStatuses_example"];
          opts.fullNameReadOnly = true;
          opts.twoFaStatus = "twoFaStatus_example";
          opts.apiTokenExpiresAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.fullName = "fullName_example";
          opts.groupsReadOnly = true;
          opts.apiTokenExpiresAtBetween = "apiTokenExpiresAtBetween_example";
          opts.createdAtBetween = "createdAtBetween_example";
          opts.firstLogin = new Date("2013-10-20T19:20:30+01:00");
          opts.emailReadOnly = true;
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.lastActivationGt = new Date("2013-10-20T19:20:30+01:00");
          opts.apiTokenExpiresAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.emailContains = ["emailContains_example"];
          opts.lastActivationGte = new Date("2013-10-20T19:20:30+01:00");
          opts.twoFaEnabled = true;

          instance.webApiExportUsersGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUserGet', function() {
        it('should call webApiUserGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUserGet call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.groupIds = ["groupIds_example"];
          opts.tenant = true;
          opts.siteIds = ["siteIds_example"];

          instance.webApiUserGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.UsersSchemasUserSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.UsersSchemasUserSchema200Data);
                  expect(data.data.emailVerified).to.be.a('boolean');
              expect(data.data.emailVerified).to.be(false);
              expect(data.data.canGenerateApiToken).to.be.a('boolean');
              expect(data.data.canGenerateApiToken).to.be(false);
              expect(data.data.apiToken).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataApiToken);
                    expect(data.data.apiToken.createdAt).to.be.a(Date);
                expect(data.data.apiToken.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.apiToken.expiresAt).to.be.a(Date);
                expect(data.data.apiToken.expiresAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.isSystem).to.be.a('boolean');
              expect(data.data.isSystem).to.be(false);
              expect(data.data.elevatedSessionDurationMinutes).to.be.a('number');
              expect(data.data.elevatedSessionDurationMinutes).to.be(0);
              {
                let dataCtr = data.data.scopeRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataScopeRoles);
                  expect(data.accountName).to.be.a('string');
                  expect(data.accountName).to.be("My Scope 1");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("My Scope 1");
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("225494730938493804");
                  expect(data.roleId).to.be.a('string');
                  expect(data.roleId).to.be("225494730938493804");
                  {
                    let dataCtr = data.roles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.roleName).to.be.a('string');
                  expect(data.roleName).to.be("Admin");
  
                        }
              }
              expect(data.data.primaryTwoFaMethod).to.be.a('string');
              expect(data.data.primaryTwoFaMethod).to.be("");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.lastLogin).to.be.a(Date);
              expect(data.data.lastLogin).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.twoFaEnabledReadOnly).to.be.a('boolean');
              expect(data.data.twoFaEnabledReadOnly).to.be(false);
              {
                let dataCtr = data.data.siteRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataSiteRoles);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("My Site 1");
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("225494730938493804");
                  expect(data.roleId).to.be.a('string');
                  expect(data.roleId).to.be("225494730938493804");
                  {
                    let dataCtr = data.roles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.roleName).to.be.a('string');
                  expect(data.roleName).to.be("Admin");
  
                        }
              }
              expect(data.data.source).to.be.a('string');
              expect(data.data.source).to.be("");
              expect(data.data.dateJoined).to.be.a(Date);
              expect(data.data.dateJoined).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.email).to.be.a('string');
              expect(data.data.email).to.be("admin@sentinelone.com");
              expect(data.data.allowRemoteShell).to.be.a('boolean');
              expect(data.data.allowRemoteShell).to.be(false);
              expect(data.data.fullNameReadOnly).to.be.a('boolean');
              expect(data.data.fullNameReadOnly).to.be(false);
              expect(data.data.twoFaStatus).to.be.a('string');
              expect(data.data.twoFaStatus).to.be("configured");
              expect(data.data.twoFaConfigured).to.be.a('boolean');
              expect(data.data.twoFaConfigured).to.be(false);
              expect(data.data.fullName).to.be.a('string');
              expect(data.data.fullName).to.be("");
              expect(data.data.isExternalLoginUser).to.be.a('boolean');
              expect(data.data.isExternalLoginUser).to.be(false);
              expect(data.data.groupsReadOnly).to.be.a('boolean');
              expect(data.data.groupsReadOnly).to.be(false);
              expect(data.data.agreedEula).to.be.a('boolean');
              expect(data.data.agreedEula).to.be(false);
              {
                let dataCtr = data.data.tenantRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }
              expect(data.data.firstLogin).to.be.a(Date);
              expect(data.data.firstLogin).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.scope).to.be.a('string');
              expect(data.data.scope).to.be("tenant");
              expect(data.data.emailReadOnly).to.be.a('boolean');
              expect(data.data.emailReadOnly).to.be(false);
              expect(data.data.agreementUrl).to.be.a('string');
              expect(data.data.agreementUrl).to.be("");
              expect(data.data.lowestRole).to.be.a('string');
              expect(data.data.lowestRole).to.be("");
              expect(data.data.twoFaEnabled).to.be.a('boolean');
              expect(data.data.twoFaEnabled).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsers2faDisablePost', function() {
        it('should call webApiUsers2faDisablePost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsers2faDisablePost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasUserIdSchema();
          opts.body.data = new S1MgmtApi.UsersSchemasUserIdSchemaData();
          opts.body.data.twoFaCode = "";
          opts.body.data.currentPassword = "";
          opts.body.data.id = "225494730938493804";

          instance.webApiUsers2faDisablePost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsers2faEnablePost', function() {
        it('should call webApiUsers2faEnablePost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsers2faEnablePost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasUserIdSchema();
          opts.body.data = new S1MgmtApi.UsersSchemasUserIdSchemaData();
          opts.body.data.twoFaCode = "";
          opts.body.data.currentPassword = "";
          opts.body.data.id = "225494730938493804";

          instance.webApiUsers2faEnablePost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersApiTokenDetailsPost', function() {
        it('should call webApiUsersApiTokenDetailsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersApiTokenDetailsPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasApiTokenSchema();
          opts.body.data = new S1MgmtApi.UsersSchemasApiTokenSchemaData();
          opts.body.data.apiToken = "";

          instance.webApiUsersApiTokenDetailsPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.UsersSchemasApiTokenDetailSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.UsersSchemasApiTokenDetailSchema200Data);
                  expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.expiresAt).to.be.a(Date);
              expect(data.data.expiresAt).to.be(2018-02-27T04:49:26.257525Z);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersAuthAppPost', function() {
        it('should call webApiUsersAuthAppPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersAuthAppPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasAuthCodeSchema();
          opts.body.data = new S1MgmtApi.UsersSchemasAuthCodeSchemaData();
          opts.body.data.rememberMe = true;
          opts.body.data.code = "";

          instance.webApiUsersAuthAppPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.UsersSchemasLoginOutputSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.UsersSchemasLoginOutputSchema200Data);
                  expect(data.data.token).to.be.a('string');
              expect(data.data.token).to.be("e88a49afa94235f1ae72418a40fe4eda08c99bcf51a50ba7cac53dabf0f3ddd0d24c690d03770a15");
              expect(data.data.csrf).to.be.a('string');
              expect(data.data.csrf).to.be("");
              expect(data.data.status).to.be.a('string');
              expect(data.data.status).to.be("verified");
              expect(data.data.twoFaMethod).to.be.a('string');
              expect(data.data.twoFaMethod).to.be("application");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersAuthElevatePost', function() {
        it('should call webApiUsersAuthElevatePost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersAuthElevatePost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasElevateSessionSchema();
          opts.body.data = new S1MgmtApi.UsersSchemasElevateSessionSchemaData();
          opts.body.data.code = "";

          instance.webApiUsersAuthElevatePost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.UsersSchemasElevateSessionResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.UsersSchemasElevateSessionResponseSchema200Data);
                  expect(data.data.duration).to.be.a('number');
              expect(data.data.duration).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersAuthEulaPost', function() {
        it('should call webApiUsersAuthEulaPost successfully', function(done) {
          // TODO: uncomment webApiUsersAuthEulaPost call and complete the assertions
          /*

          instance.webApiUsersAuthEulaPost(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersChangePasswordPost', function() {
        it('should call webApiUsersChangePasswordPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersChangePasswordPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasChangePasswordSchema();
          opts.body.data = new S1MgmtApi.UsersSchemasChangePasswordSchemaData();
          opts.body.data.confirmNewPassword = "";
          opts.body.data.id = "225494730938493804";
          opts.body.data.twoFaCode = "";
          opts.body.data.newPassword = "";
          opts.body.data.currentPassword = "";

          instance.webApiUsersChangePasswordPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersDelete2faPost', function() {
        it('should call webApiUsersDelete2faPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersDelete2faPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasDeleteTfaSchema();
          opts.body.data = new S1MgmtApi.UsersSchemasDeleteTfaSchemaData();
          opts.body.data.ids = ["1209914117545001844","1209914117545001856"];

          instance.webApiUsersDelete2faPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersDeleteUsersPost', function() {
        it('should call webApiUsersDeleteUsersPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersDeleteUsersPost call
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasBulkUsersActionSchema();
          opts.body.filter = new S1MgmtApi.UsersSchemasBulkUsersActionSchemaFilter();
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.emailVerified = false;
          opts.body.filter.canGenerateApiToken = false;
          opts.body.filter.lastActivationBetween = "1514978890136-1514978650130";
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.query = "";
          opts.body.filter.apiTokenExpiresAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.lastActivationLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.sources = ["mgmt"];
          opts.body.filter.primaryTwoFaMethod = "";
          opts.body.filter.lastLogin = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.lastActivationLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.hasValidApiToken = false;
          opts.body.filter.source = "mgmt";
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.dateJoined = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.roleIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.fullNameContains = [""];
          opts.body.filter.email = "admin@sentinelone.com";
          opts.body.filter.apiTokenExpiresAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.twoFaStatuses = [""];
          opts.body.filter.fullNameReadOnly = false;
          opts.body.filter.twoFaStatus = "";
          opts.body.filter.apiTokenExpiresAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.fullName = "";
          opts.body.filter.groupsReadOnly = false;
          opts.body.filter.apiTokenExpiresAtBetween = "1514978890136-1514978650130";
          opts.body.filter.createdAtBetween = "1514978890136-1514978650130";
          opts.body.filter.firstLogin = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.emailReadOnly = false;
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.lastActivationGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.apiTokenExpiresAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.emailContains = [""];
          opts.body.filter.lastActivationGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.twoFaEnabled = false;
          opts.body.data = ;

          instance.webApiUsersDeleteUsersPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersEnableAppPost', function() {
        it('should call webApiUsersEnableAppPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersEnableAppPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasEnableAppSchema();
          opts.body.data = new S1MgmtApi.UsersSchemasEnableAppSchemaData();
          opts.body.data.code = "";
          opts.body.data.id = "225494730938493804";

          instance.webApiUsersEnableAppPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersEnroll2faPost', function() {
        it('should call webApiUsersEnroll2faPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersEnroll2faPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasUserIdsSchema();
          opts.body.data = new S1MgmtApi.UsersSchemasDeleteTfaSchemaData();
          opts.body.data.ids = ["1209914117545001844","1209914117545001856"];

          instance.webApiUsersEnroll2faPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.UsersSchemasEnrollTfaResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.UsersSchemasEnrollTfaResponseSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);
              expect(data.data.expiration).to.be.a(Object);
              expect(data.data.expiration).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersGenerateApiTokenPost', function() {
        it('should call webApiUsersGenerateApiTokenPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersGenerateApiTokenPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasGenerateApiTokenSchema();
          opts.body.data = new S1MgmtApi.UsersSchemasGenerateApiTokenSchemaData();
          opts.body.data.forceLegacy = false;

          instance.webApiUsersGenerateApiTokenPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.UsersSchemasGetApiTokenSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.UsersSchemasGetApiTokenSchema200Data);
                  expect(data.data.token).to.be.a('string');
              expect(data.data.token).to.be("280079207634042955XDyEBWFHQ5q9iiIpmLrRM9IsiCCdLS7vcbGF9y4y");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersGenerateIframeTokenPost', function() {
        it('should call webApiUsersGenerateIframeTokenPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersGenerateIframeTokenPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasCreateIFrameUserSchema();
          opts.body.data = new S1MgmtApi.UsersSchemasCreateIFrameUserSchemaData();
          opts.body.data.accountId = "225494730938493804";
          opts.body.data.agentUuids = ["ff819e70af13be381993075eb0ce5f2f6de05b11","ff819e70af13be381993075eb0ce5f2f6de05c22"];
          opts.body.data.role = "Admins";
          opts.body.data.userName = "John doe";
          opts.body.data.roleName = "Admin";

          instance.webApiUsersGenerateIframeTokenPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.UsersSchemasGetCreateIFrameTokenSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.UsersSchemasGetCreateIFrameTokenSchema200Data);
                  expect(data.data.iframeToken).to.be.a('string');
              expect(data.data.iframeToken).to.be("280079207634042955XDyEBWFHQ5q9iiIpmLrRM9IsiCCdLS7vcbGF9y4y");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersGet', function() {
        it('should call webApiUsersGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "null";
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.emailVerified = true;
          opts.canGenerateApiToken = true;
          opts.lastActivationBetween = "lastActivationBetween_example";
          opts.query = "query_example";
          opts.ids = ["ids_example"];
          opts.apiTokenExpiresAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.countOnly = false;
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.limit = 10;
          opts.lastActivationLte = new Date("2013-10-20T19:20:30+01:00");
          opts.sources = ["sources_example"];
          opts.skip = 56;
          opts.lastLogin = new Date("2013-10-20T19:20:30+01:00");
          opts.primaryTwoFaMethod = "primaryTwoFaMethod_example";
          opts.lastActivationLt = new Date("2013-10-20T19:20:30+01:00");
          opts.skipCount = null;
          opts.hasValidApiToken = true;
          opts.sortOrder = "null";
          opts.source = "source_example";
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.dateJoined = new Date("2013-10-20T19:20:30+01:00");
          opts.fullNameContains = ["fullNameContains_example"];
          opts.roleIds = ["roleIds_example"];
          opts.email = "email_example";
          opts.apiTokenExpiresAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.twoFaStatuses = ["twoFaStatuses_example"];
          opts.fullNameReadOnly = true;
          opts.twoFaStatus = "twoFaStatus_example";
          opts.apiTokenExpiresAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.fullName = "fullName_example";
          opts.groupsReadOnly = true;
          opts.sortBy = "null";
          opts.apiTokenExpiresAtBetween = "apiTokenExpiresAtBetween_example";
          opts.createdAtBetween = "createdAtBetween_example";
          opts.firstLogin = new Date("2013-10-20T19:20:30+01:00");
          opts.emailReadOnly = true;
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.lastActivationGt = new Date("2013-10-20T19:20:30+01:00");
          opts.apiTokenExpiresAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.emailContains = ["emailContains_example"];
          opts.lastActivationGte = new Date("2013-10-20T19:20:30+01:00");
          opts.twoFaEnabled = true;

          instance.webApiUsersGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.UsersSchemasGetUserListSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.UsersSchemasGetUserListSchemaMany200Data);
                expect(data.emailVerified).to.be.a('boolean');
                expect(data.emailVerified).to.be(false);
                expect(data.canGenerateApiToken).to.be.a('boolean');
                expect(data.canGenerateApiToken).to.be(false);
                expect(data.apiToken).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataApiToken);
                      expect(data.apiToken.createdAt).to.be.a(Date);
                  expect(data.apiToken.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                  expect(data.apiToken.expiresAt).to.be.a(Date);
                  expect(data.apiToken.expiresAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.isSystem).to.be.a('boolean');
                expect(data.isSystem).to.be(false);
                {
                  let dataCtr = data.scopeRoles;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataScopeRoles);
                    expect(data.accountName).to.be.a('string');
                    expect(data.accountName).to.be("My Scope 1");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("My Scope 1");
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("225494730938493804");
                    expect(data.roleId).to.be.a('string');
                    expect(data.roleId).to.be("225494730938493804");
                    {
                      let dataCtr = data.roles;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.roleName).to.be.a('string');
                    expect(data.roleName).to.be("Admin");
    
                          }
                }
                expect(data.primaryTwoFaMethod).to.be.a('string');
                expect(data.primaryTwoFaMethod).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.lastLogin).to.be.a(Date);
                expect(data.lastLogin).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.twoFaEnabledReadOnly).to.be.a('boolean');
                expect(data.twoFaEnabledReadOnly).to.be(false);
                {
                  let dataCtr = data.siteRoles;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataSiteRoles);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("My Site 1");
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("225494730938493804");
                    expect(data.roleId).to.be.a('string');
                    expect(data.roleId).to.be("225494730938493804");
                    {
                      let dataCtr = data.roles;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.roleName).to.be.a('string');
                    expect(data.roleName).to.be("Admin");
    
                          }
                }
                expect(data.source).to.be.a('string');
                expect(data.source).to.be("");
                expect(data.dateJoined).to.be.a(Date);
                expect(data.dateJoined).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("admin@sentinelone.com");
                expect(data.allowRemoteShell).to.be.a('boolean');
                expect(data.allowRemoteShell).to.be(false);
                expect(data.fullNameReadOnly).to.be.a('boolean');
                expect(data.fullNameReadOnly).to.be(false);
                expect(data.twoFaStatus).to.be.a('string');
                expect(data.twoFaStatus).to.be("");
                expect(data.twoFaConfigured).to.be.a('boolean');
                expect(data.twoFaConfigured).to.be(false);
                expect(data.fullName).to.be.a('string');
                expect(data.fullName).to.be("");
                expect(data.groupsReadOnly).to.be.a('boolean');
                expect(data.groupsReadOnly).to.be(false);
                expect(data.agreedEula).to.be.a('boolean');
                expect(data.agreedEula).to.be(false);
                {
                  let dataCtr = data.tenantRoles;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
                expect(data.firstLogin).to.be.a(Date);
                expect(data.firstLogin).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.scope).to.be.a('string');
                expect(data.scope).to.be("tenant");
                expect(data.emailReadOnly).to.be.a('boolean');
                expect(data.emailReadOnly).to.be(false);
                expect(data.agreementUrl).to.be.a('string');
                expect(data.agreementUrl).to.be("");
                expect(data.lowestRole).to.be.a('string');
                expect(data.lowestRole).to.be("");
                expect(data.twoFaEnabled).to.be.a('boolean');
                expect(data.twoFaEnabled).to.be(false);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersLoginByApiTokenPost', function() {
        it('should call webApiUsersLoginByApiTokenPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersLoginByApiTokenPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasLoginByApiTokenSchema();
          opts.body.data = new S1MgmtApi.UsersSchemasLoginByApiTokenSchemaData();
          opts.body.data.reason = "Support Request";
          opts.body.data.apiToken = "";

          instance.webApiUsersLoginByApiTokenPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.UsersSchemasTokenSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.UsersSchemasTokenSchema200Data);
                  expect(data.data.realUser).to.be.a('string');
              expect(data.data.realUser).to.be("");
              expect(data.data.redirectTo).to.be.a('string');
              expect(data.data.redirectTo).to.be("");
              expect(data.data.redirectToParams).to.be.a('string');
              expect(data.data.redirectToParams).to.be("");
              expect(data.data.token).to.be.a('string');
              expect(data.data.token).to.be("bfd9070c1afa88516d3cdfd722e62fe433e42bad6bb14da27088140ad785585f8582adaccd56fb69");
              expect(data.data.removedSavedScope).to.be.a('string');
              expect(data.data.removedSavedScope).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersLoginByTokenGet', function() {
        it('should call webApiUsersLoginByTokenGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersLoginByTokenGet call
          /*
          var token = "token_example";
          var opts = {};
          opts.redirectTo = "redirectTo_example";
          opts.redirectToParams = "redirectToParams_example";
          opts.removedSavedScope = "removedSavedScope_example";

          instance.webApiUsersLoginByTokenGet(token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersLoginContinuePost', function() {
        it('should call webApiUsersLoginContinuePost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersLoginContinuePost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasLoginContinueSchema();
          opts.body.data = new S1MgmtApi.UsersSchemasLoginContinueSchemaData();
          opts.body.data.token = "";
          opts.body.data.dontShowAgain = false;
          opts.body.data.resetPassword = false;

          instance.webApiUsersLoginContinuePost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.UsersSchemasLoginContinueResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.UsersSchemasLoginContinueResponseSchema200Data);
                  expect(data.data.token).to.be.a('string');
              expect(data.data.token).to.be("");
              expect(data.data.csrf).to.be.a('string');
              expect(data.data.csrf).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersLoginForceResetPasswordOnLoginPost', function() {
        it('should call webApiUsersLoginForceResetPasswordOnLoginPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersLoginForceResetPasswordOnLoginPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasBulkUsersActionSchema();
          opts.body.filter = new S1MgmtApi.UsersSchemasBulkUsersActionSchemaFilter();
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.emailVerified = false;
          opts.body.filter.canGenerateApiToken = false;
          opts.body.filter.lastActivationBetween = "1514978890136-1514978650130";
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.query = "";
          opts.body.filter.apiTokenExpiresAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.lastActivationLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.sources = ["mgmt"];
          opts.body.filter.primaryTwoFaMethod = "";
          opts.body.filter.lastLogin = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.lastActivationLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.hasValidApiToken = false;
          opts.body.filter.source = "mgmt";
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.dateJoined = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.roleIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.fullNameContains = [""];
          opts.body.filter.email = "admin@sentinelone.com";
          opts.body.filter.apiTokenExpiresAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.twoFaStatuses = [""];
          opts.body.filter.fullNameReadOnly = false;
          opts.body.filter.twoFaStatus = "";
          opts.body.filter.apiTokenExpiresAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.fullName = "";
          opts.body.filter.groupsReadOnly = false;
          opts.body.filter.apiTokenExpiresAtBetween = "1514978890136-1514978650130";
          opts.body.filter.createdAtBetween = "1514978890136-1514978650130";
          opts.body.filter.firstLogin = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.emailReadOnly = false;
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.lastActivationGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.apiTokenExpiresAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.emailContains = [""];
          opts.body.filter.lastActivationGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.twoFaEnabled = false;
          opts.body.data = ;

          instance.webApiUsersLoginForceResetPasswordOnLoginPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersLoginPost', function() {
        it('should call webApiUsersLoginPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersLoginPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasLoginInputSchema();
          opts.body.username = "admin@sentinelone.com";
          opts.body.rememberMe = true;
          opts.body.password = "MySecretPass123!";

          instance.webApiUsersLoginPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.UsersSchemasLoginOutputSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.UsersSchemasLoginOutputSchema200Data);
                  expect(data.data.token).to.be.a('string');
              expect(data.data.token).to.be("e88a49afa94235f1ae72418a40fe4eda08c99bcf51a50ba7cac53dabf0f3ddd0d24c690d03770a15");
              expect(data.data.csrf).to.be.a('string');
              expect(data.data.csrf).to.be("");
              expect(data.data.status).to.be.a('string');
              expect(data.data.status).to.be("verified");
              expect(data.data.twoFaMethod).to.be.a('string');
              expect(data.data.twoFaMethod).to.be("application");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersLoginSendResetPasswordEmailPost', function() {
        it('should call webApiUsersLoginSendResetPasswordEmailPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersLoginSendResetPasswordEmailPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasBulkUsersActionSchema();
          opts.body.filter = new S1MgmtApi.UsersSchemasBulkUsersActionSchemaFilter();
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.emailVerified = false;
          opts.body.filter.canGenerateApiToken = false;
          opts.body.filter.lastActivationBetween = "1514978890136-1514978650130";
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.query = "";
          opts.body.filter.apiTokenExpiresAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.lastActivationLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.sources = ["mgmt"];
          opts.body.filter.primaryTwoFaMethod = "";
          opts.body.filter.lastLogin = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.lastActivationLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.hasValidApiToken = false;
          opts.body.filter.source = "mgmt";
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.dateJoined = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.roleIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.fullNameContains = [""];
          opts.body.filter.email = "admin@sentinelone.com";
          opts.body.filter.apiTokenExpiresAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.twoFaStatuses = [""];
          opts.body.filter.fullNameReadOnly = false;
          opts.body.filter.twoFaStatus = "";
          opts.body.filter.apiTokenExpiresAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.fullName = "";
          opts.body.filter.groupsReadOnly = false;
          opts.body.filter.apiTokenExpiresAtBetween = "1514978890136-1514978650130";
          opts.body.filter.createdAtBetween = "1514978890136-1514978650130";
          opts.body.filter.firstLogin = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.emailReadOnly = false;
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.lastActivationGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.apiTokenExpiresAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.emailContains = [""];
          opts.body.filter.lastActivationGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.twoFaEnabled = false;
          opts.body.data = ;

          instance.webApiUsersLoginSendResetPasswordEmailPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersLoginSetPasswordPost', function() {
        it('should call webApiUsersLoginSetPasswordPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersLoginSetPasswordPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasSetPasswordSchema();
          opts.body.data = new S1MgmtApi.UsersSchemasSetPasswordSchemaData();
          opts.body.data.token = "";
          opts.body.data.password = "A@!vk123jd";

          instance.webApiUsersLoginSetPasswordPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.UsersSchemasSetPasswordResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.UsersSchemasSetPasswordResponseSchema200Data);
                  expect(data.data.token).to.be.a('string');
              expect(data.data.token).to.be("e88a49afa94235f1ae72418a40fe4eda08c99bcf51a50ba7cac53dabf0f3ddd0d24c690d03770a15");
              expect(data.data.csrf).to.be.a('string');
              expect(data.data.csrf).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersLoginSsoSaml2Get', function() {
        it('should call webApiUsersLoginSsoSaml2Get successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersLoginSsoSaml2Get call
          /*
          var opts = {};
          opts.email = "email_example";
          opts.scopeId = "scopeId_example";

          instance.webApiUsersLoginSsoSaml2Get(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersLoginSsoSaml2scopeIdPost', function() {
        it('should call webApiUsersLoginSsoSaml2scopeIdPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersLoginSsoSaml2scopeIdPost call
          /*
          var scopeId = "scopeId_example";

          instance.webApiUsersLoginSsoSaml2scopeIdPost(scopeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersLogoutPost', function() {
        it('should call webApiUsersLogoutPost successfully', function(done) {
          // TODO: uncomment webApiUsersLogoutPost call
          /*

          instance.webApiUsersLogoutPost(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersOnboardingSendVerificationEmailPost', function() {
        it('should call webApiUsersOnboardingSendVerificationEmailPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersOnboardingSendVerificationEmailPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasBulkUsersActionSchema();
          opts.body.filter = new S1MgmtApi.UsersSchemasBulkUsersActionSchemaFilter();
          opts.body.filter.createdAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.emailVerified = false;
          opts.body.filter.canGenerateApiToken = false;
          opts.body.filter.lastActivationBetween = "1514978890136-1514978650130";
          opts.body.filter.ids = ["225494730938493804","225494730938493915"];
          opts.body.filter.query = "";
          opts.body.filter.apiTokenExpiresAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.createdAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.lastActivationLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.sources = ["mgmt"];
          opts.body.filter.primaryTwoFaMethod = "";
          opts.body.filter.lastLogin = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.lastActivationLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.hasValidApiToken = false;
          opts.body.filter.source = "mgmt";
          opts.body.filter.createdAtLte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.dateJoined = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.roleIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.fullNameContains = [""];
          opts.body.filter.email = "admin@sentinelone.com";
          opts.body.filter.apiTokenExpiresAtGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.twoFaStatuses = [""];
          opts.body.filter.fullNameReadOnly = false;
          opts.body.filter.twoFaStatus = "";
          opts.body.filter.apiTokenExpiresAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.fullName = "";
          opts.body.filter.groupsReadOnly = false;
          opts.body.filter.apiTokenExpiresAtBetween = "1514978890136-1514978650130";
          opts.body.filter.createdAtBetween = "1514978890136-1514978650130";
          opts.body.filter.firstLogin = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.emailReadOnly = false;
          opts.body.filter.createdAtGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.lastActivationGt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.apiTokenExpiresAtLt = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.emailContains = [""];
          opts.body.filter.lastActivationGte = 2018-02-27T04:49:26.257525Z;
          opts.body.filter.twoFaEnabled = false;
          opts.body.data = ;

          instance.webApiUsersOnboardingSendVerificationEmailPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersOnboardingValidateTokenGet', function() {
        it('should call webApiUsersOnboardingValidateTokenGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersOnboardingValidateTokenGet call and complete the assertions
          /*
          var token = "token_example";
          var opts = {};
          opts.resetPasswordFlow = false;

          instance.webApiUsersOnboardingValidateTokenGet(token, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersOnboardingVerifyPost', function() {
        it('should call webApiUsersOnboardingVerifyPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersOnboardingVerifyPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasOnboardingVerificationSchema();
          opts.body.data = new S1MgmtApi.UsersSchemasOnboardingVerificationSchemaData();
          opts.body.data.token = "";
          opts.body.data.password = "A@!vk123jd";
          opts.body.data.resetPasswordFlow = false;

          instance.webApiUsersOnboardingVerifyPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersPost', function() {
        it('should call webApiUsersPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasCreateUserSchema();
          opts.body.data = new S1MgmtApi.UsersSchemasCreateUserSchemaData();
          opts.body.data.allowRemoteShell = false;
          opts.body.data.scopeRoles = [{"id":"225494730938493804","role_id":"225494730938493804"}];
          opts.body.data.scopeRoles[0].roleId = "225494730938493804";
          opts.body.data.scopeRoles[0].roles = ["Admin"];
          opts.body.data.scopeRoles[0].roleName = "Admin";
          opts.body.data.scopeRoles[0].id = "225494730938493804";
          opts.body.data.siteRoles = [{"id":"225494730938493804","role_name":"Admin"}];
          opts.body.data.siteRoles[0].name = "My Site 1";
          opts.body.data.siteRoles[0].id = "225494730938493804";
          opts.body.data.siteRoles[0].roleId = "225494730938493804";
          opts.body.data.siteRoles[0].roles = ["Admin"];
          opts.body.data.siteRoles[0].roleName = "Admin";
          opts.body.data.fullName = "John Doe";
          opts.body.data.password = "A@!vk123jd";
          opts.body.data.tenantRoles = ["Viewer"];
          opts.body.data.twoFaEnabled = false;
          opts.body.data.email = "admin@sentinelone.com";
          opts.body.data.scope = "tenant";

          instance.webApiUsersPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.UsersSchemasUserSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.UsersSchemasUserSchema200Data);
                  expect(data.data.emailVerified).to.be.a('boolean');
              expect(data.data.emailVerified).to.be(false);
              expect(data.data.canGenerateApiToken).to.be.a('boolean');
              expect(data.data.canGenerateApiToken).to.be(false);
              expect(data.data.apiToken).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataApiToken);
                    expect(data.data.apiToken.createdAt).to.be.a(Date);
                expect(data.data.apiToken.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.apiToken.expiresAt).to.be.a(Date);
                expect(data.data.apiToken.expiresAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.isSystem).to.be.a('boolean');
              expect(data.data.isSystem).to.be(false);
              expect(data.data.elevatedSessionDurationMinutes).to.be.a('number');
              expect(data.data.elevatedSessionDurationMinutes).to.be(0);
              {
                let dataCtr = data.data.scopeRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataScopeRoles);
                  expect(data.accountName).to.be.a('string');
                  expect(data.accountName).to.be("My Scope 1");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("My Scope 1");
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("225494730938493804");
                  expect(data.roleId).to.be.a('string');
                  expect(data.roleId).to.be("225494730938493804");
                  {
                    let dataCtr = data.roles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.roleName).to.be.a('string');
                  expect(data.roleName).to.be("Admin");
  
                        }
              }
              expect(data.data.primaryTwoFaMethod).to.be.a('string');
              expect(data.data.primaryTwoFaMethod).to.be("");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.lastLogin).to.be.a(Date);
              expect(data.data.lastLogin).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.twoFaEnabledReadOnly).to.be.a('boolean');
              expect(data.data.twoFaEnabledReadOnly).to.be(false);
              {
                let dataCtr = data.data.siteRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataSiteRoles);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("My Site 1");
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("225494730938493804");
                  expect(data.roleId).to.be.a('string');
                  expect(data.roleId).to.be("225494730938493804");
                  {
                    let dataCtr = data.roles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.roleName).to.be.a('string');
                  expect(data.roleName).to.be("Admin");
  
                        }
              }
              expect(data.data.source).to.be.a('string');
              expect(data.data.source).to.be("");
              expect(data.data.dateJoined).to.be.a(Date);
              expect(data.data.dateJoined).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.email).to.be.a('string');
              expect(data.data.email).to.be("admin@sentinelone.com");
              expect(data.data.allowRemoteShell).to.be.a('boolean');
              expect(data.data.allowRemoteShell).to.be(false);
              expect(data.data.fullNameReadOnly).to.be.a('boolean');
              expect(data.data.fullNameReadOnly).to.be(false);
              expect(data.data.twoFaStatus).to.be.a('string');
              expect(data.data.twoFaStatus).to.be("configured");
              expect(data.data.twoFaConfigured).to.be.a('boolean');
              expect(data.data.twoFaConfigured).to.be(false);
              expect(data.data.fullName).to.be.a('string');
              expect(data.data.fullName).to.be("");
              expect(data.data.isExternalLoginUser).to.be.a('boolean');
              expect(data.data.isExternalLoginUser).to.be(false);
              expect(data.data.groupsReadOnly).to.be.a('boolean');
              expect(data.data.groupsReadOnly).to.be(false);
              expect(data.data.agreedEula).to.be.a('boolean');
              expect(data.data.agreedEula).to.be(false);
              {
                let dataCtr = data.data.tenantRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }
              expect(data.data.firstLogin).to.be.a(Date);
              expect(data.data.firstLogin).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.scope).to.be.a('string');
              expect(data.data.scope).to.be("tenant");
              expect(data.data.emailReadOnly).to.be.a('boolean');
              expect(data.data.emailReadOnly).to.be(false);
              expect(data.data.agreementUrl).to.be.a('string');
              expect(data.data.agreementUrl).to.be("");
              expect(data.data.lowestRole).to.be.a('string');
              expect(data.data.lowestRole).to.be("");
              expect(data.data.twoFaEnabled).to.be.a('boolean');
              expect(data.data.twoFaEnabled).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersRequestAppPost', function() {
        it('should call webApiUsersRequestAppPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersRequestAppPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasRequestAppSchema();
          opts.body.currentPassword = "MySecretPass123!";

          instance.webApiUsersRequestAppPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.UsersSchemasRequestAppResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.UsersSchemasRequestAppResponseSchema200Data);
                  expect(data.data.qrCode).to.be.a('string');
              expect(data.data.qrCode).to.be("");
              expect(data.data.code).to.be.a('string');
              expect(data.data.code).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersReset2faPost', function() {
        it('should call webApiUsersReset2faPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersReset2faPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasResetTfaSchema();
          opts.body.data = new S1MgmtApi.UsersSchemasResetTfaSchemaData();
          opts.body.data.ids = ["1209914117545001844","1209914117545001856"];
          opts.body.data.enroll = false;

          instance.webApiUsersReset2faPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersRevokeApiTokenPost', function() {
        it('should call webApiUsersRevokeApiTokenPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersRevokeApiTokenPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasUserIdSchema();
          opts.body.data = new S1MgmtApi.UsersSchemasUserIdSchemaData();
          opts.body.data.twoFaCode = "";
          opts.body.data.currentPassword = "";
          opts.body.data.id = "225494730938493804";

          instance.webApiUsersRevokeApiTokenPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersRsAuthCheckGet', function() {
        it('should call webApiUsersRsAuthCheckGet successfully', function(done) {
          // TODO: uncomment webApiUsersRsAuthCheckGet call and complete the assertions
          /*

          instance.webApiUsersRsAuthCheckGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersSsoSaml2ReAuthGet', function() {
        it('should call webApiUsersSsoSaml2ReAuthGet successfully', function(done) {
          // TODO: uncomment webApiUsersSsoSaml2ReAuthGet call
          /*

          instance.webApiUsersSsoSaml2ReAuthGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersTenantAdminAuthCheckGet', function() {
        it('should call webApiUsersTenantAdminAuthCheckGet successfully', function(done) {
          // TODO: uncomment webApiUsersTenantAdminAuthCheckGet call and complete the assertions
          /*

          instance.webApiUsersTenantAdminAuthCheckGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersViewerAuthCheckGet', function() {
        it('should call webApiUsersViewerAuthCheckGet successfully', function(done) {
          // TODO: uncomment webApiUsersViewerAuthCheckGet call and complete the assertions
          /*

          instance.webApiUsersViewerAuthCheckGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersuserIdApiTokenDetailsGet', function() {
        it('should call webApiUsersuserIdApiTokenDetailsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersuserIdApiTokenDetailsGet call and complete the assertions
          /*
          var userId = "userId_example";

          instance.webApiUsersuserIdApiTokenDetailsGet(userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.UsersSchemasApiTokenDetailSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.UsersSchemasApiTokenDetailSchema200Data);
                  expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.expiresAt).to.be.a(Date);
              expect(data.data.expiresAt).to.be(2018-02-27T04:49:26.257525Z);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersuserIdDelete', function() {
        it('should call webApiUsersuserIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersuserIdDelete call and complete the assertions
          /*
          var userId = "userId_example";

          instance.webApiUsersuserIdDelete(userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersuserIdGet', function() {
        it('should call webApiUsersuserIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersuserIdGet call and complete the assertions
          /*
          var userId = "userId_example";

          instance.webApiUsersuserIdGet(userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.UsersSchemasSingleUserSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.UsersSchemasSingleUserSchema200Data);
                  expect(data.data.emailVerified).to.be.a('boolean');
              expect(data.data.emailVerified).to.be(false);
              expect(data.data.canGenerateApiToken).to.be.a('boolean');
              expect(data.data.canGenerateApiToken).to.be(false);
              expect(data.data.apiToken).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataApiToken);
                    expect(data.data.apiToken.createdAt).to.be.a(Date);
                expect(data.data.apiToken.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.apiToken.expiresAt).to.be.a(Date);
                expect(data.data.apiToken.expiresAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.isSystem).to.be.a('boolean');
              expect(data.data.isSystem).to.be(false);
              expect(data.data.elevatedSessionDurationMinutes).to.be.a('number');
              expect(data.data.elevatedSessionDurationMinutes).to.be(0);
              {
                let dataCtr = data.data.scopeRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataScopeRoles);
                  expect(data.accountName).to.be.a('string');
                  expect(data.accountName).to.be("My Scope 1");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("My Scope 1");
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("225494730938493804");
                  expect(data.roleId).to.be.a('string');
                  expect(data.roleId).to.be("225494730938493804");
                  {
                    let dataCtr = data.roles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.roleName).to.be.a('string');
                  expect(data.roleName).to.be("Admin");
  
                        }
              }
              expect(data.data.primaryTwoFaMethod).to.be.a('string');
              expect(data.data.primaryTwoFaMethod).to.be("");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.lastLogin).to.be.a(Date);
              expect(data.data.lastLogin).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.twoFaEnabledReadOnly).to.be.a('boolean');
              expect(data.data.twoFaEnabledReadOnly).to.be(false);
              {
                let dataCtr = data.data.siteRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataSiteRoles);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("My Site 1");
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("225494730938493804");
                  expect(data.roleId).to.be.a('string');
                  expect(data.roleId).to.be("225494730938493804");
                  {
                    let dataCtr = data.roles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.roleName).to.be.a('string');
                  expect(data.roleName).to.be("Admin");
  
                        }
              }
              expect(data.data.source).to.be.a('string');
              expect(data.data.source).to.be("");
              {
                let dataCtr = data.data.pages;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.RbacSchemasRolePermissions200DataPages);
                  expect(data.identifier).to.be.a('string');
                  expect(data.identifier).to.be("");
                  {
                    let dataCtr = data.permissions;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(S1MgmtApi.RbacSchemasRolePermissions200DataPermissions);
                      expect(data.identifier).to.be.a('string');
                      expect(data.identifier).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.additionalDescription).to.be.a('string');
                      expect(data.additionalDescription).to.be("");
                      expect(data.disabledReasonCode).to.be.a('string');
                      expect(data.disabledReasonCode).to.be("");
                      expect(data.disabledReason).to.be.a('string');
                      expect(data.disabledReason).to.be("");
                      {
                        let dataCtr = data.dependsOn;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("225494730938493804");
                        }
                      }
                      expect(data.groupName).to.be.a('string');
                      expect(data.groupName).to.be("");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("");
                      expect(data.value).to.be.a('boolean');
                      expect(data.value).to.be(false);
                      expect(data.title).to.be.a('string');
                      expect(data.title).to.be("");
      
                            }
                  }
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
  
                        }
              }
              expect(data.data.dateJoined).to.be.a(Date);
              expect(data.data.dateJoined).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.email).to.be.a('string');
              expect(data.data.email).to.be("admin@sentinelone.com");
              expect(data.data.allowRemoteShell).to.be.a('boolean');
              expect(data.data.allowRemoteShell).to.be(false);
              expect(data.data.fullNameReadOnly).to.be.a('boolean');
              expect(data.data.fullNameReadOnly).to.be(false);
              expect(data.data.account).to.be.a(S1MgmtApi.UsersSchemasSingleUserSchema200DataAccount);
                    expect(data.data.account.name).to.be.a('string');
                expect(data.data.account.name).to.be("");
                expect(data.data.account.id).to.be.a('string');
                expect(data.data.account.id).to.be("225494730938493804");
              expect(data.data.twoFaStatus).to.be.a('string');
              expect(data.data.twoFaStatus).to.be("configured");
              expect(data.data.twoFaConfigured).to.be.a('boolean');
              expect(data.data.twoFaConfigured).to.be(false);
              expect(data.data.fullName).to.be.a('string');
              expect(data.data.fullName).to.be("");
              expect(data.data.isExternalLoginUser).to.be.a('boolean');
              expect(data.data.isExternalLoginUser).to.be(false);
              expect(data.data.groupsReadOnly).to.be.a('boolean');
              expect(data.data.groupsReadOnly).to.be(false);
              expect(data.data.agreedEula).to.be.a('boolean');
              expect(data.data.agreedEula).to.be(false);
              {
                let dataCtr = data.data.tenantRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }
              expect(data.data.firstLogin).to.be.a(Date);
              expect(data.data.firstLogin).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.scope).to.be.a('string');
              expect(data.data.scope).to.be("tenant");
              expect(data.data.emailReadOnly).to.be.a('boolean');
              expect(data.data.emailReadOnly).to.be(false);
              expect(data.data.agreementUrl).to.be.a('string');
              expect(data.data.agreementUrl).to.be("");
              expect(data.data.lowestRole).to.be.a('string');
              expect(data.data.lowestRole).to.be("");
              expect(data.data.twoFaEnabled).to.be.a('boolean');
              expect(data.data.twoFaEnabled).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUsersuserIdPut', function() {
        it('should call webApiUsersuserIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUsersuserIdPut call and complete the assertions
          /*
          var userId = "userId_example";
          var opts = {};
          opts.body = new S1MgmtApi.UsersSchemasUpdateUserSchema();
          opts.body.data = new S1MgmtApi.UsersSchemasUpdateUserSchemaData();
          opts.body.data.allowRemoteShell = false;
          opts.body.data.scopeRoles = [{"id":"225494730938493804","role_id":"225494730938493804"}];
          opts.body.data.scopeRoles[0].roleId = "225494730938493804";
          opts.body.data.scopeRoles[0].roles = ["Admin"];
          opts.body.data.scopeRoles[0].roleName = "Admin";
          opts.body.data.scopeRoles[0].id = "225494730938493804";
          opts.body.data.id = "225494730938493804";
          opts.body.data.canGenerateApiToken = false;
          opts.body.data.siteRoles = [{"id":"225494730938493804","role_name":"Admin"}];
          opts.body.data.siteRoles[0].name = "My Site 1";
          opts.body.data.siteRoles[0].id = "225494730938493804";
          opts.body.data.siteRoles[0].roleId = "225494730938493804";
          opts.body.data.siteRoles[0].roles = ["Admin"];
          opts.body.data.siteRoles[0].roleName = "Admin";
          opts.body.data.twoFaCode = "";
          opts.body.data.fullName = "John Doe";
          opts.body.data.password = "A@!bche3sds";
          opts.body.data.tenantRoles = ["Viewer"];
          opts.body.data.twoFaEnabled = false;
          opts.body.data.currentPassword = "A@!bche3sds";
          opts.body.data.email = "admin@sentinelone.com";
          opts.body.data.scope = "tenant";

          instance.webApiUsersuserIdPut(userId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.UsersSchemasUserSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.UsersSchemasUserSchema200Data);
                  expect(data.data.emailVerified).to.be.a('boolean');
              expect(data.data.emailVerified).to.be(false);
              expect(data.data.canGenerateApiToken).to.be.a('boolean');
              expect(data.data.canGenerateApiToken).to.be(false);
              expect(data.data.apiToken).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataApiToken);
                    expect(data.data.apiToken.createdAt).to.be.a(Date);
                expect(data.data.apiToken.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.data.apiToken.expiresAt).to.be.a(Date);
                expect(data.data.apiToken.expiresAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.isSystem).to.be.a('boolean');
              expect(data.data.isSystem).to.be(false);
              expect(data.data.elevatedSessionDurationMinutes).to.be.a('number');
              expect(data.data.elevatedSessionDurationMinutes).to.be(0);
              {
                let dataCtr = data.data.scopeRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataScopeRoles);
                  expect(data.accountName).to.be.a('string');
                  expect(data.accountName).to.be("My Scope 1");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("My Scope 1");
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("225494730938493804");
                  expect(data.roleId).to.be.a('string');
                  expect(data.roleId).to.be("225494730938493804");
                  {
                    let dataCtr = data.roles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.roleName).to.be.a('string');
                  expect(data.roleName).to.be("Admin");
  
                        }
              }
              expect(data.data.primaryTwoFaMethod).to.be.a('string');
              expect(data.data.primaryTwoFaMethod).to.be("");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.lastLogin).to.be.a(Date);
              expect(data.data.lastLogin).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.twoFaEnabledReadOnly).to.be.a('boolean');
              expect(data.data.twoFaEnabledReadOnly).to.be(false);
              {
                let dataCtr = data.data.siteRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.UsersSchemasUserSchema200DataSiteRoles);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("My Site 1");
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("225494730938493804");
                  expect(data.roleId).to.be.a('string');
                  expect(data.roleId).to.be("225494730938493804");
                  {
                    let dataCtr = data.roles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.roleName).to.be.a('string');
                  expect(data.roleName).to.be("Admin");
  
                        }
              }
              expect(data.data.source).to.be.a('string');
              expect(data.data.source).to.be("");
              expect(data.data.dateJoined).to.be.a(Date);
              expect(data.data.dateJoined).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.email).to.be.a('string');
              expect(data.data.email).to.be("admin@sentinelone.com");
              expect(data.data.allowRemoteShell).to.be.a('boolean');
              expect(data.data.allowRemoteShell).to.be(false);
              expect(data.data.fullNameReadOnly).to.be.a('boolean');
              expect(data.data.fullNameReadOnly).to.be(false);
              expect(data.data.twoFaStatus).to.be.a('string');
              expect(data.data.twoFaStatus).to.be("configured");
              expect(data.data.twoFaConfigured).to.be.a('boolean');
              expect(data.data.twoFaConfigured).to.be(false);
              expect(data.data.fullName).to.be.a('string');
              expect(data.data.fullName).to.be("");
              expect(data.data.isExternalLoginUser).to.be.a('boolean');
              expect(data.data.isExternalLoginUser).to.be(false);
              expect(data.data.groupsReadOnly).to.be.a('boolean');
              expect(data.data.groupsReadOnly).to.be(false);
              expect(data.data.agreedEula).to.be.a('boolean');
              expect(data.data.agreedEula).to.be(false);
              {
                let dataCtr = data.data.tenantRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }
              expect(data.data.firstLogin).to.be.a(Date);
              expect(data.data.firstLogin).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.scope).to.be.a('string');
              expect(data.data.scope).to.be("tenant");
              expect(data.data.emailReadOnly).to.be.a('boolean');
              expect(data.data.emailReadOnly).to.be(false);
              expect(data.data.agreementUrl).to.be.a('string');
              expect(data.data.agreementUrl).to.be("");
              expect(data.data.lowestRole).to.be.a('string');
              expect(data.data.lowestRole).to.be("");
              expect(data.data.twoFaEnabled).to.be.a('boolean');
              expect(data.data.twoFaEnabled).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
