/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.DeepVisibilityApi();
  });

  describe('(package)', function() {
    describe('DeepVisibilityApi', function() {
      describe('webApiDvCancelQueryPost', function() {
        it('should call webApiDvCancelQueryPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiDvCancelQueryPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryIdRequestSchema();
          opts.body.queryId = "q1xx2xx3";

          instance.webApiDvCancelQueryPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilitySuccessSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilitySuccessSchema200Data);
                  expect(data.data.success).to.be.a('string');
              expect(data.data.success).to.be("true");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiDvEventsGet', function() {
        it('should call webApiDvEventsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiDvEventsGet call and complete the assertions
          /*
          var queryId = "queryId_example";
          var opts = {};
          opts.cursor = "null";
          opts.skip = 56;
          opts.subQuery = "subQuery_example";
          opts.sortOrder = "null";
          opts.sortBy = "sortBy_example";
          opts.limit = 10;

          instance.webApiDvEventsGet(queryId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityEventEntitySchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityEventEntitySchemaMany200Data);
                expect(data.indicatorCategory).to.be.a('string');
                expect(data.indicatorCategory).to.be("");
                expect(data.srcProcDownloadToken).to.be.a('string');
                expect(data.srcProcDownloadToken).to.be("");
                expect(data.parentProcessStartTime).to.be.a('string');
                expect(data.parentProcessStartTime).to.be("");
                expect(data.objectType).to.be.a('string');
                expect(data.objectType).to.be("");
                expect(data.parentProcessName).to.be.a('string');
                expect(data.parentProcessName).to.be("");
                expect(data.dnsResponse).to.be.a('string');
                expect(data.dnsResponse).to.be("");
                expect(data.signedStatus).to.be.a('string');
                expect(data.signedStatus).to.be("");
                expect(data.tid).to.be.a('string');
                expect(data.tid).to.be("");
                expect(data.processSubSystem).to.be.a('string');
                expect(data.processSubSystem).to.be("");
                expect(data.processGroupId).to.be.a('string');
                expect(data.processGroupId).to.be("");
                expect(data.agentIsActive).to.be.a('boolean');
                expect(data.agentIsActive).to.be(false);
                expect(data.registryPath).to.be.a('string');
                expect(data.registryPath).to.be("");
                expect(data.indicatorMetadata).to.be.a('string');
                expect(data.indicatorMetadata).to.be("");
                expect(data.processImagePath).to.be.a('string');
                expect(data.processImagePath).to.be("");
                expect(data.dnsRequest).to.be.a('string');
                expect(data.dnsRequest).to.be("");
                expect(data.networkSource).to.be.a('string');
                expect(data.networkSource).to.be("");
                expect(data.taskName).to.be.a('string');
                expect(data.taskName).to.be("");
                expect(data.fileSha1).to.be.a('string');
                expect(data.fileSha1).to.be("");
                expect(data.oldFileName).to.be.a('string');
                expect(data.oldFileName).to.be("");
                expect(data.agentVersion).to.be.a('string');
                expect(data.agentVersion).to.be("");
                expect(data.processIsRedirectedCommandProcessor).to.be.a('string');
                expect(data.processIsRedirectedCommandProcessor).to.be("");
                expect(data.oldFileSha1).to.be.a('string');
                expect(data.oldFileSha1).to.be("");
                expect(data.verifiedStatus).to.be.a('string');
                expect(data.verifiedStatus).to.be("");
                expect(data.agentInfected).to.be.a('boolean');
                expect(data.agentInfected).to.be(false);
                expect(data.loginsUserName).to.be.a('string');
                expect(data.loginsUserName).to.be("");
                expect(data.fileSha256).to.be.a('string');
                expect(data.fileSha256).to.be("");
                expect(data.processUserName).to.be.a('string');
                expect(data.processUserName).to.be("");
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.processRoot).to.be.a('string');
                expect(data.processRoot).to.be("");
                expect(data.isAgentVersionFullySupportedForPgMessage).to.be.a('string');
                expect(data.isAgentVersionFullySupportedForPgMessage).to.be("");
                expect(data.md5).to.be.a('string');
                expect(data.md5).to.be("");
                expect(data.registryId).to.be.a('string');
                expect(data.registryId).to.be("");
                expect(data.fileSize).to.be.a('string');
                expect(data.fileSize).to.be("");
                expect(data.agentOs).to.be.a('string');
                expect(data.agentOs).to.be("windows");
                expect(data.dstIp).to.be.a('string');
                expect(data.dstIp).to.be("");
                expect(data.agentIsDecommissioned).to.be.a('boolean');
                expect(data.agentIsDecommissioned).to.be(false);
                expect(data.sha256).to.be.a('string');
                expect(data.sha256).to.be("");
                expect(data.processIsWow64).to.be.a('string');
                expect(data.processIsWow64).to.be("");
                expect(data.processDisplayName).to.be.a('string');
                expect(data.processDisplayName).to.be("");
                expect(data.networkUrl).to.be.a('string');
                expect(data.networkUrl).to.be("");
                expect(data.processCmd).to.be.a('string');
                expect(data.processCmd).to.be("");
                expect(data.siteName).to.be.a('string');
                expect(data.siteName).to.be("");
                expect(data.forensicUrl).to.be.a('string');
                expect(data.forensicUrl).to.be("");
                expect(data.loginsBaseType).to.be.a('string');
                expect(data.loginsBaseType).to.be("");
                expect(data.processIntegrityLevel).to.be.a('string');
                expect(data.processIntegrityLevel).to.be("");
                expect(data.direction).to.be.a('string');
                expect(data.direction).to.be("");
                expect(data.processName).to.be.a('string');
                expect(data.processName).to.be("");
                expect(data.processSessionId).to.be.a('string');
                expect(data.processSessionId).to.be("");
                expect(data.agentUuid).to.be.a('string');
                expect(data.agentUuid).to.be("");
                expect(data.srcPort).to.be.a('number');
                expect(data.srcPort).to.be(0);
                expect(data.signatureSignedInvalidReason).to.be.a('string');
                expect(data.signatureSignedInvalidReason).to.be("");
                expect(data.taskPath).to.be.a('string');
                expect(data.taskPath).to.be("");
                expect(data.oldFileMd5).to.be.a('string');
                expect(data.oldFileMd5).to.be("");
                expect(data.indicatorName).to.be.a('string');
                expect(data.indicatorName).to.be("");
                expect(data.dstPort).to.be.a('number');
                expect(data.dstPort).to.be(0);
                expect(data.eventType).to.be.a('string');
                expect(data.eventType).to.be("");
                expect(data.rpid).to.be.a('string');
                expect(data.rpid).to.be("");
                expect(data.threatStatus).to.be.a('string');
                expect(data.threatStatus).to.be("");
                expect(data.isAgentVersionFullySupportedForPg).to.be.a('boolean');
                expect(data.isAgentVersionFullySupportedForPg).to.be(false);
                expect(data.agentId).to.be.a('string');
                expect(data.agentId).to.be("");
                expect(data.processUniqueKey).to.be.a('string');
                expect(data.processUniqueKey).to.be("");
                expect(data.processStartTime).to.be.a('string');
                expect(data.processStartTime).to.be("");
                expect(data.parentProcessGroupId).to.be.a('string');
                expect(data.parentProcessGroupId).to.be("");
                expect(data.srcIp).to.be.a('string');
                expect(data.srcIp).to.be("");
                expect(data.relatedToThreat).to.be.a('string');
                expect(data.relatedToThreat).to.be("");
                expect(data.networkMethod).to.be.a('string');
                expect(data.networkMethod).to.be("");
                expect(data.fileMd5).to.be.a('string');
                expect(data.fileMd5).to.be("");
                expect(data.connectionStatus).to.be.a('string');
                expect(data.connectionStatus).to.be("");
                expect(data.agentName).to.be.a('string');
                expect(data.agentName).to.be("");
                expect(data.fileType).to.be.a('string');
                expect(data.fileType).to.be("");
                expect(data.agentDomain).to.be.a('string');
                expect(data.agentDomain).to.be("");
                expect(data.parentProcessIsMalicious).to.be.a('boolean');
                expect(data.parentProcessIsMalicious).to.be(false);
                expect(data.agentMachineType).to.be.a('string');
                expect(data.agentMachineType).to.be("");
                expect(data.agentNetworkStatus).to.be.a('string');
                expect(data.agentNetworkStatus).to.be("");
                expect(data.fileFullName).to.be.a('string');
                expect(data.fileFullName).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.agentGroupId).to.be.a('string');
                expect(data.agentGroupId).to.be("");
                expect(data.oldFileSha256).to.be.a('string');
                expect(data.oldFileSha256).to.be("");
                expect(data.sha1).to.be.a('string');
                expect(data.sha1).to.be("");
                expect(data.agentIp).to.be.a('string');
                expect(data.agentIp).to.be("");
                expect(data.publisher).to.be.a('string');
                expect(data.publisher).to.be("");
                expect(data.parentProcessUniqueKey).to.be.a('string');
                expect(data.parentProcessUniqueKey).to.be("");
                expect(data.processImageSha1Hash).to.be.a('string');
                expect(data.processImageSha1Hash).to.be("");
                expect(data.parentPid).to.be.a('string');
                expect(data.parentPid).to.be("");
                expect(data.pid).to.be.a('string');
                expect(data.pid).to.be("");
                expect(data.trueContext).to.be.a('string');
                expect(data.trueContext).to.be("");
                expect(data.fileId).to.be.a('string');
                expect(data.fileId).to.be("");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.processIsMalicious).to.be.a('boolean');
                expect(data.processIsMalicious).to.be(false);
                expect(data.indicatorDescription).to.be.a('string');
                expect(data.indicatorDescription).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiDvEventsPqPingGet', function() {
        it('should call webApiDvEventsPqPingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiDvEventsPqPingGet call and complete the assertions
          /*
          var opts = {};
          opts.queryId = "queryId_example";

          instance.webApiDvEventsPqPingGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityPowerQueriesResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityPowerQueriesResponseSchema200Data);
                  expect(data.data.queryId).to.be.a('string');
              expect(data.data.queryId).to.be("q1xx2xx3");
              expect(data.data.externalId).to.be.a('string');
              expect(data.data.externalId).to.be("q1xx2xx3");
              {
                let dataCtr = data.data.recommendations;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.data.columns;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }
              expect(data.data.status).to.be.a('string');
              expect(data.data.status).to.be("PROCESS_RUNNING");
              expect(data.data.progress).to.be.a('number');
              expect(data.data.progress).to.be(50);
              {
                let dataCtr = data.data.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Array);
                  expect(data).to.be([]);
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiDvEventsPqPost', function() {
        it('should call webApiDvEventsPqPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiDvEventsPqPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityPQRequestSchema();
          opts.body.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.limit = 10;
          opts.body.query = "event.time = * | columns eventTime = event.time, agentUuid = agent.uuid, siteId = site.id";
          opts.body.fromDate = 2018-02-27T04:49:26.257525Z;
          opts.body.toDate = 2018-02-27T04:49:26.257525Z;

          instance.webApiDvEventsPqPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityPowerQueriesResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityPowerQueriesResponseSchema200Data);
                  expect(data.data.queryId).to.be.a('string');
              expect(data.data.queryId).to.be("q1xx2xx3");
              expect(data.data.externalId).to.be.a('string');
              expect(data.data.externalId).to.be("q1xx2xx3");
              {
                let dataCtr = data.data.recommendations;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.data.columns;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }
              expect(data.data.status).to.be.a('string');
              expect(data.data.status).to.be("PROCESS_RUNNING");
              expect(data.data.progress).to.be.a('number');
              expect(data.data.progress).to.be(50);
              {
                let dataCtr = data.data.data;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Array);
                  expect(data).to.be([]);
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiDvEventseventTypeGet', function() {
        it('should call webApiDvEventseventTypeGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiDvEventseventTypeGet call and complete the assertions
          /*
          var eventType = "eventType_example";
          var queryId = "queryId_example";
          var opts = {};
          opts.cursor = "null";
          opts.skip = 56;
          opts.subQuery = "subQuery_example";
          opts.sortOrder = "null";
          opts.sortBy = "sortBy_example";
          opts.limit = 10;

          instance.webApiDvEventseventTypeGet(eventType, queryId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityEventEntitySchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityEventEntitySchemaMany200Data);
                expect(data.indicatorCategory).to.be.a('string');
                expect(data.indicatorCategory).to.be("");
                expect(data.srcProcDownloadToken).to.be.a('string');
                expect(data.srcProcDownloadToken).to.be("");
                expect(data.parentProcessStartTime).to.be.a('string');
                expect(data.parentProcessStartTime).to.be("");
                expect(data.objectType).to.be.a('string');
                expect(data.objectType).to.be("");
                expect(data.parentProcessName).to.be.a('string');
                expect(data.parentProcessName).to.be("");
                expect(data.dnsResponse).to.be.a('string');
                expect(data.dnsResponse).to.be("");
                expect(data.signedStatus).to.be.a('string');
                expect(data.signedStatus).to.be("");
                expect(data.tid).to.be.a('string');
                expect(data.tid).to.be("");
                expect(data.processSubSystem).to.be.a('string');
                expect(data.processSubSystem).to.be("");
                expect(data.processGroupId).to.be.a('string');
                expect(data.processGroupId).to.be("");
                expect(data.agentIsActive).to.be.a('boolean');
                expect(data.agentIsActive).to.be(false);
                expect(data.registryPath).to.be.a('string');
                expect(data.registryPath).to.be("");
                expect(data.indicatorMetadata).to.be.a('string');
                expect(data.indicatorMetadata).to.be("");
                expect(data.processImagePath).to.be.a('string');
                expect(data.processImagePath).to.be("");
                expect(data.dnsRequest).to.be.a('string');
                expect(data.dnsRequest).to.be("");
                expect(data.networkSource).to.be.a('string');
                expect(data.networkSource).to.be("");
                expect(data.taskName).to.be.a('string');
                expect(data.taskName).to.be("");
                expect(data.fileSha1).to.be.a('string');
                expect(data.fileSha1).to.be("");
                expect(data.oldFileName).to.be.a('string');
                expect(data.oldFileName).to.be("");
                expect(data.agentVersion).to.be.a('string');
                expect(data.agentVersion).to.be("");
                expect(data.processIsRedirectedCommandProcessor).to.be.a('string');
                expect(data.processIsRedirectedCommandProcessor).to.be("");
                expect(data.oldFileSha1).to.be.a('string');
                expect(data.oldFileSha1).to.be("");
                expect(data.verifiedStatus).to.be.a('string');
                expect(data.verifiedStatus).to.be("");
                expect(data.agentInfected).to.be.a('boolean');
                expect(data.agentInfected).to.be(false);
                expect(data.loginsUserName).to.be.a('string');
                expect(data.loginsUserName).to.be("");
                expect(data.fileSha256).to.be.a('string');
                expect(data.fileSha256).to.be("");
                expect(data.processUserName).to.be.a('string');
                expect(data.processUserName).to.be("");
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.processRoot).to.be.a('string');
                expect(data.processRoot).to.be("");
                expect(data.isAgentVersionFullySupportedForPgMessage).to.be.a('string');
                expect(data.isAgentVersionFullySupportedForPgMessage).to.be("");
                expect(data.md5).to.be.a('string');
                expect(data.md5).to.be("");
                expect(data.registryId).to.be.a('string');
                expect(data.registryId).to.be("");
                expect(data.fileSize).to.be.a('string');
                expect(data.fileSize).to.be("");
                expect(data.agentOs).to.be.a('string');
                expect(data.agentOs).to.be("windows");
                expect(data.dstIp).to.be.a('string');
                expect(data.dstIp).to.be("");
                expect(data.agentIsDecommissioned).to.be.a('boolean');
                expect(data.agentIsDecommissioned).to.be(false);
                expect(data.sha256).to.be.a('string');
                expect(data.sha256).to.be("");
                expect(data.processIsWow64).to.be.a('string');
                expect(data.processIsWow64).to.be("");
                expect(data.processDisplayName).to.be.a('string');
                expect(data.processDisplayName).to.be("");
                expect(data.networkUrl).to.be.a('string');
                expect(data.networkUrl).to.be("");
                expect(data.processCmd).to.be.a('string');
                expect(data.processCmd).to.be("");
                expect(data.siteName).to.be.a('string');
                expect(data.siteName).to.be("");
                expect(data.forensicUrl).to.be.a('string');
                expect(data.forensicUrl).to.be("");
                expect(data.loginsBaseType).to.be.a('string');
                expect(data.loginsBaseType).to.be("");
                expect(data.processIntegrityLevel).to.be.a('string');
                expect(data.processIntegrityLevel).to.be("");
                expect(data.direction).to.be.a('string');
                expect(data.direction).to.be("");
                expect(data.processName).to.be.a('string');
                expect(data.processName).to.be("");
                expect(data.processSessionId).to.be.a('string');
                expect(data.processSessionId).to.be("");
                expect(data.agentUuid).to.be.a('string');
                expect(data.agentUuid).to.be("");
                expect(data.srcPort).to.be.a('number');
                expect(data.srcPort).to.be(0);
                expect(data.signatureSignedInvalidReason).to.be.a('string');
                expect(data.signatureSignedInvalidReason).to.be("");
                expect(data.taskPath).to.be.a('string');
                expect(data.taskPath).to.be("");
                expect(data.oldFileMd5).to.be.a('string');
                expect(data.oldFileMd5).to.be("");
                expect(data.indicatorName).to.be.a('string');
                expect(data.indicatorName).to.be("");
                expect(data.dstPort).to.be.a('number');
                expect(data.dstPort).to.be(0);
                expect(data.eventType).to.be.a('string');
                expect(data.eventType).to.be("");
                expect(data.rpid).to.be.a('string');
                expect(data.rpid).to.be("");
                expect(data.threatStatus).to.be.a('string');
                expect(data.threatStatus).to.be("");
                expect(data.isAgentVersionFullySupportedForPg).to.be.a('boolean');
                expect(data.isAgentVersionFullySupportedForPg).to.be(false);
                expect(data.agentId).to.be.a('string');
                expect(data.agentId).to.be("");
                expect(data.processUniqueKey).to.be.a('string');
                expect(data.processUniqueKey).to.be("");
                expect(data.processStartTime).to.be.a('string');
                expect(data.processStartTime).to.be("");
                expect(data.parentProcessGroupId).to.be.a('string');
                expect(data.parentProcessGroupId).to.be("");
                expect(data.srcIp).to.be.a('string');
                expect(data.srcIp).to.be("");
                expect(data.relatedToThreat).to.be.a('string');
                expect(data.relatedToThreat).to.be("");
                expect(data.networkMethod).to.be.a('string');
                expect(data.networkMethod).to.be("");
                expect(data.fileMd5).to.be.a('string');
                expect(data.fileMd5).to.be("");
                expect(data.connectionStatus).to.be.a('string');
                expect(data.connectionStatus).to.be("");
                expect(data.agentName).to.be.a('string');
                expect(data.agentName).to.be("");
                expect(data.fileType).to.be.a('string');
                expect(data.fileType).to.be("");
                expect(data.agentDomain).to.be.a('string');
                expect(data.agentDomain).to.be("");
                expect(data.parentProcessIsMalicious).to.be.a('boolean');
                expect(data.parentProcessIsMalicious).to.be(false);
                expect(data.agentMachineType).to.be.a('string');
                expect(data.agentMachineType).to.be("");
                expect(data.agentNetworkStatus).to.be.a('string');
                expect(data.agentNetworkStatus).to.be("");
                expect(data.fileFullName).to.be.a('string');
                expect(data.fileFullName).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.agentGroupId).to.be.a('string');
                expect(data.agentGroupId).to.be("");
                expect(data.oldFileSha256).to.be.a('string');
                expect(data.oldFileSha256).to.be("");
                expect(data.sha1).to.be.a('string');
                expect(data.sha1).to.be("");
                expect(data.agentIp).to.be.a('string');
                expect(data.agentIp).to.be("");
                expect(data.publisher).to.be.a('string');
                expect(data.publisher).to.be("");
                expect(data.parentProcessUniqueKey).to.be.a('string');
                expect(data.parentProcessUniqueKey).to.be("");
                expect(data.processImageSha1Hash).to.be.a('string');
                expect(data.processImageSha1Hash).to.be("");
                expect(data.parentPid).to.be.a('string');
                expect(data.parentPid).to.be("");
                expect(data.pid).to.be.a('string');
                expect(data.pid).to.be("");
                expect(data.trueContext).to.be.a('string');
                expect(data.trueContext).to.be("");
                expect(data.fileId).to.be.a('string');
                expect(data.fileId).to.be("");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.processIsMalicious).to.be.a('boolean');
                expect(data.processIsMalicious).to.be(false);
                expect(data.indicatorDescription).to.be.a('string');
                expect(data.indicatorDescription).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiDvFetchFileGet', function() {
        it('should call webApiDvFetchFileGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiDvFetchFileGet call and complete the assertions
          /*
          var downloadToken = "downloadToken_example";

          instance.webApiDvFetchFileGet(downloadToken, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityFileDownloadLinkSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityFileDownloadLinkSchema200Data);
                  expect(data.data.fileName).to.be.a('string');
              expect(data.data.fileName).to.be("");
              expect(data.data.downloadUrl).to.be.a('string');
              expect(data.data.downloadUrl).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiDvInitQueryPost', function() {
        it('should call webApiDvInitQueryPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiDvInitQueryPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityApiRequestSchema();
          opts.body.timeFrame = "Last 48 Hours";
          opts.body.queryType = ["events"];
          opts.body.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.limit = 10;
          opts.body.isVerbose = false;
          opts.body.query = "AgentName IS NOT EMPTY";
          opts.body.fromDate = 2018-02-27T04:49:26.257525Z;
          opts.body.toDate = 2018-02-27T04:49:26.257525Z;

          instance.webApiDvInitQueryPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryIdSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryIdSchema200Data);
                  expect(data.data.queryId).to.be.a('string');
              expect(data.data.queryId).to.be("q1xx2xx3");
              expect(data.data.queryModeInfo).to.be.a(S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryIdSchema200DataQueryModeInfo);
                    expect(data.data.queryModeInfo.lastActivatedAt).to.be.a(Date);
                expect(data.data.queryModeInfo.lastActivatedAt).to.be(new Date());
                expect(data.data.queryModeInfo.mode).to.be.a('string');
                expect(data.data.queryModeInfo.mode).to.be("presto");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiDvProcessStateGet', function() {
        it('should call webApiDvProcessStateGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiDvProcessStateGet call
          /*
          var queryId = "queryId_example";
          var opts = {};
          opts.cursor = "null";
          opts.skip = 56;
          opts.sortOrder = "null";
          opts.sortBy = "sortBy_example";
          opts.limit = 10;

          instance.webApiDvProcessStateGet(queryId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiDvQueryStatusGet', function() {
        it('should call webApiDvQueryStatusGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiDvQueryStatusGet call and complete the assertions
          /*
          var queryId = "queryId_example";

          instance.webApiDvQueryStatusGet(queryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryStatusResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryStatusResponseSchema200Data);
                  expect(data.data.queryModeInfo).to.be.a(S1MgmtApi.DeepVisibilityDeepVisibilityV2SchemasDeepVisibilityQueryIdSchema200DataQueryModeInfo);
                    expect(data.data.queryModeInfo.lastActivatedAt).to.be.a(Date);
                expect(data.data.queryModeInfo.lastActivatedAt).to.be(new Date());
                expect(data.data.queryModeInfo.mode).to.be.a('string');
                expect(data.data.queryModeInfo.mode).to.be("presto");
              expect(data.data.warnings).to.be.a('string');
              expect(data.data.warnings).to.be("");
              expect(data.data.responseState).to.be.a('string');
              expect(data.data.responseState).to.be("PROCESS_RUNNING");
              expect(data.data.responseError).to.be.a('string');
              expect(data.data.responseError).to.be("");
              expect(data.data.progressStatus).to.be.a('number');
              expect(data.data.progressStatus).to.be(50);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
