/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.FiltersApi();
  });

  describe('(package)', function() {
    describe('FiltersApi', function() {
      describe('webApiFiltersCsvFilterPost', function() {
        it('should call webApiFiltersCsvFilterPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFiltersCsvFilterPost call and complete the assertions
          /*
          var excludeHeader = true;
          var agentFilterField = "agentFilterField_example";
          var file = "/path/to/file.txt";

          instance.webApiFiltersCsvFilterPost(excludeHeader, agentFilterField, file, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.FiltersSchemasCsvFilterViewSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.FiltersSchemasCsvFilterViewSchema200Data);
                  expect(data.data.rowsCount).to.be.a('number');
              expect(data.data.rowsCount).to.be(0);
              {
                let dataCtr = data.data.notFoundEndpoints;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.filterId).to.be.a('string');
              expect(data.data.filterId).to.be("");
              expect(data.data.endpointFoundCount).to.be.a('number');
              expect(data.data.endpointFoundCount).to.be(0);
              expect(data.data.uniqueInputValuesCount).to.be.a('number');
              expect(data.data.uniqueInputValuesCount).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFiltersDvGet', function() {
        it('should call webApiFiltersDvGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFiltersDvGet call
          /*
          var opts = {};
          opts.cursor = "null";
          opts.skip = 56;
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.skipCount = null;
          opts.includeParents = false;
          opts.includeChildren = false;
          opts.sortOrder = "null";
          opts.ids = ["ids_example"];
          opts.sortBy = "null";
          opts.includeGlobal = false;
          opts.query = "query_example";
          opts.groupIds = ["groupIds_example"];
          opts.countOnly = false;
          opts.limit = 10;

          instance.webApiFiltersDvGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFiltersDvPost', function() {
        it('should call webApiFiltersDvPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFiltersDvPost call
          /*
          var opts = {};
          opts.body = new S1MgmtApi.FiltersFiltersNewDeepVisibilityFilterSchema();
          opts.body.filter = new S1MgmtApi.FiltersFiltersNewDeepVisibilityFilterSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.scopeLevel = "site";
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.FiltersFiltersNewDeepVisibilityFilterSchemaData();
          opts.body.data.name = "My Saved Filter 1";
          opts.body.data.recipients = ["admin@acme.com","viewer@acme.com"];
          opts.body.data.filterFields = new S1MgmtApi.FiltersFiltersNewDeepVisibilityFilterSchemaDataFilterFields();
          opts.body.data.filterFields.queryType = "powerquery";
          opts.body.data.filterFields.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data.filterFields.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.data.filterFields.query = Network.URL="stackoverflow";
          opts.body.data.filterFields.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.data.filterFields.timeRange = "Last 24 hours";
          opts.body.data.frequency = 3;
          opts.body.data.notifications = false;

          instance.webApiFiltersDvPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFiltersDvfilterIdDelete', function() {
        it('should call webApiFiltersDvfilterIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFiltersDvfilterIdDelete call and complete the assertions
          /*
          var filterId = "filterId_example";

          instance.webApiFiltersDvfilterIdDelete(filterId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFiltersDvfilterIdPut', function() {
        it('should call webApiFiltersDvfilterIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFiltersDvfilterIdPut call and complete the assertions
          /*
          var filterId = "filterId_example";
          var opts = {};
          opts.body = new S1MgmtApi.FiltersFiltersNewDeepVisibilityFilterSchema();
          opts.body.filter = new S1MgmtApi.FiltersFiltersNewDeepVisibilityFilterSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.scopeLevel = "site";
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.FiltersFiltersNewDeepVisibilityFilterSchemaData();
          opts.body.data.name = "My Saved Filter 1";
          opts.body.data.recipients = ["admin@acme.com","viewer@acme.com"];
          opts.body.data.filterFields = new S1MgmtApi.FiltersFiltersNewDeepVisibilityFilterSchemaDataFilterFields();
          opts.body.data.filterFields.queryType = "powerquery";
          opts.body.data.filterFields.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data.filterFields.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.data.filterFields.query = Network.URL="stackoverflow";
          opts.body.data.filterFields.groupIds = ["225494730938493804","225494730938493915"];
          opts.body.data.filterFields.timeRange = "Last 24 hours";
          opts.body.data.frequency = 3;
          opts.body.data.notifications = false;

          instance.webApiFiltersDvfilterIdPut(filterId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.FiltersFiltersDeepVisibilityFilterViewSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.FiltersFiltersDeepVisibilityFilterViewSchema200Data);
                  expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              {
                let dataCtr = data.data.recipients;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.siteId).to.be.a('string');
              expect(data.data.siteId).to.be("225494730938493804");
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.scopeLevelName).to.be.a('string');
              expect(data.data.scopeLevelName).to.be("");
              expect(data.data.filterFields).to.be.a(S1MgmtApi.FiltersFiltersDeepVisibilityFilterViewSchema200DataFilterFields);
                    expect(data.data.filterFields.query).to.be.a('string');
                expect(data.data.filterFields.query).to.be("Network.URL(HTTP/HTTPS)="*" between 2018-19-03 16:35 to 2018-20-03 16:35");
                expect(data.data.filterFields.queryType).to.be.a('string');
                expect(data.data.filterFields.queryType).to.be("powerquery");
                expect(data.data.filterFields.timeRange).to.be.a('string');
                expect(data.data.filterFields.timeRange).to.be("Last 30 days");
              expect(data.data.scopeLevel).to.be.a('string');
              expect(data.data.scopeLevel).to.be("site");
              expect(data.data.frequency).to.be.a('number');
              expect(data.data.frequency).to.be(3);
              expect(data.data.notifications).to.be.a('boolean');
              expect(data.data.notifications).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFiltersGet', function() {
        it('should call webApiFiltersGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFiltersGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "null";
          opts.skip = 56;
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.skipCount = null;
          opts.includeParents = false;
          opts.includeChildren = false;
          opts.sortOrder = "null";
          opts.ids = ["ids_example"];
          opts.sortBy = "null";
          opts.includeGlobal = false;
          opts.query = "query_example";
          opts.countOnly = false;
          opts.limit = 10;

          instance.webApiFiltersGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.FiltersFiltersFilterViewSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.FiltersFiltersFilterViewSchemaMany200Data);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.scopeId).to.be.a('string');
                expect(data.scopeId).to.be("225494730938493804");
                expect(data.siteId).to.be.a('string');
                expect(data.siteId).to.be("225494730938493804");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.filterFields).to.be.a(S1MgmtApi.FiltersFiltersFilterViewSchemaMany200FilterFields);
                      {
                    let dataCtr = data.filterFields.agentVersionsNin;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("2.5.1.1320");
                    }
                  }
                  expect(data.filterFields.registeredAtBetween).to.be.a('string');
                  expect(data.filterFields.registeredAtBetween).to.be("1514978764288-1514978999999");
                  {
                    let dataCtr = data.filterFields.adComputerQueryContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.filterFields.hasLocalConfiguration).to.be.a('boolean');
                  expect(data.filterFields.hasLocalConfiguration).to.be(false);
                  {
                    let dataCtr = data.filterFields.adUserQueryContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.filterFields.query).to.be.a('string');
                  expect(data.filterFields.query).to.be("Linux");
                  {
                    let dataCtr = data.filterFields.cloudProvider;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.cloudImageContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.appsVulnerabilityStatusesNin;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("patch_required");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.scanStatusesNin;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("none");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.adComputerMemberContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.rangerVersions;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("2.5.1.1320");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.machineTypes;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("unknown");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.locationIds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.locationIdsNin;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.missingPermissionsNin;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("user_action_needed_fda");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.threatRebootRequired;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('boolean');
                      expect(data).to.be(false);
                    }
                  }
                  {
                    let dataCtr = data.filterFields.serialNumberContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.filterFields.lastSuccessfulScanDateBetween).to.be.a('string');
                  expect(data.filterFields.lastSuccessfulScanDateBetween).to.be("1514978764288-1514978999999");
                  expect(data.filterFields.lastActiveDateBetween).to.be.a('string');
                  expect(data.filterFields.lastActiveDateBetween).to.be("1514978764288-1514978999999");
                  {
                    let dataCtr = data.filterFields.networkQuarantineEnabled;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('boolean');
                      expect(data).to.be(false);
                    }
                  }
                  {
                    let dataCtr = data.filterFields.cloudTagsContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.filterFields.encryptedApplications).to.be.a('boolean');
                  expect(data.filterFields.encryptedApplications).to.be(false);
                  {
                    let dataCtr = data.filterFields.isUninstalled;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('boolean');
                      expect(data).to.be(false);
                    }
                  }
                  {
                    let dataCtr = data.filterFields.networkInterfacePhysicalContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.operationalStates;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.adUserNameContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.osTypesNin;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("windows");
                    }
                  }
                  expect(data.filterFields.isActive).to.be.a('boolean');
                  expect(data.filterFields.isActive).to.be(false);
                  {
                    let dataCtr = data.filterFields.awsSubnetIdsContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.osVersionContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.externalIpContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.awsSecurityGroupsContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.k8sNodeNameContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.filterFields.hasTags).to.be.a('boolean');
                  expect(data.filterFields.hasTags).to.be(false);
                  {
                    let dataCtr = data.filterFields.agentNamespaceContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.networkInterfaceInetContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.computerNameContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.cloudNetworkContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.remoteProfilingStates;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.filteredGroupIds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.agentPodNameContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.userActionsNeededNin;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("none");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.rangerStatuses;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("NotApplicable");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.externalIdContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.consoleMigrationStatusesNin;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("N/A");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.cpuIdContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.filterFields.coreCountBetween).to.be.a('string');
                  expect(data.filterFields.coreCountBetween).to.be("2-8");
                  expect(data.filterFields.isUpToDate).to.be.a('boolean');
                  expect(data.filterFields.isUpToDate).to.be(false);
                  expect(data.filterFields.rangerStatus).to.be.a('string');
                  expect(data.filterFields.rangerStatus).to.be("NotApplicable");
                  expect(data.filterFields.totalMemoryBetween).to.be.a('string');
                  expect(data.filterFields.totalMemoryBetween).to.be("4-8");
                  {
                    let dataCtr = data.filterFields.domains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.awsRoleContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.lastLoggedInUserNameContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.cloudAccountContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.clusterNameContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.scanStatuses;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("none");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.liveUpdateIdContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.osTypes;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("windows");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.appsVulnerabilityStatuses;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("patch_required");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.remoteProfilingStatesNin;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.filteredSiteIds;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("225494730938493804");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.userActionsNeeded;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("none");
                    }
                  }
                  expect(data.filterFields.osArch).to.be.a('string');
                  expect(data.filterFields.osArch).to.be("32 bit");
                  {
                    let dataCtr = data.filterFields.adComputerNameContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.cloudInstanceIdContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.agentVersions;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("2.5.1.1320");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.adQueryContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.locationEnabled;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('boolean');
                      expect(data).to.be(false);
                    }
                  }
                  {
                    let dataCtr = data.filterFields.cloudProviderNin;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.filterFields.isPendingUninstall).to.be.a('boolean');
                  expect(data.filterFields.isPendingUninstall).to.be(false);
                  {
                    let dataCtr = data.filterFields.k8sNodeLabelsContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.filterFields.tagsData).to.be.a('string');
                  expect(data.filterFields.tagsData).to.be("{"key1": ["value1_1", "value1_2"], "key2__nin": ["value2"]}");
                  {
                    let dataCtr = data.filterFields.firewallEnabled;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('boolean');
                      expect(data).to.be(false);
                    }
                  }
                  {
                    let dataCtr = data.filterFields.domainsNin;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.gcpServiceAccountContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.cloudLocationContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.networkStatuses;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("connected");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.k8sTypeContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.networkInterfaceGatewayMacAddressContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.filterFields.cpuCountBetween).to.be.a('string');
                  expect(data.filterFields.cpuCountBetween).to.be("2-8");
                  {
                    let dataCtr = data.filterFields.operationalStatesNin;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.k8sVersionContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.installerTypes;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be(".msi");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.adUserMemberContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.filterFields.infected).to.be.a('boolean');
                  expect(data.filterFields.infected).to.be(false);
                  {
                    let dataCtr = data.filterFields.missingPermissions;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("user_action_needed_fda");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.installerTypesNin;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be(".msi");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.machineTypesNin;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("unknown");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.isDecommissioned;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('boolean');
                      expect(data).to.be(false);
                    }
                  }
                  {
                    let dataCtr = data.filterFields.rangerStatusesNin;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("NotApplicable");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.cloudInstanceSizeContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.rangerVersionsNin;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("2.5.1.1320");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.consoleMigrationStatuses;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("N/A");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.azureResourceGroupContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.uuidContains;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.filterFields.networkStatusesNin;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("connected");
                    }
                  }
                  expect(data.filterFields.adQuery).to.be.a('string');
                  expect(data.filterFields.adQuery).to.be("CN=Managers,DC=sentinelone,DC=com");
                expect(data.scopeLevel).to.be.a('string');
                expect(data.scopeLevel).to.be("site");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFiltersPost', function() {
        it('should call webApiFiltersPost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFiltersPost call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.FiltersFiltersNewFilterSchema();
          opts.body.filter = new S1MgmtApi.FiltersFiltersNewFilterSchemaFilter();
          opts.body.filter.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.filter.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data = new S1MgmtApi.FiltersFiltersNewFilterSchemaData();
          opts.body.data.siteId = "225494730938493804";
          opts.body.data.filterFields = new S1MgmtApi.FiltersFiltersNewFilterSchemaDataFilterFields();
          opts.body.data.filterFields.agentVersionsNin = ["2.0.0.0","2.1.5.144"];
          opts.body.data.filterFields.registeredAtBetween = "1514978764288-1514978999999";
          opts.body.data.filterFields.adComputerQueryContains = ["DC=sentinelone","Windows"];
          opts.body.data.filterFields.hasLocalConfiguration = false;
          opts.body.data.filterFields.adUserQueryContains = ["DC=sentinelone","John"];
          opts.body.data.filterFields.query = "Linux";
          opts.body.data.filterFields.cloudProvider = [""];
          opts.body.data.filterFields.cloudImageContains = [""];
          opts.body.data.filterFields.appsVulnerabilityStatusesNin = ["patch_required"];
          opts.body.data.filterFields.scanStatusesNin = ["started","aborted"];
          opts.body.data.filterFields.adComputerMemberContains = ["DC=sentinelone"];
          opts.body.data.filterFields.rangerVersions = ["2.0.0.0","2.1.5.144"];
          opts.body.data.filterFields.machineTypes = ["laptop","desktop"];
          opts.body.data.filterFields.locationIds = ["225494730938493804","225494730938493915"];
          opts.body.data.filterFields.locationIdsNin = ["225494730938493804","225494730938493915"];
          opts.body.data.filterFields.missingPermissionsNin = ["user_action_needed_bluetooth_per","user_action_needed_fda_helper"];
          opts.body.data.filterFields.threatRebootRequired = [false];
          opts.body.data.filterFields.serialNumberContains = [""];
          opts.body.data.filterFields.lastSuccessfulScanDateBetween = "1514978764288-1514978999999";
          opts.body.data.filterFields.lastActiveDateBetween = "1514978764288-1514978999999";
          opts.body.data.filterFields.networkQuarantineEnabled = [false];
          opts.body.data.filterFields.cloudTagsContains = [""];
          opts.body.data.filterFields.encryptedApplications = false;
          opts.body.data.filterFields.isUninstalled = [true,false];
          opts.body.data.filterFields.networkInterfacePhysicalContains = ["aa:0f",":41:"];
          opts.body.data.filterFields.operationalStates = [""];
          opts.body.data.filterFields.adUserNameContains = ["DC=sentinelone"];
          opts.body.data.filterFields.osTypesNin = ["windows"];
          opts.body.data.filterFields.isActive = false;
          opts.body.data.filterFields.awsSubnetIdsContains = [""];
          opts.body.data.filterFields.osVersionContains = ["Service Pack 1"];
          opts.body.data.filterFields.externalIpContains = ["205","127.0"];
          opts.body.data.filterFields.awsSecurityGroupsContains = [""];
          opts.body.data.filterFields.k8sNodeNameContains = [""];
          opts.body.data.filterFields.hasTags = false;
          opts.body.data.filterFields.agentNamespaceContains = [""];
          opts.body.data.filterFields.networkInterfaceInetContains = ["192","10.0.0"];
          opts.body.data.filterFields.computerNameContains = ["john-office","WIN"];
          opts.body.data.filterFields.cloudNetworkContains = [""];
          opts.body.data.filterFields.remoteProfilingStates = [""];
          opts.body.data.filterFields.filteredGroupIds = ["225494730938493804","225494730938493915"];
          opts.body.data.filterFields.agentPodNameContains = [""];
          opts.body.data.filterFields.userActionsNeededNin = ["reboot_needed","upgrade_needed"];
          opts.body.data.filterFields.rangerStatuses = ["NotApplicable"];
          opts.body.data.filterFields.externalIdContains = ["Tag#1 - monitoring","Performance machine"];
          opts.body.data.filterFields.consoleMigrationStatusesNin = ["N/A"];
          opts.body.data.filterFields.cpuIdContains = ["Intel","AMD"];
          opts.body.data.filterFields.coreCountBetween = "2-8";
          opts.body.data.filterFields.isUpToDate = false;
          opts.body.data.filterFields.rangerStatus = "NotApplicable";
          opts.body.data.filterFields.totalMemoryBetween = "4-8";
          opts.body.data.filterFields.domains = ["mybusiness.net","workgroup"];
          opts.body.data.filterFields.awsRoleContains = [""];
          opts.body.data.filterFields.lastLoggedInUserNameContains = ["admin","johnd1"];
          opts.body.data.filterFields.cloudAccountContains = [""];
          opts.body.data.filterFields.clusterNameContains = [""];
          opts.body.data.filterFields.scanStatuses = ["started","aborted"];
          opts.body.data.filterFields.liveUpdateIdContains = [""];
          opts.body.data.filterFields.osTypes = ["windows"];
          opts.body.data.filterFields.appsVulnerabilityStatuses = ["patch_required"];
          opts.body.data.filterFields.remoteProfilingStatesNin = [""];
          opts.body.data.filterFields.filteredSiteIds = ["225494730938493804","225494730938493915"];
          opts.body.data.filterFields.userActionsNeeded = ["reboot_needed","upgrade_needed"];
          opts.body.data.filterFields.osArch = "32 bit";
          opts.body.data.filterFields.adComputerNameContains = ["DC=sentinelone"];
          opts.body.data.filterFields.cloudInstanceIdContains = [""];
          opts.body.data.filterFields.agentVersions = ["2.0.0.0","2.1.5.144"];
          opts.body.data.filterFields.adQueryContains = ["DC=sentinelone"];
          opts.body.data.filterFields.locationEnabled = [false];
          opts.body.data.filterFields.cloudProviderNin = [""];
          opts.body.data.filterFields.isPendingUninstall = false;
          opts.body.data.filterFields.k8sNodeLabelsContains = [""];
          opts.body.data.filterFields.tagsData = "{"key1": ["value1_1", "value1_2"], "key2__nin": ["value2"]}";
          opts.body.data.filterFields.firewallEnabled = [false];
          opts.body.data.filterFields.domainsNin = ["mybusiness.net","workgroup"];
          opts.body.data.filterFields.gcpServiceAccountContains = [""];
          opts.body.data.filterFields.cloudLocationContains = [""];
          opts.body.data.filterFields.networkStatuses = ["connected","connecting"];
          opts.body.data.filterFields.k8sTypeContains = [""];
          opts.body.data.filterFields.networkInterfaceGatewayMacAddressContains = ["aa:0f",":41:"];
          opts.body.data.filterFields.cpuCountBetween = "2-8";
          opts.body.data.filterFields.operationalStatesNin = [""];
          opts.body.data.filterFields.k8sVersionContains = [""];
          opts.body.data.filterFields.installerTypes = [".msi"];
          opts.body.data.filterFields.adUserMemberContains = ["DC=sentinelone"];
          opts.body.data.filterFields.infected = false;
          opts.body.data.filterFields.missingPermissions = ["user_action_needed_bluetooth_per","user_action_needed_fda_helper"];
          opts.body.data.filterFields.installerTypesNin = [".msi"];
          opts.body.data.filterFields.machineTypesNin = ["laptop","desktop"];
          opts.body.data.filterFields.isDecommissioned = [true,false];
          opts.body.data.filterFields.rangerStatusesNin = ["NotApplicable"];
          opts.body.data.filterFields.cloudInstanceSizeContains = [""];
          opts.body.data.filterFields.rangerVersionsNin = ["2.0.0.0","2.1.5.144"];
          opts.body.data.filterFields.consoleMigrationStatuses = ["N/A"];
          opts.body.data.filterFields.azureResourceGroupContains = [""];
          opts.body.data.filterFields.uuidContains = ["e92-01928","b055"];
          opts.body.data.filterFields.networkStatusesNin = ["connected","connecting"];
          opts.body.data.filterFields.adQuery = "CN=Managers,DC=sentinelone,DC=com";
          opts.body.data.scopeLevel = "site";
          opts.body.data.name = "My Saved Filter 1";

          instance.webApiFiltersPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.FiltersFiltersFilterViewSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.FiltersFiltersFilterViewSchema200Data);
                  expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.siteId).to.be.a('string');
              expect(data.data.siteId).to.be("225494730938493804");
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.filterFields).to.be.a(S1MgmtApi.FiltersFiltersFilterViewSchemaMany200FilterFields);
                    {
                  let dataCtr = data.data.filterFields.agentVersionsNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("2.5.1.1320");
                  }
                }
                expect(data.data.filterFields.registeredAtBetween).to.be.a('string');
                expect(data.data.filterFields.registeredAtBetween).to.be("1514978764288-1514978999999");
                {
                  let dataCtr = data.data.filterFields.adComputerQueryContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.data.filterFields.hasLocalConfiguration).to.be.a('boolean');
                expect(data.data.filterFields.hasLocalConfiguration).to.be(false);
                {
                  let dataCtr = data.data.filterFields.adUserQueryContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.data.filterFields.query).to.be.a('string');
                expect(data.data.filterFields.query).to.be("Linux");
                {
                  let dataCtr = data.data.filterFields.cloudProvider;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.cloudImageContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.appsVulnerabilityStatusesNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("patch_required");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.scanStatusesNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("none");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.adComputerMemberContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.rangerVersions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("2.5.1.1320");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.machineTypes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("unknown");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.locationIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("225494730938493804");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.locationIdsNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("225494730938493804");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.missingPermissionsNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("user_action_needed_fda");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.threatRebootRequired;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('boolean');
                    expect(data).to.be(false);
                  }
                }
                {
                  let dataCtr = data.data.filterFields.serialNumberContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.data.filterFields.lastSuccessfulScanDateBetween).to.be.a('string');
                expect(data.data.filterFields.lastSuccessfulScanDateBetween).to.be("1514978764288-1514978999999");
                expect(data.data.filterFields.lastActiveDateBetween).to.be.a('string');
                expect(data.data.filterFields.lastActiveDateBetween).to.be("1514978764288-1514978999999");
                {
                  let dataCtr = data.data.filterFields.networkQuarantineEnabled;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('boolean');
                    expect(data).to.be(false);
                  }
                }
                {
                  let dataCtr = data.data.filterFields.cloudTagsContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.data.filterFields.encryptedApplications).to.be.a('boolean');
                expect(data.data.filterFields.encryptedApplications).to.be(false);
                {
                  let dataCtr = data.data.filterFields.isUninstalled;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('boolean');
                    expect(data).to.be(false);
                  }
                }
                {
                  let dataCtr = data.data.filterFields.networkInterfacePhysicalContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.operationalStates;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.adUserNameContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.osTypesNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("windows");
                  }
                }
                expect(data.data.filterFields.isActive).to.be.a('boolean');
                expect(data.data.filterFields.isActive).to.be(false);
                {
                  let dataCtr = data.data.filterFields.awsSubnetIdsContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.osVersionContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.externalIpContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.awsSecurityGroupsContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.k8sNodeNameContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.data.filterFields.hasTags).to.be.a('boolean');
                expect(data.data.filterFields.hasTags).to.be(false);
                {
                  let dataCtr = data.data.filterFields.agentNamespaceContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.networkInterfaceInetContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.computerNameContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.cloudNetworkContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.remoteProfilingStates;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.filteredGroupIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("225494730938493804");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.agentPodNameContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.userActionsNeededNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("none");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.rangerStatuses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("NotApplicable");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.externalIdContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.consoleMigrationStatusesNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("N/A");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.cpuIdContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.data.filterFields.coreCountBetween).to.be.a('string');
                expect(data.data.filterFields.coreCountBetween).to.be("2-8");
                expect(data.data.filterFields.isUpToDate).to.be.a('boolean');
                expect(data.data.filterFields.isUpToDate).to.be(false);
                expect(data.data.filterFields.rangerStatus).to.be.a('string');
                expect(data.data.filterFields.rangerStatus).to.be("NotApplicable");
                expect(data.data.filterFields.totalMemoryBetween).to.be.a('string');
                expect(data.data.filterFields.totalMemoryBetween).to.be("4-8");
                {
                  let dataCtr = data.data.filterFields.domains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.awsRoleContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.lastLoggedInUserNameContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.cloudAccountContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.clusterNameContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.scanStatuses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("none");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.liveUpdateIdContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.osTypes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("windows");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.appsVulnerabilityStatuses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("patch_required");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.remoteProfilingStatesNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.filteredSiteIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("225494730938493804");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.userActionsNeeded;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("none");
                  }
                }
                expect(data.data.filterFields.osArch).to.be.a('string');
                expect(data.data.filterFields.osArch).to.be("32 bit");
                {
                  let dataCtr = data.data.filterFields.adComputerNameContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.cloudInstanceIdContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.agentVersions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("2.5.1.1320");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.adQueryContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.locationEnabled;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('boolean');
                    expect(data).to.be(false);
                  }
                }
                {
                  let dataCtr = data.data.filterFields.cloudProviderNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.data.filterFields.isPendingUninstall).to.be.a('boolean');
                expect(data.data.filterFields.isPendingUninstall).to.be(false);
                {
                  let dataCtr = data.data.filterFields.k8sNodeLabelsContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.data.filterFields.tagsData).to.be.a('string');
                expect(data.data.filterFields.tagsData).to.be("{"key1": ["value1_1", "value1_2"], "key2__nin": ["value2"]}");
                {
                  let dataCtr = data.data.filterFields.firewallEnabled;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('boolean');
                    expect(data).to.be(false);
                  }
                }
                {
                  let dataCtr = data.data.filterFields.domainsNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.gcpServiceAccountContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.cloudLocationContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.networkStatuses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("connected");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.k8sTypeContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.networkInterfaceGatewayMacAddressContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.data.filterFields.cpuCountBetween).to.be.a('string');
                expect(data.data.filterFields.cpuCountBetween).to.be("2-8");
                {
                  let dataCtr = data.data.filterFields.operationalStatesNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.k8sVersionContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.installerTypes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be(".msi");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.adUserMemberContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.data.filterFields.infected).to.be.a('boolean');
                expect(data.data.filterFields.infected).to.be(false);
                {
                  let dataCtr = data.data.filterFields.missingPermissions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("user_action_needed_fda");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.installerTypesNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be(".msi");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.machineTypesNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("unknown");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.isDecommissioned;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('boolean');
                    expect(data).to.be(false);
                  }
                }
                {
                  let dataCtr = data.data.filterFields.rangerStatusesNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("NotApplicable");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.cloudInstanceSizeContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.rangerVersionsNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("2.5.1.1320");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.consoleMigrationStatuses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("N/A");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.azureResourceGroupContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.uuidContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.networkStatusesNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("connected");
                  }
                }
                expect(data.data.filterFields.adQuery).to.be.a('string');
                expect(data.data.filterFields.adQuery).to.be("CN=Managers,DC=sentinelone,DC=com");
              expect(data.data.scopeLevel).to.be.a('string');
              expect(data.data.scopeLevel).to.be("site");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFiltersfilterIdDelete', function() {
        it('should call webApiFiltersfilterIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFiltersfilterIdDelete call and complete the assertions
          /*
          var filterId = "filterId_example";

          instance.webApiFiltersfilterIdDelete(filterId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiFiltersfilterIdPut', function() {
        it('should call webApiFiltersfilterIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiFiltersfilterIdPut call and complete the assertions
          /*
          var filterId = "filterId_example";
          var opts = {};
          opts.body = new S1MgmtApi.FiltersFiltersUpdateFilterSchema();
          opts.body.data = new S1MgmtApi.FiltersFiltersUpdateFilterSchemaData();
          opts.body.data.filterFields = new S1MgmtApi.FiltersFiltersUpdateFilterSchemaDataFilterFields();
          opts.body.data.filterFields.agentVersionsNin = ["2.0.0.0","2.1.5.144"];
          opts.body.data.filterFields.registeredAtBetween = "1514978764288-1514978999999";
          opts.body.data.filterFields.adComputerQueryContains = ["DC=sentinelone","Windows"];
          opts.body.data.filterFields.hasLocalConfiguration = false;
          opts.body.data.filterFields.adUserQueryContains = ["DC=sentinelone","John"];
          opts.body.data.filterFields.query = "Linux";
          opts.body.data.filterFields.cloudProvider = [""];
          opts.body.data.filterFields.cloudImageContains = [""];
          opts.body.data.filterFields.appsVulnerabilityStatusesNin = ["patch_required"];
          opts.body.data.filterFields.scanStatusesNin = ["started","aborted"];
          opts.body.data.filterFields.adComputerMemberContains = ["DC=sentinelone"];
          opts.body.data.filterFields.rangerVersions = ["2.0.0.0","2.1.5.144"];
          opts.body.data.filterFields.machineTypes = ["laptop","desktop"];
          opts.body.data.filterFields.locationIds = ["225494730938493804","225494730938493915"];
          opts.body.data.filterFields.locationIdsNin = ["225494730938493804","225494730938493915"];
          opts.body.data.filterFields.missingPermissionsNin = ["user_action_needed_bluetooth_per","user_action_needed_fda_helper"];
          opts.body.data.filterFields.threatRebootRequired = [false];
          opts.body.data.filterFields.serialNumberContains = [""];
          opts.body.data.filterFields.lastSuccessfulScanDateBetween = "1514978764288-1514978999999";
          opts.body.data.filterFields.lastActiveDateBetween = "1514978764288-1514978999999";
          opts.body.data.filterFields.networkQuarantineEnabled = [false];
          opts.body.data.filterFields.cloudTagsContains = [""];
          opts.body.data.filterFields.encryptedApplications = false;
          opts.body.data.filterFields.isUninstalled = [true,false];
          opts.body.data.filterFields.networkInterfacePhysicalContains = ["aa:0f",":41:"];
          opts.body.data.filterFields.operationalStates = [""];
          opts.body.data.filterFields.adUserNameContains = ["DC=sentinelone"];
          opts.body.data.filterFields.osTypesNin = ["windows"];
          opts.body.data.filterFields.isActive = false;
          opts.body.data.filterFields.awsSubnetIdsContains = [""];
          opts.body.data.filterFields.osVersionContains = ["Service Pack 1"];
          opts.body.data.filterFields.externalIpContains = ["205","127.0"];
          opts.body.data.filterFields.awsSecurityGroupsContains = [""];
          opts.body.data.filterFields.k8sNodeNameContains = [""];
          opts.body.data.filterFields.hasTags = false;
          opts.body.data.filterFields.agentNamespaceContains = [""];
          opts.body.data.filterFields.networkInterfaceInetContains = ["192","10.0.0"];
          opts.body.data.filterFields.computerNameContains = ["john-office","WIN"];
          opts.body.data.filterFields.cloudNetworkContains = [""];
          opts.body.data.filterFields.remoteProfilingStates = [""];
          opts.body.data.filterFields.filteredGroupIds = ["225494730938493804","225494730938493915"];
          opts.body.data.filterFields.agentPodNameContains = [""];
          opts.body.data.filterFields.userActionsNeededNin = ["reboot_needed","upgrade_needed"];
          opts.body.data.filterFields.rangerStatuses = ["NotApplicable"];
          opts.body.data.filterFields.externalIdContains = ["Tag#1 - monitoring","Performance machine"];
          opts.body.data.filterFields.consoleMigrationStatusesNin = ["N/A"];
          opts.body.data.filterFields.cpuIdContains = ["Intel","AMD"];
          opts.body.data.filterFields.coreCountBetween = "2-8";
          opts.body.data.filterFields.isUpToDate = false;
          opts.body.data.filterFields.rangerStatus = "NotApplicable";
          opts.body.data.filterFields.totalMemoryBetween = "4-8";
          opts.body.data.filterFields.domains = ["mybusiness.net","workgroup"];
          opts.body.data.filterFields.awsRoleContains = [""];
          opts.body.data.filterFields.lastLoggedInUserNameContains = ["admin","johnd1"];
          opts.body.data.filterFields.cloudAccountContains = [""];
          opts.body.data.filterFields.clusterNameContains = [""];
          opts.body.data.filterFields.scanStatuses = ["started","aborted"];
          opts.body.data.filterFields.liveUpdateIdContains = [""];
          opts.body.data.filterFields.osTypes = ["windows"];
          opts.body.data.filterFields.appsVulnerabilityStatuses = ["patch_required"];
          opts.body.data.filterFields.remoteProfilingStatesNin = [""];
          opts.body.data.filterFields.filteredSiteIds = ["225494730938493804","225494730938493915"];
          opts.body.data.filterFields.userActionsNeeded = ["reboot_needed","upgrade_needed"];
          opts.body.data.filterFields.osArch = "32 bit";
          opts.body.data.filterFields.adComputerNameContains = ["DC=sentinelone"];
          opts.body.data.filterFields.cloudInstanceIdContains = [""];
          opts.body.data.filterFields.agentVersions = ["2.0.0.0","2.1.5.144"];
          opts.body.data.filterFields.adQueryContains = ["DC=sentinelone"];
          opts.body.data.filterFields.locationEnabled = [false];
          opts.body.data.filterFields.cloudProviderNin = [""];
          opts.body.data.filterFields.isPendingUninstall = false;
          opts.body.data.filterFields.k8sNodeLabelsContains = [""];
          opts.body.data.filterFields.tagsData = "{"key1": ["value1_1", "value1_2"], "key2__nin": ["value2"]}";
          opts.body.data.filterFields.firewallEnabled = [false];
          opts.body.data.filterFields.domainsNin = ["mybusiness.net","workgroup"];
          opts.body.data.filterFields.gcpServiceAccountContains = [""];
          opts.body.data.filterFields.cloudLocationContains = [""];
          opts.body.data.filterFields.networkStatuses = ["connected","connecting"];
          opts.body.data.filterFields.k8sTypeContains = [""];
          opts.body.data.filterFields.networkInterfaceGatewayMacAddressContains = ["aa:0f",":41:"];
          opts.body.data.filterFields.cpuCountBetween = "2-8";
          opts.body.data.filterFields.operationalStatesNin = [""];
          opts.body.data.filterFields.k8sVersionContains = [""];
          opts.body.data.filterFields.installerTypes = [".msi"];
          opts.body.data.filterFields.adUserMemberContains = ["DC=sentinelone"];
          opts.body.data.filterFields.infected = false;
          opts.body.data.filterFields.missingPermissions = ["user_action_needed_bluetooth_per","user_action_needed_fda_helper"];
          opts.body.data.filterFields.installerTypesNin = [".msi"];
          opts.body.data.filterFields.machineTypesNin = ["laptop","desktop"];
          opts.body.data.filterFields.isDecommissioned = [true,false];
          opts.body.data.filterFields.rangerStatusesNin = ["NotApplicable"];
          opts.body.data.filterFields.cloudInstanceSizeContains = [""];
          opts.body.data.filterFields.rangerVersionsNin = ["2.0.0.0","2.1.5.144"];
          opts.body.data.filterFields.consoleMigrationStatuses = ["N/A"];
          opts.body.data.filterFields.azureResourceGroupContains = [""];
          opts.body.data.filterFields.uuidContains = ["e92-01928","b055"];
          opts.body.data.filterFields.networkStatusesNin = ["connected","connecting"];
          opts.body.data.filterFields.adQuery = "CN=Managers,DC=sentinelone,DC=com";
          opts.body.data.name = "My Saved Filter 2";

          instance.webApiFiltersfilterIdPut(filterId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.FiltersFiltersFilterViewSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.FiltersFiltersFilterViewSchema200Data);
                  expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.name).to.be.a('string');
              expect(data.data.name).to.be("");
              expect(data.data.scopeId).to.be.a('string');
              expect(data.data.scopeId).to.be("225494730938493804");
              expect(data.data.siteId).to.be.a('string');
              expect(data.data.siteId).to.be("225494730938493804");
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.filterFields).to.be.a(S1MgmtApi.FiltersFiltersFilterViewSchemaMany200FilterFields);
                    {
                  let dataCtr = data.data.filterFields.agentVersionsNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("2.5.1.1320");
                  }
                }
                expect(data.data.filterFields.registeredAtBetween).to.be.a('string');
                expect(data.data.filterFields.registeredAtBetween).to.be("1514978764288-1514978999999");
                {
                  let dataCtr = data.data.filterFields.adComputerQueryContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.data.filterFields.hasLocalConfiguration).to.be.a('boolean');
                expect(data.data.filterFields.hasLocalConfiguration).to.be(false);
                {
                  let dataCtr = data.data.filterFields.adUserQueryContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.data.filterFields.query).to.be.a('string');
                expect(data.data.filterFields.query).to.be("Linux");
                {
                  let dataCtr = data.data.filterFields.cloudProvider;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.cloudImageContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.appsVulnerabilityStatusesNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("patch_required");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.scanStatusesNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("none");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.adComputerMemberContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.rangerVersions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("2.5.1.1320");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.machineTypes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("unknown");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.locationIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("225494730938493804");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.locationIdsNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("225494730938493804");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.missingPermissionsNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("user_action_needed_fda");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.threatRebootRequired;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('boolean');
                    expect(data).to.be(false);
                  }
                }
                {
                  let dataCtr = data.data.filterFields.serialNumberContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.data.filterFields.lastSuccessfulScanDateBetween).to.be.a('string');
                expect(data.data.filterFields.lastSuccessfulScanDateBetween).to.be("1514978764288-1514978999999");
                expect(data.data.filterFields.lastActiveDateBetween).to.be.a('string');
                expect(data.data.filterFields.lastActiveDateBetween).to.be("1514978764288-1514978999999");
                {
                  let dataCtr = data.data.filterFields.networkQuarantineEnabled;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('boolean');
                    expect(data).to.be(false);
                  }
                }
                {
                  let dataCtr = data.data.filterFields.cloudTagsContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.data.filterFields.encryptedApplications).to.be.a('boolean');
                expect(data.data.filterFields.encryptedApplications).to.be(false);
                {
                  let dataCtr = data.data.filterFields.isUninstalled;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('boolean');
                    expect(data).to.be(false);
                  }
                }
                {
                  let dataCtr = data.data.filterFields.networkInterfacePhysicalContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.operationalStates;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.adUserNameContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.osTypesNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("windows");
                  }
                }
                expect(data.data.filterFields.isActive).to.be.a('boolean');
                expect(data.data.filterFields.isActive).to.be(false);
                {
                  let dataCtr = data.data.filterFields.awsSubnetIdsContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.osVersionContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.externalIpContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.awsSecurityGroupsContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.k8sNodeNameContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.data.filterFields.hasTags).to.be.a('boolean');
                expect(data.data.filterFields.hasTags).to.be(false);
                {
                  let dataCtr = data.data.filterFields.agentNamespaceContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.networkInterfaceInetContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.computerNameContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.cloudNetworkContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.remoteProfilingStates;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.filteredGroupIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("225494730938493804");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.agentPodNameContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.userActionsNeededNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("none");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.rangerStatuses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("NotApplicable");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.externalIdContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.consoleMigrationStatusesNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("N/A");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.cpuIdContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.data.filterFields.coreCountBetween).to.be.a('string');
                expect(data.data.filterFields.coreCountBetween).to.be("2-8");
                expect(data.data.filterFields.isUpToDate).to.be.a('boolean');
                expect(data.data.filterFields.isUpToDate).to.be(false);
                expect(data.data.filterFields.rangerStatus).to.be.a('string');
                expect(data.data.filterFields.rangerStatus).to.be("NotApplicable");
                expect(data.data.filterFields.totalMemoryBetween).to.be.a('string');
                expect(data.data.filterFields.totalMemoryBetween).to.be("4-8");
                {
                  let dataCtr = data.data.filterFields.domains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.awsRoleContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.lastLoggedInUserNameContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.cloudAccountContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.clusterNameContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.scanStatuses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("none");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.liveUpdateIdContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.osTypes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("windows");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.appsVulnerabilityStatuses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("patch_required");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.remoteProfilingStatesNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.filteredSiteIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("225494730938493804");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.userActionsNeeded;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("none");
                  }
                }
                expect(data.data.filterFields.osArch).to.be.a('string');
                expect(data.data.filterFields.osArch).to.be("32 bit");
                {
                  let dataCtr = data.data.filterFields.adComputerNameContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.cloudInstanceIdContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.agentVersions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("2.5.1.1320");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.adQueryContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.locationEnabled;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('boolean');
                    expect(data).to.be(false);
                  }
                }
                {
                  let dataCtr = data.data.filterFields.cloudProviderNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.data.filterFields.isPendingUninstall).to.be.a('boolean');
                expect(data.data.filterFields.isPendingUninstall).to.be(false);
                {
                  let dataCtr = data.data.filterFields.k8sNodeLabelsContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.data.filterFields.tagsData).to.be.a('string');
                expect(data.data.filterFields.tagsData).to.be("{"key1": ["value1_1", "value1_2"], "key2__nin": ["value2"]}");
                {
                  let dataCtr = data.data.filterFields.firewallEnabled;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('boolean');
                    expect(data).to.be(false);
                  }
                }
                {
                  let dataCtr = data.data.filterFields.domainsNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.gcpServiceAccountContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.cloudLocationContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.networkStatuses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("connected");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.k8sTypeContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.networkInterfaceGatewayMacAddressContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.data.filterFields.cpuCountBetween).to.be.a('string');
                expect(data.data.filterFields.cpuCountBetween).to.be("2-8");
                {
                  let dataCtr = data.data.filterFields.operationalStatesNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.k8sVersionContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.installerTypes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be(".msi");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.adUserMemberContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.data.filterFields.infected).to.be.a('boolean');
                expect(data.data.filterFields.infected).to.be(false);
                {
                  let dataCtr = data.data.filterFields.missingPermissions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("user_action_needed_fda");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.installerTypesNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be(".msi");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.machineTypesNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("unknown");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.isDecommissioned;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('boolean');
                    expect(data).to.be(false);
                  }
                }
                {
                  let dataCtr = data.data.filterFields.rangerStatusesNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("NotApplicable");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.cloudInstanceSizeContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.rangerVersionsNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("2.5.1.1320");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.consoleMigrationStatuses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("N/A");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.azureResourceGroupContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.uuidContains;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.data.filterFields.networkStatusesNin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("connected");
                  }
                }
                expect(data.data.filterFields.adQuery).to.be.a('string');
                expect(data.data.filterFields.adQuery).to.be("CN=Managers,DC=sentinelone,DC=com");
              expect(data.data.scopeLevel).to.be.a('string');
              expect(data.data.scopeLevel).to.be("site");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
