/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.UpdatesApi();
  });

  describe('(package)', function() {
    describe('UpdatesApi', function() {
      describe('webApiUpdateAgentDownloadpackageIdGet', function() {
        it('should call webApiUpdateAgentDownloadpackageIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUpdateAgentDownloadpackageIdGet call
          /*
          var packageId = "packageId_example";

          instance.webApiUpdateAgentDownloadpackageIdGet(packageId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUpdateAgentDownloadsiteIdpackageIdGet', function() {
        it('should call webApiUpdateAgentDownloadsiteIdpackageIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUpdateAgentDownloadsiteIdpackageIdGet call
          /*
          var packageId = "packageId_example";
          var siteId = "siteId_example";

          instance.webApiUpdateAgentDownloadsiteIdpackageIdGet(packageId, siteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUpdateAgentLatestPackagesGet', function() {
        it('should call webApiUpdateAgentLatestPackagesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUpdateAgentLatestPackagesGet call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = ["accountIds_example"];
          opts.packageType = "packageType_example";
          opts.siteIds = ["siteIds_example"];

          instance.webApiUpdateAgentLatestPackagesGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200Data);
                  expect(data.data.osTypes).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200DataOsTypes);
                    {
                  let dataCtr = data.data.osTypes.windows;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200DataOsTypesWindows);
                    expect(data.fileName).to.be.a('string');
                    expect(data.fileName).to.be("S1Agent_windows_2_5_1_1320");
                    expect(data.updatedAt).to.be.a(Date);
                    expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                    expect(data.platformType).to.be.a('string');
                    expect(data.platformType).to.be("sdk");
                    expect(data.majorVersion).to.be.a('string');
                    expect(data.majorVersion).to.be("major version");
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("225494730938493804");
                    {
                      let dataCtr = data.sites;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200DataOsTypesSites);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("SentinelOne");
                        expect(data.id).to.be.a('string');
                        expect(data.id).to.be("225494730938493804");
        
                              }
                    }
                    expect(data.fileExtension).to.be.a('string');
                    expect(data.fileExtension).to.be(".msi");
                    expect(data.fileSize).to.be.a('number');
                    expect(data.fileSize).to.be(1839271);
                    expect(data.sha1).to.be.a('string');
                    expect(data.sha1).to.be("2fd4e1c67a2d28fced849ee1bb76e7391b93eb12");
                    expect(data.osArch).to.be.a('string');
                    expect(data.osArch).to.be("32 bit");
                    expect(data.version).to.be.a('string');
                    expect(data.version).to.be("2.5.1.1320");
                    {
                      let dataCtr = data.accounts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200DataOsTypesSites);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("SentinelOne");
                        expect(data.id).to.be.a('string');
                        expect(data.id).to.be("225494730938493804");
        
                              }
                    }
                    expect(data.packageType).to.be.a('string');
                    expect(data.packageType).to.be("Agent");
                    expect(data.minorVersion).to.be.a('string');
                    expect(data.minorVersion).to.be("minor version");
                    expect(data.createdAt).to.be.a(Date);
                    expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                    expect(data.osType).to.be.a('string');
                    expect(data.osType).to.be("sdk");
                    expect(data.supportedOsVersions).to.be.a('string');
                    expect(data.supportedOsVersions).to.be("");
                    expect(data.status).to.be.a('string');
                    expect(data.status).to.be("ga");
                    expect(data.scopeLevel).to.be.a('string');
                    expect(data.scopeLevel).to.be("site");
                    expect(data.link).to.be.a(Object);
                    expect(data.link).to.be(https://mymgmt.sentinelone.net/web/api/v2.0/update/agent/download/225494730938493804/225494730938493214);
                    expect(data.rangerVersion).to.be.a('string');
                    expect(data.rangerVersion).to.be("2.5.1.1320");
    
                          }
                }
                {
                  let dataCtr = data.data.osTypes.macos;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200DataOsTypesWindows);
                    expect(data.fileName).to.be.a('string');
                    expect(data.fileName).to.be("S1Agent_windows_2_5_1_1320");
                    expect(data.updatedAt).to.be.a(Date);
                    expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                    expect(data.platformType).to.be.a('string');
                    expect(data.platformType).to.be("sdk");
                    expect(data.majorVersion).to.be.a('string');
                    expect(data.majorVersion).to.be("major version");
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("225494730938493804");
                    {
                      let dataCtr = data.sites;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200DataOsTypesSites);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("SentinelOne");
                        expect(data.id).to.be.a('string');
                        expect(data.id).to.be("225494730938493804");
        
                              }
                    }
                    expect(data.fileExtension).to.be.a('string');
                    expect(data.fileExtension).to.be(".msi");
                    expect(data.fileSize).to.be.a('number');
                    expect(data.fileSize).to.be(1839271);
                    expect(data.sha1).to.be.a('string');
                    expect(data.sha1).to.be("2fd4e1c67a2d28fced849ee1bb76e7391b93eb12");
                    expect(data.osArch).to.be.a('string');
                    expect(data.osArch).to.be("32 bit");
                    expect(data.version).to.be.a('string');
                    expect(data.version).to.be("2.5.1.1320");
                    {
                      let dataCtr = data.accounts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200DataOsTypesSites);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("SentinelOne");
                        expect(data.id).to.be.a('string');
                        expect(data.id).to.be("225494730938493804");
        
                              }
                    }
                    expect(data.packageType).to.be.a('string');
                    expect(data.packageType).to.be("Agent");
                    expect(data.minorVersion).to.be.a('string');
                    expect(data.minorVersion).to.be("minor version");
                    expect(data.createdAt).to.be.a(Date);
                    expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                    expect(data.osType).to.be.a('string');
                    expect(data.osType).to.be("sdk");
                    expect(data.supportedOsVersions).to.be.a('string');
                    expect(data.supportedOsVersions).to.be("");
                    expect(data.status).to.be.a('string');
                    expect(data.status).to.be("ga");
                    expect(data.scopeLevel).to.be.a('string');
                    expect(data.scopeLevel).to.be("site");
                    expect(data.link).to.be.a(Object);
                    expect(data.link).to.be(https://mymgmt.sentinelone.net/web/api/v2.0/update/agent/download/225494730938493804/225494730938493214);
                    expect(data.rangerVersion).to.be.a('string');
                    expect(data.rangerVersion).to.be("2.5.1.1320");
    
                          }
                }
                {
                  let dataCtr = data.data.osTypes.linux;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200DataOsTypesWindows);
                    expect(data.fileName).to.be.a('string');
                    expect(data.fileName).to.be("S1Agent_windows_2_5_1_1320");
                    expect(data.updatedAt).to.be.a(Date);
                    expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                    expect(data.platformType).to.be.a('string');
                    expect(data.platformType).to.be("sdk");
                    expect(data.majorVersion).to.be.a('string');
                    expect(data.majorVersion).to.be("major version");
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("225494730938493804");
                    {
                      let dataCtr = data.sites;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200DataOsTypesSites);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("SentinelOne");
                        expect(data.id).to.be.a('string');
                        expect(data.id).to.be("225494730938493804");
        
                              }
                    }
                    expect(data.fileExtension).to.be.a('string');
                    expect(data.fileExtension).to.be(".msi");
                    expect(data.fileSize).to.be.a('number');
                    expect(data.fileSize).to.be(1839271);
                    expect(data.sha1).to.be.a('string');
                    expect(data.sha1).to.be("2fd4e1c67a2d28fced849ee1bb76e7391b93eb12");
                    expect(data.osArch).to.be.a('string');
                    expect(data.osArch).to.be("32 bit");
                    expect(data.version).to.be.a('string');
                    expect(data.version).to.be("2.5.1.1320");
                    {
                      let dataCtr = data.accounts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200DataOsTypesSites);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("SentinelOne");
                        expect(data.id).to.be.a('string');
                        expect(data.id).to.be("225494730938493804");
        
                              }
                    }
                    expect(data.packageType).to.be.a('string');
                    expect(data.packageType).to.be("Agent");
                    expect(data.minorVersion).to.be.a('string');
                    expect(data.minorVersion).to.be("minor version");
                    expect(data.createdAt).to.be.a(Date);
                    expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                    expect(data.osType).to.be.a('string');
                    expect(data.osType).to.be("sdk");
                    expect(data.supportedOsVersions).to.be.a('string');
                    expect(data.supportedOsVersions).to.be("");
                    expect(data.status).to.be.a('string');
                    expect(data.status).to.be("ga");
                    expect(data.scopeLevel).to.be.a('string');
                    expect(data.scopeLevel).to.be("site");
                    expect(data.link).to.be.a(Object);
                    expect(data.link).to.be(https://mymgmt.sentinelone.net/web/api/v2.0/update/agent/download/225494730938493804/225494730938493214);
                    expect(data.rangerVersion).to.be.a('string');
                    expect(data.rangerVersion).to.be("2.5.1.1320");
    
                          }
                }
                {
                  let dataCtr = data.data.osTypes.windowsLegacy;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200DataOsTypesWindows);
                    expect(data.fileName).to.be.a('string');
                    expect(data.fileName).to.be("S1Agent_windows_2_5_1_1320");
                    expect(data.updatedAt).to.be.a(Date);
                    expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                    expect(data.platformType).to.be.a('string');
                    expect(data.platformType).to.be("sdk");
                    expect(data.majorVersion).to.be.a('string');
                    expect(data.majorVersion).to.be("major version");
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("225494730938493804");
                    {
                      let dataCtr = data.sites;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200DataOsTypesSites);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("SentinelOne");
                        expect(data.id).to.be.a('string');
                        expect(data.id).to.be("225494730938493804");
        
                              }
                    }
                    expect(data.fileExtension).to.be.a('string');
                    expect(data.fileExtension).to.be(".msi");
                    expect(data.fileSize).to.be.a('number');
                    expect(data.fileSize).to.be(1839271);
                    expect(data.sha1).to.be.a('string');
                    expect(data.sha1).to.be("2fd4e1c67a2d28fced849ee1bb76e7391b93eb12");
                    expect(data.osArch).to.be.a('string');
                    expect(data.osArch).to.be("32 bit");
                    expect(data.version).to.be.a('string');
                    expect(data.version).to.be("2.5.1.1320");
                    {
                      let dataCtr = data.accounts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200DataOsTypesSites);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("SentinelOne");
                        expect(data.id).to.be.a('string');
                        expect(data.id).to.be("225494730938493804");
        
                              }
                    }
                    expect(data.packageType).to.be.a('string');
                    expect(data.packageType).to.be("Agent");
                    expect(data.minorVersion).to.be.a('string');
                    expect(data.minorVersion).to.be("minor version");
                    expect(data.createdAt).to.be.a(Date);
                    expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                    expect(data.osType).to.be.a('string');
                    expect(data.osType).to.be("sdk");
                    expect(data.supportedOsVersions).to.be.a('string');
                    expect(data.supportedOsVersions).to.be("");
                    expect(data.status).to.be.a('string');
                    expect(data.status).to.be("ga");
                    expect(data.scopeLevel).to.be.a('string');
                    expect(data.scopeLevel).to.be("site");
                    expect(data.link).to.be.a(Object);
                    expect(data.link).to.be(https://mymgmt.sentinelone.net/web/api/v2.0/update/agent/download/225494730938493804/225494730938493214);
                    expect(data.rangerVersion).to.be.a('string');
                    expect(data.rangerVersion).to.be("2.5.1.1320");
    
                          }
                }
              expect(data.data.registrationToken).to.be.a('string');
              expect(data.data.registrationToken).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUpdateAgentPackagesDelete', function() {
        it('should call webApiUpdateAgentPackagesDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUpdateAgentPackagesDelete call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.PackagesSchemasDeletePackagesSchema();
          opts.body.data = new S1MgmtApi.PackagesSchemasDeletePackagesSchemaData();
          opts.body.data.ids = ["225494730938493804","225494730938493915"];

          instance.webApiUpdateAgentPackagesDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.AffectedResultsSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUpdateAgentPackagesGet', function() {
        it('should call webApiUpdateAgentPackagesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUpdateAgentPackagesGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "null";
          opts.fileNameContains = ["fileNameContains_example"];
          opts.majorVersions = ["majorVersions_example"];
          opts.platformType = "platformType_example";
          opts.sha1Contains = ["sha1Contains_example"];
          opts.ids = ["ids_example"];
          opts.query = "query_example";
          opts.countOnly = false;
          opts.limit = 10;
          opts.osTypes = ["osTypes_example"];
          opts.rangerVersion = "rangerVersion_example";
          opts.skip = 56;
          opts.rangerVersionContains = ["rangerVersionContains_example"];
          opts.skipCount = null;
          opts.sortOrder = "null";
          opts.fileExtension = "fileExtension_example";
          opts.versionStrContains = ["versionStrContains_example"];
          opts.siteNameContains = ["siteNameContains_example"];
          opts.sha1 = "sha1_example";
          opts.status = ["status_example"];
          opts.minorVersions = ["minorVersions_example"];
          opts.fileSizeContains = ["fileSizeContains_example"];
          opts.version = "version_example";
          opts.platformTypes = ["platformTypes_example"];
          opts.accountNameContains = ["accountNameContains_example"];
          opts.sortBy = "null";
          opts.packageTypes = ["packageTypes_example"];
          opts.packageType = "packageType_example";
          opts.minorVersion = "minorVersion_example";
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.osRevision = "osRevision_example";
          opts.fileExtensions = ["fileExtensions_example"];
          opts.osArches = ["osArches_example"];

          instance.webApiUpdateAgentPackagesGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.PackagesSchemasVersionUploadListSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200DataOsTypesWindows);
                expect(data.fileName).to.be.a('string');
                expect(data.fileName).to.be("S1Agent_windows_2_5_1_1320");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.platformType).to.be.a('string');
                expect(data.platformType).to.be("sdk");
                expect(data.majorVersion).to.be.a('string');
                expect(data.majorVersion).to.be("major version");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                {
                  let dataCtr = data.sites;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200DataOsTypesSites);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("SentinelOne");
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("225494730938493804");
    
                          }
                }
                expect(data.fileExtension).to.be.a('string');
                expect(data.fileExtension).to.be(".msi");
                expect(data.fileSize).to.be.a('number');
                expect(data.fileSize).to.be(1839271);
                expect(data.sha1).to.be.a('string');
                expect(data.sha1).to.be("2fd4e1c67a2d28fced849ee1bb76e7391b93eb12");
                expect(data.osArch).to.be.a('string');
                expect(data.osArch).to.be("32 bit");
                expect(data.version).to.be.a('string');
                expect(data.version).to.be("2.5.1.1320");
                {
                  let dataCtr = data.accounts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200DataOsTypesSites);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("SentinelOne");
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("225494730938493804");
    
                          }
                }
                expect(data.packageType).to.be.a('string');
                expect(data.packageType).to.be("Agent");
                expect(data.minorVersion).to.be.a('string');
                expect(data.minorVersion).to.be("minor version");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.osType).to.be.a('string');
                expect(data.osType).to.be("sdk");
                expect(data.supportedOsVersions).to.be.a('string');
                expect(data.supportedOsVersions).to.be("");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("ga");
                expect(data.scopeLevel).to.be.a('string');
                expect(data.scopeLevel).to.be("site");
                expect(data.link).to.be.a(Object);
                expect(data.link).to.be(https://mymgmt.sentinelone.net/web/api/v2.0/update/agent/download/225494730938493804/225494730938493214);
                expect(data.rangerVersion).to.be.a('string');
                expect(data.rangerVersion).to.be("2.5.1.1320");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUpdateAgentPackagespackageIdPut', function() {
        it('should call webApiUpdateAgentPackagespackageIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUpdateAgentPackagespackageIdPut call and complete the assertions
          /*
          var packageId = "packageId_example";
          var opts = {};
          opts.body = new S1MgmtApi.PackagesSchemasPutPackageSchema();
          opts.body.data = new S1MgmtApi.PackagesSchemasPutPackageSchemaData();
          opts.body.data.osArch = "32 bit";
          opts.body.data.minorVersion = "minor version";
          opts.body.data.version = "2.5.1.1320";
          opts.body.data.accountIds = ["225494730938493804","225494730938493915"];
          opts.body.data.siteIds = ["225494730938493804","225494730938493915"];
          opts.body.data.supportedOsVersions = "";
          opts.body.data.status = "ga";
          opts.body.data.scopeLevel = "site";
          opts.body.data.rangerVersion = "2.5.1.1320";

          instance.webApiUpdateAgentPackagespackageIdPut(packageId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.PackagesSchemasVersionUploadSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.PackagesSchemasVersionUploadSchema200Data);
                  expect(data.data.fileName).to.be.a('string');
              expect(data.data.fileName).to.be("S1Agent_windows_2_5_1_1320");
              expect(data.data.updatedAt).to.be.a(Date);
              expect(data.data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.platformType).to.be.a('string');
              expect(data.data.platformType).to.be("sdk");
              expect(data.data.id).to.be.a('string');
              expect(data.data.id).to.be("225494730938493804");
              {
                let dataCtr = data.data.sites;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200DataOsTypesSites);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("SentinelOne");
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("225494730938493804");
  
                        }
              }
              expect(data.data.fileExtension).to.be.a('string');
              expect(data.data.fileExtension).to.be(".msi");
              expect(data.data.fileSize).to.be.a('number');
              expect(data.data.fileSize).to.be(1839271);
              expect(data.data.sha1).to.be.a('string');
              expect(data.data.sha1).to.be("2fd4e1c67a2d28fced849ee1bb76e7391b93eb12");
              expect(data.data.osArch).to.be.a('string');
              expect(data.data.osArch).to.be("32 bit");
              expect(data.data.version).to.be.a('string');
              expect(data.data.version).to.be("2.5.1.1320");
              {
                let dataCtr = data.data.accounts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200DataOsTypesSites);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("SentinelOne");
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("225494730938493804");
  
                        }
              }
              expect(data.data.packageType).to.be.a('string');
              expect(data.data.packageType).to.be("Agent");
              expect(data.data.minorVersion).to.be.a('string');
              expect(data.data.minorVersion).to.be("minor version");
              expect(data.data.createdAt).to.be.a(Date);
              expect(data.data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
              expect(data.data.osType).to.be.a('string');
              expect(data.data.osType).to.be("sdk");
              expect(data.data.supportedOsVersions).to.be.a('string');
              expect(data.data.supportedOsVersions).to.be("");
              expect(data.data.status).to.be.a('string');
              expect(data.data.status).to.be("ga");
              expect(data.data.scopeLevel).to.be.a('string');
              expect(data.data.scopeLevel).to.be("site");
              expect(data.data.link).to.be.a(Object);
              expect(data.data.link).to.be(https://mymgmt.sentinelone.net/web/api/v2.1/update/agent/download/225494730938493804/225494730938493214);
              expect(data.data.rangerVersion).to.be.a('string');
              expect(data.data.rangerVersion).to.be("2.5.1.1320");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUploadAgentSoftwarePost', function() {
        it('should call webApiUploadAgentSoftwarePost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUploadAgentSoftwarePost call and complete the assertions
          /*
          var status = "status_example";
          var file = "/path/to/file.txt";
          var opts = {};
          opts.minorVersion = "minorVersion_example";
          opts.version = "null";
          opts.accountIds = ["accountIds_example"];
          opts.siteIds = ["siteIds_example"];
          opts.osType = "null";
          opts.platformType = "null";
          opts.scopeLevel = "global";

          instance.webApiUploadAgentSoftwarePost(status, file, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.PackagesSchemasVersionUploadSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(S1MgmtApi.PackagesSchemasVersionUploadSchemaMany200Data);
                expect(data.fileName).to.be.a('string');
                expect(data.fileName).to.be("S1Agent_windows_2_5_1_1320");
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.platformType).to.be.a('string');
                expect(data.platformType).to.be("sdk");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("225494730938493804");
                {
                  let dataCtr = data.sites;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200DataOsTypesSites);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("SentinelOne");
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("225494730938493804");
    
                          }
                }
                expect(data.fileExtension).to.be.a('string');
                expect(data.fileExtension).to.be(".msi");
                expect(data.fileSize).to.be.a('number');
                expect(data.fileSize).to.be(1839271);
                expect(data.sha1).to.be.a('string');
                expect(data.sha1).to.be("2fd4e1c67a2d28fced849ee1bb76e7391b93eb12");
                expect(data.osArch).to.be.a('string');
                expect(data.osArch).to.be("32 bit");
                expect(data.version).to.be.a('string');
                expect(data.version).to.be("2.5.1.1320");
                {
                  let dataCtr = data.accounts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(S1MgmtApi.PackagesSchemasLatestPackagesSchema200DataOsTypesSites);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("SentinelOne");
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("225494730938493804");
    
                          }
                }
                expect(data.packageType).to.be.a('string');
                expect(data.packageType).to.be("Agent");
                expect(data.minorVersion).to.be.a('string');
                expect(data.minorVersion).to.be("minor version");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(2018-02-27T04:49:26.257525Z);
                expect(data.osType).to.be.a('string');
                expect(data.osType).to.be("sdk");
                expect(data.supportedOsVersions).to.be.a('string');
                expect(data.supportedOsVersions).to.be("");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("ga");
                expect(data.scopeLevel).to.be.a('string');
                expect(data.scopeLevel).to.be("site");
                expect(data.link).to.be.a(Object);
                expect(data.link).to.be(https://mymgmt.sentinelone.net/web/api/v2.1/update/agent/download/225494730938493804/225494730938493214);
                expect(data.rangerVersion).to.be.a('string');
                expect(data.rangerVersion).to.be("2.5.1.1320");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUploadSoftwareDeployPost', function() {
        it('should call webApiUploadSoftwareDeployPost successfully', function(done) {
          // TODO: uncomment webApiUploadSoftwareDeployPost call and complete the assertions
          /*

          instance.webApiUploadSoftwareDeployPost(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUploadSoftwarePost', function() {
        it('should call webApiUploadSoftwarePost successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUploadSoftwarePost call and complete the assertions
          /*
          var file = "/path/to/file.txt";

          instance.webApiUploadSoftwarePost(file, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.SuccessResponseSchema200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.SuccessResponseSchema200Data);
                  expect(data.data.success).to.be.a('boolean');
              expect(data.data.success).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
