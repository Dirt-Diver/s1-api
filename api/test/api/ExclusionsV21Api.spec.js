/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new S1MgmtApi.ExclusionsV21Api();
  });

  describe('(package)', function() {
    describe('ExclusionsV21Api', function() {
      describe('webApiUnifiedExclusionsDelete', function() {
        it('should call webApiUnifiedExclusionsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUnifiedExclusionsDelete call and complete the assertions
          /*
          var opts = {};
          opts.body = new S1MgmtApi.ExclusionsDeleteSchemaUnifiedExclusionSchemaDeleteRequest();
          opts.body.data = new S1MgmtApi.ExclusionsDeleteSchemaUnifiedExclusionSchemaDeleteRequestData();
          opts.body.data.exclusions = [new S1MgmtApi.ExclusionsDeleteSchemaUnifiedExclusionSchemaDeleteRequestDataExclusions()];
          opts.body.data.exclusions[0].exclusionType = "EDR";
          opts.body.data.exclusions[0].id = "225494730938493804";

          instance.webApiUnifiedExclusionsDelete(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ExclusionsDeleteSchemaUnifiedExclusionSchemaDeleteResponse200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.data).to.be.a(S1MgmtApi.AffectedResultsSchema200Data);
                  expect(data.data.affected).to.be.a('number');
              expect(data.data.affected).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webApiUnifiedExclusionsGet', function() {
        it('should call webApiUnifiedExclusionsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for webApiUnifiedExclusionsGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "null";
          opts.createdAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.includeChildren = true;
          opts.updatedAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.scopePathContains = ["scopePathContains_example"];
          opts.ids = ["ids_example"];
          opts.countOnly = false;
          opts.createdAtLt = new Date("2013-10-20T19:20:30+01:00");
          opts.valueContains = ["valueContains_example"];
          opts.limit = 10;
          opts.updatedAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.source = ["source_example"];
          opts.osTypes = ["osTypes_example"];
          opts.skip = 56;
          opts.notRecommended = ["notRecommended_example"];
          opts.engines = ["engines_example"];
          opts.skipCount = null;
          opts.sortOrder = "null";
          opts.updatedAtGt = new Date("2013-10-20T19:20:30+01:00");
          opts.pathExclusionTypes = ["pathExclusionTypes_example"];
          opts.imported = true;
          opts.createdAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.exclusionNameContains = ["exclusionNameContains_example"];
          opts.conditions = ["conditions_example"];
          opts.includeParents = true;
          opts.userContains = ["userContains_example"];
          opts.sortBy = "null";
          opts.updatedAtLte = new Date("2013-10-20T19:20:30+01:00");
          opts.tenant = true;
          opts.createdAtBetween = "createdAtBetween_example";
          opts.groupIds = ["groupIds_example"];
          opts.interactionLevel = ["interactionLevel_example"];
          opts.threatType = ["threatType_example"];
          opts.updatedAtBetween = "updatedAtBetween_example";
          opts.createdAtGte = new Date("2013-10-20T19:20:30+01:00");
          opts.siteIds = ["siteIds_example"];
          opts.accountIds = ["accountIds_example"];
          opts.descriptionContains = ["descriptionContains_example"];
          opts.userIds = ["userIds_example"];
          opts.applicationNameContains = ["applicationNameContains_example"];
          opts.modeType = "modeType_example";

          instance.webApiUnifiedExclusionsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(S1MgmtApi.ExclusionsGetSchemaUnifiedExclusionSchemaMany200);
            {
              let dataCtr = data.errors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.pagination).to.be.a(S1MgmtApi.ActivitiesActivityViewSchemaMany200Pagination);
                  expect(data.pagination.totalItems).to.be.a('number');
              expect(data.pagination.totalItems).to.be(580);
              expect(data.pagination.nextCursor).to.be.a('string');
              expect(data.pagination.nextCursor).to.be("YWdlbnRfaWQ6NTgwMjkzODE=");
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
