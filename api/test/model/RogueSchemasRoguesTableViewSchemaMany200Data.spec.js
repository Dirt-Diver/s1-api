/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('RogueSchemasRoguesTableViewSchemaMany200Data', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.RogueSchemasRoguesTableViewSchemaMany200Data();
      });

      it('should create an instance of RogueSchemasRoguesTableViewSchemaMany200Data', function() {
        // TODO: update the code to test RogueSchemasRoguesTableViewSchemaMany200Data
        expect(instance).to.be.a(S1MgmtApi.RogueSchemasRoguesTableViewSchemaMany200Data);
      });

      it('should have the property manufacturer (base name: "manufacturer")', function() {
        // TODO: update the code to test the property manufacturer
        expect(instance).to.have.property('manufacturer');
        // expect(instance.manufacturer).to.be(expectedValueLiteral);
      });

      it('should have the property localIp (base name: "localIp")', function() {
        // TODO: update the code to test the property localIp
        expect(instance).to.have.property('localIp');
        // expect(instance.localIp).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property osType (base name: "osType")', function() {
        // TODO: update the code to test the property osType
        expect(instance).to.have.property('osType');
        // expect(instance.osType).to.be(expectedValueLiteral);
      });

      it('should have the property externalIp (base name: "externalIp")', function() {
        // TODO: update the code to test the property externalIp
        expect(instance).to.have.property('externalIp');
        // expect(instance.externalIp).to.be(expectedValueLiteral);
      });

      it('should have the property deviceFunction (base name: "deviceFunction")', function() {
        // TODO: update the code to test the property deviceFunction
        expect(instance).to.have.property('deviceFunction');
        // expect(instance.deviceFunction).to.be(expectedValueLiteral);
      });

      it('should have the property macAddress (base name: "macAddress")', function() {
        // TODO: update the code to test the property macAddress
        expect(instance).to.have.property('macAddress');
        // expect(instance.macAddress).to.be(expectedValueLiteral);
      });

      it('should have the property deviceType (base name: "deviceType")', function() {
        // TODO: update the code to test the property deviceType
        expect(instance).to.have.property('deviceType');
        // expect(instance.deviceType).to.be(expectedValueLiteral);
      });

      it('should have the property osVersion (base name: "osVersion")', function() {
        // TODO: update the code to test the property osVersion
        expect(instance).to.have.property('osVersion');
        // expect(instance.osVersion).to.be(expectedValueLiteral);
      });

      it('should have the property lastSeen (base name: "lastSeen")', function() {
        // TODO: update the code to test the property lastSeen
        expect(instance).to.have.property('lastSeen');
        // expect(instance.lastSeen).to.be(expectedValueLiteral);
      });

      it('should have the property firstSeen (base name: "firstSeen")', function() {
        // TODO: update the code to test the property firstSeen
        expect(instance).to.have.property('firstSeen');
        // expect(instance.firstSeen).to.be(expectedValueLiteral);
      });

      it('should have the property osName (base name: "osName")', function() {
        // TODO: update the code to test the property osName
        expect(instance).to.have.property('osName');
        // expect(instance.osName).to.be(expectedValueLiteral);
      });

      it('should have the property hostnames (base name: "hostnames")', function() {
        // TODO: update the code to test the property hostnames
        expect(instance).to.have.property('hostnames');
        // expect(instance.hostnames).to.be(expectedValueLiteral);
      });

    });
  });

}));
