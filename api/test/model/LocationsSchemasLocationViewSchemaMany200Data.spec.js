/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('LocationsSchemasLocationViewSchemaMany200Data', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.LocationsSchemasLocationViewSchemaMany200Data();
      });

      it('should create an instance of LocationsSchemasLocationViewSchemaMany200Data', function() {
        // TODO: update the code to test LocationsSchemasLocationViewSchemaMany200Data
        expect(instance).to.be.a(S1MgmtApi.LocationsSchemasLocationViewSchemaMany200Data);
      });

      it('should have the property operator (base name: "operator")', function() {
        // TODO: update the code to test the property operator
        expect(instance).to.have.property('operator');
        // expect(instance.operator).to.be(expectedValueLiteral);
      });

      it('should have the property dnsLookup (base name: "dnsLookup")', function() {
        // TODO: update the code to test the property dnsLookup
        expect(instance).to.have.property('dnsLookup');
        // expect(instance.dnsLookup).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updatedAt")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property scopeId (base name: "scopeId")', function() {
        // TODO: update the code to test the property scopeId
        expect(instance).to.have.property('scopeId');
        // expect(instance.scopeId).to.be(expectedValueLiteral);
      });

      it('should have the property updaterId (base name: "updaterId")', function() {
        // TODO: update the code to test the property updaterId
        expect(instance).to.have.property('updaterId');
        // expect(instance.updaterId).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property creatorId (base name: "creatorId")', function() {
        // TODO: update the code to test the property creatorId
        expect(instance).to.have.property('creatorId');
        // expect(instance.creatorId).to.be(expectedValueLiteral);
      });

      it('should have the property reportingAgents (base name: "reportingAgents")', function() {
        // TODO: update the code to test the property reportingAgents
        expect(instance).to.have.property('reportingAgents');
        // expect(instance.reportingAgents).to.be(expectedValueLiteral);
      });

      it('should have the property updater (base name: "updater")', function() {
        // TODO: update the code to test the property updater
        expect(instance).to.have.property('updater');
        // expect(instance.updater).to.be(expectedValueLiteral);
      });

      it('should have the property scopeName (base name: "scopeName")', function() {
        // TODO: update the code to test the property scopeName
        expect(instance).to.have.property('scopeName');
        // expect(instance.scopeName).to.be(expectedValueLiteral);
      });

      it('should have the property dnsServers (base name: "dnsServers")', function() {
        // TODO: update the code to test the property dnsServers
        expect(instance).to.have.property('dnsServers');
        // expect(instance.dnsServers).to.be(expectedValueLiteral);
      });

      it('should have the property networkInterfaces (base name: "networkInterfaces")', function() {
        // TODO: update the code to test the property networkInterfaces
        expect(instance).to.have.property('networkInterfaces');
        // expect(instance.networkInterfaces).to.be(expectedValueLiteral);
      });

      it('should have the property ipAddresses (base name: "ipAddresses")', function() {
        // TODO: update the code to test the property ipAddresses
        expect(instance).to.have.property('ipAddresses');
        // expect(instance.ipAddresses).to.be(expectedValueLiteral);
      });

      it('should have the property registryKeys (base name: "registryKeys")', function() {
        // TODO: update the code to test the property registryKeys
        expect(instance).to.have.property('registryKeys');
        // expect(instance.registryKeys).to.be(expectedValueLiteral);
      });

      it('should have the property scope (base name: "scope")', function() {
        // TODO: update the code to test the property scope
        expect(instance).to.have.property('scope');
        // expect(instance.scope).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property activeFirewallRules (base name: "activeFirewallRules")', function() {
        // TODO: update the code to test the property activeFirewallRules
        expect(instance).to.have.property('activeFirewallRules');
        // expect(instance.activeFirewallRules).to.be(expectedValueLiteral);
      });

      it('should have the property serverConnectivity (base name: "serverConnectivity")', function() {
        // TODO: update the code to test the property serverConnectivity
        expect(instance).to.have.property('serverConnectivity');
        // expect(instance.serverConnectivity).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property creator (base name: "creator")', function() {
        // TODO: update the code to test the property creator
        expect(instance).to.have.property('creator');
        // expect(instance.creator).to.be(expectedValueLiteral);
      });

      it('should have the property editable (base name: "editable")', function() {
        // TODO: update the code to test the property editable
        expect(instance).to.have.property('editable');
        // expect(instance.editable).to.be(expectedValueLiteral);
      });

      it('should have the property isFallback (base name: "isFallback")', function() {
        // TODO: update the code to test the property isFallback
        expect(instance).to.have.property('isFallback');
        // expect(instance.isFallback).to.be(expectedValueLiteral);
      });

    });
  });

}));
