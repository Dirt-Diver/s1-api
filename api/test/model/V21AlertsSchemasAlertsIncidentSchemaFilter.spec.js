/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V21AlertsSchemasAlertsIncidentSchemaFilter', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.V21AlertsSchemasAlertsIncidentSchemaFilter();
      });

      it('should create an instance of V21AlertsSchemasAlertsIncidentSchemaFilter', function() {
        // TODO: update the code to test V21AlertsSchemasAlertsIncidentSchemaFilter
        expect(instance).to.be.a(S1MgmtApi.V21AlertsSchemasAlertsIncidentSchemaFilter);
      });

      it('should have the property containerImageNameContains (base name: "containerImageName__contains")', function() {
        // TODO: update the code to test the property containerImageNameContains
        expect(instance).to.have.property('containerImageNameContains');
        // expect(instance.containerImageNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property limit (base name: "limit")', function() {
        // TODO: update the code to test the property limit
        expect(instance).to.have.property('limit');
        // expect(instance.limit).to.be(expectedValueLiteral);
      });

      it('should have the property reportedAtGte (base name: "reportedAt__gte")', function() {
        // TODO: update the code to test the property reportedAtGte
        expect(instance).to.have.property('reportedAtGte');
        // expect(instance.reportedAtGte).to.be(expectedValueLiteral);
      });

      it('should have the property tenant (base name: "tenant")', function() {
        // TODO: update the code to test the property tenant
        expect(instance).to.have.property('tenant');
        // expect(instance.tenant).to.be(expectedValueLiteral);
      });

      it('should have the property reportedAtLte (base name: "reportedAt__lte")', function() {
        // TODO: update the code to test the property reportedAtLte
        expect(instance).to.have.property('reportedAtLte');
        // expect(instance.reportedAtLte).to.be(expectedValueLiteral);
      });

      it('should have the property sourceProcessNameContains (base name: "sourceProcessName__contains")', function() {
        // TODO: update the code to test the property sourceProcessNameContains
        expect(instance).to.have.property('sourceProcessNameContains');
        // expect(instance.sourceProcessNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property incidentStatus (base name: "incidentStatus")', function() {
        // TODO: update the code to test the property incidentStatus
        expect(instance).to.have.property('incidentStatus');
        // expect(instance.incidentStatus).to.be(expectedValueLiteral);
      });

      it('should have the property sourceProcessCommandlineContains (base name: "sourceProcessCommandline__contains")', function() {
        // TODO: update the code to test the property sourceProcessCommandlineContains
        expect(instance).to.have.property('sourceProcessCommandlineContains');
        // expect(instance.sourceProcessCommandlineContains).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtLte (base name: "createdAt__lte")', function() {
        // TODO: update the code to test the property createdAtLte
        expect(instance).to.have.property('createdAtLte');
        // expect(instance.createdAtLte).to.be(expectedValueLiteral);
      });

      it('should have the property k8sNamespaceLabelsContains (base name: "k8sNamespaceLabels__contains")', function() {
        // TODO: update the code to test the property k8sNamespaceLabelsContains
        expect(instance).to.have.property('k8sNamespaceLabelsContains');
        // expect(instance.k8sNamespaceLabelsContains).to.be(expectedValueLiteral);
      });

      it('should have the property k8sPodContains (base name: "k8sPod__contains")', function() {
        // TODO: update the code to test the property k8sPodContains
        expect(instance).to.have.property('k8sPodContains');
        // expect(instance.k8sPodContains).to.be(expectedValueLiteral);
      });

      it('should have the property reportedAtGt (base name: "reportedAt__gt")', function() {
        // TODO: update the code to test the property reportedAtGt
        expect(instance).to.have.property('reportedAtGt');
        // expect(instance.reportedAtGt).to.be(expectedValueLiteral);
      });

      it('should have the property sourceProcessFileHashSha1Contains (base name: "sourceProcessFileHashSha1__contains")', function() {
        // TODO: update the code to test the property sourceProcessFileHashSha1Contains
        expect(instance).to.have.property('sourceProcessFileHashSha1Contains');
        // expect(instance.sourceProcessFileHashSha1Contains).to.be(expectedValueLiteral);
      });

      it('should have the property k8sNodeContains (base name: "k8sNode__contains")', function() {
        // TODO: update the code to test the property k8sNodeContains
        expect(instance).to.have.property('k8sNodeContains');
        // expect(instance.k8sNodeContains).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtGt (base name: "createdAt__gt")', function() {
        // TODO: update the code to test the property createdAtGt
        expect(instance).to.have.property('createdAtGt');
        // expect(instance.createdAtGt).to.be(expectedValueLiteral);
      });

      it('should have the property origAgentUuidContains (base name: "origAgentUuid__contains")', function() {
        // TODO: update the code to test the property origAgentUuidContains
        expect(instance).to.have.property('origAgentUuidContains');
        // expect(instance.origAgentUuidContains).to.be(expectedValueLiteral);
      });

      it('should have the property sourceProcessFileHashMd5Contains (base name: "sourceProcessFileHashMd5__contains")', function() {
        // TODO: update the code to test the property sourceProcessFileHashMd5Contains
        expect(instance).to.have.property('sourceProcessFileHashMd5Contains');
        // expect(instance.sourceProcessFileHashMd5Contains).to.be(expectedValueLiteral);
      });

      it('should have the property query (base name: "query")', function() {
        // TODO: update the code to test the property query
        expect(instance).to.have.property('query');
        // expect(instance.query).to.be(expectedValueLiteral);
      });

      it('should have the property osType (base name: "osType")', function() {
        // TODO: update the code to test the property osType
        expect(instance).to.have.property('osType');
        // expect(instance.osType).to.be(expectedValueLiteral);
      });

      it('should have the property containerNameContains (base name: "containerName__contains")', function() {
        // TODO: update the code to test the property containerNameContains
        expect(instance).to.have.property('containerNameContains');
        // expect(instance.containerNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property analystVerdict (base name: "analystVerdict")', function() {
        // TODO: update the code to test the property analystVerdict
        expect(instance).to.have.property('analystVerdict');
        // expect(instance.analystVerdict).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtLt (base name: "createdAt__lt")', function() {
        // TODO: update the code to test the property createdAtLt
        expect(instance).to.have.property('createdAtLt');
        // expect(instance.createdAtLt).to.be(expectedValueLiteral);
      });

      it('should have the property origAgentNameContains (base name: "origAgentName__contains")', function() {
        // TODO: update the code to test the property origAgentNameContains
        expect(instance).to.have.property('origAgentNameContains');
        // expect(instance.origAgentNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property ruleNameContains (base name: "ruleName__contains")', function() {
        // TODO: update the code to test the property ruleNameContains
        expect(instance).to.have.property('ruleNameContains');
        // expect(instance.ruleNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property origAgentOsRevisionContains (base name: "origAgentOsRevision__contains")', function() {
        // TODO: update the code to test the property origAgentOsRevisionContains
        expect(instance).to.have.property('origAgentOsRevisionContains');
        // expect(instance.origAgentOsRevisionContains).to.be(expectedValueLiteral);
      });

      it('should have the property sourceProcessFilePathContains (base name: "sourceProcessFilePath__contains")', function() {
        // TODO: update the code to test the property sourceProcessFilePathContains
        expect(instance).to.have.property('sourceProcessFilePathContains');
        // expect(instance.sourceProcessFilePathContains).to.be(expectedValueLiteral);
      });

      it('should have the property k8sControllerLabelsContains (base name: "k8sControllerLabels__contains")', function() {
        // TODO: update the code to test the property k8sControllerLabelsContains
        expect(instance).to.have.property('k8sControllerLabelsContains');
        // expect(instance.k8sControllerLabelsContains).to.be(expectedValueLiteral);
      });

      it('should have the property siteIds (base name: "siteIds")', function() {
        // TODO: update the code to test the property siteIds
        expect(instance).to.have.property('siteIds');
        // expect(instance.siteIds).to.be(expectedValueLiteral);
      });

      it('should have the property containerLabelsContains (base name: "containerLabels__contains")', function() {
        // TODO: update the code to test the property containerLabelsContains
        expect(instance).to.have.property('containerLabelsContains');
        // expect(instance.containerLabelsContains).to.be(expectedValueLiteral);
      });

      it('should have the property k8sNamespaceNameContains (base name: "k8sNamespaceName__contains")', function() {
        // TODO: update the code to test the property k8sNamespaceNameContains
        expect(instance).to.have.property('k8sNamespaceNameContains');
        // expect(instance.k8sNamespaceNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property groupIds (base name: "groupIds")', function() {
        // TODO: update the code to test the property groupIds
        expect(instance).to.have.property('groupIds');
        // expect(instance.groupIds).to.be(expectedValueLiteral);
      });

      it('should have the property accountIds (base name: "accountIds")', function() {
        // TODO: update the code to test the property accountIds
        expect(instance).to.have.property('accountIds');
        // expect(instance.accountIds).to.be(expectedValueLiteral);
      });

      it('should have the property machineType (base name: "machineType")', function() {
        // TODO: update the code to test the property machineType
        expect(instance).to.have.property('machineType');
        // expect(instance.machineType).to.be(expectedValueLiteral);
      });

      it('should have the property k8sControllerNameContains (base name: "k8sControllerName__contains")', function() {
        // TODO: update the code to test the property k8sControllerNameContains
        expect(instance).to.have.property('k8sControllerNameContains');
        // expect(instance.k8sControllerNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property severity (base name: "severity")', function() {
        // TODO: update the code to test the property severity
        expect(instance).to.have.property('severity');
        // expect(instance.severity).to.be(expectedValueLiteral);
      });

      it('should have the property k8sClusterContains (base name: "k8sCluster__contains")', function() {
        // TODO: update the code to test the property k8sClusterContains
        expect(instance).to.have.property('k8sClusterContains');
        // expect(instance.k8sClusterContains).to.be(expectedValueLiteral);
      });

      it('should have the property ids (base name: "ids")', function() {
        // TODO: update the code to test the property ids
        expect(instance).to.have.property('ids');
        // expect(instance.ids).to.be(expectedValueLiteral);
      });

      it('should have the property scopes (base name: "scopes")', function() {
        // TODO: update the code to test the property scopes
        expect(instance).to.have.property('scopes');
        // expect(instance.scopes).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtGte (base name: "createdAt__gte")', function() {
        // TODO: update the code to test the property createdAtGte
        expect(instance).to.have.property('createdAtGte');
        // expect(instance.createdAtGte).to.be(expectedValueLiteral);
      });

      it('should have the property sourceProcessStorylineContains (base name: "sourceProcessStoryline__contains")', function() {
        // TODO: update the code to test the property sourceProcessStorylineContains
        expect(instance).to.have.property('sourceProcessStorylineContains');
        // expect(instance.sourceProcessStorylineContains).to.be(expectedValueLiteral);
      });

      it('should have the property origAgentVersionContains (base name: "origAgentVersion__contains")', function() {
        // TODO: update the code to test the property origAgentVersionContains
        expect(instance).to.have.property('origAgentVersionContains');
        // expect(instance.origAgentVersionContains).to.be(expectedValueLiteral);
      });

      it('should have the property reportedAtLt (base name: "reportedAt__lt")', function() {
        // TODO: update the code to test the property reportedAtLt
        expect(instance).to.have.property('reportedAtLt');
        // expect(instance.reportedAtLt).to.be(expectedValueLiteral);
      });

      it('should have the property k8sPodLabelsContains (base name: "k8sPodLabels__contains")', function() {
        // TODO: update the code to test the property k8sPodLabelsContains
        expect(instance).to.have.property('k8sPodLabelsContains');
        // expect(instance.k8sPodLabelsContains).to.be(expectedValueLiteral);
      });

      it('should have the property sourceProcessFileHashSha256Contains (base name: "sourceProcessFileHashSha256__contains")', function() {
        // TODO: update the code to test the property sourceProcessFileHashSha256Contains
        expect(instance).to.have.property('sourceProcessFileHashSha256Contains');
        // expect(instance.sourceProcessFileHashSha256Contains).to.be(expectedValueLiteral);
      });

    });
  });

}));
