/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('NotificationsSchemasNotificationsSettingsSchema200DataNotifications', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.NotificationsSchemasNotificationsSettingsSchema200DataNotifications();
      });

      it('should create an instance of NotificationsSchemasNotificationsSettingsSchema200DataNotifications', function() {
        // TODO: update the code to test NotificationsSchemasNotificationsSettingsSchema200DataNotifications
        expect(instance).to.be.a(S1MgmtApi.NotificationsSchemasNotificationsSettingsSchema200DataNotifications);
      });

      it('should have the property malware (base name: "malware")', function() {
        // TODO: update the code to test the property malware
        expect(instance).to.have.property('malware');
        // expect(instance.malware).to.be(expectedValueLiteral);
      });

      it('should have the property operations (base name: "operations")', function() {
        // TODO: update the code to test the property operations
        expect(instance).to.have.property('operations');
        // expect(instance.operations).to.be(expectedValueLiteral);
      });

      it('should have the property firewallcontrol (base name: "firewallcontrol")', function() {
        // TODO: update the code to test the property firewallcontrol
        expect(instance).to.have.property('firewallcontrol');
        // expect(instance.firewallcontrol).to.be(expectedValueLiteral);
      });

      it('should have the property threatmanagement (base name: "threatmanagement")', function() {
        // TODO: update the code to test the property threatmanagement
        expect(instance).to.have.property('threatmanagement');
        // expect(instance.threatmanagement).to.be(expectedValueLiteral);
      });

      it('should have the property devicecontrol (base name: "devicecontrol")', function() {
        // TODO: update the code to test the property devicecontrol
        expect(instance).to.have.property('devicecontrol');
        // expect(instance.devicecontrol).to.be(expectedValueLiteral);
      });

      it('should have the property activedirectory (base name: "activedirectory")', function() {
        // TODO: update the code to test the property activedirectory
        expect(instance).to.have.property('activedirectory');
        // expect(instance.activedirectory).to.be(expectedValueLiteral);
      });

      it('should have the property mitigation (base name: "mitigation")', function() {
        // TODO: update the code to test the property mitigation
        expect(instance).to.have.property('mitigation');
        // expect(instance.mitigation).to.be(expectedValueLiteral);
      });

      it('should have the property locations (base name: "locations")', function() {
        // TODO: update the code to test the property locations
        expect(instance).to.have.property('locations');
        // expect(instance.locations).to.be(expectedValueLiteral);
      });

      it('should have the property whitelistblacklist (base name: "whitelistblacklist")', function() {
        // TODO: update the code to test the property whitelistblacklist
        expect(instance).to.have.property('whitelistblacklist');
        // expect(instance.whitelistblacklist).to.be(expectedValueLiteral);
      });

      it('should have the property endpointtagging (base name: "endpointtagging")', function() {
        // TODO: update the code to test the property endpointtagging
        expect(instance).to.have.property('endpointtagging');
        // expect(instance.endpointtagging).to.be(expectedValueLiteral);
      });

      it('should have the property administrative (base name: "administrative")', function() {
        // TODO: update the code to test the property administrative
        expect(instance).to.have.property('administrative');
        // expect(instance.administrative).to.be(expectedValueLiteral);
      });

      it('should have the property customrules (base name: "customrules")', function() {
        // TODO: update the code to test the property customrules
        expect(instance).to.have.property('customrules');
        // expect(instance.customrules).to.be(expectedValueLiteral);
      });

      it('should have the property remoteshell (base name: "remoteshell")', function() {
        // TODO: update the code to test the property remoteshell
        expect(instance).to.have.property('remoteshell');
        // expect(instance.remoteshell).to.be(expectedValueLiteral);
      });

      it('should have the property ranger (base name: "ranger")', function() {
        // TODO: update the code to test the property ranger
        expect(instance).to.have.property('ranger');
        // expect(instance.ranger).to.be(expectedValueLiteral);
      });

    });
  });

}));
