/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200ExecutionData', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200ExecutionData();
      });

      it('should create an instance of V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200ExecutionData', function() {
        // TODO: update the code to test V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200ExecutionData
        expect(instance).to.be.a(S1MgmtApi.V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200ExecutionData);
      });

      it('should have the property destinationProfileKeyword (base name: "destinationProfileKeyword")', function() {
        // TODO: update the code to test the property destinationProfileKeyword
        expect(instance).to.have.property('destinationProfileKeyword');
        // expect(instance.destinationProfileKeyword).to.be(expectedValueLiteral);
      });

      it('should have the property taskDescription (base name: "taskDescription")', function() {
        // TODO: update the code to test the property taskDescription
        expect(instance).to.have.property('taskDescription');
        // expect(instance.taskDescription).to.be(expectedValueLiteral);
      });

      it('should have the property singularityxdrKeyword (base name: "singularityxdrKeyword")', function() {
        // TODO: update the code to test the property singularityxdrKeyword
        expect(instance).to.have.property('singularityxdrKeyword');
        // expect(instance.singularityxdrKeyword).to.be(expectedValueLiteral);
      });

      it('should have the property outputDirectory (base name: "outputDirectory")', function() {
        // TODO: update the code to test the property outputDirectory
        expect(instance).to.have.property('outputDirectory');
        // expect(instance.outputDirectory).to.be(expectedValueLiteral);
      });

      it('should have the property requiresApproval (base name: "requiresApproval")', function() {
        // TODO: update the code to test the property requiresApproval
        expect(instance).to.have.property('requiresApproval');
        // expect(instance.requiresApproval).to.be(expectedValueLiteral);
      });

      it('should have the property password (base name: "password")', function() {
        // TODO: update the code to test the property password
        expect(instance).to.have.property('password');
        // expect(instance.password).to.be(expectedValueLiteral);
      });

      it('should have the property passwordFromScope (base name: "passwordFromScope")', function() {
        // TODO: update the code to test the property passwordFromScope
        expect(instance).to.have.property('passwordFromScope');
        // expect(instance.passwordFromScope).to.be(expectedValueLiteral);
      });

      it('should have the property inputParams (base name: "inputParams")', function() {
        // TODO: update the code to test the property inputParams
        expect(instance).to.have.property('inputParams');
        // expect(instance.inputParams).to.be(expectedValueLiteral);
      });

      it('should have the property destinationProfileId (base name: "destinationProfileId")', function() {
        // TODO: update the code to test the property destinationProfileId
        expect(instance).to.have.property('destinationProfileId');
        // expect(instance.destinationProfileId).to.be(expectedValueLiteral);
      });

      it('should have the property apiKey (base name: "apiKey")', function() {
        // TODO: update the code to test the property apiKey
        expect(instance).to.have.property('apiKey');
        // expect(instance.apiKey).to.be(expectedValueLiteral);
      });

      it('should have the property outputFilePaths (base name: "outputFilePaths")', function() {
        // TODO: update the code to test the property outputFilePaths
        expect(instance).to.have.property('outputFilePaths');
        // expect(instance.outputFilePaths).to.be(expectedValueLiteral);
      });

      it('should have the property scriptRuntimeTimeoutSeconds (base name: "scriptRuntimeTimeoutSeconds")', function() {
        // TODO: update the code to test the property scriptRuntimeTimeoutSeconds
        expect(instance).to.have.property('scriptRuntimeTimeoutSeconds');
        // expect(instance.scriptRuntimeTimeoutSeconds).to.be(expectedValueLiteral);
      });

      it('should have the property scriptId (base name: "scriptId")', function() {
        // TODO: update the code to test the property scriptId
        expect(instance).to.have.property('scriptId');
        // expect(instance.scriptId).to.be(expectedValueLiteral);
      });

      it('should have the property outputDestination (base name: "outputDestination")', function() {
        // TODO: update the code to test the property outputDestination
        expect(instance).to.have.property('outputDestination');
        // expect(instance.outputDestination).to.be(expectedValueLiteral);
      });

      it('should have the property singularityxdrUrl (base name: "singularityxdrUrl")', function() {
        // TODO: update the code to test the property singularityxdrUrl
        expect(instance).to.have.property('singularityxdrUrl');
        // expect(instance.singularityxdrUrl).to.be(expectedValueLiteral);
      });

    });
  });

}));
