/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ThreatAnalysisSchemasTimelineViewSchemaMany200Data', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.ThreatAnalysisSchemasTimelineViewSchemaMany200Data();
      });

      it('should create an instance of ThreatAnalysisSchemasTimelineViewSchemaMany200Data', function() {
        // TODO: update the code to test ThreatAnalysisSchemasTimelineViewSchemaMany200Data
        expect(instance).to.be.a(S1MgmtApi.ThreatAnalysisSchemasTimelineViewSchemaMany200Data);
      });

      it('should have the property groupId (base name: "groupId")', function() {
        // TODO: update the code to test the property groupId
        expect(instance).to.have.property('groupId');
        // expect(instance.groupId).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property secondaryDescription (base name: "secondaryDescription")', function() {
        // TODO: update the code to test the property secondaryDescription
        expect(instance).to.have.property('secondaryDescription');
        // expect(instance.secondaryDescription).to.be(expectedValueLiteral);
      });

      it('should have the property agentUpdatedVersion (base name: "agentUpdatedVersion")', function() {
        // TODO: update the code to test the property agentUpdatedVersion
        expect(instance).to.have.property('agentUpdatedVersion');
        // expect(instance.agentUpdatedVersion).to.be(expectedValueLiteral);
      });

      it('should have the property osFamily (base name: "osFamily")', function() {
        // TODO: update the code to test the property osFamily
        expect(instance).to.have.property('osFamily');
        // expect(instance.osFamily).to.be(expectedValueLiteral);
      });

      it('should have the property accountId (base name: "accountId")', function() {
        // TODO: update the code to test the property accountId
        expect(instance).to.have.property('accountId');
        // expect(instance.accountId).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updatedAt")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property hash (base name: "hash")', function() {
        // TODO: update the code to test the property hash
        expect(instance).to.have.property('hash');
        // expect(instance.hash).to.be(expectedValueLiteral);
      });

      it('should have the property activityType (base name: "activityType")', function() {
        // TODO: update the code to test the property activityType
        expect(instance).to.have.property('activityType');
        // expect(instance.activityType).to.be(expectedValueLiteral);
      });

      it('should have the property threatId (base name: "threatId")', function() {
        // TODO: update the code to test the property threatId
        expect(instance).to.have.property('threatId');
        // expect(instance.threatId).to.be(expectedValueLiteral);
      });

      it('should have the property siteId (base name: "siteId")', function() {
        // TODO: update the code to test the property siteId
        expect(instance).to.have.property('siteId');
        // expect(instance.siteId).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "userId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property primaryDescription (base name: "primaryDescription")', function() {
        // TODO: update the code to test the property primaryDescription
        expect(instance).to.have.property('primaryDescription');
        // expect(instance.primaryDescription).to.be(expectedValueLiteral);
      });

      it('should have the property agentId (base name: "agentId")', function() {
        // TODO: update the code to test the property agentId
        expect(instance).to.have.property('agentId');
        // expect(instance.agentId).to.be(expectedValueLiteral);
      });

      it('should have the property data (base name: "data")', function() {
        // TODO: update the code to test the property data
        expect(instance).to.have.property('data');
        // expect(instance.data).to.be(expectedValueLiteral);
      });

    });
  });

}));
