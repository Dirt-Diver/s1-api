/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('AccountsSchemasAccountGetSchema200Data', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.AccountsSchemasAccountGetSchema200Data();
      });

      it('should create an instance of AccountsSchemasAccountGetSchema200Data', function() {
        // TODO: update the code to test AccountsSchemasAccountGetSchema200Data
        expect(instance).to.be.a(S1MgmtApi.AccountsSchemasAccountGetSchema200Data);
      });

      it('should have the property updatedAt (base name: "updatedAt")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property expiration (base name: "expiration")', function() {
        // TODO: update the code to test the property expiration
        expect(instance).to.have.property('expiration');
        // expect(instance.expiration).to.be(expectedValueLiteral);
      });

      it('should have the property isDefault (base name: "isDefault")', function() {
        // TODO: update the code to test the property isDefault
        expect(instance).to.have.property('isDefault');
        // expect(instance.isDefault).to.be(expectedValueLiteral);
      });

      it('should have the property state (base name: "state")', function() {
        // TODO: update the code to test the property state
        expect(instance).to.have.property('state');
        // expect(instance.state).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property creatorId (base name: "creatorId")', function() {
        // TODO: update the code to test the property creatorId
        expect(instance).to.have.property('creatorId');
        // expect(instance.creatorId).to.be(expectedValueLiteral);
      });

      it('should have the property accountType (base name: "accountType")', function() {
        // TODO: update the code to test the property accountType
        expect(instance).to.have.property('accountType');
        // expect(instance.accountType).to.be(expectedValueLiteral);
      });

      it('should have the property salesforceId (base name: "salesforceId")', function() {
        // TODO: update the code to test the property salesforceId
        expect(instance).to.have.property('salesforceId');
        // expect(instance.salesforceId).to.be(expectedValueLiteral);
      });

      it('should have the property skus (base name: "skus")', function() {
        // TODO: update the code to test the property skus
        expect(instance).to.have.property('skus');
        // expect(instance.skus).to.be(expectedValueLiteral);
      });

      it('should have the property totalLicenses (base name: "totalLicenses")', function() {
        // TODO: update the code to test the property totalLicenses
        expect(instance).to.have.property('totalLicenses');
        // expect(instance.totalLicenses).to.be(expectedValueLiteral);
      });

      it('should have the property usageType (base name: "usageType")', function() {
        // TODO: update the code to test the property usageType
        expect(instance).to.have.property('usageType');
        // expect(instance.usageType).to.be(expectedValueLiteral);
      });

      it('should have the property billingMode (base name: "billingMode")', function() {
        // TODO: update the code to test the property billingMode
        expect(instance).to.have.property('billingMode');
        // expect(instance.billingMode).to.be(expectedValueLiteral);
      });

      it('should have the property externalId (base name: "externalId")', function() {
        // TODO: update the code to test the property externalId
        expect(instance).to.have.property('externalId');
        // expect(instance.externalId).to.be(expectedValueLiteral);
      });

      it('should have the property unlimitedExpiration (base name: "unlimitedExpiration")', function() {
        // TODO: update the code to test the property unlimitedExpiration
        expect(instance).to.have.property('unlimitedExpiration');
        // expect(instance.unlimitedExpiration).to.be(expectedValueLiteral);
      });

      it('should have the property licenses (base name: "licenses")', function() {
        // TODO: update the code to test the property licenses
        expect(instance).to.have.property('licenses');
        // expect(instance.licenses).to.be(expectedValueLiteral);
      });

      it('should have the property activeAgents (base name: "activeAgents")', function() {
        // TODO: update the code to test the property activeAgents
        expect(instance).to.have.property('activeAgents');
        // expect(instance.activeAgents).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property creator (base name: "creator")', function() {
        // TODO: update the code to test the property creator
        expect(instance).to.have.property('creator');
        // expect(instance.creator).to.be(expectedValueLiteral);
      });

    });
  });

}));
