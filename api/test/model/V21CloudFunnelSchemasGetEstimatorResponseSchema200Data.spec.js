/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V21CloudFunnelSchemasGetEstimatorResponseSchema200Data', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.V21CloudFunnelSchemasGetEstimatorResponseSchema200Data();
      });

      it('should create an instance of V21CloudFunnelSchemasGetEstimatorResponseSchema200Data', function() {
        // TODO: update the code to test V21CloudFunnelSchemasGetEstimatorResponseSchema200Data
        expect(instance).to.be.a(S1MgmtApi.V21CloudFunnelSchemasGetEstimatorResponseSchema200Data);
      });

      it('should have the property isCompleted (base name: "isCompleted")', function() {
        // TODO: update the code to test the property isCompleted
        expect(instance).to.have.property('isCompleted');
        // expect(instance.isCompleted).to.be(expectedValueLiteral);
      });

      it('should have the property compressedBytes (base name: "compressedBytes")', function() {
        // TODO: update the code to test the property compressedBytes
        expect(instance).to.have.property('compressedBytes');
        // expect(instance.compressedBytes).to.be(expectedValueLiteral);
      });

      it('should have the property matchingEvents (base name: "matchingEvents")', function() {
        // TODO: update the code to test the property matchingEvents
        expect(instance).to.have.property('matchingEvents');
        // expect(instance.matchingEvents).to.be(expectedValueLiteral);
      });

      it('should have the property uncompressedBytes (base name: "uncompressedBytes")', function() {
        // TODO: update the code to test the property uncompressedBytes
        expect(instance).to.have.property('uncompressedBytes');
        // expect(instance.uncompressedBytes).to.be(expectedValueLiteral);
      });

      it('should have the property error (base name: "error")', function() {
        // TODO: update the code to test the property error
        expect(instance).to.have.property('error');
        // expect(instance.error).to.be(expectedValueLiteral);
      });

    });
  });

}));
