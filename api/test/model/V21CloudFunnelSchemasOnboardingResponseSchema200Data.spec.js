/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V21CloudFunnelSchemasOnboardingResponseSchema200Data', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.V21CloudFunnelSchemasOnboardingResponseSchema200Data();
      });

      it('should create an instance of V21CloudFunnelSchemasOnboardingResponseSchema200Data', function() {
        // TODO: update the code to test V21CloudFunnelSchemasOnboardingResponseSchema200Data
        expect(instance).to.be.a(S1MgmtApi.V21CloudFunnelSchemasOnboardingResponseSchema200Data);
      });

      it('should have the property useAssumeRole (base name: "useAssumeRole")', function() {
        // TODO: update the code to test the property useAssumeRole
        expect(instance).to.have.property('useAssumeRole');
        // expect(instance.useAssumeRole).to.be(expectedValueLiteral);
      });

      it('should have the property isInheriting (base name: "isInheriting")', function() {
        // TODO: update the code to test the property isInheriting
        expect(instance).to.have.property('isInheriting');
        // expect(instance.isInheriting).to.be(expectedValueLiteral);
      });

      it('should have the property globalOnboardingExists (base name: "globalOnboardingExists")', function() {
        // TODO: update the code to test the property globalOnboardingExists
        expect(instance).to.have.property('globalOnboardingExists');
        // expect(instance.globalOnboardingExists).to.be(expectedValueLiteral);
      });

      it('should have the property cloudProvider (base name: "cloudProvider")', function() {
        // TODO: update the code to test the property cloudProvider
        expect(instance).to.have.property('cloudProvider');
        // expect(instance.cloudProvider).to.be(expectedValueLiteral);
      });

      it('should have the property desiredFields (base name: "desiredFields")', function() {
        // TODO: update the code to test the property desiredFields
        expect(instance).to.have.property('desiredFields');
        // expect(instance.desiredFields).to.be(expectedValueLiteral);
      });

      it('should have the property assumeRoleExternalId (base name: "assumeRoleExternalId")', function() {
        // TODO: update the code to test the property assumeRoleExternalId
        expect(instance).to.have.property('assumeRoleExternalId');
        // expect(instance.assumeRoleExternalId).to.be(expectedValueLiteral);
      });

      it('should have the property accountOnboardingExists (base name: "accountOnboardingExists")', function() {
        // TODO: update the code to test the property accountOnboardingExists
        expect(instance).to.have.property('accountOnboardingExists');
        // expect(instance.accountOnboardingExists).to.be(expectedValueLiteral);
      });

      it('should have the property roleToAssume (base name: "roleToAssume")', function() {
        // TODO: update the code to test the property roleToAssume
        expect(instance).to.have.property('roleToAssume');
        // expect(instance.roleToAssume).to.be(expectedValueLiteral);
      });

      it('should have the property error (base name: "error")', function() {
        // TODO: update the code to test the property error
        expect(instance).to.have.property('error');
        // expect(instance.error).to.be(expectedValueLiteral);
      });

      it('should have the property disableStream (base name: "disableStream")', function() {
        // TODO: update the code to test the property disableStream
        expect(instance).to.have.property('disableStream');
        // expect(instance.disableStream).to.be(expectedValueLiteral);
      });

      it('should have the property bucketUrl (base name: "bucketUrl")', function() {
        // TODO: update the code to test the property bucketUrl
        expect(instance).to.have.property('bucketUrl');
        // expect(instance.bucketUrl).to.be(expectedValueLiteral);
      });

      it('should have the property query (base name: "query")', function() {
        // TODO: update the code to test the property query
        expect(instance).to.have.property('query');
        // expect(instance.query).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

    });
  });

}));
