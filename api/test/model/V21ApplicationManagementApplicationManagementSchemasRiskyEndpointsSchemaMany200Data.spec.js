/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V21ApplicationManagementApplicationManagementSchemasRiskyEndpointsSchemaMany200Data', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskyEndpointsSchemaMany200Data();
      });

      it('should create an instance of V21ApplicationManagementApplicationManagementSchemasRiskyEndpointsSchemaMany200Data', function() {
        // TODO: update the code to test V21ApplicationManagementApplicationManagementSchemasRiskyEndpointsSchemaMany200Data
        expect(instance).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskyEndpointsSchemaMany200Data);
      });

      it('should have the property domain (base name: "domain")', function() {
        // TODO: update the code to test the property domain
        expect(instance).to.have.property('domain');
        // expect(instance.domain).to.be(expectedValueLiteral);
      });

      it('should have the property groupName (base name: "groupName")', function() {
        // TODO: update the code to test the property groupName
        expect(instance).to.have.property('groupName');
        // expect(instance.groupName).to.be(expectedValueLiteral);
      });

      it('should have the property statusHistory (base name: "statusHistory")', function() {
        // TODO: update the code to test the property statusHistory
        expect(instance).to.have.property('statusHistory');
        // expect(instance.statusHistory).to.be(expectedValueLiteral);
      });

      it('should have the property lastScanDate (base name: "lastScanDate")', function() {
        // TODO: update the code to test the property lastScanDate
        expect(instance).to.have.property('lastScanDate');
        // expect(instance.lastScanDate).to.be(expectedValueLiteral);
      });

      it('should have the property osType (base name: "osType")', function() {
        // TODO: update the code to test the property osType
        expect(instance).to.have.property('osType');
        // expect(instance.osType).to.be(expectedValueLiteral);
      });

      it('should have the property applicationDetectionDate (base name: "applicationDetectionDate")', function() {
        // TODO: update the code to test the property applicationDetectionDate
        expect(instance).to.have.property('applicationDetectionDate');
        // expect(instance.applicationDetectionDate).to.be(expectedValueLiteral);
      });

      it('should have the property applicationDaysDetected (base name: "applicationDaysDetected")', function() {
        // TODO: update the code to test the property applicationDaysDetected
        expect(instance).to.have.property('applicationDaysDetected');
        // expect(instance.applicationDaysDetected).to.be(expectedValueLiteral);
      });

      it('should have the property ticket (base name: "ticket")', function() {
        // TODO: update the code to test the property ticket
        expect(instance).to.have.property('ticket');
        // expect(instance.ticket).to.be(expectedValueLiteral);
      });

      it('should have the property applicationVersion (base name: "applicationVersion")', function() {
        // TODO: update the code to test the property applicationVersion
        expect(instance).to.have.property('applicationVersion');
        // expect(instance.applicationVersion).to.be(expectedValueLiteral);
      });

      it('should have the property siteName (base name: "siteName")', function() {
        // TODO: update the code to test the property siteName
        expect(instance).to.have.property('siteName');
        // expect(instance.siteName).to.be(expectedValueLiteral);
      });

      it('should have the property endpointName (base name: "endpointName")', function() {
        // TODO: update the code to test the property endpointName
        expect(instance).to.have.property('endpointName');
        // expect(instance.endpointName).to.be(expectedValueLiteral);
      });

      it('should have the property endpointUuid (base name: "endpointUuid")', function() {
        // TODO: update the code to test the property endpointUuid
        expect(instance).to.have.property('endpointUuid');
        // expect(instance.endpointUuid).to.be(expectedValueLiteral);
      });

      it('should have the property osVersion (base name: "osVersion")', function() {
        // TODO: update the code to test the property osVersion
        expect(instance).to.have.property('osVersion');
        // expect(instance.osVersion).to.be(expectedValueLiteral);
      });

      it('should have the property endpointId (base name: "endpointId")', function() {
        // TODO: update the code to test the property endpointId
        expect(instance).to.have.property('endpointId');
        // expect(instance.endpointId).to.be(expectedValueLiteral);
      });

      it('should have the property endpointType (base name: "endpointType")', function() {
        // TODO: update the code to test the property endpointType
        expect(instance).to.have.property('endpointType');
        // expect(instance.endpointType).to.be(expectedValueLiteral);
      });

      it('should have the property accountName (base name: "accountName")', function() {
        // TODO: update the code to test the property accountName
        expect(instance).to.have.property('accountName');
        // expect(instance.accountName).to.be(expectedValueLiteral);
      });

      it('should have the property lastScanResult (base name: "lastScanResult")', function() {
        // TODO: update the code to test the property lastScanResult
        expect(instance).to.have.property('lastScanResult');
        // expect(instance.lastScanResult).to.be(expectedValueLiteral);
      });

      it('should have the property externalTicketSystem (base name: "externalTicketSystem")', function() {
        // TODO: update the code to test the property externalTicketSystem
        expect(instance).to.have.property('externalTicketSystem');
        // expect(instance.externalTicketSystem).to.be(expectedValueLiteral);
      });

    });
  });

}));
