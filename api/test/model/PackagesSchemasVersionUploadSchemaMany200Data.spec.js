/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PackagesSchemasVersionUploadSchemaMany200Data', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.PackagesSchemasVersionUploadSchemaMany200Data();
      });

      it('should create an instance of PackagesSchemasVersionUploadSchemaMany200Data', function() {
        // TODO: update the code to test PackagesSchemasVersionUploadSchemaMany200Data
        expect(instance).to.be.a(S1MgmtApi.PackagesSchemasVersionUploadSchemaMany200Data);
      });

      it('should have the property fileName (base name: "fileName")', function() {
        // TODO: update the code to test the property fileName
        expect(instance).to.have.property('fileName');
        // expect(instance.fileName).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updatedAt")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property platformType (base name: "platformType")', function() {
        // TODO: update the code to test the property platformType
        expect(instance).to.have.property('platformType');
        // expect(instance.platformType).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property sites (base name: "sites")', function() {
        // TODO: update the code to test the property sites
        expect(instance).to.have.property('sites');
        // expect(instance.sites).to.be(expectedValueLiteral);
      });

      it('should have the property fileExtension (base name: "fileExtension")', function() {
        // TODO: update the code to test the property fileExtension
        expect(instance).to.have.property('fileExtension');
        // expect(instance.fileExtension).to.be(expectedValueLiteral);
      });

      it('should have the property fileSize (base name: "fileSize")', function() {
        // TODO: update the code to test the property fileSize
        expect(instance).to.have.property('fileSize');
        // expect(instance.fileSize).to.be(expectedValueLiteral);
      });

      it('should have the property sha1 (base name: "sha1")', function() {
        // TODO: update the code to test the property sha1
        expect(instance).to.have.property('sha1');
        // expect(instance.sha1).to.be(expectedValueLiteral);
      });

      it('should have the property osArch (base name: "osArch")', function() {
        // TODO: update the code to test the property osArch
        expect(instance).to.have.property('osArch');
        // expect(instance.osArch).to.be(expectedValueLiteral);
      });

      it('should have the property version (base name: "version")', function() {
        // TODO: update the code to test the property version
        expect(instance).to.have.property('version');
        // expect(instance.version).to.be(expectedValueLiteral);
      });

      it('should have the property accounts (base name: "accounts")', function() {
        // TODO: update the code to test the property accounts
        expect(instance).to.have.property('accounts');
        // expect(instance.accounts).to.be(expectedValueLiteral);
      });

      it('should have the property packageType (base name: "packageType")', function() {
        // TODO: update the code to test the property packageType
        expect(instance).to.have.property('packageType');
        // expect(instance.packageType).to.be(expectedValueLiteral);
      });

      it('should have the property minorVersion (base name: "minorVersion")', function() {
        // TODO: update the code to test the property minorVersion
        expect(instance).to.have.property('minorVersion');
        // expect(instance.minorVersion).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property osType (base name: "osType")', function() {
        // TODO: update the code to test the property osType
        expect(instance).to.have.property('osType');
        // expect(instance.osType).to.be(expectedValueLiteral);
      });

      it('should have the property supportedOsVersions (base name: "supportedOsVersions")', function() {
        // TODO: update the code to test the property supportedOsVersions
        expect(instance).to.have.property('supportedOsVersions');
        // expect(instance.supportedOsVersions).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property scopeLevel (base name: "scopeLevel")', function() {
        // TODO: update the code to test the property scopeLevel
        expect(instance).to.have.property('scopeLevel');
        // expect(instance.scopeLevel).to.be(expectedValueLiteral);
      });

      it('should have the property link (base name: "link")', function() {
        // TODO: update the code to test the property link
        expect(instance).to.have.property('link');
        // expect(instance.link).to.be(expectedValueLiteral);
      });

      it('should have the property rangerVersion (base name: "rangerVersion")', function() {
        // TODO: update the code to test the property rangerVersion
        expect(instance).to.have.property('rangerVersion');
        // expect(instance.rangerVersion).to.be(expectedValueLiteral);
      });

    });
  });

}));
