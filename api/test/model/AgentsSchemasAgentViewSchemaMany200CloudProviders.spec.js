/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('AgentsSchemasAgentViewSchemaMany200CloudProviders', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.AgentsSchemasAgentViewSchemaMany200CloudProviders();
      });

      it('should create an instance of AgentsSchemasAgentViewSchemaMany200CloudProviders', function() {
        // TODO: update the code to test AgentsSchemasAgentViewSchemaMany200CloudProviders
        expect(instance).to.be.a(S1MgmtApi.AgentsSchemasAgentViewSchemaMany200CloudProviders);
      });

      it('should have the property agentPodName (base name: "agentPodName")', function() {
        // TODO: update the code to test the property agentPodName
        expect(instance).to.have.property('agentPodName');
        // expect(instance.agentPodName).to.be(expectedValueLiteral);
      });

      it('should have the property clusterName (base name: "clusterName")', function() {
        // TODO: update the code to test the property clusterName
        expect(instance).to.have.property('clusterName');
        // expect(instance.clusterName).to.be(expectedValueLiteral);
      });

      it('should have the property cloudAccount (base name: "cloudAccount")', function() {
        // TODO: update the code to test the property cloudAccount
        expect(instance).to.have.property('cloudAccount');
        // expect(instance.cloudAccount).to.be(expectedValueLiteral);
      });

      it('should have the property azureResourceGroup (base name: "azureResourceGroup")', function() {
        // TODO: update the code to test the property azureResourceGroup
        expect(instance).to.have.property('azureResourceGroup');
        // expect(instance.azureResourceGroup).to.be(expectedValueLiteral);
      });

      it('should have the property awsSubnetIds (base name: "awsSubnetIds")', function() {
        // TODO: update the code to test the property awsSubnetIds
        expect(instance).to.have.property('awsSubnetIds');
        // expect(instance.awsSubnetIds).to.be(expectedValueLiteral);
      });

      it('should have the property kubernetesVersion (base name: "kubernetesVersion")', function() {
        // TODO: update the code to test the property kubernetesVersion
        expect(instance).to.have.property('kubernetesVersion');
        // expect(instance.kubernetesVersion).to.be(expectedValueLiteral);
      });

      it('should have the property kubernetesType (base name: "kubernetesType")', function() {
        // TODO: update the code to test the property kubernetesType
        expect(instance).to.have.property('kubernetesType');
        // expect(instance.kubernetesType).to.be(expectedValueLiteral);
      });

      it('should have the property agentNamespace (base name: "agentNamespace")', function() {
        // TODO: update the code to test the property agentNamespace
        expect(instance).to.have.property('agentNamespace');
        // expect(instance.agentNamespace).to.be(expectedValueLiteral);
      });

      it('should have the property kubernetesNodeLabels (base name: "kubernetesNodeLabels")', function() {
        // TODO: update the code to test the property kubernetesNodeLabels
        expect(instance).to.have.property('kubernetesNodeLabels');
        // expect(instance.kubernetesNodeLabels).to.be(expectedValueLiteral);
      });

      it('should have the property cloudInstanceId (base name: "cloudInstanceId")', function() {
        // TODO: update the code to test the property cloudInstanceId
        expect(instance).to.have.property('cloudInstanceId');
        // expect(instance.cloudInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property cloudImage (base name: "cloudImage")', function() {
        // TODO: update the code to test the property cloudImage
        expect(instance).to.have.property('cloudImage');
        // expect(instance.cloudImage).to.be(expectedValueLiteral);
      });

      it('should have the property awsSecurityGroups (base name: "awsSecurityGroups")', function() {
        // TODO: update the code to test the property awsSecurityGroups
        expect(instance).to.have.property('awsSecurityGroups');
        // expect(instance.awsSecurityGroups).to.be(expectedValueLiteral);
      });

      it('should have the property kubernetesNodeName (base name: "kubernetesNodeName")', function() {
        // TODO: update the code to test the property kubernetesNodeName
        expect(instance).to.have.property('kubernetesNodeName');
        // expect(instance.kubernetesNodeName).to.be(expectedValueLiteral);
      });

      it('should have the property cloudTags (base name: "cloudTags")', function() {
        // TODO: update the code to test the property cloudTags
        expect(instance).to.have.property('cloudTags');
        // expect(instance.cloudTags).to.be(expectedValueLiteral);
      });

      it('should have the property awsRole (base name: "awsRole")', function() {
        // TODO: update the code to test the property awsRole
        expect(instance).to.have.property('awsRole');
        // expect(instance.awsRole).to.be(expectedValueLiteral);
      });

      it('should have the property gcpServiceAccount (base name: "gcpServiceAccount")', function() {
        // TODO: update the code to test the property gcpServiceAccount
        expect(instance).to.have.property('gcpServiceAccount');
        // expect(instance.gcpServiceAccount).to.be(expectedValueLiteral);
      });

      it('should have the property cloudInstanceSize (base name: "cloudInstanceSize")', function() {
        // TODO: update the code to test the property cloudInstanceSize
        expect(instance).to.have.property('cloudInstanceSize');
        // expect(instance.cloudInstanceSize).to.be(expectedValueLiteral);
      });

      it('should have the property cloudLocation (base name: "cloudLocation")', function() {
        // TODO: update the code to test the property cloudLocation
        expect(instance).to.have.property('cloudLocation');
        // expect(instance.cloudLocation).to.be(expectedValueLiteral);
      });

      it('should have the property cloudNetwork (base name: "cloudNetwork")', function() {
        // TODO: update the code to test the property cloudNetwork
        expect(instance).to.have.property('cloudNetwork');
        // expect(instance.cloudNetwork).to.be(expectedValueLiteral);
      });

    });
  });

}));
