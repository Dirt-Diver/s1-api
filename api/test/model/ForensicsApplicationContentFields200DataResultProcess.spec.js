/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ForensicsApplicationContentFields200DataResultProcess', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.ForensicsApplicationContentFields200DataResultProcess();
      });

      it('should create an instance of ForensicsApplicationContentFields200DataResultProcess', function() {
        // TODO: update the code to test ForensicsApplicationContentFields200DataResultProcess
        expect(instance).to.be.a(S1MgmtApi.ForensicsApplicationContentFields200DataResultProcess);
      });

      it('should have the property bundleId (base name: "bundle_id")', function() {
        // TODO: update the code to test the property bundleId
        expect(instance).to.have.property('bundleId');
        // expect(instance.bundleId).to.be(expectedValueLiteral);
      });

      it('should have the property isPrimary (base name: "is_primary")', function() {
        // TODO: update the code to test the property isPrimary
        expect(instance).to.have.property('isPrimary');
        // expect(instance.isPrimary).to.be(expectedValueLiteral);
      });

      it('should have the property username (base name: "username")', function() {
        // TODO: update the code to test the property username
        expect(instance).to.have.property('username');
        // expect(instance.username).to.be(expectedValueLiteral);
      });

      it('should have the property createdDate (base name: "created_date")', function() {
        // TODO: update the code to test the property createdDate
        expect(instance).to.have.property('createdDate');
        // expect(instance.createdDate).to.be(expectedValueLiteral);
      });

      it('should have the property pid (base name: "pid")', function() {
        // TODO: update the code to test the property pid
        expect(instance).to.have.property('pid');
        // expect(instance.pid).to.be(expectedValueLiteral);
      });

      it('should have the property objectId (base name: "object_id")', function() {
        // TODO: update the code to test the property objectId
        expect(instance).to.have.property('objectId');
        // expect(instance.objectId).to.be(expectedValueLiteral);
      });

      it('should have the property isRoot (base name: "is_root")', function() {
        // TODO: update the code to test the property isRoot
        expect(instance).to.have.property('isRoot');
        // expect(instance.isRoot).to.be(expectedValueLiteral);
      });

      it('should have the property executableFileId (base name: "executable_file_id")', function() {
        // TODO: update the code to test the property executableFileId
        expect(instance).to.have.property('executableFileId');
        // expect(instance.executableFileId).to.be(expectedValueLiteral);
      });

      it('should have the property displayName (base name: "display_name")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

    });
  });

}));
