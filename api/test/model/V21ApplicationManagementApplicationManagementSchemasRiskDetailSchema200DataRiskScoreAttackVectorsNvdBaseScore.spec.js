/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataRiskScoreAttackVectorsNvdBaseScore', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataRiskScoreAttackVectorsNvdBaseScore();
      });

      it('should create an instance of V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataRiskScoreAttackVectorsNvdBaseScore', function() {
        // TODO: update the code to test V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataRiskScoreAttackVectorsNvdBaseScore
        expect(instance).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataRiskScoreAttackVectorsNvdBaseScore);
      });

      it('should have the property confidentiality (base name: "confidentiality")', function() {
        // TODO: update the code to test the property confidentiality
        expect(instance).to.have.property('confidentiality');
        // expect(instance.confidentiality).to.be(expectedValueLiteral);
      });

      it('should have the property privilegesRequired (base name: "privilegesRequired")', function() {
        // TODO: update the code to test the property privilegesRequired
        expect(instance).to.have.property('privilegesRequired');
        // expect(instance.privilegesRequired).to.be(expectedValueLiteral);
      });

      it('should have the property integrity (base name: "integrity")', function() {
        // TODO: update the code to test the property integrity
        expect(instance).to.have.property('integrity');
        // expect(instance.integrity).to.be(expectedValueLiteral);
      });

      it('should have the property attackComplexity (base name: "attackComplexity")', function() {
        // TODO: update the code to test the property attackComplexity
        expect(instance).to.have.property('attackComplexity');
        // expect(instance.attackComplexity).to.be(expectedValueLiteral);
      });

      it('should have the property attackVector (base name: "attackVector")', function() {
        // TODO: update the code to test the property attackVector
        expect(instance).to.have.property('attackVector');
        // expect(instance.attackVector).to.be(expectedValueLiteral);
      });

      it('should have the property userInteraction (base name: "userInteraction")', function() {
        // TODO: update the code to test the property userInteraction
        expect(instance).to.have.property('userInteraction');
        // expect(instance.userInteraction).to.be(expectedValueLiteral);
      });

      it('should have the property scope (base name: "scope")', function() {
        // TODO: update the code to test the property scope
        expect(instance).to.have.property('scope');
        // expect(instance.scope).to.be(expectedValueLiteral);
      });

      it('should have the property availability (base name: "availability")', function() {
        // TODO: update the code to test the property availability
        expect(instance).to.have.property('availability');
        // expect(instance.availability).to.be(expectedValueLiteral);
      });

    });
  });

}));
