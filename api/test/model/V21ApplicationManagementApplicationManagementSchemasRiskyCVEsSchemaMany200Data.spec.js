/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200Data', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200Data();
      });

      it('should create an instance of V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200Data', function() {
        // TODO: update the code to test V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200Data
        expect(instance).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskyCVEsSchemaMany200Data);
      });

      it('should have the property nvdBaseScore (base name: "nvdBaseScore")', function() {
        // TODO: update the code to test the property nvdBaseScore
        expect(instance).to.have.property('nvdBaseScore');
        // expect(instance.nvdBaseScore).to.be(expectedValueLiteral);
      });

      it('should have the property cveId (base name: "cveId")', function() {
        // TODO: update the code to test the property cveId
        expect(instance).to.have.property('cveId');
        // expect(instance.cveId).to.be(expectedValueLiteral);
      });

      it('should have the property publishedDate (base name: "publishedDate")', function() {
        // TODO: update the code to test the property publishedDate
        expect(instance).to.have.property('publishedDate');
        // expect(instance.publishedDate).to.be(expectedValueLiteral);
      });

      it('should have the property exploitedInTheWild (base name: "exploitedInTheWild")', function() {
        // TODO: update the code to test the property exploitedInTheWild
        expect(instance).to.have.property('exploitedInTheWild');
        // expect(instance.exploitedInTheWild).to.be(expectedValueLiteral);
      });

      it('should have the property cvssVersion (base name: "cvssVersion")', function() {
        // TODO: update the code to test the property cvssVersion
        expect(instance).to.have.property('cvssVersion');
        // expect(instance.cvssVersion).to.be(expectedValueLiteral);
      });

      it('should have the property fpFnMarks (base name: "fpFnMarks")', function() {
        // TODO: update the code to test the property fpFnMarks
        expect(instance).to.have.property('fpFnMarks');
        // expect(instance.fpFnMarks).to.be(expectedValueLiteral);
      });

      it('should have the property nvdUrl (base name: "nvdUrl")', function() {
        // TODO: update the code to test the property nvdUrl
        expect(instance).to.have.property('nvdUrl');
        // expect(instance.nvdUrl).to.be(expectedValueLiteral);
      });

      it('should have the property riskScore (base name: "riskScore")', function() {
        // TODO: update the code to test the property riskScore
        expect(instance).to.have.property('riskScore');
        // expect(instance.riskScore).to.be(expectedValueLiteral);
      });

      it('should have the property remediationLevel (base name: "remediationLevel")', function() {
        // TODO: update the code to test the property remediationLevel
        expect(instance).to.have.property('remediationLevel');
        // expect(instance.remediationLevel).to.be(expectedValueLiteral);
      });

      it('should have the property exploitCodeMaturity (base name: "exploitCodeMaturity")', function() {
        // TODO: update the code to test the property exploitCodeMaturity
        expect(instance).to.have.property('exploitCodeMaturity');
        // expect(instance.exploitCodeMaturity).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property severity (base name: "severity")', function() {
        // TODO: update the code to test the property severity
        expect(instance).to.have.property('severity');
        // expect(instance.severity).to.be(expectedValueLiteral);
      });

      it('should have the property reportConfidence (base name: "reportConfidence")', function() {
        // TODO: update the code to test the property reportConfidence
        expect(instance).to.have.property('reportConfidence');
        // expect(instance.reportConfidence).to.be(expectedValueLiteral);
      });

      it('should have the property mitreUrl (base name: "mitreUrl")', function() {
        // TODO: update the code to test the property mitreUrl
        expect(instance).to.have.property('mitreUrl');
        // expect(instance.mitreUrl).to.be(expectedValueLiteral);
      });

    });
  });

}));
