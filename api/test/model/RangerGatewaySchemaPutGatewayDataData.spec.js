/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('RangerGatewaySchemaPutGatewayDataData', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.RangerGatewaySchemaPutGatewayDataData();
      });

      it('should create an instance of RangerGatewaySchemaPutGatewayDataData', function() {
        // TODO: update the code to test RangerGatewaySchemaPutGatewayDataData
        expect(instance).to.be.a(S1MgmtApi.RangerGatewaySchemaPutGatewayDataData);
      });

      it('should have the property allowScan (base name: "allowScan")', function() {
        // TODO: update the code to test the property allowScan
        expect(instance).to.have.property('allowScan');
        // expect(instance.allowScan).to.be(expectedValueLiteral);
      });

      it('should have the property snmpScan (base name: "snmpScan")', function() {
        // TODO: update the code to test the property snmpScan
        expect(instance).to.have.property('snmpScan');
        // expect(instance.snmpScan).to.be(expectedValueLiteral);
      });

      it('should have the property accountId (base name: "accountId")', function() {
        // TODO: update the code to test the property accountId
        expect(instance).to.have.property('accountId');
        // expect(instance.accountId).to.be(expectedValueLiteral);
      });

      it('should have the property udpPorts (base name: "udpPorts")', function() {
        // TODO: update the code to test the property udpPorts
        expect(instance).to.have.property('udpPorts');
        // expect(instance.udpPorts).to.be(expectedValueLiteral);
      });

      it('should have the property udpPortScan (base name: "udpPortScan")', function() {
        // TODO: update the code to test the property udpPortScan
        expect(instance).to.have.property('udpPortScan');
        // expect(instance.udpPortScan).to.be(expectedValueLiteral);
      });

      it('should have the property icmpScan (base name: "icmpScan")', function() {
        // TODO: update the code to test the property icmpScan
        expect(instance).to.have.property('icmpScan');
        // expect(instance.icmpScan).to.be(expectedValueLiteral);
      });

      it('should have the property tcpPorts (base name: "tcpPorts")', function() {
        // TODO: update the code to test the property tcpPorts
        expect(instance).to.have.property('tcpPorts');
        // expect(instance.tcpPorts).to.be(expectedValueLiteral);
      });

      it('should have the property tcpPortScan (base name: "tcpPortScan")', function() {
        // TODO: update the code to test the property tcpPortScan
        expect(instance).to.have.property('tcpPortScan');
        // expect(instance.tcpPortScan).to.be(expectedValueLiteral);
      });

      it('should have the property siteId (base name: "siteId")', function() {
        // TODO: update the code to test the property siteId
        expect(instance).to.have.property('siteId');
        // expect(instance.siteId).to.be(expectedValueLiteral);
      });

      it('should have the property scanOnlyLocalSubnets (base name: "scanOnlyLocalSubnets")', function() {
        // TODO: update the code to test the property scanOnlyLocalSubnets
        expect(instance).to.have.property('scanOnlyLocalSubnets');
        // expect(instance.scanOnlyLocalSubnets).to.be(expectedValueLiteral);
      });

      it('should have the property networkName (base name: "networkName")', function() {
        // TODO: update the code to test the property networkName
        expect(instance).to.have.property('networkName');
        // expect(instance.networkName).to.be(expectedValueLiteral);
      });

      it('should have the property restrictions (base name: "restrictions")', function() {
        // TODO: update the code to test the property restrictions
        expect(instance).to.have.property('restrictions');
        // expect(instance.restrictions).to.be(expectedValueLiteral);
      });

      it('should have the property multiCastSsdpScan (base name: "multiCastSsdpScan")', function() {
        // TODO: update the code to test the property multiCastSsdpScan
        expect(instance).to.have.property('multiCastSsdpScan');
        // expect(instance.multiCastSsdpScan).to.be(expectedValueLiteral);
      });

      it('should have the property rdnsScan (base name: "rdnsScan")', function() {
        // TODO: update the code to test the property rdnsScan
        expect(instance).to.have.property('rdnsScan');
        // expect(instance.rdnsScan).to.be(expectedValueLiteral);
      });

      it('should have the property archived (base name: "archived")', function() {
        // TODO: update the code to test the property archived
        expect(instance).to.have.property('archived');
        // expect(instance.archived).to.be(expectedValueLiteral);
      });

      it('should have the property inheritSettings (base name: "inheritSettings")', function() {
        // TODO: update the code to test the property inheritSettings
        expect(instance).to.have.property('inheritSettings');
        // expect(instance.inheritSettings).to.be(expectedValueLiteral);
      });

      it('should have the property mdnsScan (base name: "mdnsScan")', function() {
        // TODO: update the code to test the property mdnsScan
        expect(instance).to.have.property('mdnsScan');
        // expect(instance.mdnsScan).to.be(expectedValueLiteral);
      });

      it('should have the property smbScan (base name: "smbScan")', function() {
        // TODO: update the code to test the property smbScan
        expect(instance).to.have.property('smbScan');
        // expect(instance.smbScan).to.be(expectedValueLiteral);
      });

    });
  });

}));
