/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V21RoguesSchemasCloudResourcesSchema200DataResources', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.V21RoguesSchemasCloudResourcesSchema200DataResources();
      });

      it('should create an instance of V21RoguesSchemasCloudResourcesSchema200DataResources', function() {
        // TODO: update the code to test V21RoguesSchemasCloudResourcesSchema200DataResources
        expect(instance).to.be.a(S1MgmtApi.V21RoguesSchemasCloudResourcesSchema200DataResources);
      });

      it('should have the property cloudProviderAccountName (base name: "cloudProviderAccountName")', function() {
        // TODO: update the code to test the property cloudProviderAccountName
        expect(instance).to.have.property('cloudProviderAccountName');
        // expect(instance.cloudProviderAccountName).to.be(expectedValueLiteral);
      });

      it('should have the property resourceType (base name: "resourceType")', function() {
        // TODO: update the code to test the property resourceType
        expect(instance).to.have.property('resourceType');
        // expect(instance.resourceType).to.be(expectedValueLiteral);
      });

      it('should have the property virtualNetworkId (base name: "virtualNetworkId")', function() {
        // TODO: update the code to test the property virtualNetworkId
        expect(instance).to.have.property('virtualNetworkId');
        // expect(instance.virtualNetworkId).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property tags (base name: "tags")', function() {
        // TODO: update the code to test the property tags
        expect(instance).to.have.property('tags');
        // expect(instance.tags).to.be(expectedValueLiteral);
      });

      it('should have the property osTypeIcon (base name: "osTypeIcon")', function() {
        // TODO: update the code to test the property osTypeIcon
        expect(instance).to.have.property('osTypeIcon');
        // expect(instance.osTypeIcon).to.be(expectedValueLiteral);
      });

      it('should have the property region (base name: "region")', function() {
        // TODO: update the code to test the property region
        expect(instance).to.have.property('region');
        // expect(instance.region).to.be(expectedValueLiteral);
      });

      it('should have the property osType (base name: "osType")', function() {
        // TODO: update the code to test the property osType
        expect(instance).to.have.property('osType');
        // expect(instance.osType).to.be(expectedValueLiteral);
      });

      it('should have the property cloudProviderName (base name: "cloudProviderName")', function() {
        // TODO: update the code to test the property cloudProviderName
        expect(instance).to.have.property('cloudProviderName');
        // expect(instance.cloudProviderName).to.be(expectedValueLiteral);
      });

      it('should have the property cloudProviderOrganization (base name: "cloudProviderOrganization")', function() {
        // TODO: update the code to test the property cloudProviderOrganization
        expect(instance).to.have.property('cloudProviderOrganization');
        // expect(instance.cloudProviderOrganization).to.be(expectedValueLiteral);
      });

      it('should have the property createdTime (base name: "createdTime")', function() {
        // TODO: update the code to test the property createdTime
        expect(instance).to.have.property('createdTime');
        // expect(instance.createdTime).to.be(expectedValueLiteral);
      });

      it('should have the property cloudProviderAccountId (base name: "cloudProviderAccountId")', function() {
        // TODO: update the code to test the property cloudProviderAccountId
        expect(instance).to.have.property('cloudProviderAccountId');
        // expect(instance.cloudProviderAccountId).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

    });
  });

}));
