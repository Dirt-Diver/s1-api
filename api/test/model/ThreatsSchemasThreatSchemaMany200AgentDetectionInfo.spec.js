/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ThreatsSchemasThreatSchemaMany200AgentDetectionInfo', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.ThreatsSchemasThreatSchemaMany200AgentDetectionInfo();
      });

      it('should create an instance of ThreatsSchemasThreatSchemaMany200AgentDetectionInfo', function() {
        // TODO: update the code to test ThreatsSchemasThreatSchemaMany200AgentDetectionInfo
        expect(instance).to.be.a(S1MgmtApi.ThreatsSchemasThreatSchemaMany200AgentDetectionInfo);
      });

      it('should have the property agentLastLoggedInUserName (base name: "agentLastLoggedInUserName")', function() {
        // TODO: update the code to test the property agentLastLoggedInUserName
        expect(instance).to.have.property('agentLastLoggedInUserName');
        // expect(instance.agentLastLoggedInUserName).to.be(expectedValueLiteral);
      });

      it('should have the property agentVersion (base name: "agentVersion")', function() {
        // TODO: update the code to test the property agentVersion
        expect(instance).to.have.property('agentVersion');
        // expect(instance.agentVersion).to.be(expectedValueLiteral);
      });

      it('should have the property agentLastLoggedInUserMail (base name: "agentLastLoggedInUserMail")', function() {
        // TODO: update the code to test the property agentLastLoggedInUserMail
        expect(instance).to.have.property('agentLastLoggedInUserMail');
        // expect(instance.agentLastLoggedInUserMail).to.be(expectedValueLiteral);
      });

      it('should have the property agentDomain (base name: "agentDomain")', function() {
        // TODO: update the code to test the property agentDomain
        expect(instance).to.have.property('agentDomain');
        // expect(instance.agentDomain).to.be(expectedValueLiteral);
      });

      it('should have the property agentOsName (base name: "agentOsName")', function() {
        // TODO: update the code to test the property agentOsName
        expect(instance).to.have.property('agentOsName');
        // expect(instance.agentOsName).to.be(expectedValueLiteral);
      });

      it('should have the property externalIp (base name: "externalIp")', function() {
        // TODO: update the code to test the property externalIp
        expect(instance).to.have.property('externalIp');
        // expect(instance.externalIp).to.be(expectedValueLiteral);
      });

      it('should have the property accountName (base name: "accountName")', function() {
        // TODO: update the code to test the property accountName
        expect(instance).to.have.property('accountName');
        // expect(instance.accountName).to.be(expectedValueLiteral);
      });

      it('should have the property groupName (base name: "groupName")', function() {
        // TODO: update the code to test the property groupName
        expect(instance).to.have.property('groupName');
        // expect(instance.groupName).to.be(expectedValueLiteral);
      });

      it('should have the property accountId (base name: "accountId")', function() {
        // TODO: update the code to test the property accountId
        expect(instance).to.have.property('accountId');
        // expect(instance.accountId).to.be(expectedValueLiteral);
      });

      it('should have the property agentDetectionState (base name: "agentDetectionState")', function() {
        // TODO: update the code to test the property agentDetectionState
        expect(instance).to.have.property('agentDetectionState');
        // expect(instance.agentDetectionState).to.be(expectedValueLiteral);
      });

      it('should have the property agentUuid (base name: "agentUuid")', function() {
        // TODO: update the code to test the property agentUuid
        expect(instance).to.have.property('agentUuid');
        // expect(instance.agentUuid).to.be(expectedValueLiteral);
      });

      it('should have the property agentMitigationMode (base name: "agentMitigationMode")', function() {
        // TODO: update the code to test the property agentMitigationMode
        expect(instance).to.have.property('agentMitigationMode');
        // expect(instance.agentMitigationMode).to.be(expectedValueLiteral);
      });

      it('should have the property siteId (base name: "siteId")', function() {
        // TODO: update the code to test the property siteId
        expect(instance).to.have.property('siteId');
        // expect(instance.siteId).to.be(expectedValueLiteral);
      });

      it('should have the property agentIpV4 (base name: "agentIpV4")', function() {
        // TODO: update the code to test the property agentIpV4
        expect(instance).to.have.property('agentIpV4');
        // expect(instance.agentIpV4).to.be(expectedValueLiteral);
      });

      it('should have the property agentRegisteredAt (base name: "agentRegisteredAt")', function() {
        // TODO: update the code to test the property agentRegisteredAt
        expect(instance).to.have.property('agentRegisteredAt');
        // expect(instance.agentRegisteredAt).to.be(expectedValueLiteral);
      });

      it('should have the property siteName (base name: "siteName")', function() {
        // TODO: update the code to test the property siteName
        expect(instance).to.have.property('siteName');
        // expect(instance.siteName).to.be(expectedValueLiteral);
      });

      it('should have the property agentIpV6 (base name: "agentIpV6")', function() {
        // TODO: update the code to test the property agentIpV6
        expect(instance).to.have.property('agentIpV6');
        // expect(instance.agentIpV6).to.be(expectedValueLiteral);
      });

      it('should have the property agentLastLoggedInUpn (base name: "agentLastLoggedInUpn")', function() {
        // TODO: update the code to test the property agentLastLoggedInUpn
        expect(instance).to.have.property('agentLastLoggedInUpn');
        // expect(instance.agentLastLoggedInUpn).to.be(expectedValueLiteral);
      });

      it('should have the property cloudProviders (base name: "cloudProviders")', function() {
        // TODO: update the code to test the property cloudProviders
        expect(instance).to.have.property('cloudProviders');
        // expect(instance.cloudProviders).to.be(expectedValueLiteral);
      });

      it('should have the property agentOsRevision (base name: "agentOsRevision")', function() {
        // TODO: update the code to test the property agentOsRevision
        expect(instance).to.have.property('agentOsRevision');
        // expect(instance.agentOsRevision).to.be(expectedValueLiteral);
      });

      it('should have the property groupId (base name: "groupId")', function() {
        // TODO: update the code to test the property groupId
        expect(instance).to.have.property('groupId');
        // expect(instance.groupId).to.be(expectedValueLiteral);
      });

    });
  });

}));
