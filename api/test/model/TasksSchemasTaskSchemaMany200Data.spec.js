/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TasksSchemasTaskSchemaMany200Data', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.TasksSchemasTaskSchemaMany200Data();
      });

      it('should create an instance of TasksSchemasTaskSchemaMany200Data', function() {
        // TODO: update the code to test TasksSchemasTaskSchemaMany200Data
        expect(instance).to.be.a(S1MgmtApi.TasksSchemasTaskSchemaMany200Data);
      });

      it('should have the property detailedStatus (base name: "detailedStatus")', function() {
        // TODO: update the code to test the property detailedStatus
        expect(instance).to.have.property('detailedStatus');
        // expect(instance.detailedStatus).to.be(expectedValueLiteral);
      });

      it('should have the property agentUuid (base name: "agentUuid")', function() {
        // TODO: update the code to test the property agentUuid
        expect(instance).to.have.property('agentUuid');
        // expect(instance.agentUuid).to.be(expectedValueLiteral);
      });

      it('should have the property accountId (base name: "accountId")', function() {
        // TODO: update the code to test the property accountId
        expect(instance).to.have.property('accountId');
        // expect(instance.accountId).to.be(expectedValueLiteral);
      });

      it('should have the property agentMachineType (base name: "agentMachineType")', function() {
        // TODO: update the code to test the property agentMachineType
        expect(instance).to.have.property('agentMachineType');
        // expect(instance.agentMachineType).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updatedAt")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property siteId (base name: "siteId")', function() {
        // TODO: update the code to test the property siteId
        expect(instance).to.have.property('siteId');
        // expect(instance.siteId).to.be(expectedValueLiteral);
      });

      it('should have the property scriptResultsPath (base name: "scriptResultsPath")', function() {
        // TODO: update the code to test the property scriptResultsPath
        expect(instance).to.have.property('scriptResultsPath');
        // expect(instance.scriptResultsPath).to.be(expectedValueLiteral);
      });

      it('should have the property accountName (base name: "accountName")', function() {
        // TODO: update the code to test the property accountName
        expect(instance).to.have.property('accountName');
        // expect(instance.accountName).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property agentIsActive (base name: "agentIsActive")', function() {
        // TODO: update the code to test the property agentIsActive
        expect(instance).to.have.property('agentIsActive');
        // expect(instance.agentIsActive).to.be(expectedValueLiteral);
      });

      it('should have the property scriptResultsSignature (base name: "scriptResultsSignature")', function() {
        // TODO: update the code to test the property scriptResultsSignature
        expect(instance).to.have.property('scriptResultsSignature');
        // expect(instance.scriptResultsSignature).to.be(expectedValueLiteral);
      });

      it('should have the property groupName (base name: "groupName")', function() {
        // TODO: update the code to test the property groupName
        expect(instance).to.have.property('groupName');
        // expect(instance.groupName).to.be(expectedValueLiteral);
      });

      it('should have the property initiatedById (base name: "initiatedById")', function() {
        // TODO: update the code to test the property initiatedById
        expect(instance).to.have.property('initiatedById');
        // expect(instance.initiatedById).to.be(expectedValueLiteral);
      });

      it('should have the property statusCode (base name: "statusCode")', function() {
        // TODO: update the code to test the property statusCode
        expect(instance).to.have.property('statusCode');
        // expect(instance.statusCode).to.be(expectedValueLiteral);
      });

      it('should have the property agentId (base name: "agentId")', function() {
        // TODO: update the code to test the property agentId
        expect(instance).to.have.property('agentId');
        // expect(instance.agentId).to.be(expectedValueLiteral);
      });

      it('should have the property agentIsDecommissioned (base name: "agentIsDecommissioned")', function() {
        // TODO: update the code to test the property agentIsDecommissioned
        expect(instance).to.have.property('agentIsDecommissioned');
        // expect(instance.agentIsDecommissioned).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property agentOsType (base name: "agentOsType")', function() {
        // TODO: update the code to test the property agentOsType
        expect(instance).to.have.property('agentOsType');
        // expect(instance.agentOsType).to.be(expectedValueLiteral);
      });

      it('should have the property parentTaskId (base name: "parentTaskId")', function() {
        // TODO: update the code to test the property parentTaskId
        expect(instance).to.have.property('parentTaskId');
        // expect(instance.parentTaskId).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property groupId (base name: "groupId")', function() {
        // TODO: update the code to test the property groupId
        expect(instance).to.have.property('groupId');
        // expect(instance.groupId).to.be(expectedValueLiteral);
      });

      it('should have the property siteName (base name: "siteName")', function() {
        // TODO: update the code to test the property siteName
        expect(instance).to.have.property('siteName');
        // expect(instance.siteName).to.be(expectedValueLiteral);
      });

      it('should have the property statusDescription (base name: "statusDescription")', function() {
        // TODO: update the code to test the property statusDescription
        expect(instance).to.have.property('statusDescription');
        // expect(instance.statusDescription).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property initiatedBy (base name: "initiatedBy")', function() {
        // TODO: update the code to test the property initiatedBy
        expect(instance).to.have.property('initiatedBy');
        // expect(instance.initiatedBy).to.be(expectedValueLiteral);
      });

      it('should have the property scriptResultsBucket (base name: "scriptResultsBucket")', function() {
        // TODO: update the code to test the property scriptResultsBucket
        expect(instance).to.have.property('scriptResultsBucket');
        // expect(instance.scriptResultsBucket).to.be(expectedValueLiteral);
      });

      it('should have the property agentComputerName (base name: "agentComputerName")', function() {
        // TODO: update the code to test the property agentComputerName
        expect(instance).to.have.property('agentComputerName');
        // expect(instance.agentComputerName).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

    });
  });

}));
