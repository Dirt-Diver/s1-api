/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SitesSitePutSchemaDataPolicyEngines', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.SitesSitePutSchemaDataPolicyEngines();
      });

      it('should create an instance of SitesSitePutSchemaDataPolicyEngines', function() {
        // TODO: update the code to test SitesSitePutSchemaDataPolicyEngines
        expect(instance).to.be.a(S1MgmtApi.SitesSitePutSchemaDataPolicyEngines);
      });

      it('should have the property lateralMovement (base name: "lateralMovement")', function() {
        // TODO: update the code to test the property lateralMovement
        expect(instance).to.have.property('lateralMovement');
        // expect(instance.lateralMovement).to.be(expectedValueLiteral);
      });

      it('should have the property preExecutionSuspicious (base name: "preExecutionSuspicious")', function() {
        // TODO: update the code to test the property preExecutionSuspicious
        expect(instance).to.have.property('preExecutionSuspicious');
        // expect(instance.preExecutionSuspicious).to.be(expectedValueLiteral);
      });

      it('should have the property preExecution (base name: "preExecution")', function() {
        // TODO: update the code to test the property preExecution
        expect(instance).to.have.property('preExecution');
        // expect(instance.preExecution).to.be(expectedValueLiteral);
      });

      it('should have the property dataFiles (base name: "dataFiles")', function() {
        // TODO: update the code to test the property dataFiles
        expect(instance).to.have.property('dataFiles');
        // expect(instance.dataFiles).to.be(expectedValueLiteral);
      });

      it('should have the property pup (base name: "pup")', function() {
        // TODO: update the code to test the property pup
        expect(instance).to.have.property('pup');
        // expect(instance.pup).to.be(expectedValueLiteral);
      });

      it('should have the property executables (base name: "executables")', function() {
        // TODO: update the code to test the property executables
        expect(instance).to.have.property('executables');
        // expect(instance.executables).to.be(expectedValueLiteral);
      });

      it('should have the property penetration (base name: "penetration")', function() {
        // TODO: update the code to test the property penetration
        expect(instance).to.have.property('penetration');
        // expect(instance.penetration).to.be(expectedValueLiteral);
      });

      it('should have the property applicationControl (base name: "applicationControl")', function() {
        // TODO: update the code to test the property applicationControl
        expect(instance).to.have.property('applicationControl');
        // expect(instance.applicationControl).to.be(expectedValueLiteral);
      });

      it('should have the property reputation (base name: "reputation")', function() {
        // TODO: update the code to test the property reputation
        expect(instance).to.have.property('reputation');
        // expect(instance.reputation).to.be(expectedValueLiteral);
      });

      it('should have the property exploits (base name: "exploits")', function() {
        // TODO: update the code to test the property exploits
        expect(instance).to.have.property('exploits');
        // expect(instance.exploits).to.be(expectedValueLiteral);
      });

      it('should have the property remoteShell (base name: "remoteShell")', function() {
        // TODO: update the code to test the property remoteShell
        expect(instance).to.have.property('remoteShell');
        // expect(instance.remoteShell).to.be(expectedValueLiteral);
      });

    });
  });

}));
