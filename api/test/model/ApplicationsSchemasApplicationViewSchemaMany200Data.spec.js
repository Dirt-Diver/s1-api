/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ApplicationsSchemasApplicationViewSchemaMany200Data', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.ApplicationsSchemasApplicationViewSchemaMany200Data();
      });

      it('should create an instance of ApplicationsSchemasApplicationViewSchemaMany200Data', function() {
        // TODO: update the code to test ApplicationsSchemasApplicationViewSchemaMany200Data
        expect(instance).to.be.a(S1MgmtApi.ApplicationsSchemasApplicationViewSchemaMany200Data);
      });

      it('should have the property agentInfected (base name: "agentInfected")', function() {
        // TODO: update the code to test the property agentInfected
        expect(instance).to.have.property('agentInfected');
        // expect(instance.agentInfected).to.be(expectedValueLiteral);
      });

      it('should have the property agentUuid (base name: "agentUuid")', function() {
        // TODO: update the code to test the property agentUuid
        expect(instance).to.have.property('agentUuid');
        // expect(instance.agentUuid).to.be(expectedValueLiteral);
      });

      it('should have the property agentMachineType (base name: "agentMachineType")', function() {
        // TODO: update the code to test the property agentMachineType
        expect(instance).to.have.property('agentMachineType');
        // expect(instance.agentMachineType).to.be(expectedValueLiteral);
      });

      it('should have the property size (base name: "size")', function() {
        // TODO: update the code to test the property size
        expect(instance).to.have.property('size');
        // expect(instance.size).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updatedAt")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property agentNetworkStatus (base name: "agentNetworkStatus")', function() {
        // TODO: update the code to test the property agentNetworkStatus
        expect(instance).to.have.property('agentNetworkStatus');
        // expect(instance.agentNetworkStatus).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property agentIsActive (base name: "agentIsActive")', function() {
        // TODO: update the code to test the property agentIsActive
        expect(instance).to.have.property('agentIsActive');
        // expect(instance.agentIsActive).to.be(expectedValueLiteral);
      });

      it('should have the property agentOperationalState (base name: "agentOperationalState")', function() {
        // TODO: update the code to test the property agentOperationalState
        expect(instance).to.have.property('agentOperationalState');
        // expect(instance.agentOperationalState).to.be(expectedValueLiteral);
      });

      it('should have the property signed (base name: "signed")', function() {
        // TODO: update the code to test the property signed
        expect(instance).to.have.property('signed');
        // expect(instance.signed).to.be(expectedValueLiteral);
      });

      it('should have the property agentId (base name: "agentId")', function() {
        // TODO: update the code to test the property agentId
        expect(instance).to.have.property('agentId');
        // expect(instance.agentId).to.be(expectedValueLiteral);
      });

      it('should have the property publisher (base name: "publisher")', function() {
        // TODO: update the code to test the property publisher
        expect(instance).to.have.property('publisher');
        // expect(instance.publisher).to.be(expectedValueLiteral);
      });

      it('should have the property version (base name: "version")', function() {
        // TODO: update the code to test the property version
        expect(instance).to.have.property('version');
        // expect(instance.version).to.be(expectedValueLiteral);
      });

      it('should have the property agentIsDecommissioned (base name: "agentIsDecommissioned")', function() {
        // TODO: update the code to test the property agentIsDecommissioned
        expect(instance).to.have.property('agentIsDecommissioned');
        // expect(instance.agentIsDecommissioned).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property agentOsType (base name: "agentOsType")', function() {
        // TODO: update the code to test the property agentOsType
        expect(instance).to.have.property('agentOsType');
        // expect(instance.agentOsType).to.be(expectedValueLiteral);
      });

      it('should have the property agentVersion (base name: "agentVersion")', function() {
        // TODO: update the code to test the property agentVersion
        expect(instance).to.have.property('agentVersion');
        // expect(instance.agentVersion).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property osType (base name: "osType")', function() {
        // TODO: update the code to test the property osType
        expect(instance).to.have.property('osType');
        // expect(instance.osType).to.be(expectedValueLiteral);
      });

      it('should have the property agentComputerName (base name: "agentComputerName")', function() {
        // TODO: update the code to test the property agentComputerName
        expect(instance).to.have.property('agentComputerName');
        // expect(instance.agentComputerName).to.be(expectedValueLiteral);
      });

      it('should have the property riskLevel (base name: "riskLevel")', function() {
        // TODO: update the code to test the property riskLevel
        expect(instance).to.have.property('riskLevel');
        // expect(instance.riskLevel).to.be(expectedValueLiteral);
      });

      it('should have the property installedAt (base name: "installedAt")', function() {
        // TODO: update the code to test the property installedAt
        expect(instance).to.have.property('installedAt');
        // expect(instance.installedAt).to.be(expectedValueLiteral);
      });

      it('should have the property agentDomain (base name: "agentDomain")', function() {
        // TODO: update the code to test the property agentDomain
        expect(instance).to.have.property('agentDomain');
        // expect(instance.agentDomain).to.be(expectedValueLiteral);
      });

    });
  });

}));
