/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SchemasPutRangerSchemaData', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.SchemasPutRangerSchemaData();
      });

      it('should create an instance of SchemasPutRangerSchemaData', function() {
        // TODO: update the code to test SchemasPutRangerSchemaData
        expect(instance).to.be.a(S1MgmtApi.SchemasPutRangerSchemaData);
      });

      it('should have the property snmpScan (base name: "snmpScan")', function() {
        // TODO: update the code to test the property snmpScan
        expect(instance).to.have.property('snmpScan');
        // expect(instance.snmpScan).to.be(expectedValueLiteral);
      });

      it('should have the property accountId (base name: "accountId")', function() {
        // TODO: update the code to test the property accountId
        expect(instance).to.have.property('accountId');
        // expect(instance.accountId).to.be(expectedValueLiteral);
      });

      it('should have the property useFullDnsScan (base name: "useFullDnsScan")', function() {
        // TODO: update the code to test the property useFullDnsScan
        expect(instance).to.have.property('useFullDnsScan');
        // expect(instance.useFullDnsScan).to.be(expectedValueLiteral);
      });

      it('should have the property icmpScan (base name: "icmpScan")', function() {
        // TODO: update the code to test the property icmpScan
        expect(instance).to.have.property('icmpScan');
        // expect(instance.icmpScan).to.be(expectedValueLiteral);
      });

      it('should have the property tcpPorts (base name: "tcpPorts")', function() {
        // TODO: update the code to test the property tcpPorts
        expect(instance).to.have.property('tcpPorts');
        // expect(instance.tcpPorts).to.be(expectedValueLiteral);
      });

      it('should have the property scopeId (base name: "scopeId")', function() {
        // TODO: update the code to test the property scopeId
        expect(instance).to.have.property('scopeId');
        // expect(instance.scopeId).to.be(expectedValueLiteral);
      });

      it('should have the property scanOnlyLocalSubnets (base name: "scanOnlyLocalSubnets")', function() {
        // TODO: update the code to test the property scanOnlyLocalSubnets
        expect(instance).to.have.property('scanOnlyLocalSubnets');
        // expect(instance.scanOnlyLocalSubnets).to.be(expectedValueLiteral);
      });

      it('should have the property minAgentsInNetworkToScan (base name: "minAgentsInNetworkToScan")', function() {
        // TODO: update the code to test the property minAgentsInNetworkToScan
        expect(instance).to.have.property('minAgentsInNetworkToScan');
        // expect(instance.minAgentsInNetworkToScan).to.be(expectedValueLiteral);
      });

      it('should have the property smbScan (base name: "smbScan")', function() {
        // TODO: update the code to test the property smbScan
        expect(instance).to.have.property('smbScan');
        // expect(instance.smbScan).to.be(expectedValueLiteral);
      });

      it('should have the property combineDevices (base name: "combineDevices")', function() {
        // TODO: update the code to test the property combineDevices
        expect(instance).to.have.property('combineDevices');
        // expect(instance.combineDevices).to.be(expectedValueLiteral);
      });

      it('should have the property udpPortScan (base name: "udpPortScan")', function() {
        // TODO: update the code to test the property udpPortScan
        expect(instance).to.have.property('udpPortScan');
        // expect(instance.udpPortScan).to.be(expectedValueLiteral);
      });

      it('should have the property udpPorts (base name: "udpPorts")', function() {
        // TODO: update the code to test the property udpPorts
        expect(instance).to.have.property('udpPorts');
        // expect(instance.udpPorts).to.be(expectedValueLiteral);
      });

      it('should have the property specificPorts (base name: "specificPorts")', function() {
        // TODO: update the code to test the property specificPorts
        expect(instance).to.have.property('specificPorts');
        // expect(instance.specificPorts).to.be(expectedValueLiteral);
      });

      it('should have the property enabled (base name: "enabled")', function() {
        // TODO: update the code to test the property enabled
        expect(instance).to.have.property('enabled');
        // expect(instance.enabled).to.be(expectedValueLiteral);
      });

      it('should have the property usePeriodicSnapshots (base name: "usePeriodicSnapshots")', function() {
        // TODO: update the code to test the property usePeriodicSnapshots
        expect(instance).to.have.property('usePeriodicSnapshots');
        // expect(instance.usePeriodicSnapshots).to.be(expectedValueLiteral);
      });

      it('should have the property rdnsScan (base name: "rdnsScan")', function() {
        // TODO: update the code to test the property rdnsScan
        expect(instance).to.have.property('rdnsScan');
        // expect(instance.rdnsScan).to.be(expectedValueLiteral);
      });

      it('should have the property newNetworkInHours (base name: "newNetworkInHours")', function() {
        // TODO: update the code to test the property newNetworkInHours
        expect(instance).to.have.property('newNetworkInHours');
        // expect(instance.newNetworkInHours).to.be(expectedValueLiteral);
      });

      it('should have the property multiScanSsdp (base name: "multiScanSsdp")', function() {
        // TODO: update the code to test the property multiScanSsdp
        expect(instance).to.have.property('multiScanSsdp');
        // expect(instance.multiScanSsdp).to.be(expectedValueLiteral);
      });

      it('should have the property autoEnableNetworks (base name: "autoEnableNetworks")', function() {
        // TODO: update the code to test the property autoEnableNetworks
        expect(instance).to.have.property('autoEnableNetworks');
        // expect(instance.autoEnableNetworks).to.be(expectedValueLiteral);
      });

      it('should have the property snapshotPeriod (base name: "snapshotPeriod")', function() {
        // TODO: update the code to test the property snapshotPeriod
        expect(instance).to.have.property('snapshotPeriod');
        // expect(instance.snapshotPeriod).to.be(expectedValueLiteral);
      });

      it('should have the property networkDecommissionValue (base name: "networkDecommissionValue")', function() {
        // TODO: update the code to test the property networkDecommissionValue
        expect(instance).to.have.property('networkDecommissionValue');
        // expect(instance.networkDecommissionValue).to.be(expectedValueLiteral);
      });

      it('should have the property tcpPortScan (base name: "tcpPortScan")', function() {
        // TODO: update the code to test the property tcpPortScan
        expect(instance).to.have.property('tcpPortScan');
        // expect(instance.tcpPortScan).to.be(expectedValueLiteral);
      });

      it('should have the property restrictions (base name: "restrictions")', function() {
        // TODO: update the code to test the property restrictions
        expect(instance).to.have.property('restrictions');
        // expect(instance.restrictions).to.be(expectedValueLiteral);
      });

      it('should have the property mdnsScan (base name: "mdnsScan")', function() {
        // TODO: update the code to test the property mdnsScan
        expect(instance).to.have.property('mdnsScan');
        // expect(instance.mdnsScan).to.be(expectedValueLiteral);
      });

      it('should have the property useSpecificPorts (base name: "useSpecificPorts")', function() {
        // TODO: update the code to test the property useSpecificPorts
        expect(instance).to.have.property('useSpecificPorts');
        // expect(instance.useSpecificPorts).to.be(expectedValueLiteral);
      });

    });
  });

}));
