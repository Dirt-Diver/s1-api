/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ThreatsSchemasThreatSchemaMany200AgentRealtimeInfo', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.ThreatsSchemasThreatSchemaMany200AgentRealtimeInfo();
      });

      it('should create an instance of ThreatsSchemasThreatSchemaMany200AgentRealtimeInfo', function() {
        // TODO: update the code to test ThreatsSchemasThreatSchemaMany200AgentRealtimeInfo
        expect(instance).to.be.a(S1MgmtApi.ThreatsSchemasThreatSchemaMany200AgentRealtimeInfo);
      });

      it('should have the property agentIsActive (base name: "agentIsActive")', function() {
        // TODO: update the code to test the property agentIsActive
        expect(instance).to.have.property('agentIsActive');
        // expect(instance.agentIsActive).to.be(expectedValueLiteral);
      });

      it('should have the property scanFinishedAt (base name: "scanFinishedAt")', function() {
        // TODO: update the code to test the property scanFinishedAt
        expect(instance).to.have.property('scanFinishedAt');
        // expect(instance.scanFinishedAt).to.be(expectedValueLiteral);
      });

      it('should have the property agentMitigationMode (base name: "agentMitigationMode")', function() {
        // TODO: update the code to test the property agentMitigationMode
        expect(instance).to.have.property('agentMitigationMode');
        // expect(instance.agentMitigationMode).to.be(expectedValueLiteral);
      });

      it('should have the property agentInfected (base name: "agentInfected")', function() {
        // TODO: update the code to test the property agentInfected
        expect(instance).to.have.property('agentInfected');
        // expect(instance.agentInfected).to.be(expectedValueLiteral);
      });

      it('should have the property operationalState (base name: "operationalState")', function() {
        // TODO: update the code to test the property operationalState
        expect(instance).to.have.property('operationalState');
        // expect(instance.operationalState).to.be(expectedValueLiteral);
      });

      it('should have the property accountId (base name: "accountId")', function() {
        // TODO: update the code to test the property accountId
        expect(instance).to.have.property('accountId');
        // expect(instance.accountId).to.be(expectedValueLiteral);
      });

      it('should have the property agentMachineType (base name: "agentMachineType")', function() {
        // TODO: update the code to test the property agentMachineType
        expect(instance).to.have.property('agentMachineType');
        // expect(instance.agentMachineType).to.be(expectedValueLiteral);
      });

      it('should have the property siteId (base name: "siteId")', function() {
        // TODO: update the code to test the property siteId
        expect(instance).to.have.property('siteId');
        // expect(instance.siteId).to.be(expectedValueLiteral);
      });

      it('should have the property storageType (base name: "storageType")', function() {
        // TODO: update the code to test the property storageType
        expect(instance).to.have.property('storageType');
        // expect(instance.storageType).to.be(expectedValueLiteral);
      });

      it('should have the property userActionsNeeded (base name: "userActionsNeeded")', function() {
        // TODO: update the code to test the property userActionsNeeded
        expect(instance).to.have.property('userActionsNeeded');
        // expect(instance.userActionsNeeded).to.be(expectedValueLiteral);
      });

      it('should have the property rebootRequired (base name: "rebootRequired")', function() {
        // TODO: update the code to test the property rebootRequired
        expect(instance).to.have.property('rebootRequired');
        // expect(instance.rebootRequired).to.be(expectedValueLiteral);
      });

      it('should have the property agentComputerName (base name: "agentComputerName")', function() {
        // TODO: update the code to test the property agentComputerName
        expect(instance).to.have.property('agentComputerName');
        // expect(instance.agentComputerName).to.be(expectedValueLiteral);
      });

      it('should have the property agentUuid (base name: "agentUuid")', function() {
        // TODO: update the code to test the property agentUuid
        expect(instance).to.have.property('agentUuid');
        // expect(instance.agentUuid).to.be(expectedValueLiteral);
      });

      it('should have the property accountName (base name: "accountName")', function() {
        // TODO: update the code to test the property accountName
        expect(instance).to.have.property('accountName');
        // expect(instance.accountName).to.be(expectedValueLiteral);
      });

      it('should have the property agentId (base name: "agentId")', function() {
        // TODO: update the code to test the property agentId
        expect(instance).to.have.property('agentId');
        // expect(instance.agentId).to.be(expectedValueLiteral);
      });

      it('should have the property agentDecommissionedAt (base name: "agentDecommissionedAt")', function() {
        // TODO: update the code to test the property agentDecommissionedAt
        expect(instance).to.have.property('agentDecommissionedAt');
        // expect(instance.agentDecommissionedAt).to.be(expectedValueLiteral);
      });

      it('should have the property groupName (base name: "groupName")', function() {
        // TODO: update the code to test the property groupName
        expect(instance).to.have.property('groupName');
        // expect(instance.groupName).to.be(expectedValueLiteral);
      });

      it('should have the property agentIsDecommissioned (base name: "agentIsDecommissioned")', function() {
        // TODO: update the code to test the property agentIsDecommissioned
        expect(instance).to.have.property('agentIsDecommissioned');
        // expect(instance.agentIsDecommissioned).to.be(expectedValueLiteral);
      });

      it('should have the property activeThreats (base name: "activeThreats")', function() {
        // TODO: update the code to test the property activeThreats
        expect(instance).to.have.property('activeThreats');
        // expect(instance.activeThreats).to.be(expectedValueLiteral);
      });

      it('should have the property agentOsName (base name: "agentOsName")', function() {
        // TODO: update the code to test the property agentOsName
        expect(instance).to.have.property('agentOsName');
        // expect(instance.agentOsName).to.be(expectedValueLiteral);
      });

      it('should have the property agentNetworkStatus (base name: "agentNetworkStatus")', function() {
        // TODO: update the code to test the property agentNetworkStatus
        expect(instance).to.have.property('agentNetworkStatus');
        // expect(instance.agentNetworkStatus).to.be(expectedValueLiteral);
      });

      it('should have the property scanStatus (base name: "scanStatus")', function() {
        // TODO: update the code to test the property scanStatus
        expect(instance).to.have.property('scanStatus');
        // expect(instance.scanStatus).to.be(expectedValueLiteral);
      });

      it('should have the property networkInterfaces (base name: "networkInterfaces")', function() {
        // TODO: update the code to test the property networkInterfaces
        expect(instance).to.have.property('networkInterfaces');
        // expect(instance.networkInterfaces).to.be(expectedValueLiteral);
      });

      it('should have the property scanStartedAt (base name: "scanStartedAt")', function() {
        // TODO: update the code to test the property scanStartedAt
        expect(instance).to.have.property('scanStartedAt');
        // expect(instance.scanStartedAt).to.be(expectedValueLiteral);
      });

      it('should have the property groupId (base name: "groupId")', function() {
        // TODO: update the code to test the property groupId
        expect(instance).to.have.property('groupId');
        // expect(instance.groupId).to.be(expectedValueLiteral);
      });

      it('should have the property siteName (base name: "siteName")', function() {
        // TODO: update the code to test the property siteName
        expect(instance).to.have.property('siteName');
        // expect(instance.siteName).to.be(expectedValueLiteral);
      });

      it('should have the property agentVersion (base name: "agentVersion")', function() {
        // TODO: update the code to test the property agentVersion
        expect(instance).to.have.property('agentVersion');
        // expect(instance.agentVersion).to.be(expectedValueLiteral);
      });

      it('should have the property storageName (base name: "storageName")', function() {
        // TODO: update the code to test the property storageName
        expect(instance).to.have.property('storageName');
        // expect(instance.storageName).to.be(expectedValueLiteral);
      });

      it('should have the property agentOsType (base name: "agentOsType")', function() {
        // TODO: update the code to test the property agentOsType
        expect(instance).to.have.property('agentOsType');
        // expect(instance.agentOsType).to.be(expectedValueLiteral);
      });

      it('should have the property agentDomain (base name: "agentDomain")', function() {
        // TODO: update the code to test the property agentDomain
        expect(instance).to.have.property('agentDomain');
        // expect(instance.agentDomain).to.be(expectedValueLiteral);
      });

      it('should have the property scanAbortedAt (base name: "scanAbortedAt")', function() {
        // TODO: update the code to test the property scanAbortedAt
        expect(instance).to.have.property('scanAbortedAt');
        // expect(instance.scanAbortedAt).to.be(expectedValueLiteral);
      });

      it('should have the property agentOsRevision (base name: "agentOsRevision")', function() {
        // TODO: update the code to test the property agentOsRevision
        expect(instance).to.have.property('agentOsRevision');
        // expect(instance.agentOsRevision).to.be(expectedValueLiteral);
      });

    });
  });

}));
