/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('AgentsSchemasAgentViewSchemaMany200Data', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.AgentsSchemasAgentViewSchemaMany200Data();
      });

      it('should create an instance of AgentsSchemasAgentViewSchemaMany200Data', function() {
        // TODO: update the code to test AgentsSchemasAgentViewSchemaMany200Data
        expect(instance).to.be.a(S1MgmtApi.AgentsSchemasAgentViewSchemaMany200Data);
      });

      it('should have the property licenseKey (base name: "licenseKey")', function() {
        // TODO: update the code to test the property licenseKey
        expect(instance).to.have.property('licenseKey');
        // expect(instance.licenseKey).to.be(expectedValueLiteral);
      });

      it('should have the property machineType (base name: "machineType")', function() {
        // TODO: update the code to test the property machineType
        expect(instance).to.have.property('machineType');
        // expect(instance.machineType).to.be(expectedValueLiteral);
      });

      it('should have the property mitigationModeSuspicious (base name: "mitigationModeSuspicious")', function() {
        // TODO: update the code to test the property mitigationModeSuspicious
        expect(instance).to.have.property('mitigationModeSuspicious');
        // expect(instance.mitigationModeSuspicious).to.be(expectedValueLiteral);
      });

      it('should have the property inRemoteShellSession (base name: "inRemoteShellSession")', function() {
        // TODO: update the code to test the property inRemoteShellSession
        expect(instance).to.have.property('inRemoteShellSession');
        // expect(instance.inRemoteShellSession).to.be(expectedValueLiteral);
      });

      it('should have the property cpuCount (base name: "cpuCount")', function() {
        // TODO: update the code to test the property cpuCount
        expect(instance).to.have.property('cpuCount');
        // expect(instance.cpuCount).to.be(expectedValueLiteral);
      });

      it('should have the property externalIp (base name: "externalIp")', function() {
        // TODO: update the code to test the property externalIp
        expect(instance).to.have.property('externalIp');
        // expect(instance.externalIp).to.be(expectedValueLiteral);
      });

      it('should have the property hasContainerizedWorkload (base name: "hasContainerizedWorkload")', function() {
        // TODO: update the code to test the property hasContainerizedWorkload
        expect(instance).to.have.property('hasContainerizedWorkload');
        // expect(instance.hasContainerizedWorkload).to.be(expectedValueLiteral);
      });

      it('should have the property threatRebootRequired (base name: "threatRebootRequired")', function() {
        // TODO: update the code to test the property threatRebootRequired
        expect(instance).to.have.property('threatRebootRequired');
        // expect(instance.threatRebootRequired).to.be(expectedValueLiteral);
      });

      it('should have the property detectionState (base name: "detectionState")', function() {
        // TODO: update the code to test the property detectionState
        expect(instance).to.have.property('detectionState');
        // expect(instance.detectionState).to.be(expectedValueLiteral);
      });

      it('should have the property consoleMigrationStatus (base name: "consoleMigrationStatus")', function() {
        // TODO: update the code to test the property consoleMigrationStatus
        expect(instance).to.have.property('consoleMigrationStatus');
        // expect(instance.consoleMigrationStatus).to.be(expectedValueLiteral);
      });

      it('should have the property lastSuccessfulScanDate (base name: "lastSuccessfulScanDate")', function() {
        // TODO: update the code to test the property lastSuccessfulScanDate
        expect(instance).to.have.property('lastSuccessfulScanDate');
        // expect(instance.lastSuccessfulScanDate).to.be(expectedValueLiteral);
      });

      it('should have the property agentVersion (base name: "agentVersion")', function() {
        // TODO: update the code to test the property agentVersion
        expect(instance).to.have.property('agentVersion');
        // expect(instance.agentVersion).to.be(expectedValueLiteral);
      });

      it('should have the property lastLoggedInUserName (base name: "lastLoggedInUserName")', function() {
        // TODO: update the code to test the property lastLoggedInUserName
        expect(instance).to.have.property('lastLoggedInUserName');
        // expect(instance.lastLoggedInUserName).to.be(expectedValueLiteral);
      });

      it('should have the property encryptedApplications (base name: "encryptedApplications")', function() {
        // TODO: update the code to test the property encryptedApplications
        expect(instance).to.have.property('encryptedApplications');
        // expect(instance.encryptedApplications).to.be(expectedValueLiteral);
      });

      it('should have the property cloudProviders (base name: "cloudProviders")', function() {
        // TODO: update the code to test the property cloudProviders
        expect(instance).to.have.property('cloudProviders');
        // expect(instance.cloudProviders).to.be(expectedValueLiteral);
      });

      it('should have the property tags (base name: "tags")', function() {
        // TODO: update the code to test the property tags
        expect(instance).to.have.property('tags');
        // expect(instance.tags).to.be(expectedValueLiteral);
      });

      it('should have the property rangerVersion (base name: "rangerVersion")', function() {
        // TODO: update the code to test the property rangerVersion
        expect(instance).to.have.property('rangerVersion');
        // expect(instance.rangerVersion).to.be(expectedValueLiteral);
      });

      it('should have the property isActive (base name: "isActive")', function() {
        // TODO: update the code to test the property isActive
        expect(instance).to.have.property('isActive');
        // expect(instance.isActive).to.be(expectedValueLiteral);
      });

      it('should have the property mitigationMode (base name: "mitigationMode")', function() {
        // TODO: update the code to test the property mitigationMode
        expect(instance).to.have.property('mitigationMode');
        // expect(instance.mitigationMode).to.be(expectedValueLiteral);
      });

      it('should have the property operationalState (base name: "operationalState")', function() {
        // TODO: update the code to test the property operationalState
        expect(instance).to.have.property('operationalState');
        // expect(instance.operationalState).to.be(expectedValueLiteral);
      });

      it('should have the property accountId (base name: "accountId")', function() {
        // TODO: update the code to test the property accountId
        expect(instance).to.have.property('accountId');
        // expect(instance.accountId).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updatedAt")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property modelName (base name: "modelName")', function() {
        // TODO: update the code to test the property modelName
        expect(instance).to.have.property('modelName');
        // expect(instance.modelName).to.be(expectedValueLiteral);
      });

      it('should have the property totalMemory (base name: "totalMemory")', function() {
        // TODO: update the code to test the property totalMemory
        expect(instance).to.have.property('totalMemory');
        // expect(instance.totalMemory).to.be(expectedValueLiteral);
      });

      it('should have the property coreCount (base name: "coreCount")', function() {
        // TODO: update the code to test the property coreCount
        expect(instance).to.have.property('coreCount');
        // expect(instance.coreCount).to.be(expectedValueLiteral);
      });

      it('should have the property serialNumber (base name: "serialNumber")', function() {
        // TODO: update the code to test the property serialNumber
        expect(instance).to.have.property('serialNumber');
        // expect(instance.serialNumber).to.be(expectedValueLiteral);
      });

      it('should have the property activeThreats (base name: "activeThreats")', function() {
        // TODO: update the code to test the property activeThreats
        expect(instance).to.have.property('activeThreats');
        // expect(instance.activeThreats).to.be(expectedValueLiteral);
      });

      it('should have the property activeDirectory (base name: "activeDirectory")', function() {
        // TODO: update the code to test the property activeDirectory
        expect(instance).to.have.property('activeDirectory');
        // expect(instance.activeDirectory).to.be(expectedValueLiteral);
      });

      it('should have the property allowRemoteShell (base name: "allowRemoteShell")', function() {
        // TODO: update the code to test the property allowRemoteShell
        expect(instance).to.have.property('allowRemoteShell');
        // expect(instance.allowRemoteShell).to.be(expectedValueLiteral);
      });

      it('should have the property locationType (base name: "locationType")', function() {
        // TODO: update the code to test the property locationType
        expect(instance).to.have.property('locationType');
        // expect(instance.locationType).to.be(expectedValueLiteral);
      });

      it('should have the property groupIp (base name: "groupIp")', function() {
        // TODO: update the code to test the property groupIp
        expect(instance).to.have.property('groupIp');
        // expect(instance.groupIp).to.be(expectedValueLiteral);
      });

      it('should have the property groupUpdatedAt (base name: "groupUpdatedAt")', function() {
        // TODO: update the code to test the property groupUpdatedAt
        expect(instance).to.have.property('groupUpdatedAt');
        // expect(instance.groupUpdatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property networkQuarantineEnabled (base name: "networkQuarantineEnabled")', function() {
        // TODO: update the code to test the property networkQuarantineEnabled
        expect(instance).to.have.property('networkQuarantineEnabled');
        // expect(instance.networkQuarantineEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property scanStartedAt (base name: "scanStartedAt")', function() {
        // TODO: update the code to test the property scanStartedAt
        expect(instance).to.have.property('scanStartedAt');
        // expect(instance.scanStartedAt).to.be(expectedValueLiteral);
      });

      it('should have the property groupId (base name: "groupId")', function() {
        // TODO: update the code to test the property groupId
        expect(instance).to.have.property('groupId');
        // expect(instance.groupId).to.be(expectedValueLiteral);
      });

      it('should have the property lastActiveDate (base name: "lastActiveDate")', function() {
        // TODO: update the code to test the property lastActiveDate
        expect(instance).to.have.property('lastActiveDate');
        // expect(instance.lastActiveDate).to.be(expectedValueLiteral);
      });

      it('should have the property policyUpdatedAt (base name: "policyUpdatedAt")', function() {
        // TODO: update the code to test the property policyUpdatedAt
        expect(instance).to.have.property('policyUpdatedAt');
        // expect(instance.policyUpdatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property siteName (base name: "siteName")', function() {
        // TODO: update the code to test the property siteName
        expect(instance).to.have.property('siteName');
        // expect(instance.siteName).to.be(expectedValueLiteral);
      });

      it('should have the property osUsername (base name: "osUsername")', function() {
        // TODO: update the code to test the property osUsername
        expect(instance).to.have.property('osUsername');
        // expect(instance.osUsername).to.be(expectedValueLiteral);
      });

      it('should have the property osType (base name: "osType")', function() {
        // TODO: update the code to test the property osType
        expect(instance).to.have.property('osType');
        // expect(instance.osType).to.be(expectedValueLiteral);
      });

      it('should have the property showAlertIcon (base name: "showAlertIcon")', function() {
        // TODO: update the code to test the property showAlertIcon
        expect(instance).to.have.property('showAlertIcon');
        // expect(instance.showAlertIcon).to.be(expectedValueLiteral);
      });

      it('should have the property appsVulnerabilityStatus (base name: "appsVulnerabilityStatus")', function() {
        // TODO: update the code to test the property appsVulnerabilityStatus
        expect(instance).to.have.property('appsVulnerabilityStatus');
        // expect(instance.appsVulnerabilityStatus).to.be(expectedValueLiteral);
      });

      it('should have the property isUpToDate (base name: "isUpToDate")', function() {
        // TODO: update the code to test the property isUpToDate
        expect(instance).to.have.property('isUpToDate');
        // expect(instance.isUpToDate).to.be(expectedValueLiteral);
      });

      it('should have the property rangerStatus (base name: "rangerStatus")', function() {
        // TODO: update the code to test the property rangerStatus
        expect(instance).to.have.property('rangerStatus');
        // expect(instance.rangerStatus).to.be(expectedValueLiteral);
      });

      it('should have the property osRevision (base name: "osRevision")', function() {
        // TODO: update the code to test the property osRevision
        expect(instance).to.have.property('osRevision');
        // expect(instance.osRevision).to.be(expectedValueLiteral);
      });

      it('should have the property remoteProfilingState (base name: "remoteProfilingState")', function() {
        // TODO: update the code to test the property remoteProfilingState
        expect(instance).to.have.property('remoteProfilingState');
        // expect(instance.remoteProfilingState).to.be(expectedValueLiteral);
      });

      it('should have the property storageType (base name: "storageType")', function() {
        // TODO: update the code to test the property storageType
        expect(instance).to.have.property('storageType');
        // expect(instance.storageType).to.be(expectedValueLiteral);
      });

      it('should have the property operationalStateExpiration (base name: "operationalStateExpiration")', function() {
        // TODO: update the code to test the property operationalStateExpiration
        expect(instance).to.have.property('operationalStateExpiration');
        // expect(instance.operationalStateExpiration).to.be(expectedValueLiteral);
      });

      it('should have the property computerName (base name: "computerName")', function() {
        // TODO: update the code to test the property computerName
        expect(instance).to.have.property('computerName');
        // expect(instance.computerName).to.be(expectedValueLiteral);
      });

      it('should have the property uuid (base name: "uuid")', function() {
        // TODO: update the code to test the property uuid
        expect(instance).to.have.property('uuid');
        // expect(instance.uuid).to.be(expectedValueLiteral);
      });

      it('should have the property lastIpToMgmt (base name: "lastIpToMgmt")', function() {
        // TODO: update the code to test the property lastIpToMgmt
        expect(instance).to.have.property('lastIpToMgmt');
        // expect(instance.lastIpToMgmt).to.be(expectedValueLiteral);
      });

      it('should have the property accountName (base name: "accountName")', function() {
        // TODO: update the code to test the property accountName
        expect(instance).to.have.property('accountName');
        // expect(instance.accountName).to.be(expectedValueLiteral);
      });

      it('should have the property networkStatus (base name: "networkStatus")', function() {
        // TODO: update the code to test the property networkStatus
        expect(instance).to.have.property('networkStatus');
        // expect(instance.networkStatus).to.be(expectedValueLiteral);
      });

      it('should have the property scanStatus (base name: "scanStatus")', function() {
        // TODO: update the code to test the property scanStatus
        expect(instance).to.have.property('scanStatus');
        // expect(instance.scanStatus).to.be(expectedValueLiteral);
      });

      it('should have the property osArch (base name: "osArch")', function() {
        // TODO: update the code to test the property osArch
        expect(instance).to.have.property('osArch');
        // expect(instance.osArch).to.be(expectedValueLiteral);
      });

      it('should have the property locations (base name: "locations")', function() {
        // TODO: update the code to test the property locations
        expect(instance).to.have.property('locations');
        // expect(instance.locations).to.be(expectedValueLiteral);
      });

      it('should have the property isUninstalled (base name: "isUninstalled")', function() {
        // TODO: update the code to test the property isUninstalled
        expect(instance).to.have.property('isUninstalled');
        // expect(instance.isUninstalled).to.be(expectedValueLiteral);
      });

      it('should have the property storageName (base name: "storageName")', function() {
        // TODO: update the code to test the property storageName
        expect(instance).to.have.property('storageName');
        // expect(instance.storageName).to.be(expectedValueLiteral);
      });

      it('should have the property isPendingUninstall (base name: "isPendingUninstall")', function() {
        // TODO: update the code to test the property isPendingUninstall
        expect(instance).to.have.property('isPendingUninstall');
        // expect(instance.isPendingUninstall).to.be(expectedValueLiteral);
      });

      it('should have the property proxyStates (base name: "proxyStates")', function() {
        // TODO: update the code to test the property proxyStates
        expect(instance).to.have.property('proxyStates');
        // expect(instance.proxyStates).to.be(expectedValueLiteral);
      });

      it('should have the property remoteProfilingStateExpiration (base name: "remoteProfilingStateExpiration")', function() {
        // TODO: update the code to test the property remoteProfilingStateExpiration
        expect(instance).to.have.property('remoteProfilingStateExpiration');
        // expect(instance.remoteProfilingStateExpiration).to.be(expectedValueLiteral);
      });

      it('should have the property osName (base name: "osName")', function() {
        // TODO: update the code to test the property osName
        expect(instance).to.have.property('osName');
        // expect(instance.osName).to.be(expectedValueLiteral);
      });

      it('should have the property scanFinishedAt (base name: "scanFinishedAt")', function() {
        // TODO: update the code to test the property scanFinishedAt
        expect(instance).to.have.property('scanFinishedAt');
        // expect(instance.scanFinishedAt).to.be(expectedValueLiteral);
      });

      it('should have the property osStartTime (base name: "osStartTime")', function() {
        // TODO: update the code to test the property osStartTime
        expect(instance).to.have.property('osStartTime');
        // expect(instance.osStartTime).to.be(expectedValueLiteral);
      });

      it('should have the property siteId (base name: "siteId")', function() {
        // TODO: update the code to test the property siteId
        expect(instance).to.have.property('siteId');
        // expect(instance.siteId).to.be(expectedValueLiteral);
      });

      it('should have the property userActionsNeeded (base name: "userActionsNeeded")', function() {
        // TODO: update the code to test the property userActionsNeeded
        expect(instance).to.have.property('userActionsNeeded');
        // expect(instance.userActionsNeeded).to.be(expectedValueLiteral);
      });

      it('should have the property cpuId (base name: "cpuId")', function() {
        // TODO: update the code to test the property cpuId
        expect(instance).to.have.property('cpuId');
        // expect(instance.cpuId).to.be(expectedValueLiteral);
      });

      it('should have the property containerizedWorkloadCounts (base name: "containerizedWorkloadCounts")', function() {
        // TODO: update the code to test the property containerizedWorkloadCounts
        expect(instance).to.have.property('containerizedWorkloadCounts');
        // expect(instance.containerizedWorkloadCounts).to.be(expectedValueLiteral);
      });

      it('should have the property registeredAt (base name: "registeredAt")', function() {
        // TODO: update the code to test the property registeredAt
        expect(instance).to.have.property('registeredAt');
        // expect(instance.registeredAt).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property groupName (base name: "groupName")', function() {
        // TODO: update the code to test the property groupName
        expect(instance).to.have.property('groupName');
        // expect(instance.groupName).to.be(expectedValueLiteral);
      });

      it('should have the property isDecommissioned (base name: "isDecommissioned")', function() {
        // TODO: update the code to test the property isDecommissioned
        expect(instance).to.have.property('isDecommissioned');
        // expect(instance.isDecommissioned).to.be(expectedValueLiteral);
      });

      it('should have the property installerType (base name: "installerType")', function() {
        // TODO: update the code to test the property installerType
        expect(instance).to.have.property('installerType');
        // expect(instance.installerType).to.be(expectedValueLiteral);
      });

      it('should have the property infected (base name: "infected")', function() {
        // TODO: update the code to test the property infected
        expect(instance).to.have.property('infected');
        // expect(instance.infected).to.be(expectedValueLiteral);
      });

      it('should have the property externalId (base name: "externalId")', function() {
        // TODO: update the code to test the property externalId
        expect(instance).to.have.property('externalId');
        // expect(instance.externalId).to.be(expectedValueLiteral);
      });

      it('should have the property fullDiskScanLastUpdatedAt (base name: "fullDiskScanLastUpdatedAt")', function() {
        // TODO: update the code to test the property fullDiskScanLastUpdatedAt
        expect(instance).to.have.property('fullDiskScanLastUpdatedAt');
        // expect(instance.fullDiskScanLastUpdatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property networkInterfaces (base name: "networkInterfaces")', function() {
        // TODO: update the code to test the property networkInterfaces
        expect(instance).to.have.property('networkInterfaces');
        // expect(instance.networkInterfaces).to.be(expectedValueLiteral);
      });

      it('should have the property locationEnabled (base name: "locationEnabled")', function() {
        // TODO: update the code to test the property locationEnabled
        expect(instance).to.have.property('locationEnabled');
        // expect(instance.locationEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property firstFullModeTime (base name: "firstFullModeTime")', function() {
        // TODO: update the code to test the property firstFullModeTime
        expect(instance).to.have.property('firstFullModeTime');
        // expect(instance.firstFullModeTime).to.be(expectedValueLiteral);
      });

      it('should have the property firewallEnabled (base name: "firewallEnabled")', function() {
        // TODO: update the code to test the property firewallEnabled
        expect(instance).to.have.property('firewallEnabled');
        // expect(instance.firewallEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property missingPermissions (base name: "missingPermissions")', function() {
        // TODO: update the code to test the property missingPermissions
        expect(instance).to.have.property('missingPermissions');
        // expect(instance.missingPermissions).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property domain (base name: "domain")', function() {
        // TODO: update the code to test the property domain
        expect(instance).to.have.property('domain');
        // expect(instance.domain).to.be(expectedValueLiteral);
      });

      it('should have the property scanAbortedAt (base name: "scanAbortedAt")', function() {
        // TODO: update the code to test the property scanAbortedAt
        expect(instance).to.have.property('scanAbortedAt');
        // expect(instance.scanAbortedAt).to.be(expectedValueLiteral);
      });

    });
  });

}));
