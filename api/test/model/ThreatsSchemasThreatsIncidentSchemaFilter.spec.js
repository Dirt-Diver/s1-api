/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ThreatsSchemasThreatsIncidentSchemaFilter', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.ThreatsSchemasThreatsIncidentSchemaFilter();
      });

      it('should create an instance of ThreatsSchemasThreatsIncidentSchemaFilter', function() {
        // TODO: update the code to test ThreatsSchemasThreatsIncidentSchemaFilter
        expect(instance).to.be.a(S1MgmtApi.ThreatsSchemasThreatsIncidentSchemaFilter);
      });

      it('should have the property agentVersionsNin (base name: "agentVersionsNin")', function() {
        // TODO: update the code to test the property agentVersionsNin
        expect(instance).to.have.property('agentVersionsNin');
        // expect(instance.agentVersionsNin).to.be(expectedValueLiteral);
      });

      it('should have the property analystVerdictsNin (base name: "analystVerdictsNin")', function() {
        // TODO: update the code to test the property analystVerdictsNin
        expect(instance).to.have.property('analystVerdictsNin');
        // expect(instance.analystVerdictsNin).to.be(expectedValueLiteral);
      });

      it('should have the property threatDetailsContains (base name: "threatDetails__contains")', function() {
        // TODO: update the code to test the property threatDetailsContains
        expect(instance).to.have.property('threatDetailsContains');
        // expect(instance.threatDetailsContains).to.be(expectedValueLiteral);
      });

      it('should have the property classificationSources (base name: "classificationSources")', function() {
        // TODO: update the code to test the property classificationSources
        expect(instance).to.have.property('classificationSources');
        // expect(instance.classificationSources).to.be(expectedValueLiteral);
      });

      it('should have the property query (base name: "query")', function() {
        // TODO: update the code to test the property query
        expect(instance).to.have.property('query');
        // expect(instance.query).to.be(expectedValueLiteral);
      });

      it('should have the property cloudProvider (base name: "cloudProvider")', function() {
        // TODO: update the code to test the property cloudProvider
        expect(instance).to.have.property('cloudProvider');
        // expect(instance.cloudProvider).to.be(expectedValueLiteral);
      });

      it('should have the property incidentStatusesNin (base name: "incidentStatusesNin")', function() {
        // TODO: update the code to test the property incidentStatusesNin
        expect(instance).to.have.property('incidentStatusesNin');
        // expect(instance.incidentStatusesNin).to.be(expectedValueLiteral);
      });

      it('should have the property publisherNameContains (base name: "publisherName__contains")', function() {
        // TODO: update the code to test the property publisherNameContains
        expect(instance).to.have.property('publisherNameContains');
        // expect(instance.publisherNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property agentIsActive (base name: "agentIsActive")', function() {
        // TODO: update the code to test the property agentIsActive
        expect(instance).to.have.property('agentIsActive');
        // expect(instance.agentIsActive).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAtGt (base name: "updatedAt__gt")', function() {
        // TODO: update the code to test the property updatedAtGt
        expect(instance).to.have.property('updatedAtGt');
        // expect(instance.updatedAtGt).to.be(expectedValueLiteral);
      });

      it('should have the property classificationSourcesNin (base name: "classificationSourcesNin")', function() {
        // TODO: update the code to test the property classificationSourcesNin
        expect(instance).to.have.property('classificationSourcesNin');
        // expect(instance.classificationSourcesNin).to.be(expectedValueLiteral);
      });

      it('should have the property containerNameContains (base name: "containerName__contains")', function() {
        // TODO: update the code to test the property containerNameContains
        expect(instance).to.have.property('containerNameContains');
        // expect(instance.containerNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property cloudImageContains (base name: "cloudImage__contains")', function() {
        // TODO: update the code to test the property cloudImageContains
        expect(instance).to.have.property('cloudImageContains');
        // expect(instance.cloudImageContains).to.be(expectedValueLiteral);
      });

      it('should have the property hasAgentTags (base name: "hasAgentTags")', function() {
        // TODO: update the code to test the property hasAgentTags
        expect(instance).to.have.property('hasAgentTags');
        // expect(instance.hasAgentTags).to.be(expectedValueLiteral);
      });

      it('should have the property storylineContains (base name: "storyline__contains")', function() {
        // TODO: update the code to test the property storylineContains
        expect(instance).to.have.property('storylineContains');
        // expect(instance.storylineContains).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAtLte (base name: "updatedAt__lte")', function() {
        // TODO: update the code to test the property updatedAtLte
        expect(instance).to.have.property('updatedAtLte');
        // expect(instance.updatedAtLte).to.be(expectedValueLiteral);
      });

      it('should have the property classificationsNin (base name: "classificationsNin")', function() {
        // TODO: update the code to test the property classificationsNin
        expect(instance).to.have.property('classificationsNin');
        // expect(instance.classificationsNin).to.be(expectedValueLiteral);
      });

      it('should have the property groupIds (base name: "groupIds")', function() {
        // TODO: update the code to test the property groupIds
        expect(instance).to.have.property('groupIds');
        // expect(instance.groupIds).to.be(expectedValueLiteral);
      });

      it('should have the property externalTicketIds (base name: "externalTicketIds")', function() {
        // TODO: update the code to test the property externalTicketIds
        expect(instance).to.have.property('externalTicketIds');
        // expect(instance.externalTicketIds).to.be(expectedValueLiteral);
      });

      it('should have the property osTypesNin (base name: "osTypesNin")', function() {
        // TODO: update the code to test the property osTypesNin
        expect(instance).to.have.property('osTypesNin');
        // expect(instance.osTypesNin).to.be(expectedValueLiteral);
      });

      it('should have the property containerImageNameContains (base name: "containerImageName__contains")', function() {
        // TODO: update the code to test the property containerImageNameContains
        expect(instance).to.have.property('containerImageNameContains');
        // expect(instance.containerImageNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property agentIds (base name: "agentIds")', function() {
        // TODO: update the code to test the property agentIds
        expect(instance).to.have.property('agentIds');
        // expect(instance.agentIds).to.be(expectedValueLiteral);
      });

      it('should have the property k8sPodNameContains (base name: "k8sPodName__contains")', function() {
        // TODO: update the code to test the property k8sPodNameContains
        expect(instance).to.have.property('k8sPodNameContains');
        // expect(instance.k8sPodNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property contentHashes (base name: "contentHashes")', function() {
        // TODO: update the code to test the property contentHashes
        expect(instance).to.have.property('contentHashes');
        // expect(instance.contentHashes).to.be(expectedValueLiteral);
      });

      it('should have the property awsSubnetIdsContains (base name: "awsSubnetIds__contains")', function() {
        // TODO: update the code to test the property awsSubnetIdsContains
        expect(instance).to.have.property('awsSubnetIdsContains');
        // expect(instance.awsSubnetIdsContains).to.be(expectedValueLiteral);
      });

      it('should have the property agentTagsData (base name: "agentTagsData")', function() {
        // TODO: update the code to test the property agentTagsData
        expect(instance).to.have.property('agentTagsData');
        // expect(instance.agentTagsData).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAtGte (base name: "updatedAt__gte")', function() {
        // TODO: update the code to test the property updatedAtGte
        expect(instance).to.have.property('updatedAtGte');
        // expect(instance.updatedAtGte).to.be(expectedValueLiteral);
      });

      it('should have the property storylines (base name: "storylines")', function() {
        // TODO: update the code to test the property storylines
        expect(instance).to.have.property('storylines');
        // expect(instance.storylines).to.be(expectedValueLiteral);
      });

      it('should have the property k8sControllerLabelsContains (base name: "k8sControllerLabels__contains")', function() {
        // TODO: update the code to test the property k8sControllerLabelsContains
        expect(instance).to.have.property('k8sControllerLabelsContains');
        // expect(instance.k8sControllerLabelsContains).to.be(expectedValueLiteral);
      });

      it('should have the property awsSecurityGroupsContains (base name: "awsSecurityGroups__contains")', function() {
        // TODO: update the code to test the property awsSecurityGroupsContains
        expect(instance).to.have.property('awsSecurityGroupsContains');
        // expect(instance.awsSecurityGroupsContains).to.be(expectedValueLiteral);
      });

      it('should have the property k8sNodeNameContains (base name: "k8sNodeName__contains")', function() {
        // TODO: update the code to test the property k8sNodeNameContains
        expect(instance).to.have.property('k8sNodeNameContains');
        // expect(instance.k8sNodeNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property confidenceLevels (base name: "confidenceLevels")', function() {
        // TODO: update the code to test the property confidenceLevels
        expect(instance).to.have.property('confidenceLevels');
        // expect(instance.confidenceLevels).to.be(expectedValueLiteral);
      });

      it('should have the property computerNameContains (base name: "computerName__contains")', function() {
        // TODO: update the code to test the property computerNameContains
        expect(instance).to.have.property('computerNameContains');
        // expect(instance.computerNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property cloudNetworkContains (base name: "cloudNetwork__contains")', function() {
        // TODO: update the code to test the property cloudNetworkContains
        expect(instance).to.have.property('cloudNetworkContains');
        // expect(instance.cloudNetworkContains).to.be(expectedValueLiteral);
      });

      it('should have the property classifications (base name: "classifications")', function() {
        // TODO: update the code to test the property classifications
        expect(instance).to.have.property('classifications');
        // expect(instance.classifications).to.be(expectedValueLiteral);
      });

      it('should have the property analystVerdicts (base name: "analystVerdicts")', function() {
        // TODO: update the code to test the property analystVerdicts
        expect(instance).to.have.property('analystVerdicts');
        // expect(instance.analystVerdicts).to.be(expectedValueLiteral);
      });

      it('should have the property initiatedByUsernameContains (base name: "initiatedByUsername__contains")', function() {
        // TODO: update the code to test the property initiatedByUsernameContains
        expect(instance).to.have.property('initiatedByUsernameContains');
        // expect(instance.initiatedByUsernameContains).to.be(expectedValueLiteral);
      });

      it('should have the property resolved (base name: "resolved")', function() {
        // TODO: update the code to test the property resolved
        expect(instance).to.have.property('resolved');
        // expect(instance.resolved).to.be(expectedValueLiteral);
      });

      it('should have the property collectionIds (base name: "collectionIds")', function() {
        // TODO: update the code to test the property collectionIds
        expect(instance).to.have.property('collectionIds');
        // expect(instance.collectionIds).to.be(expectedValueLiteral);
      });

      it('should have the property detectionEngines (base name: "detectionEngines")', function() {
        // TODO: update the code to test the property detectionEngines
        expect(instance).to.have.property('detectionEngines');
        // expect(instance.detectionEngines).to.be(expectedValueLiteral);
      });

      it('should have the property awsRoleContains (base name: "awsRole__contains")', function() {
        // TODO: update the code to test the property awsRoleContains
        expect(instance).to.have.property('awsRoleContains');
        // expect(instance.awsRoleContains).to.be(expectedValueLiteral);
      });

      it('should have the property cloudAccountContains (base name: "cloudAccount__contains")', function() {
        // TODO: update the code to test the property cloudAccountContains
        expect(instance).to.have.property('cloudAccountContains');
        // expect(instance.cloudAccountContains).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAtLt (base name: "updatedAt__lt")', function() {
        // TODO: update the code to test the property updatedAtLt
        expect(instance).to.have.property('updatedAtLt');
        // expect(instance.updatedAtLt).to.be(expectedValueLiteral);
      });

      it('should have the property ids (base name: "ids")', function() {
        // TODO: update the code to test the property ids
        expect(instance).to.have.property('ids');
        // expect(instance.ids).to.be(expectedValueLiteral);
      });

      it('should have the property countsFor (base name: "countsFor")', function() {
        // TODO: update the code to test the property countsFor
        expect(instance).to.have.property('countsFor');
        // expect(instance.countsFor).to.be(expectedValueLiteral);
      });

      it('should have the property limit (base name: "limit")', function() {
        // TODO: update the code to test the property limit
        expect(instance).to.have.property('limit');
        // expect(instance.limit).to.be(expectedValueLiteral);
      });

      it('should have the property realtimeAgentVersionContains (base name: "realtimeAgentVersion__contains")', function() {
        // TODO: update the code to test the property realtimeAgentVersionContains
        expect(instance).to.have.property('realtimeAgentVersionContains');
        // expect(instance.realtimeAgentVersionContains).to.be(expectedValueLiteral);
      });

      it('should have the property osTypes (base name: "osTypes")', function() {
        // TODO: update the code to test the property osTypes
        expect(instance).to.have.property('osTypes');
        // expect(instance.osTypes).to.be(expectedValueLiteral);
      });

      it('should have the property agentMachineTypes (base name: "agentMachineTypes")', function() {
        // TODO: update the code to test the property agentMachineTypes
        expect(instance).to.have.property('agentMachineTypes');
        // expect(instance.agentMachineTypes).to.be(expectedValueLiteral);
      });

      it('should have the property initiatedBy (base name: "initiatedBy")', function() {
        // TODO: update the code to test the property initiatedBy
        expect(instance).to.have.property('initiatedBy');
        // expect(instance.initiatedBy).to.be(expectedValueLiteral);
      });

      it('should have the property initiatedByNin (base name: "initiatedByNin")', function() {
        // TODO: update the code to test the property initiatedByNin
        expect(instance).to.have.property('initiatedByNin');
        // expect(instance.initiatedByNin).to.be(expectedValueLiteral);
      });

      it('should have the property k8sNamespaceLabelsContains (base name: "k8sNamespaceLabels__contains")', function() {
        // TODO: update the code to test the property k8sNamespaceLabelsContains
        expect(instance).to.have.property('k8sNamespaceLabelsContains');
        // expect(instance.k8sNamespaceLabelsContains).to.be(expectedValueLiteral);
      });

      it('should have the property engines (base name: "engines")', function() {
        // TODO: update the code to test the property engines
        expect(instance).to.have.property('engines');
        // expect(instance.engines).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtLte (base name: "createdAt__lte")', function() {
        // TODO: update the code to test the property createdAtLte
        expect(instance).to.have.property('createdAtLte');
        // expect(instance.createdAtLte).to.be(expectedValueLiteral);
      });

      it('should have the property detectionAgentVersionContains (base name: "detectionAgentVersion__contains")', function() {
        // TODO: update the code to test the property detectionAgentVersionContains
        expect(instance).to.have.property('detectionAgentVersionContains');
        // expect(instance.detectionAgentVersionContains).to.be(expectedValueLiteral);
      });

      it('should have the property detectionEnginesNin (base name: "detectionEnginesNin")', function() {
        // TODO: update the code to test the property detectionEnginesNin
        expect(instance).to.have.property('detectionEnginesNin');
        // expect(instance.detectionEnginesNin).to.be(expectedValueLiteral);
      });

      it('should have the property osNamesNin (base name: "osNamesNin")', function() {
        // TODO: update the code to test the property osNamesNin
        expect(instance).to.have.property('osNamesNin');
        // expect(instance.osNamesNin).to.be(expectedValueLiteral);
      });

      it('should have the property k8sControllerNameContains (base name: "k8sControllerName__contains")', function() {
        // TODO: update the code to test the property k8sControllerNameContains
        expect(instance).to.have.property('k8sControllerNameContains');
        // expect(instance.k8sControllerNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property k8sClusterNameContains (base name: "k8sClusterName__contains")', function() {
        // TODO: update the code to test the property k8sClusterNameContains
        expect(instance).to.have.property('k8sClusterNameContains');
        // expect(instance.k8sClusterNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property noteExists (base name: "noteExists")', function() {
        // TODO: update the code to test the property noteExists
        expect(instance).to.have.property('noteExists');
        // expect(instance.noteExists).to.be(expectedValueLiteral);
      });

      it('should have the property containerLabelsContains (base name: "containerLabels__contains")', function() {
        // TODO: update the code to test the property containerLabelsContains
        expect(instance).to.have.property('containerLabelsContains');
        // expect(instance.containerLabelsContains).to.be(expectedValueLiteral);
      });

      it('should have the property tenant (base name: "tenant")', function() {
        // TODO: update the code to test the property tenant
        expect(instance).to.have.property('tenant');
        // expect(instance.tenant).to.be(expectedValueLiteral);
      });

      it('should have the property cloudInstanceIdContains (base name: "cloudInstanceId__contains")', function() {
        // TODO: update the code to test the property cloudInstanceIdContains
        expect(instance).to.have.property('cloudInstanceIdContains');
        // expect(instance.cloudInstanceIdContains).to.be(expectedValueLiteral);
      });

      it('should have the property agentVersions (base name: "agentVersions")', function() {
        // TODO: update the code to test the property agentVersions
        expect(instance).to.have.property('agentVersions');
        // expect(instance.agentVersions).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtGte (base name: "createdAt__gte")', function() {
        // TODO: update the code to test the property createdAtGte
        expect(instance).to.have.property('createdAtGte');
        // expect(instance.createdAtGte).to.be(expectedValueLiteral);
      });

      it('should have the property detectionAgentDomainContains (base name: "detectionAgentDomain__contains")', function() {
        // TODO: update the code to test the property detectionAgentDomainContains
        expect(instance).to.have.property('detectionAgentDomainContains');
        // expect(instance.detectionAgentDomainContains).to.be(expectedValueLiteral);
      });

      it('should have the property enginesNin (base name: "enginesNin")', function() {
        // TODO: update the code to test the property enginesNin
        expect(instance).to.have.property('enginesNin');
        // expect(instance.enginesNin).to.be(expectedValueLiteral);
      });

      it('should have the property accountIds (base name: "accountIds")', function() {
        // TODO: update the code to test the property accountIds
        expect(instance).to.have.property('accountIds');
        // expect(instance.accountIds).to.be(expectedValueLiteral);
      });

      it('should have the property cloudProviderNin (base name: "cloudProviderNin")', function() {
        // TODO: update the code to test the property cloudProviderNin
        expect(instance).to.have.property('cloudProviderNin');
        // expect(instance.cloudProviderNin).to.be(expectedValueLiteral);
      });

      it('should have the property filePathContains (base name: "filePath__contains")', function() {
        // TODO: update the code to test the property filePathContains
        expect(instance).to.have.property('filePathContains');
        // expect(instance.filePathContains).to.be(expectedValueLiteral);
      });

      it('should have the property k8sNodeLabelsContains (base name: "k8sNodeLabels__contains")', function() {
        // TODO: update the code to test the property k8sNodeLabelsContains
        expect(instance).to.have.property('k8sNodeLabelsContains');
        // expect(instance.k8sNodeLabelsContains).to.be(expectedValueLiteral);
      });

      it('should have the property osArchs (base name: "osArchs")', function() {
        // TODO: update the code to test the property osArchs
        expect(instance).to.have.property('osArchs');
        // expect(instance.osArchs).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtGt (base name: "createdAt__gt")', function() {
        // TODO: update the code to test the property createdAtGt
        expect(instance).to.have.property('createdAtGt');
        // expect(instance.createdAtGt).to.be(expectedValueLiteral);
      });

      it('should have the property k8sNamespaceNameContains (base name: "k8sNamespaceName__contains")', function() {
        // TODO: update the code to test the property k8sNamespaceNameContains
        expect(instance).to.have.property('k8sNamespaceNameContains');
        // expect(instance.k8sNamespaceNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property rebootRequired (base name: "rebootRequired")', function() {
        // TODO: update the code to test the property rebootRequired
        expect(instance).to.have.property('rebootRequired');
        // expect(instance.rebootRequired).to.be(expectedValueLiteral);
      });

      it('should have the property mitigationStatuses (base name: "mitigationStatuses")', function() {
        // TODO: update the code to test the property mitigationStatuses
        expect(instance).to.have.property('mitigationStatuses');
        // expect(instance.mitigationStatuses).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtLt (base name: "createdAt__lt")', function() {
        // TODO: update the code to test the property createdAtLt
        expect(instance).to.have.property('createdAtLt');
        // expect(instance.createdAtLt).to.be(expectedValueLiteral);
      });

      it('should have the property k8sPodLabelsContains (base name: "k8sPodLabels__contains")', function() {
        // TODO: update the code to test the property k8sPodLabelsContains
        expect(instance).to.have.property('k8sPodLabelsContains');
        // expect(instance.k8sPodLabelsContains).to.be(expectedValueLiteral);
      });

      it('should have the property gcpServiceAccountContains (base name: "gcpServiceAccount__contains")', function() {
        // TODO: update the code to test the property gcpServiceAccountContains
        expect(instance).to.have.property('gcpServiceAccountContains');
        // expect(instance.gcpServiceAccountContains).to.be(expectedValueLiteral);
      });

      it('should have the property pendingActions (base name: "pendingActions")', function() {
        // TODO: update the code to test the property pendingActions
        expect(instance).to.have.property('pendingActions');
        // expect(instance.pendingActions).to.be(expectedValueLiteral);
      });

      it('should have the property cloudLocationContains (base name: "cloudLocation__contains")', function() {
        // TODO: update the code to test the property cloudLocationContains
        expect(instance).to.have.property('cloudLocationContains');
        // expect(instance.cloudLocationContains).to.be(expectedValueLiteral);
      });

      it('should have the property mitigationStatusesNin (base name: "mitigationStatusesNin")', function() {
        // TODO: update the code to test the property mitigationStatusesNin
        expect(instance).to.have.property('mitigationStatusesNin');
        // expect(instance.mitigationStatusesNin).to.be(expectedValueLiteral);
      });

      it('should have the property agentMachineTypesNin (base name: "agentMachineTypesNin")', function() {
        // TODO: update the code to test the property agentMachineTypesNin
        expect(instance).to.have.property('agentMachineTypesNin');
        // expect(instance.agentMachineTypesNin).to.be(expectedValueLiteral);
      });

      it('should have the property originatedProcessContains (base name: "originatedProcess__contains")', function() {
        // TODO: update the code to test the property originatedProcessContains
        expect(instance).to.have.property('originatedProcessContains');
        // expect(instance.originatedProcessContains).to.be(expectedValueLiteral);
      });

      it('should have the property failedActions (base name: "failedActions")', function() {
        // TODO: update the code to test the property failedActions
        expect(instance).to.have.property('failedActions');
        // expect(instance.failedActions).to.be(expectedValueLiteral);
      });

      it('should have the property osNames (base name: "osNames")', function() {
        // TODO: update the code to test the property osNames
        expect(instance).to.have.property('osNames');
        // expect(instance.osNames).to.be(expectedValueLiteral);
      });

      it('should have the property contentHashContains (base name: "contentHash__contains")', function() {
        // TODO: update the code to test the property contentHashContains
        expect(instance).to.have.property('contentHashContains');
        // expect(instance.contentHashContains).to.be(expectedValueLiteral);
      });

      it('should have the property incidentStatuses (base name: "incidentStatuses")', function() {
        // TODO: update the code to test the property incidentStatuses
        expect(instance).to.have.property('incidentStatuses');
        // expect(instance.incidentStatuses).to.be(expectedValueLiteral);
      });

      it('should have the property cloudInstanceSizeContains (base name: "cloudInstanceSize__contains")', function() {
        // TODO: update the code to test the property cloudInstanceSizeContains
        expect(instance).to.have.property('cloudInstanceSizeContains');
        // expect(instance.cloudInstanceSizeContains).to.be(expectedValueLiteral);
      });

      it('should have the property mitigatedPreemptively (base name: "mitigatedPreemptively")', function() {
        // TODO: update the code to test the property mitigatedPreemptively
        expect(instance).to.have.property('mitigatedPreemptively');
        // expect(instance.mitigatedPreemptively).to.be(expectedValueLiteral);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

      it('should have the property externalTicketIdContains (base name: "externalTicketId__contains")', function() {
        // TODO: update the code to test the property externalTicketIdContains
        expect(instance).to.have.property('externalTicketIdContains');
        // expect(instance.externalTicketIdContains).to.be(expectedValueLiteral);
      });

      it('should have the property confidenceLevelsNin (base name: "confidenceLevelsNin")', function() {
        // TODO: update the code to test the property confidenceLevelsNin
        expect(instance).to.have.property('confidenceLevelsNin');
        // expect(instance.confidenceLevelsNin).to.be(expectedValueLiteral);
      });

      it('should have the property azureResourceGroupContains (base name: "azureResourceGroup__contains")', function() {
        // TODO: update the code to test the property azureResourceGroupContains
        expect(instance).to.have.property('azureResourceGroupContains');
        // expect(instance.azureResourceGroupContains).to.be(expectedValueLiteral);
      });

      it('should have the property siteIds (base name: "siteIds")', function() {
        // TODO: update the code to test the property siteIds
        expect(instance).to.have.property('siteIds');
        // expect(instance.siteIds).to.be(expectedValueLiteral);
      });

      it('should have the property commandLineArgumentsContains (base name: "commandLineArguments__contains")', function() {
        // TODO: update the code to test the property commandLineArgumentsContains
        expect(instance).to.have.property('commandLineArgumentsContains');
        // expect(instance.commandLineArgumentsContains).to.be(expectedValueLiteral);
      });

      it('should have the property uuidContains (base name: "uuid__contains")', function() {
        // TODO: update the code to test the property uuidContains
        expect(instance).to.have.property('uuidContains');
        // expect(instance.uuidContains).to.be(expectedValueLiteral);
      });

      it('should have the property externalTicketExists (base name: "externalTicketExists")', function() {
        // TODO: update the code to test the property externalTicketExists
        expect(instance).to.have.property('externalTicketExists');
        // expect(instance.externalTicketExists).to.be(expectedValueLiteral);
      });

    });
  });

}));
