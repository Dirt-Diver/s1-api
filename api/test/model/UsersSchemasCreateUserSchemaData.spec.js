/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('UsersSchemasCreateUserSchemaData', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.UsersSchemasCreateUserSchemaData();
      });

      it('should create an instance of UsersSchemasCreateUserSchemaData', function() {
        // TODO: update the code to test UsersSchemasCreateUserSchemaData
        expect(instance).to.be.a(S1MgmtApi.UsersSchemasCreateUserSchemaData);
      });

      it('should have the property allowRemoteShell (base name: "allowRemoteShell")', function() {
        // TODO: update the code to test the property allowRemoteShell
        expect(instance).to.have.property('allowRemoteShell');
        // expect(instance.allowRemoteShell).to.be(expectedValueLiteral);
      });

      it('should have the property scopeRoles (base name: "scopeRoles")', function() {
        // TODO: update the code to test the property scopeRoles
        expect(instance).to.have.property('scopeRoles');
        // expect(instance.scopeRoles).to.be(expectedValueLiteral);
      });

      it('should have the property siteRoles (base name: "siteRoles")', function() {
        // TODO: update the code to test the property siteRoles
        expect(instance).to.have.property('siteRoles');
        // expect(instance.siteRoles).to.be(expectedValueLiteral);
      });

      it('should have the property fullName (base name: "fullName")', function() {
        // TODO: update the code to test the property fullName
        expect(instance).to.have.property('fullName');
        // expect(instance.fullName).to.be(expectedValueLiteral);
      });

      it('should have the property password (base name: "password")', function() {
        // TODO: update the code to test the property password
        expect(instance).to.have.property('password');
        // expect(instance.password).to.be(expectedValueLiteral);
      });

      it('should have the property tenantRoles (base name: "tenantRoles")', function() {
        // TODO: update the code to test the property tenantRoles
        expect(instance).to.have.property('tenantRoles');
        // expect(instance.tenantRoles).to.be(expectedValueLiteral);
      });

      it('should have the property twoFaEnabled (base name: "twoFaEnabled")', function() {
        // TODO: update the code to test the property twoFaEnabled
        expect(instance).to.have.property('twoFaEnabled');
        // expect(instance.twoFaEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property scope (base name: "scope")', function() {
        // TODO: update the code to test the property scope
        expect(instance).to.have.property('scope');
        // expect(instance.scope).to.be(expectedValueLiteral);
      });

    });
  });

}));
