/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('RemoteOpsSchemasStartCollectionSchemaFilter', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.RemoteOpsSchemasStartCollectionSchemaFilter();
      });

      it('should create an instance of RemoteOpsSchemasStartCollectionSchemaFilter', function() {
        // TODO: update the code to test RemoteOpsSchemasStartCollectionSchemaFilter
        expect(instance).to.be.a(S1MgmtApi.RemoteOpsSchemasStartCollectionSchemaFilter);
      });

      it('should have the property agentVersionsNin (base name: "agentVersionsNin")', function() {
        // TODO: update the code to test the property agentVersionsNin
        expect(instance).to.have.property('agentVersionsNin');
        // expect(instance.agentVersionsNin).to.be(expectedValueLiteral);
      });

      it('should have the property registeredAtBetween (base name: "registeredAt__between")', function() {
        // TODO: update the code to test the property registeredAtBetween
        expect(instance).to.have.property('registeredAtBetween');
        // expect(instance.registeredAtBetween).to.be(expectedValueLiteral);
      });

      it('should have the property registeredAtLte (base name: "registeredAt__lte")', function() {
        // TODO: update the code to test the property registeredAtLte
        expect(instance).to.have.property('registeredAtLte');
        // expect(instance.registeredAtLte).to.be(expectedValueLiteral);
      });

      it('should have the property adComputerQueryContains (base name: "adComputerQuery__contains")', function() {
        // TODO: update the code to test the property adComputerQueryContains
        expect(instance).to.have.property('adComputerQueryContains');
        // expect(instance.adComputerQueryContains).to.be(expectedValueLiteral);
      });

      it('should have the property mitigationModeSuspicious (base name: "mitigationModeSuspicious")', function() {
        // TODO: update the code to test the property mitigationModeSuspicious
        expect(instance).to.have.property('mitigationModeSuspicious');
        // expect(instance.mitigationModeSuspicious).to.be(expectedValueLiteral);
      });

      it('should have the property hasLocalConfiguration (base name: "hasLocalConfiguration")', function() {
        // TODO: update the code to test the property hasLocalConfiguration
        expect(instance).to.have.property('hasLocalConfiguration');
        // expect(instance.hasLocalConfiguration).to.be(expectedValueLiteral);
      });

      it('should have the property adUserQueryContains (base name: "adUserQuery__contains")', function() {
        // TODO: update the code to test the property adUserQueryContains
        expect(instance).to.have.property('adUserQueryContains');
        // expect(instance.adUserQueryContains).to.be(expectedValueLiteral);
      });

      it('should have the property query (base name: "query")', function() {
        // TODO: update the code to test the property query
        expect(instance).to.have.property('query');
        // expect(instance.query).to.be(expectedValueLiteral);
      });

      it('should have the property cloudProvider (base name: "cloudProvider")', function() {
        // TODO: update the code to test the property cloudProvider
        expect(instance).to.have.property('cloudProvider');
        // expect(instance.cloudProvider).to.be(expectedValueLiteral);
      });

      it('should have the property coreCountGt (base name: "coreCount__gt")', function() {
        // TODO: update the code to test the property coreCountGt
        expect(instance).to.have.property('coreCountGt');
        // expect(instance.coreCountGt).to.be(expectedValueLiteral);
      });

      it('should have the property decommissionedAtGt (base name: "decommissionedAt__gt")', function() {
        // TODO: update the code to test the property decommissionedAtGt
        expect(instance).to.have.property('decommissionedAtGt');
        // expect(instance.decommissionedAtGt).to.be(expectedValueLiteral);
      });

      it('should have the property registeredAtGte (base name: "registeredAt__gte")', function() {
        // TODO: update the code to test the property registeredAtGte
        expect(instance).to.have.property('registeredAtGte');
        // expect(instance.registeredAtGte).to.be(expectedValueLiteral);
      });

      it('should have the property totalMemoryGt (base name: "totalMemory__gt")', function() {
        // TODO: update the code to test the property totalMemoryGt
        expect(instance).to.have.property('totalMemoryGt');
        // expect(instance.totalMemoryGt).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAtGt (base name: "updatedAt__gt")', function() {
        // TODO: update the code to test the property updatedAtGt
        expect(instance).to.have.property('updatedAtGt');
        // expect(instance.updatedAtGt).to.be(expectedValueLiteral);
      });

      it('should have the property hasContainerizedWorkload (base name: "hasContainerizedWorkload")', function() {
        // TODO: update the code to test the property hasContainerizedWorkload
        expect(instance).to.have.property('hasContainerizedWorkload');
        // expect(instance.hasContainerizedWorkload).to.be(expectedValueLiteral);
      });

      it('should have the property cloudImageContains (base name: "cloudImage__contains")', function() {
        // TODO: update the code to test the property cloudImageContains
        expect(instance).to.have.property('cloudImageContains');
        // expect(instance.cloudImageContains).to.be(expectedValueLiteral);
      });

      it('should have the property threatCreatedAtGte (base name: "threatCreatedAt__gte")', function() {
        // TODO: update the code to test the property threatCreatedAtGte
        expect(instance).to.have.property('threatCreatedAtGte');
        // expect(instance.threatCreatedAtGte).to.be(expectedValueLiteral);
      });

      it('should have the property appsVulnerabilityStatusesNin (base name: "appsVulnerabilityStatusesNin")', function() {
        // TODO: update the code to test the property appsVulnerabilityStatusesNin
        expect(instance).to.have.property('appsVulnerabilityStatusesNin');
        // expect(instance.appsVulnerabilityStatusesNin).to.be(expectedValueLiteral);
      });

      it('should have the property scanStatusesNin (base name: "scanStatusesNin")', function() {
        // TODO: update the code to test the property scanStatusesNin
        expect(instance).to.have.property('scanStatusesNin');
        // expect(instance.scanStatusesNin).to.be(expectedValueLiteral);
      });

      it('should have the property adComputerMemberContains (base name: "adComputerMember__contains")', function() {
        // TODO: update the code to test the property adComputerMemberContains
        expect(instance).to.have.property('adComputerMemberContains');
        // expect(instance.adComputerMemberContains).to.be(expectedValueLiteral);
      });

      it('should have the property coreCountLte (base name: "coreCount__lte")', function() {
        // TODO: update the code to test the property coreCountLte
        expect(instance).to.have.property('coreCountLte');
        // expect(instance.coreCountLte).to.be(expectedValueLiteral);
      });

      it('should have the property rangerVersions (base name: "rangerVersions")', function() {
        // TODO: update the code to test the property rangerVersions
        expect(instance).to.have.property('rangerVersions');
        // expect(instance.rangerVersions).to.be(expectedValueLiteral);
      });

      it('should have the property machineTypes (base name: "machineTypes")', function() {
        // TODO: update the code to test the property machineTypes
        expect(instance).to.have.property('machineTypes');
        // expect(instance.machineTypes).to.be(expectedValueLiteral);
      });

      it('should have the property coreCountGte (base name: "coreCount__gte")', function() {
        // TODO: update the code to test the property coreCountGte
        expect(instance).to.have.property('coreCountGte');
        // expect(instance.coreCountGte).to.be(expectedValueLiteral);
      });

      it('should have the property locationIds (base name: "locationIds")', function() {
        // TODO: update the code to test the property locationIds
        expect(instance).to.have.property('locationIds');
        // expect(instance.locationIds).to.be(expectedValueLiteral);
      });

      it('should have the property locationIdsNin (base name: "locationIdsNin")', function() {
        // TODO: update the code to test the property locationIdsNin
        expect(instance).to.have.property('locationIdsNin');
        // expect(instance.locationIdsNin).to.be(expectedValueLiteral);
      });

      it('should have the property gatewayIp (base name: "gatewayIp")', function() {
        // TODO: update the code to test the property gatewayIp
        expect(instance).to.have.property('gatewayIp');
        // expect(instance.gatewayIp).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAtLte (base name: "updatedAt__lte")', function() {
        // TODO: update the code to test the property updatedAtLte
        expect(instance).to.have.property('updatedAtLte');
        // expect(instance.updatedAtLte).to.be(expectedValueLiteral);
      });

      it('should have the property groupIds (base name: "groupIds")', function() {
        // TODO: update the code to test the property groupIds
        expect(instance).to.have.property('groupIds');
        // expect(instance.groupIds).to.be(expectedValueLiteral);
      });

      it('should have the property missingPermissionsNin (base name: "missingPermissionsNin")', function() {
        // TODO: update the code to test the property missingPermissionsNin
        expect(instance).to.have.property('missingPermissionsNin');
        // expect(instance.missingPermissionsNin).to.be(expectedValueLiteral);
      });

      it('should have the property migrationStatus (base name: "migrationStatus")', function() {
        // TODO: update the code to test the property migrationStatus
        expect(instance).to.have.property('migrationStatus');
        // expect(instance.migrationStatus).to.be(expectedValueLiteral);
      });

      it('should have the property threatRebootRequired (base name: "threatRebootRequired")', function() {
        // TODO: update the code to test the property threatRebootRequired
        expect(instance).to.have.property('threatRebootRequired');
        // expect(instance.threatRebootRequired).to.be(expectedValueLiteral);
      });

      it('should have the property serialNumberContains (base name: "serialNumber__contains")', function() {
        // TODO: update the code to test the property serialNumberContains
        expect(instance).to.have.property('serialNumberContains');
        // expect(instance.serialNumberContains).to.be(expectedValueLiteral);
      });

      it('should have the property decommissionedAtGte (base name: "decommissionedAt__gte")', function() {
        // TODO: update the code to test the property decommissionedAtGte
        expect(instance).to.have.property('decommissionedAtGte');
        // expect(instance.decommissionedAtGte).to.be(expectedValueLiteral);
      });

      it('should have the property lastSuccessfulScanDateBetween (base name: "lastSuccessfulScanDate__between")', function() {
        // TODO: update the code to test the property lastSuccessfulScanDateBetween
        expect(instance).to.have.property('lastSuccessfulScanDateBetween');
        // expect(instance.lastSuccessfulScanDateBetween).to.be(expectedValueLiteral);
      });

      it('should have the property lastActiveDateLte (base name: "lastActiveDate__lte")', function() {
        // TODO: update the code to test the property lastActiveDateLte
        expect(instance).to.have.property('lastActiveDateLte');
        // expect(instance.lastActiveDateLte).to.be(expectedValueLiteral);
      });

      it('should have the property lastActiveDateBetween (base name: "lastActiveDate__between")', function() {
        // TODO: update the code to test the property lastActiveDateBetween
        expect(instance).to.have.property('lastActiveDateBetween');
        // expect(instance.lastActiveDateBetween).to.be(expectedValueLiteral);
      });

      it('should have the property networkQuarantineEnabled (base name: "networkQuarantineEnabled")', function() {
        // TODO: update the code to test the property networkQuarantineEnabled
        expect(instance).to.have.property('networkQuarantineEnabled');
        // expect(instance.networkQuarantineEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property cloudTagsContains (base name: "cloudTags__contains")', function() {
        // TODO: update the code to test the property cloudTagsContains
        expect(instance).to.have.property('cloudTagsContains');
        // expect(instance.cloudTagsContains).to.be(expectedValueLiteral);
      });

      it('should have the property threatCreatedAtBetween (base name: "threatCreatedAt__between")', function() {
        // TODO: update the code to test the property threatCreatedAtBetween
        expect(instance).to.have.property('threatCreatedAtBetween');
        // expect(instance.threatCreatedAtBetween).to.be(expectedValueLiteral);
      });

      it('should have the property encryptedApplications (base name: "encryptedApplications")', function() {
        // TODO: update the code to test the property encryptedApplications
        expect(instance).to.have.property('encryptedApplications');
        // expect(instance.encryptedApplications).to.be(expectedValueLiteral);
      });

      it('should have the property isUninstalled (base name: "isUninstalled")', function() {
        // TODO: update the code to test the property isUninstalled
        expect(instance).to.have.property('isUninstalled');
        // expect(instance.isUninstalled).to.be(expectedValueLiteral);
      });

      it('should have the property networkInterfacePhysicalContains (base name: "networkInterfacePhysical__contains")', function() {
        // TODO: update the code to test the property networkInterfacePhysicalContains
        expect(instance).to.have.property('networkInterfacePhysicalContains');
        // expect(instance.networkInterfacePhysicalContains).to.be(expectedValueLiteral);
      });

      it('should have the property agentVersionGte (base name: "agentVersion__gte")', function() {
        // TODO: update the code to test the property agentVersionGte
        expect(instance).to.have.property('agentVersionGte');
        // expect(instance.agentVersionGte).to.be(expectedValueLiteral);
      });

      it('should have the property lastSuccessfulScanDateGte (base name: "lastSuccessfulScanDate__gte")', function() {
        // TODO: update the code to test the property lastSuccessfulScanDateGte
        expect(instance).to.have.property('lastSuccessfulScanDateGte');
        // expect(instance.lastSuccessfulScanDateGte).to.be(expectedValueLiteral);
      });

      it('should have the property operationalStates (base name: "operationalStates")', function() {
        // TODO: update the code to test the property operationalStates
        expect(instance).to.have.property('operationalStates');
        // expect(instance.operationalStates).to.be(expectedValueLiteral);
      });

      it('should have the property adUserNameContains (base name: "adUserName__contains")', function() {
        // TODO: update the code to test the property adUserNameContains
        expect(instance).to.have.property('adUserNameContains');
        // expect(instance.adUserNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property osTypesNin (base name: "osTypesNin")', function() {
        // TODO: update the code to test the property osTypesNin
        expect(instance).to.have.property('osTypesNin');
        // expect(instance.osTypesNin).to.be(expectedValueLiteral);
      });

      it('should have the property csvFilterId (base name: "csvFilterId")', function() {
        // TODO: update the code to test the property csvFilterId
        expect(instance).to.have.property('csvFilterId');
        // expect(instance.csvFilterId).to.be(expectedValueLiteral);
      });

      it('should have the property isActive (base name: "isActive")', function() {
        // TODO: update the code to test the property isActive
        expect(instance).to.have.property('isActive');
        // expect(instance.isActive).to.be(expectedValueLiteral);
      });

      it('should have the property mitigationMode (base name: "mitigationMode")', function() {
        // TODO: update the code to test the property mitigationMode
        expect(instance).to.have.property('mitigationMode');
        // expect(instance.mitigationMode).to.be(expectedValueLiteral);
      });

      it('should have the property awsSubnetIdsContains (base name: "awsSubnetIds__contains")', function() {
        // TODO: update the code to test the property awsSubnetIdsContains
        expect(instance).to.have.property('awsSubnetIdsContains');
        // expect(instance.awsSubnetIdsContains).to.be(expectedValueLiteral);
      });

      it('should have the property agentVersionLte (base name: "agentVersion__lte")', function() {
        // TODO: update the code to test the property agentVersionLte
        expect(instance).to.have.property('agentVersionLte');
        // expect(instance.agentVersionLte).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAtGte (base name: "updatedAt__gte")', function() {
        // TODO: update the code to test the property updatedAtGte
        expect(instance).to.have.property('updatedAtGte');
        // expect(instance.updatedAtGte).to.be(expectedValueLiteral);
      });

      it('should have the property osVersionContains (base name: "osVersion__contains")', function() {
        // TODO: update the code to test the property osVersionContains
        expect(instance).to.have.property('osVersionContains');
        // expect(instance.osVersionContains).to.be(expectedValueLiteral);
      });

      it('should have the property externalIpContains (base name: "externalIp__contains")', function() {
        // TODO: update the code to test the property externalIpContains
        expect(instance).to.have.property('externalIpContains');
        // expect(instance.externalIpContains).to.be(expectedValueLiteral);
      });

      it('should have the property awsSecurityGroupsContains (base name: "awsSecurityGroups__contains")', function() {
        // TODO: update the code to test the property awsSecurityGroupsContains
        expect(instance).to.have.property('awsSecurityGroupsContains');
        // expect(instance.awsSecurityGroupsContains).to.be(expectedValueLiteral);
      });

      it('should have the property k8sNodeNameContains (base name: "k8sNodeName__contains")', function() {
        // TODO: update the code to test the property k8sNodeNameContains
        expect(instance).to.have.property('k8sNodeNameContains');
        // expect(instance.k8sNodeNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property agentVersionBetween (base name: "agentVersion__between")', function() {
        // TODO: update the code to test the property agentVersionBetween
        expect(instance).to.have.property('agentVersionBetween');
        // expect(instance.agentVersionBetween).to.be(expectedValueLiteral);
      });

      it('should have the property activeThreats (base name: "activeThreats")', function() {
        // TODO: update the code to test the property activeThreats
        expect(instance).to.have.property('activeThreats');
        // expect(instance.activeThreats).to.be(expectedValueLiteral);
      });

      it('should have the property hasTags (base name: "hasTags")', function() {
        // TODO: update the code to test the property hasTags
        expect(instance).to.have.property('hasTags');
        // expect(instance.hasTags).to.be(expectedValueLiteral);
      });

      it('should have the property agentNamespaceContains (base name: "agentNamespace__contains")', function() {
        // TODO: update the code to test the property agentNamespaceContains
        expect(instance).to.have.property('agentNamespaceContains');
        // expect(instance.agentNamespaceContains).to.be(expectedValueLiteral);
      });

      it('should have the property cpuCountLt (base name: "cpuCount__lt")', function() {
        // TODO: update the code to test the property cpuCountLt
        expect(instance).to.have.property('cpuCountLt');
        // expect(instance.cpuCountLt).to.be(expectedValueLiteral);
      });

      it('should have the property registeredAtLt (base name: "registeredAt__lt")', function() {
        // TODO: update the code to test the property registeredAtLt
        expect(instance).to.have.property('registeredAtLt');
        // expect(instance.registeredAtLt).to.be(expectedValueLiteral);
      });

      it('should have the property networkInterfaceInetContains (base name: "networkInterfaceInet__contains")', function() {
        // TODO: update the code to test the property networkInterfaceInetContains
        expect(instance).to.have.property('networkInterfaceInetContains');
        // expect(instance.networkInterfaceInetContains).to.be(expectedValueLiteral);
      });

      it('should have the property computerNameContains (base name: "computerName__contains")', function() {
        // TODO: update the code to test the property computerNameContains
        expect(instance).to.have.property('computerNameContains');
        // expect(instance.computerNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property cloudNetworkContains (base name: "cloudNetwork__contains")', function() {
        // TODO: update the code to test the property cloudNetworkContains
        expect(instance).to.have.property('cloudNetworkContains');
        // expect(instance.cloudNetworkContains).to.be(expectedValueLiteral);
      });

      it('should have the property remoteOpsForensicsSupported (base name: "remoteOpsForensicsSupported")', function() {
        // TODO: update the code to test the property remoteOpsForensicsSupported
        expect(instance).to.have.property('remoteOpsForensicsSupported');
        // expect(instance.remoteOpsForensicsSupported).to.be(expectedValueLiteral);
      });

      it('should have the property remoteProfilingStates (base name: "remoteProfilingStates")', function() {
        // TODO: update the code to test the property remoteProfilingStates
        expect(instance).to.have.property('remoteProfilingStates');
        // expect(instance.remoteProfilingStates).to.be(expectedValueLiteral);
      });

      it('should have the property filteredGroupIds (base name: "filteredGroupIds")', function() {
        // TODO: update the code to test the property filteredGroupIds
        expect(instance).to.have.property('filteredGroupIds');
        // expect(instance.filteredGroupIds).to.be(expectedValueLiteral);
      });

      it('should have the property agentPodNameContains (base name: "agentPodName__contains")', function() {
        // TODO: update the code to test the property agentPodNameContains
        expect(instance).to.have.property('agentPodNameContains');
        // expect(instance.agentPodNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property userActionsNeededNin (base name: "userActionsNeededNin")', function() {
        // TODO: update the code to test the property userActionsNeededNin
        expect(instance).to.have.property('userActionsNeededNin');
        // expect(instance.userActionsNeededNin).to.be(expectedValueLiteral);
      });

      it('should have the property rangerStatuses (base name: "rangerStatuses")', function() {
        // TODO: update the code to test the property rangerStatuses
        expect(instance).to.have.property('rangerStatuses');
        // expect(instance.rangerStatuses).to.be(expectedValueLiteral);
      });

      it('should have the property computerNameLike (base name: "computerName__like")', function() {
        // TODO: update the code to test the property computerNameLike
        expect(instance).to.have.property('computerNameLike');
        // expect(instance.computerNameLike).to.be(expectedValueLiteral);
      });

      it('should have the property externalIdContains (base name: "externalId__contains")', function() {
        // TODO: update the code to test the property externalIdContains
        expect(instance).to.have.property('externalIdContains');
        // expect(instance.externalIdContains).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtBetween (base name: "createdAt__between")', function() {
        // TODO: update the code to test the property createdAtBetween
        expect(instance).to.have.property('createdAtBetween');
        // expect(instance.createdAtBetween).to.be(expectedValueLiteral);
      });

      it('should have the property consoleMigrationStatusesNin (base name: "consoleMigrationStatusesNin")', function() {
        // TODO: update the code to test the property consoleMigrationStatusesNin
        expect(instance).to.have.property('consoleMigrationStatusesNin');
        // expect(instance.consoleMigrationStatusesNin).to.be(expectedValueLiteral);
      });

      it('should have the property cpuIdContains (base name: "cpuId__contains")', function() {
        // TODO: update the code to test the property cpuIdContains
        expect(instance).to.have.property('cpuIdContains');
        // expect(instance.cpuIdContains).to.be(expectedValueLiteral);
      });

      it('should have the property coreCountBetween (base name: "coreCount__between")', function() {
        // TODO: update the code to test the property coreCountBetween
        expect(instance).to.have.property('coreCountBetween');
        // expect(instance.coreCountBetween).to.be(expectedValueLiteral);
      });

      it('should have the property isUpToDate (base name: "isUpToDate")', function() {
        // TODO: update the code to test the property isUpToDate
        expect(instance).to.have.property('isUpToDate');
        // expect(instance.isUpToDate).to.be(expectedValueLiteral);
      });

      it('should have the property threatCreatedAtLt (base name: "threatCreatedAt__lt")', function() {
        // TODO: update the code to test the property threatCreatedAtLt
        expect(instance).to.have.property('threatCreatedAtLt');
        // expect(instance.threatCreatedAtLt).to.be(expectedValueLiteral);
      });

      it('should have the property rangerStatus (base name: "rangerStatus")', function() {
        // TODO: update the code to test the property rangerStatus
        expect(instance).to.have.property('rangerStatus');
        // expect(instance.rangerStatus).to.be(expectedValueLiteral);
      });

      it('should have the property totalMemoryBetween (base name: "totalMemory__between")', function() {
        // TODO: update the code to test the property totalMemoryBetween
        expect(instance).to.have.property('totalMemoryBetween');
        // expect(instance.totalMemoryBetween).to.be(expectedValueLiteral);
      });

      it('should have the property lastSuccessfulScanDateLte (base name: "lastSuccessfulScanDate__lte")', function() {
        // TODO: update the code to test the property lastSuccessfulScanDateLte
        expect(instance).to.have.property('lastSuccessfulScanDateLte');
        // expect(instance.lastSuccessfulScanDateLte).to.be(expectedValueLiteral);
      });

      it('should have the property domains (base name: "domains")', function() {
        // TODO: update the code to test the property domains
        expect(instance).to.have.property('domains');
        // expect(instance.domains).to.be(expectedValueLiteral);
      });

      it('should have the property awsRoleContains (base name: "awsRole__contains")', function() {
        // TODO: update the code to test the property awsRoleContains
        expect(instance).to.have.property('awsRoleContains');
        // expect(instance.awsRoleContains).to.be(expectedValueLiteral);
      });

      it('should have the property lastLoggedInUserNameContains (base name: "lastLoggedInUserName__contains")', function() {
        // TODO: update the code to test the property lastLoggedInUserNameContains
        expect(instance).to.have.property('lastLoggedInUserNameContains');
        // expect(instance.lastLoggedInUserNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property cpuCountGt (base name: "cpuCount__gt")', function() {
        // TODO: update the code to test the property cpuCountGt
        expect(instance).to.have.property('cpuCountGt');
        // expect(instance.cpuCountGt).to.be(expectedValueLiteral);
      });

      it('should have the property cloudAccountContains (base name: "cloudAccount__contains")', function() {
        // TODO: update the code to test the property cloudAccountContains
        expect(instance).to.have.property('cloudAccountContains');
        // expect(instance.cloudAccountContains).to.be(expectedValueLiteral);
      });

      it('should have the property clusterNameContains (base name: "clusterName__contains")', function() {
        // TODO: update the code to test the property clusterNameContains
        expect(instance).to.have.property('clusterNameContains');
        // expect(instance.clusterNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property scanStatuses (base name: "scanStatuses")', function() {
        // TODO: update the code to test the property scanStatuses
        expect(instance).to.have.property('scanStatuses');
        // expect(instance.scanStatuses).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAtLt (base name: "updatedAt__lt")', function() {
        // TODO: update the code to test the property updatedAtLt
        expect(instance).to.have.property('updatedAtLt');
        // expect(instance.updatedAtLt).to.be(expectedValueLiteral);
      });

      it('should have the property ids (base name: "ids")', function() {
        // TODO: update the code to test the property ids
        expect(instance).to.have.property('ids');
        // expect(instance.ids).to.be(expectedValueLiteral);
      });

      it('should have the property liveUpdateIdContains (base name: "liveUpdateId__contains")', function() {
        // TODO: update the code to test the property liveUpdateIdContains
        expect(instance).to.have.property('liveUpdateIdContains');
        // expect(instance.liveUpdateIdContains).to.be(expectedValueLiteral);
      });

      it('should have the property computerName (base name: "computerName")', function() {
        // TODO: update the code to test the property computerName
        expect(instance).to.have.property('computerName');
        // expect(instance.computerName).to.be(expectedValueLiteral);
      });

      it('should have the property uuid (base name: "uuid")', function() {
        // TODO: update the code to test the property uuid
        expect(instance).to.have.property('uuid');
        // expect(instance.uuid).to.be(expectedValueLiteral);
      });

      it('should have the property osTypes (base name: "osTypes")', function() {
        // TODO: update the code to test the property osTypes
        expect(instance).to.have.property('osTypes');
        // expect(instance.osTypes).to.be(expectedValueLiteral);
      });

      it('should have the property appsVulnerabilityStatuses (base name: "appsVulnerabilityStatuses")', function() {
        // TODO: update the code to test the property appsVulnerabilityStatuses
        expect(instance).to.have.property('appsVulnerabilityStatuses');
        // expect(instance.appsVulnerabilityStatuses).to.be(expectedValueLiteral);
      });

      it('should have the property lastActiveDateGte (base name: "lastActiveDate__gte")', function() {
        // TODO: update the code to test the property lastActiveDateGte
        expect(instance).to.have.property('lastActiveDateGte');
        // expect(instance.lastActiveDateGte).to.be(expectedValueLiteral);
      });

      it('should have the property threatContentHash (base name: "threatContentHash")', function() {
        // TODO: update the code to test the property threatContentHash
        expect(instance).to.have.property('threatContentHash');
        // expect(instance.threatContentHash).to.be(expectedValueLiteral);
      });

      it('should have the property remoteProfilingStatesNin (base name: "remoteProfilingStatesNin")', function() {
        // TODO: update the code to test the property remoteProfilingStatesNin
        expect(instance).to.have.property('remoteProfilingStatesNin');
        // expect(instance.remoteProfilingStatesNin).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtLte (base name: "createdAt__lte")', function() {
        // TODO: update the code to test the property createdAtLte
        expect(instance).to.have.property('createdAtLte');
        // expect(instance.createdAtLte).to.be(expectedValueLiteral);
      });

      it('should have the property scanStatus (base name: "scanStatus")', function() {
        // TODO: update the code to test the property scanStatus
        expect(instance).to.have.property('scanStatus');
        // expect(instance.scanStatus).to.be(expectedValueLiteral);
      });

      it('should have the property filteredSiteIds (base name: "filteredSiteIds")', function() {
        // TODO: update the code to test the property filteredSiteIds
        expect(instance).to.have.property('filteredSiteIds');
        // expect(instance.filteredSiteIds).to.be(expectedValueLiteral);
      });

      it('should have the property userActionsNeeded (base name: "userActionsNeeded")', function() {
        // TODO: update the code to test the property userActionsNeeded
        expect(instance).to.have.property('userActionsNeeded');
        // expect(instance.userActionsNeeded).to.be(expectedValueLiteral);
      });

      it('should have the property registeredAtGt (base name: "registeredAt__gt")', function() {
        // TODO: update the code to test the property registeredAtGt
        expect(instance).to.have.property('registeredAtGt');
        // expect(instance.registeredAtGt).to.be(expectedValueLiteral);
      });

      it('should have the property osArch (base name: "osArch")', function() {
        // TODO: update the code to test the property osArch
        expect(instance).to.have.property('osArch');
        // expect(instance.osArch).to.be(expectedValueLiteral);
      });

      it('should have the property adComputerNameContains (base name: "adComputerName__contains")', function() {
        // TODO: update the code to test the property adComputerNameContains
        expect(instance).to.have.property('adComputerNameContains');
        // expect(instance.adComputerNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property totalMemoryGte (base name: "totalMemory__gte")', function() {
        // TODO: update the code to test the property totalMemoryGte
        expect(instance).to.have.property('totalMemoryGte');
        // expect(instance.totalMemoryGte).to.be(expectedValueLiteral);
      });

      it('should have the property threatHidden (base name: "threatHidden")', function() {
        // TODO: update the code to test the property threatHidden
        expect(instance).to.have.property('threatHidden');
        // expect(instance.threatHidden).to.be(expectedValueLiteral);
      });

      it('should have the property lastActiveDateGt (base name: "lastActiveDate__gt")', function() {
        // TODO: update the code to test the property lastActiveDateGt
        expect(instance).to.have.property('lastActiveDateGt');
        // expect(instance.lastActiveDateGt).to.be(expectedValueLiteral);
      });

      it('should have the property threatCreatedAtLte (base name: "threatCreatedAt__lte")', function() {
        // TODO: update the code to test the property threatCreatedAtLte
        expect(instance).to.have.property('threatCreatedAtLte');
        // expect(instance.threatCreatedAtLte).to.be(expectedValueLiteral);
      });

      it('should have the property cpuCountGte (base name: "cpuCount__gte")', function() {
        // TODO: update the code to test the property cpuCountGte
        expect(instance).to.have.property('cpuCountGte');
        // expect(instance.cpuCountGte).to.be(expectedValueLiteral);
      });

      it('should have the property cloudInstanceIdContains (base name: "cloudInstanceId__contains")', function() {
        // TODO: update the code to test the property cloudInstanceIdContains
        expect(instance).to.have.property('cloudInstanceIdContains');
        // expect(instance.cloudInstanceIdContains).to.be(expectedValueLiteral);
      });

      it('should have the property agentVersions (base name: "agentVersions")', function() {
        // TODO: update the code to test the property agentVersions
        expect(instance).to.have.property('agentVersions');
        // expect(instance.agentVersions).to.be(expectedValueLiteral);
      });

      it('should have the property adQueryContains (base name: "adQuery__contains")', function() {
        // TODO: update the code to test the property adQueryContains
        expect(instance).to.have.property('adQueryContains');
        // expect(instance.adQueryContains).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtGte (base name: "createdAt__gte")', function() {
        // TODO: update the code to test the property createdAtGte
        expect(instance).to.have.property('createdAtGte');
        // expect(instance.createdAtGte).to.be(expectedValueLiteral);
      });

      it('should have the property accountIds (base name: "accountIds")', function() {
        // TODO: update the code to test the property accountIds
        expect(instance).to.have.property('accountIds');
        // expect(instance.accountIds).to.be(expectedValueLiteral);
      });

      it('should have the property locationEnabled (base name: "locationEnabled")', function() {
        // TODO: update the code to test the property locationEnabled
        expect(instance).to.have.property('locationEnabled');
        // expect(instance.locationEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property cloudProviderNin (base name: "cloudProviderNin")', function() {
        // TODO: update the code to test the property cloudProviderNin
        expect(instance).to.have.property('cloudProviderNin');
        // expect(instance.cloudProviderNin).to.be(expectedValueLiteral);
      });

      it('should have the property isPendingUninstall (base name: "isPendingUninstall")', function() {
        // TODO: update the code to test the property isPendingUninstall
        expect(instance).to.have.property('isPendingUninstall');
        // expect(instance.isPendingUninstall).to.be(expectedValueLiteral);
      });

      it('should have the property k8sNodeLabelsContains (base name: "k8sNodeLabels__contains")', function() {
        // TODO: update the code to test the property k8sNodeLabelsContains
        expect(instance).to.have.property('k8sNodeLabelsContains');
        // expect(instance.k8sNodeLabelsContains).to.be(expectedValueLiteral);
      });

      it('should have the property decommissionedAtLte (base name: "decommissionedAt__lte")', function() {
        // TODO: update the code to test the property decommissionedAtLte
        expect(instance).to.have.property('decommissionedAtLte');
        // expect(instance.decommissionedAtLte).to.be(expectedValueLiteral);
      });

      it('should have the property tagsData (base name: "tagsData")', function() {
        // TODO: update the code to test the property tagsData
        expect(instance).to.have.property('tagsData');
        // expect(instance.tagsData).to.be(expectedValueLiteral);
      });

      it('should have the property agentVersionGt (base name: "agentVersion__gt")', function() {
        // TODO: update the code to test the property agentVersionGt
        expect(instance).to.have.property('agentVersionGt');
        // expect(instance.agentVersionGt).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtGt (base name: "createdAt__gt")', function() {
        // TODO: update the code to test the property createdAtGt
        expect(instance).to.have.property('createdAtGt');
        // expect(instance.createdAtGt).to.be(expectedValueLiteral);
      });

      it('should have the property threatMitigationStatus (base name: "threatMitigationStatus")', function() {
        // TODO: update the code to test the property threatMitigationStatus
        expect(instance).to.have.property('threatMitigationStatus');
        // expect(instance.threatMitigationStatus).to.be(expectedValueLiteral);
      });

      it('should have the property lastSuccessfulScanDateGt (base name: "lastSuccessfulScanDate__gt")', function() {
        // TODO: update the code to test the property lastSuccessfulScanDateGt
        expect(instance).to.have.property('lastSuccessfulScanDateGt');
        // expect(instance.lastSuccessfulScanDateGt).to.be(expectedValueLiteral);
      });

      it('should have the property firewallEnabled (base name: "firewallEnabled")', function() {
        // TODO: update the code to test the property firewallEnabled
        expect(instance).to.have.property('firewallEnabled');
        // expect(instance.firewallEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property decommissionedAtLt (base name: "decommissionedAt__lt")', function() {
        // TODO: update the code to test the property decommissionedAtLt
        expect(instance).to.have.property('decommissionedAtLt');
        // expect(instance.decommissionedAtLt).to.be(expectedValueLiteral);
      });

      it('should have the property decommissionedAtBetween (base name: "decommissionedAt__between")', function() {
        // TODO: update the code to test the property decommissionedAtBetween
        expect(instance).to.have.property('decommissionedAtBetween');
        // expect(instance.decommissionedAtBetween).to.be(expectedValueLiteral);
      });

      it('should have the property domainsNin (base name: "domainsNin")', function() {
        // TODO: update the code to test the property domainsNin
        expect(instance).to.have.property('domainsNin');
        // expect(instance.domainsNin).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtLt (base name: "createdAt__lt")', function() {
        // TODO: update the code to test the property createdAtLt
        expect(instance).to.have.property('createdAtLt');
        // expect(instance.createdAtLt).to.be(expectedValueLiteral);
      });

      it('should have the property gcpServiceAccountContains (base name: "gcpServiceAccount__contains")', function() {
        // TODO: update the code to test the property gcpServiceAccountContains
        expect(instance).to.have.property('gcpServiceAccountContains');
        // expect(instance.gcpServiceAccountContains).to.be(expectedValueLiteral);
      });

      it('should have the property threatResolved (base name: "threatResolved")', function() {
        // TODO: update the code to test the property threatResolved
        expect(instance).to.have.property('threatResolved');
        // expect(instance.threatResolved).to.be(expectedValueLiteral);
      });

      it('should have the property cloudLocationContains (base name: "cloudLocation__contains")', function() {
        // TODO: update the code to test the property cloudLocationContains
        expect(instance).to.have.property('cloudLocationContains');
        // expect(instance.cloudLocationContains).to.be(expectedValueLiteral);
      });

      it('should have the property lastActiveDateLt (base name: "lastActiveDate__lt")', function() {
        // TODO: update the code to test the property lastActiveDateLt
        expect(instance).to.have.property('lastActiveDateLt');
        // expect(instance.lastActiveDateLt).to.be(expectedValueLiteral);
      });

      it('should have the property networkStatuses (base name: "networkStatuses")', function() {
        // TODO: update the code to test the property networkStatuses
        expect(instance).to.have.property('networkStatuses');
        // expect(instance.networkStatuses).to.be(expectedValueLiteral);
      });

      it('should have the property k8sTypeContains (base name: "k8sType__contains")', function() {
        // TODO: update the code to test the property k8sTypeContains
        expect(instance).to.have.property('k8sTypeContains');
        // expect(instance.k8sTypeContains).to.be(expectedValueLiteral);
      });

      it('should have the property networkInterfaceGatewayMacAddressContains (base name: "networkInterfaceGatewayMacAddress__contains")', function() {
        // TODO: update the code to test the property networkInterfaceGatewayMacAddressContains
        expect(instance).to.have.property('networkInterfaceGatewayMacAddressContains');
        // expect(instance.networkInterfaceGatewayMacAddressContains).to.be(expectedValueLiteral);
      });

      it('should have the property cpuCountBetween (base name: "cpuCount__between")', function() {
        // TODO: update the code to test the property cpuCountBetween
        expect(instance).to.have.property('cpuCountBetween');
        // expect(instance.cpuCountBetween).to.be(expectedValueLiteral);
      });

      it('should have the property operationalStatesNin (base name: "operationalStatesNin")', function() {
        // TODO: update the code to test the property operationalStatesNin
        expect(instance).to.have.property('operationalStatesNin');
        // expect(instance.operationalStatesNin).to.be(expectedValueLiteral);
      });

      it('should have the property totalMemoryLt (base name: "totalMemory__lt")', function() {
        // TODO: update the code to test the property totalMemoryLt
        expect(instance).to.have.property('totalMemoryLt');
        // expect(instance.totalMemoryLt).to.be(expectedValueLiteral);
      });

      it('should have the property k8sVersionContains (base name: "k8sVersion__contains")', function() {
        // TODO: update the code to test the property k8sVersionContains
        expect(instance).to.have.property('k8sVersionContains');
        // expect(instance.k8sVersionContains).to.be(expectedValueLiteral);
      });

      it('should have the property installerTypes (base name: "installerTypes")', function() {
        // TODO: update the code to test the property installerTypes
        expect(instance).to.have.property('installerTypes');
        // expect(instance.installerTypes).to.be(expectedValueLiteral);
      });

      it('should have the property adUserMemberContains (base name: "adUserMember__contains")', function() {
        // TODO: update the code to test the property adUserMemberContains
        expect(instance).to.have.property('adUserMemberContains');
        // expect(instance.adUserMemberContains).to.be(expectedValueLiteral);
      });

      it('should have the property infected (base name: "infected")', function() {
        // TODO: update the code to test the property infected
        expect(instance).to.have.property('infected');
        // expect(instance.infected).to.be(expectedValueLiteral);
      });

      it('should have the property coreCountLt (base name: "coreCount__lt")', function() {
        // TODO: update the code to test the property coreCountLt
        expect(instance).to.have.property('coreCountLt');
        // expect(instance.coreCountLt).to.be(expectedValueLiteral);
      });

      it('should have the property missingPermissions (base name: "missingPermissions")', function() {
        // TODO: update the code to test the property missingPermissions
        expect(instance).to.have.property('missingPermissions');
        // expect(instance.missingPermissions).to.be(expectedValueLiteral);
      });

      it('should have the property installerTypesNin (base name: "installerTypesNin")', function() {
        // TODO: update the code to test the property installerTypesNin
        expect(instance).to.have.property('installerTypesNin');
        // expect(instance.installerTypesNin).to.be(expectedValueLiteral);
      });

      it('should have the property machineTypesNin (base name: "machineTypesNin")', function() {
        // TODO: update the code to test the property machineTypesNin
        expect(instance).to.have.property('machineTypesNin');
        // expect(instance.machineTypesNin).to.be(expectedValueLiteral);
      });

      it('should have the property filterId (base name: "filterId")', function() {
        // TODO: update the code to test the property filterId
        expect(instance).to.have.property('filterId');
        // expect(instance.filterId).to.be(expectedValueLiteral);
      });

      it('should have the property isDecommissioned (base name: "isDecommissioned")', function() {
        // TODO: update the code to test the property isDecommissioned
        expect(instance).to.have.property('isDecommissioned');
        // expect(instance.isDecommissioned).to.be(expectedValueLiteral);
      });

      it('should have the property agentVersionLt (base name: "agentVersion__lt")', function() {
        // TODO: update the code to test the property agentVersionLt
        expect(instance).to.have.property('agentVersionLt');
        // expect(instance.agentVersionLt).to.be(expectedValueLiteral);
      });

      it('should have the property rangerStatusesNin (base name: "rangerStatusesNin")', function() {
        // TODO: update the code to test the property rangerStatusesNin
        expect(instance).to.have.property('rangerStatusesNin');
        // expect(instance.rangerStatusesNin).to.be(expectedValueLiteral);
      });

      it('should have the property cloudInstanceSizeContains (base name: "cloudInstanceSize__contains")', function() {
        // TODO: update the code to test the property cloudInstanceSizeContains
        expect(instance).to.have.property('cloudInstanceSizeContains');
        // expect(instance.cloudInstanceSizeContains).to.be(expectedValueLiteral);
      });

      it('should have the property rangerVersionsNin (base name: "rangerVersionsNin")', function() {
        // TODO: update the code to test the property rangerVersionsNin
        expect(instance).to.have.property('rangerVersionsNin');
        // expect(instance.rangerVersionsNin).to.be(expectedValueLiteral);
      });

      it('should have the property rsoLevel (base name: "rsoLevel")', function() {
        // TODO: update the code to test the property rsoLevel
        expect(instance).to.have.property('rsoLevel');
        // expect(instance.rsoLevel).to.be(expectedValueLiteral);
      });

      it('should have the property cpuCountLte (base name: "cpuCount__lte")', function() {
        // TODO: update the code to test the property cpuCountLte
        expect(instance).to.have.property('cpuCountLte');
        // expect(instance.cpuCountLte).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAtBetween (base name: "updatedAt__between")', function() {
        // TODO: update the code to test the property updatedAtBetween
        expect(instance).to.have.property('updatedAtBetween');
        // expect(instance.updatedAtBetween).to.be(expectedValueLiteral);
      });

      it('should have the property consoleMigrationStatuses (base name: "consoleMigrationStatuses")', function() {
        // TODO: update the code to test the property consoleMigrationStatuses
        expect(instance).to.have.property('consoleMigrationStatuses');
        // expect(instance.consoleMigrationStatuses).to.be(expectedValueLiteral);
      });

      it('should have the property azureResourceGroupContains (base name: "azureResourceGroup__contains")', function() {
        // TODO: update the code to test the property azureResourceGroupContains
        expect(instance).to.have.property('azureResourceGroupContains');
        // expect(instance.azureResourceGroupContains).to.be(expectedValueLiteral);
      });

      it('should have the property threatCreatedAtGt (base name: "threatCreatedAt__gt")', function() {
        // TODO: update the code to test the property threatCreatedAtGt
        expect(instance).to.have.property('threatCreatedAtGt');
        // expect(instance.threatCreatedAtGt).to.be(expectedValueLiteral);
      });

      it('should have the property siteIds (base name: "siteIds")', function() {
        // TODO: update the code to test the property siteIds
        expect(instance).to.have.property('siteIds');
        // expect(instance.siteIds).to.be(expectedValueLiteral);
      });

      it('should have the property uuidContains (base name: "uuid__contains")', function() {
        // TODO: update the code to test the property uuidContains
        expect(instance).to.have.property('uuidContains');
        // expect(instance.uuidContains).to.be(expectedValueLiteral);
      });

      it('should have the property networkStatusesNin (base name: "networkStatusesNin")', function() {
        // TODO: update the code to test the property networkStatusesNin
        expect(instance).to.have.property('networkStatusesNin');
        // expect(instance.networkStatusesNin).to.be(expectedValueLiteral);
      });

      it('should have the property totalMemoryLte (base name: "totalMemory__lte")', function() {
        // TODO: update the code to test the property totalMemoryLte
        expect(instance).to.have.property('totalMemoryLte');
        // expect(instance.totalMemoryLte).to.be(expectedValueLiteral);
      });

      it('should have the property activeThreatsGt (base name: "activeThreats__gt")', function() {
        // TODO: update the code to test the property activeThreatsGt
        expect(instance).to.have.property('activeThreatsGt');
        // expect(instance.activeThreatsGt).to.be(expectedValueLiteral);
      });

      it('should have the property lastSuccessfulScanDateLt (base name: "lastSuccessfulScanDate__lt")', function() {
        // TODO: update the code to test the property lastSuccessfulScanDateLt
        expect(instance).to.have.property('lastSuccessfulScanDateLt');
        // expect(instance.lastSuccessfulScanDateLt).to.be(expectedValueLiteral);
      });

      it('should have the property adQuery (base name: "adQuery")', function() {
        // TODO: update the code to test the property adQuery
        expect(instance).to.have.property('adQuery');
        // expect(instance.adQuery).to.be(expectedValueLiteral);
      });

      it('should have the property uuids (base name: "uuids")', function() {
        // TODO: update the code to test the property uuids
        expect(instance).to.have.property('uuids');
        // expect(instance.uuids).to.be(expectedValueLiteral);
      });

    });
  });

}));
