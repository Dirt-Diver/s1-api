/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V21RsoSchemasEnrichedScriptSchemaMany200Package', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.V21RsoSchemasEnrichedScriptSchemaMany200Package();
      });

      it('should create an instance of V21RsoSchemasEnrichedScriptSchemaMany200Package', function() {
        // TODO: update the code to test V21RsoSchemasEnrichedScriptSchemaMany200Package
        expect(instance).to.be.a(S1MgmtApi.V21RsoSchemasEnrichedScriptSchemaMany200Package);
      });

      it('should have the property fileName (base name: "fileName")', function() {
        // TODO: update the code to test the property fileName
        expect(instance).to.have.property('fileName');
        // expect(instance.fileName).to.be(expectedValueLiteral);
      });

      it('should have the property bucketName (base name: "bucketName")', function() {
        // TODO: update the code to test the property bucketName
        expect(instance).to.have.property('bucketName');
        // expect(instance.bucketName).to.be(expectedValueLiteral);
      });

      it('should have the property endpointExpiration (base name: "endpointExpiration")', function() {
        // TODO: update the code to test the property endpointExpiration
        expect(instance).to.have.property('endpointExpiration');
        // expect(instance.endpointExpiration).to.be(expectedValueLiteral);
      });

      it('should have the property fileSize (base name: "fileSize")', function() {
        // TODO: update the code to test the property fileSize
        expect(instance).to.have.property('fileSize');
        // expect(instance.fileSize).to.be(expectedValueLiteral);
      });

      it('should have the property signature (base name: "signature")', function() {
        // TODO: update the code to test the property signature
        expect(instance).to.have.property('signature');
        // expect(instance.signature).to.be(expectedValueLiteral);
      });

      it('should have the property endpointExpirationSeconds (base name: "endpointExpirationSeconds")', function() {
        // TODO: update the code to test the property endpointExpirationSeconds
        expect(instance).to.have.property('endpointExpirationSeconds');
        // expect(instance.endpointExpirationSeconds).to.be(expectedValueLiteral);
      });

      it('should have the property signatureType (base name: "signatureType")', function() {
        // TODO: update the code to test the property signatureType
        expect(instance).to.have.property('signatureType');
        // expect(instance.signatureType).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

    });
  });

}));
