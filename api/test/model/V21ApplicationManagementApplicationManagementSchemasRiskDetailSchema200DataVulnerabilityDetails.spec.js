/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataVulnerabilityDetails', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataVulnerabilityDetails();
      });

      it('should create an instance of V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataVulnerabilityDetails', function() {
        // TODO: update the code to test V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataVulnerabilityDetails
        expect(instance).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataVulnerabilityDetails);
      });

      it('should have the property daysDetected (base name: "daysDetected")', function() {
        // TODO: update the code to test the property daysDetected
        expect(instance).to.have.property('daysDetected');
        // expect(instance.daysDetected).to.be(expectedValueLiteral);
      });

      it('should have the property cveId (base name: "cveId")', function() {
        // TODO: update the code to test the property cveId
        expect(instance).to.have.property('cveId');
        // expect(instance.cveId).to.be(expectedValueLiteral);
      });

      it('should have the property publishedDate (base name: "publishedDate")', function() {
        // TODO: update the code to test the property publishedDate
        expect(instance).to.have.property('publishedDate');
        // expect(instance.publishedDate).to.be(expectedValueLiteral);
      });

      it('should have the property cvssVersion (base name: "cvssVersion")', function() {
        // TODO: update the code to test the property cvssVersion
        expect(instance).to.have.property('cvssVersion');
        // expect(instance.cvssVersion).to.be(expectedValueLiteral);
      });

      it('should have the property baseScore (base name: "baseScore")', function() {
        // TODO: update the code to test the property baseScore
        expect(instance).to.have.property('baseScore');
        // expect(instance.baseScore).to.be(expectedValueLiteral);
      });

      it('should have the property detectionDate (base name: "detectionDate")', function() {
        // TODO: update the code to test the property detectionDate
        expect(instance).to.have.property('detectionDate');
        // expect(instance.detectionDate).to.be(expectedValueLiteral);
      });

      it('should have the property nvdUrl (base name: "nvdUrl")', function() {
        // TODO: update the code to test the property nvdUrl
        expect(instance).to.have.property('nvdUrl');
        // expect(instance.nvdUrl).to.be(expectedValueLiteral);
      });

      it('should have the property riskScore (base name: "riskScore")', function() {
        // TODO: update the code to test the property riskScore
        expect(instance).to.have.property('riskScore');
        // expect(instance.riskScore).to.be(expectedValueLiteral);
      });

      it('should have the property applicationVendor (base name: "applicationVendor")', function() {
        // TODO: update the code to test the property applicationVendor
        expect(instance).to.have.property('applicationVendor');
        // expect(instance.applicationVendor).to.be(expectedValueLiteral);
      });

      it('should have the property order (base name: "order")', function() {
        // TODO: update the code to test the property order
        expect(instance).to.have.property('order');
        // expect(instance.order).to.be(expectedValueLiteral);
      });

      it('should have the property application (base name: "application")', function() {
        // TODO: update the code to test the property application
        expect(instance).to.have.property('application');
        // expect(instance.application).to.be(expectedValueLiteral);
      });

      it('should have the property applicationName (base name: "applicationName")', function() {
        // TODO: update the code to test the property applicationName
        expect(instance).to.have.property('applicationName');
        // expect(instance.applicationName).to.be(expectedValueLiteral);
      });

      it('should have the property severity (base name: "severity")', function() {
        // TODO: update the code to test the property severity
        expect(instance).to.have.property('severity');
        // expect(instance.severity).to.be(expectedValueLiteral);
      });

      it('should have the property mitreUrl (base name: "mitreUrl")', function() {
        // TODO: update the code to test the property mitreUrl
        expect(instance).to.have.property('mitreUrl');
        // expect(instance.mitreUrl).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property vulnerabilityDescription (base name: "vulnerabilityDescription")', function() {
        // TODO: update the code to test the property vulnerabilityDescription
        expect(instance).to.have.property('vulnerabilityDescription');
        // expect(instance.vulnerabilityDescription).to.be(expectedValueLiteral);
      });

    });
  });

}));
