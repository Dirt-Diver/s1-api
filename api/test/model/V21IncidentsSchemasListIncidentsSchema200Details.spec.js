/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V21IncidentsSchemasListIncidentsSchema200Details', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.V21IncidentsSchemasListIncidentsSchema200Details();
      });

      it('should create an instance of V21IncidentsSchemasListIncidentsSchema200Details', function() {
        // TODO: update the code to test V21IncidentsSchemasListIncidentsSchema200Details
        expect(instance).to.be.a(S1MgmtApi.V21IncidentsSchemasListIncidentsSchema200Details);
      });

      it('should have the property applicationDeveloper (base name: "applicationDeveloper")', function() {
        // TODO: update the code to test the property applicationDeveloper
        expect(instance).to.have.property('applicationDeveloper');
        // expect(instance.applicationDeveloper).to.be(expectedValueLiteral);
      });

      it('should have the property processName (base name: "processName")', function() {
        // TODO: update the code to test the property processName
        expect(instance).to.have.property('processName');
        // expect(instance.processName).to.be(expectedValueLiteral);
      });

      it('should have the property fileName (base name: "fileName")', function() {
        // TODO: update the code to test the property fileName
        expect(instance).to.have.property('fileName');
        // expect(instance.fileName).to.be(expectedValueLiteral);
      });

      it('should have the property malwareThreatName (base name: "malwareThreatName")', function() {
        // TODO: update the code to test the property malwareThreatName
        expect(instance).to.have.property('malwareThreatName');
        // expect(instance.malwareThreatName).to.be(expectedValueLiteral);
      });

      it('should have the property networkInterface (base name: "networkInterface")', function() {
        // TODO: update the code to test the property networkInterface
        expect(instance).to.have.property('networkInterface');
        // expect(instance.networkInterface).to.be(expectedValueLiteral);
      });

      it('should have the property applicationPackage (base name: "applicationPackage")', function() {
        // TODO: update the code to test the property applicationPackage
        expect(instance).to.have.property('applicationPackage');
        // expect(instance.applicationPackage).to.be(expectedValueLiteral);
      });

      it('should have the property installerSource (base name: "installerSource")', function() {
        // TODO: update the code to test the property installerSource
        expect(instance).to.have.property('installerSource');
        // expect(instance.installerSource).to.be(expectedValueLiteral);
      });

      it('should have the property routerSSID (base name: "routerSSID")', function() {
        // TODO: update the code to test the property routerSSID
        expect(instance).to.have.property('routerSSID');
        // expect(instance.routerSSID).to.be(expectedValueLiteral);
      });

      it('should have the property routerBSSID (base name: "routerBSSID")', function() {
        // TODO: update the code to test the property routerBSSID
        expect(instance).to.have.property('routerBSSID');
        // expect(instance.routerBSSID).to.be(expectedValueLiteral);
      });

      it('should have the property applicationName (base name: "applicationName")', function() {
        // TODO: update the code to test the property applicationName
        expect(instance).to.have.property('applicationName');
        // expect(instance.applicationName).to.be(expectedValueLiteral);
      });

      it('should have the property fileHash (base name: "fileHash")', function() {
        // TODO: update the code to test the property fileHash
        expect(instance).to.have.property('fileHash');
        // expect(instance.fileHash).to.be(expectedValueLiteral);
      });

      it('should have the property suspectedUrl (base name: "suspectedUrl")', function() {
        // TODO: update the code to test the property suspectedUrl
        expect(instance).to.have.property('suspectedUrl');
        // expect(instance.suspectedUrl).to.be(expectedValueLiteral);
      });

      it('should have the property deviceTime (base name: "deviceTime")', function() {
        // TODO: update the code to test the property deviceTime
        expect(instance).to.have.property('deviceTime');
        // expect(instance.deviceTime).to.be(expectedValueLiteral);
      });

    });
  });

}));
