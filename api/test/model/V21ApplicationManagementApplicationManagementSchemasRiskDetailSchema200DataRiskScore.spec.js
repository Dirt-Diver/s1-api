/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataRiskScore', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataRiskScore();
      });

      it('should create an instance of V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataRiskScore', function() {
        // TODO: update the code to test V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataRiskScore
        expect(instance).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataRiskScore);
      });

      it('should have the property nvdBaseScore (base name: "nvdBaseScore")', function() {
        // TODO: update the code to test the property nvdBaseScore
        expect(instance).to.have.property('nvdBaseScore');
        // expect(instance.nvdBaseScore).to.be(expectedValueLiteral);
      });

      it('should have the property isExploitedInTheWild (base name: "isExploitedInTheWild")', function() {
        // TODO: update the code to test the property isExploitedInTheWild
        expect(instance).to.have.property('isExploitedInTheWild');
        // expect(instance.isExploitedInTheWild).to.be(expectedValueLiteral);
      });

      it('should have the property baseScore (base name: "baseScore")', function() {
        // TODO: update the code to test the property baseScore
        expect(instance).to.have.property('baseScore');
        // expect(instance.baseScore).to.be(expectedValueLiteral);
      });

      it('should have the property riskScore (base name: "riskScore")', function() {
        // TODO: update the code to test the property riskScore
        expect(instance).to.have.property('riskScore');
        // expect(instance.riskScore).to.be(expectedValueLiteral);
      });

      it('should have the property remediationLevel (base name: "remediationLevel")', function() {
        // TODO: update the code to test the property remediationLevel
        expect(instance).to.have.property('remediationLevel');
        // expect(instance.remediationLevel).to.be(expectedValueLiteral);
      });

      it('should have the property temporalScore (base name: "temporalScore")', function() {
        // TODO: update the code to test the property temporalScore
        expect(instance).to.have.property('temporalScore');
        // expect(instance.temporalScore).to.be(expectedValueLiteral);
      });

      it('should have the property order (base name: "order")', function() {
        // TODO: update the code to test the property order
        expect(instance).to.have.property('order');
        // expect(instance.order).to.be(expectedValueLiteral);
      });

      it('should have the property exploitCodeMaturity (base name: "exploitCodeMaturity")', function() {
        // TODO: update the code to test the property exploitCodeMaturity
        expect(instance).to.have.property('exploitCodeMaturity');
        // expect(instance.exploitCodeMaturity).to.be(expectedValueLiteral);
      });

      it('should have the property severity (base name: "severity")', function() {
        // TODO: update the code to test the property severity
        expect(instance).to.have.property('severity');
        // expect(instance.severity).to.be(expectedValueLiteral);
      });

      it('should have the property reportConfidence (base name: "reportConfidence")', function() {
        // TODO: update the code to test the property reportConfidence
        expect(instance).to.have.property('reportConfidence');
        // expect(instance.reportConfidence).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property attackVectors (base name: "attackVectors")', function() {
        // TODO: update the code to test the property attackVectors
        expect(instance).to.have.property('attackVectors');
        // expect(instance.attackVectors).to.be(expectedValueLiteral);
      });

    });
  });

}));
