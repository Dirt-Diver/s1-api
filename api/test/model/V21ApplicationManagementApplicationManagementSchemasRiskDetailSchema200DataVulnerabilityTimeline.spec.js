/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataVulnerabilityTimeline', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataVulnerabilityTimeline();
      });

      it('should create an instance of V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataVulnerabilityTimeline', function() {
        // TODO: update the code to test V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataVulnerabilityTimeline
        expect(instance).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRiskDetailSchema200DataVulnerabilityTimeline);
      });

      it('should have the property vulnerabilityIdentified (base name: "vulnerabilityIdentified")', function() {
        // TODO: update the code to test the property vulnerabilityIdentified
        expect(instance).to.have.property('vulnerabilityIdentified');
        // expect(instance.vulnerabilityIdentified).to.be(expectedValueLiteral);
      });

      it('should have the property order (base name: "order")', function() {
        // TODO: update the code to test the property order
        expect(instance).to.have.property('order');
        // expect(instance.order).to.be(expectedValueLiteral);
      });

      it('should have the property advisoryPublished (base name: "advisoryPublished")', function() {
        // TODO: update the code to test the property advisoryPublished
        expect(instance).to.have.property('advisoryPublished');
        // expect(instance.advisoryPublished).to.be(expectedValueLiteral);
      });

      it('should have the property pocPublished (base name: "pocPublished")', function() {
        // TODO: update the code to test the property pocPublished
        expect(instance).to.have.property('pocPublished');
        // expect(instance.pocPublished).to.be(expectedValueLiteral);
      });

      it('should have the property cveAssigned (base name: "cveAssigned")', function() {
        // TODO: update the code to test the property cveAssigned
        expect(instance).to.have.property('cveAssigned');
        // expect(instance.cveAssigned).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property mitigationPublished (base name: "mitigationPublished")', function() {
        // TODO: update the code to test the property mitigationPublished
        expect(instance).to.have.property('mitigationPublished');
        // expect(instance.mitigationPublished).to.be(expectedValueLiteral);
      });

      it('should have the property exploitedInTheWild (base name: "exploitedInTheWild")', function() {
        // TODO: update the code to test the property exploitedInTheWild
        expect(instance).to.have.property('exploitedInTheWild');
        // expect(instance.exploitedInTheWild).to.be(expectedValueLiteral);
      });

    });
  });

}));
