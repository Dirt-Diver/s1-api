/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('RemoteOpsSchemasGetForensicsTaskResultDataSchema200DataCollectionFile', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.RemoteOpsSchemasGetForensicsTaskResultDataSchema200DataCollectionFile();
      });

      it('should create an instance of RemoteOpsSchemasGetForensicsTaskResultDataSchema200DataCollectionFile', function() {
        // TODO: update the code to test RemoteOpsSchemasGetForensicsTaskResultDataSchema200DataCollectionFile
        expect(instance).to.be.a(S1MgmtApi.RemoteOpsSchemasGetForensicsTaskResultDataSchema200DataCollectionFile);
      });

      it('should have the property signature (base name: "signature")', function() {
        // TODO: update the code to test the property signature
        expect(instance).to.have.property('signature');
        // expect(instance.signature).to.be(expectedValueLiteral);
      });

      it('should have the property siteId (base name: "siteId")', function() {
        // TODO: update the code to test the property siteId
        expect(instance).to.have.property('siteId');
        // expect(instance.siteId).to.be(expectedValueLiteral);
      });

      it('should have the property uploadedTimestamp (base name: "uploadedTimestamp")', function() {
        // TODO: update the code to test the property uploadedTimestamp
        expect(instance).to.have.property('uploadedTimestamp');
        // expect(instance.uploadedTimestamp).to.be(expectedValueLiteral);
      });

      it('should have the property signatureType (base name: "signatureType")', function() {
        // TODO: update the code to test the property signatureType
        expect(instance).to.have.property('signatureType');
        // expect(instance.signatureType).to.be(expectedValueLiteral);
      });

      it('should have the property agentId (base name: "agentId")', function() {
        // TODO: update the code to test the property agentId
        expect(instance).to.have.property('agentId');
        // expect(instance.agentId).to.be(expectedValueLiteral);
      });

    });
  });

}));
