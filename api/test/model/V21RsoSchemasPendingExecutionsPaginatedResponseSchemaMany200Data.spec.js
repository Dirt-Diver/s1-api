/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200Data', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200Data();
      });

      it('should create an instance of V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200Data', function() {
        // TODO: update the code to test V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200Data
        expect(instance).to.be.a(S1MgmtApi.V21RsoSchemasPendingExecutionsPaginatedResponseSchemaMany200Data);
      });

      it('should have the property totalEndpoints (base name: "totalEndpoints")', function() {
        // TODO: update the code to test the property totalEndpoints
        expect(instance).to.have.property('totalEndpoints');
        // expect(instance.totalEndpoints).to.be(expectedValueLiteral);
      });

      it('should have the property scriptData (base name: "scriptData")', function() {
        // TODO: update the code to test the property scriptData
        expect(instance).to.have.property('scriptData');
        // expect(instance.scriptData).to.be(expectedValueLiteral);
      });

      it('should have the property endpointsByScope (base name: "endpointsByScope")', function() {
        // TODO: update the code to test the property endpointsByScope
        expect(instance).to.have.property('endpointsByScope');
        // expect(instance.endpointsByScope).to.be(expectedValueLiteral);
      });

      it('should have the property pendingExecutionId (base name: "pendingExecutionId")', function() {
        // TODO: update the code to test the property pendingExecutionId
        expect(instance).to.have.property('pendingExecutionId');
        // expect(instance.pendingExecutionId).to.be(expectedValueLiteral);
      });

      it('should have the property state (base name: "state")', function() {
        // TODO: update the code to test the property state
        expect(instance).to.have.property('state');
        // expect(instance.state).to.be(expectedValueLiteral);
      });

      it('should have the property executionData (base name: "executionData")', function() {
        // TODO: update the code to test the property executionData
        expect(instance).to.have.property('executionData');
        // expect(instance.executionData).to.be(expectedValueLiteral);
      });

      it('should have the property reviewer (base name: "reviewer")', function() {
        // TODO: update the code to test the property reviewer
        expect(instance).to.have.property('reviewer');
        // expect(instance.reviewer).to.be(expectedValueLiteral);
      });

      it('should have the property creator (base name: "creator")', function() {
        // TODO: update the code to test the property creator
        expect(instance).to.have.property('creator');
        // expect(instance.creator).to.be(expectedValueLiteral);
      });

      it('should have the property creatorId (base name: "creatorId")', function() {
        // TODO: update the code to test the property creatorId
        expect(instance).to.have.property('creatorId');
        // expect(instance.creatorId).to.be(expectedValueLiteral);
      });

      it('should have the property reviewerId (base name: "reviewerId")', function() {
        // TODO: update the code to test the property reviewerId
        expect(instance).to.have.property('reviewerId');
        // expect(instance.reviewerId).to.be(expectedValueLiteral);
      });

      it('should have the property canApproveOrDecline (base name: "canApproveOrDecline")', function() {
        // TODO: update the code to test the property canApproveOrDecline
        expect(instance).to.have.property('canApproveOrDecline');
        // expect(instance.canApproveOrDecline).to.be(expectedValueLiteral);
      });

      it('should have the property scheduledTaskId (base name: "scheduledTaskId")', function() {
        // TODO: update the code to test the property scheduledTaskId
        expect(instance).to.have.property('scheduledTaskId');
        // expect(instance.scheduledTaskId).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

    });
  });

}));
