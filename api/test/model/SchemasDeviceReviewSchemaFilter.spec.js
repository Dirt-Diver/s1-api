/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SchemasDeviceReviewSchemaFilter', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.SchemasDeviceReviewSchemaFilter();
      });

      it('should create an instance of SchemasDeviceReviewSchemaFilter', function() {
        // TODO: update the code to test SchemasDeviceReviewSchemaFilter
        expect(instance).to.be.a(S1MgmtApi.SchemasDeviceReviewSchemaFilter);
      });

      it('should have the property hasUserLabel (base name: "hasUserLabel")', function() {
        // TODO: update the code to test the property hasUserLabel
        expect(instance).to.have.property('hasUserLabel');
        // expect(instance.hasUserLabel).to.be(expectedValueLiteral);
      });

      it('should have the property agentIds (base name: "agentIds")', function() {
        // TODO: update the code to test the property agentIds
        expect(instance).to.have.property('agentIds');
        // expect(instance.agentIds).to.be(expectedValueLiteral);
      });

      it('should have the property externalIp (base name: "externalIp")', function() {
        // TODO: update the code to test the property externalIp
        expect(instance).to.have.property('externalIp');
        // expect(instance.externalIp).to.be(expectedValueLiteral);
      });

      it('should have the property managedState (base name: "managedState")', function() {
        // TODO: update the code to test the property managedState
        expect(instance).to.have.property('managedState');
        // expect(instance.managedState).to.be(expectedValueLiteral);
      });

      it('should have the property discoveryMethods (base name: "discoveryMethods")', function() {
        // TODO: update the code to test the property discoveryMethods
        expect(instance).to.have.property('discoveryMethods');
        // expect(instance.discoveryMethods).to.be(expectedValueLiteral);
      });

      it('should have the property udpPortsContains (base name: "udpPorts__contains")', function() {
        // TODO: update the code to test the property udpPortsContains
        expect(instance).to.have.property('udpPortsContains');
        // expect(instance.udpPortsContains).to.be(expectedValueLiteral);
      });

      it('should have the property hostnamesContains (base name: "hostnames__contains")', function() {
        // TODO: update the code to test the property hostnamesContains
        expect(instance).to.have.property('hostnamesContains');
        // expect(instance.hostnamesContains).to.be(expectedValueLiteral);
      });

      it('should have the property osVersion (base name: "osVersion")', function() {
        // TODO: update the code to test the property osVersion
        expect(instance).to.have.property('osVersion');
        // expect(instance.osVersion).to.be(expectedValueLiteral);
      });

      it('should have the property deviceTypes (base name: "deviceTypes")', function() {
        // TODO: update the code to test the property deviceTypes
        expect(instance).to.have.property('deviceTypes');
        // expect(instance.deviceTypes).to.be(expectedValueLiteral);
      });

      it('should have the property ids (base name: "ids")', function() {
        // TODO: update the code to test the property ids
        expect(instance).to.have.property('ids');
        // expect(instance.ids).to.be(expectedValueLiteral);
      });

      it('should have the property networkNameContains (base name: "networkName__contains")', function() {
        // TODO: update the code to test the property networkNameContains
        expect(instance).to.have.property('networkNameContains');
        // expect(instance.networkNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property query (base name: "query")', function() {
        // TODO: update the code to test the property query
        expect(instance).to.have.property('query');
        // expect(instance.query).to.be(expectedValueLiteral);
      });

      it('should have the property networkName (base name: "networkName")', function() {
        // TODO: update the code to test the property networkName
        expect(instance).to.have.property('networkName');
        // expect(instance.networkName).to.be(expectedValueLiteral);
      });

      it('should have the property osVersionContains (base name: "osVersion__contains")', function() {
        // TODO: update the code to test the property osVersionContains
        expect(instance).to.have.property('osVersionContains');
        // expect(instance.osVersionContains).to.be(expectedValueLiteral);
      });

      it('should have the property externalIpContains (base name: "externalIp__contains")', function() {
        // TODO: update the code to test the property externalIpContains
        expect(instance).to.have.property('externalIpContains');
        // expect(instance.externalIpContains).to.be(expectedValueLiteral);
      });

      it('should have the property firstSeenLte (base name: "firstSeen__lte")', function() {
        // TODO: update the code to test the property firstSeenLte
        expect(instance).to.have.property('firstSeenLte');
        // expect(instance.firstSeenLte).to.be(expectedValueLiteral);
      });

      it('should have the property osTypes (base name: "osTypes")', function() {
        // TODO: update the code to test the property osTypes
        expect(instance).to.have.property('osTypes');
        // expect(instance.osTypes).to.be(expectedValueLiteral);
      });

      it('should have the property deviceReviews (base name: "deviceReviews")', function() {
        // TODO: update the code to test the property deviceReviews
        expect(instance).to.have.property('deviceReviews');
        // expect(instance.deviceReviews).to.be(expectedValueLiteral);
      });

      it('should have the property gatewayMacAddress (base name: "gatewayMacAddress")', function() {
        // TODO: update the code to test the property gatewayMacAddress
        expect(instance).to.have.property('gatewayMacAddress');
        // expect(instance.gatewayMacAddress).to.be(expectedValueLiteral);
      });

      it('should have the property osName (base name: "osName")', function() {
        // TODO: update the code to test the property osName
        expect(instance).to.have.property('osName');
        // expect(instance.osName).to.be(expectedValueLiteral);
      });

      it('should have the property lastSeenGt (base name: "lastSeen__gt")', function() {
        // TODO: update the code to test the property lastSeenGt
        expect(instance).to.have.property('lastSeenGt');
        // expect(instance.lastSeenGt).to.be(expectedValueLiteral);
      });

      it('should have the property manufacturerContains (base name: "manufacturer__contains")', function() {
        // TODO: update the code to test the property manufacturerContains
        expect(instance).to.have.property('manufacturerContains');
        // expect(instance.manufacturerContains).to.be(expectedValueLiteral);
      });

      it('should have the property period (base name: "period")', function() {
        // TODO: update the code to test the property period
        expect(instance).to.have.property('period');
        // expect(instance.period).to.be(expectedValueLiteral);
      });

      it('should have the property firstSeenBetween (base name: "firstSeen__between")', function() {
        // TODO: update the code to test the property firstSeenBetween
        expect(instance).to.have.property('firstSeenBetween');
        // expect(instance.firstSeenBetween).to.be(expectedValueLiteral);
      });

      it('should have the property hostnames (base name: "hostnames")', function() {
        // TODO: update the code to test the property hostnames
        expect(instance).to.have.property('hostnames');
        // expect(instance.hostnames).to.be(expectedValueLiteral);
      });

      it('should have the property localIpContains (base name: "localIp__contains")', function() {
        // TODO: update the code to test the property localIpContains
        expect(instance).to.have.property('localIpContains');
        // expect(instance.localIpContains).to.be(expectedValueLiteral);
      });

      it('should have the property deviceFunctionContains (base name: "deviceFunction__contains")', function() {
        // TODO: update the code to test the property deviceFunctionContains
        expect(instance).to.have.property('deviceFunctionContains');
        // expect(instance.deviceFunctionContains).to.be(expectedValueLiteral);
      });

      it('should have the property tcpPortsContains (base name: "tcpPorts__contains")', function() {
        // TODO: update the code to test the property tcpPortsContains
        expect(instance).to.have.property('tcpPortsContains');
        // expect(instance.tcpPortsContains).to.be(expectedValueLiteral);
      });

      it('should have the property lastSeenLte (base name: "lastSeen__lte")', function() {
        // TODO: update the code to test the property lastSeenLte
        expect(instance).to.have.property('lastSeenLte');
        // expect(instance.lastSeenLte).to.be(expectedValueLiteral);
      });

      it('should have the property knownFingerprintingData (base name: "knownFingerprintingData")', function() {
        // TODO: update the code to test the property knownFingerprintingData
        expect(instance).to.have.property('knownFingerprintingData');
        // expect(instance.knownFingerprintingData).to.be(expectedValueLiteral);
      });

      it('should have the property firstSeenGt (base name: "firstSeen__gt")', function() {
        // TODO: update the code to test the property firstSeenGt
        expect(instance).to.have.property('firstSeenGt');
        // expect(instance.firstSeenGt).to.be(expectedValueLiteral);
      });

      it('should have the property macAddress (base name: "macAddress")', function() {
        // TODO: update the code to test the property macAddress
        expect(instance).to.have.property('macAddress');
        // expect(instance.macAddress).to.be(expectedValueLiteral);
      });

      it('should have the property firstSeenLt (base name: "firstSeen__lt")', function() {
        // TODO: update the code to test the property firstSeenLt
        expect(instance).to.have.property('firstSeenLt');
        // expect(instance.firstSeenLt).to.be(expectedValueLiteral);
      });

      it('should have the property localIp (base name: "localIp")', function() {
        // TODO: update the code to test the property localIp
        expect(instance).to.have.property('localIp');
        // expect(instance.localIp).to.be(expectedValueLiteral);
      });

      it('should have the property managedStates (base name: "managedStates")', function() {
        // TODO: update the code to test the property managedStates
        expect(instance).to.have.property('managedStates');
        // expect(instance.managedStates).to.be(expectedValueLiteral);
      });

      it('should have the property lastSeenGte (base name: "lastSeen__gte")', function() {
        // TODO: update the code to test the property lastSeenGte
        expect(instance).to.have.property('lastSeenGte');
        // expect(instance.lastSeenGte).to.be(expectedValueLiteral);
      });

      it('should have the property manufacturer (base name: "manufacturer")', function() {
        // TODO: update the code to test the property manufacturer
        expect(instance).to.have.property('manufacturer');
        // expect(instance.manufacturer).to.be(expectedValueLiteral);
      });

      it('should have the property subnetAddressContains (base name: "subnetAddress__contains")', function() {
        // TODO: update the code to test the property subnetAddressContains
        expect(instance).to.have.property('subnetAddressContains');
        // expect(instance.subnetAddressContains).to.be(expectedValueLiteral);
      });

      it('should have the property siteIds (base name: "siteIds")', function() {
        // TODO: update the code to test the property siteIds
        expect(instance).to.have.property('siteIds');
        // expect(instance.siteIds).to.be(expectedValueLiteral);
      });

      it('should have the property accountIds (base name: "accountIds")', function() {
        // TODO: update the code to test the property accountIds
        expect(instance).to.have.property('accountIds');
        // expect(instance.accountIds).to.be(expectedValueLiteral);
      });

      it('should have the property gatewayMacAddressContains (base name: "gatewayMacAddress__contains")', function() {
        // TODO: update the code to test the property gatewayMacAddressContains
        expect(instance).to.have.property('gatewayMacAddressContains');
        // expect(instance.gatewayMacAddressContains).to.be(expectedValueLiteral);
      });

      it('should have the property osType (base name: "osType")', function() {
        // TODO: update the code to test the property osType
        expect(instance).to.have.property('osType');
        // expect(instance.osType).to.be(expectedValueLiteral);
      });

      it('should have the property firstSeenGte (base name: "firstSeen__gte")', function() {
        // TODO: update the code to test the property firstSeenGte
        expect(instance).to.have.property('firstSeenGte');
        // expect(instance.firstSeenGte).to.be(expectedValueLiteral);
      });

      it('should have the property macAddressContains (base name: "macAddress__contains")', function() {
        // TODO: update the code to test the property macAddressContains
        expect(instance).to.have.property('macAddressContains');
        // expect(instance.macAddressContains).to.be(expectedValueLiteral);
      });

      it('should have the property lastSeenBetween (base name: "lastSeen__between")', function() {
        // TODO: update the code to test the property lastSeenBetween
        expect(instance).to.have.property('lastSeenBetween');
        // expect(instance.lastSeenBetween).to.be(expectedValueLiteral);
      });

      it('should have the property deviceType (base name: "deviceType")', function() {
        // TODO: update the code to test the property deviceType
        expect(instance).to.have.property('deviceType');
        // expect(instance.deviceType).to.be(expectedValueLiteral);
      });

      it('should have the property lastSeenLt (base name: "lastSeen__lt")', function() {
        // TODO: update the code to test the property lastSeenLt
        expect(instance).to.have.property('lastSeenLt');
        // expect(instance.lastSeenLt).to.be(expectedValueLiteral);
      });

      it('should have the property tagNameContains (base name: "tagName__contains")', function() {
        // TODO: update the code to test the property tagNameContains
        expect(instance).to.have.property('tagNameContains');
        // expect(instance.tagNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property domains (base name: "domains")', function() {
        // TODO: update the code to test the property domains
        expect(instance).to.have.property('domains');
        // expect(instance.domains).to.be(expectedValueLiteral);
      });

      it('should have the property siteNames (base name: "siteNames")', function() {
        // TODO: update the code to test the property siteNames
        expect(instance).to.have.property('siteNames');
        // expect(instance.siteNames).to.be(expectedValueLiteral);
      });

    });
  });

}));
