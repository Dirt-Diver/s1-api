/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SitesSitePutSchemaDataPolicyIocAttributes', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.SitesSitePutSchemaDataPolicyIocAttributes();
      });

      it('should create an instance of SitesSitePutSchemaDataPolicyIocAttributes', function() {
        // TODO: update the code to test SitesSitePutSchemaDataPolicyIocAttributes
        expect(instance).to.be.a(S1MgmtApi.SitesSitePutSchemaDataPolicyIocAttributes);
      });

      it('should have the property smartFileMonitoring (base name: "smartFileMonitoring")', function() {
        // TODO: update the code to test the property smartFileMonitoring
        expect(instance).to.have.property('smartFileMonitoring');
        // expect(instance.smartFileMonitoring).to.be(expectedValueLiteral);
      });

      it('should have the property windowsEventLogs (base name: "windowsEventLogs")', function() {
        // TODO: update the code to test the property windowsEventLogs
        expect(instance).to.have.property('windowsEventLogs');
        // expect(instance.windowsEventLogs).to.be(expectedValueLiteral);
      });

      it('should have the property autoInstallBrowserExtensions (base name: "autoInstallBrowserExtensions")', function() {
        // TODO: update the code to test the property autoInstallBrowserExtensions
        expect(instance).to.have.property('autoInstallBrowserExtensions');
        // expect(instance.autoInstallBrowserExtensions).to.be(expectedValueLiteral);
      });

      it('should have the property dataMasking (base name: "dataMasking")', function() {
        // TODO: update the code to test the property dataMasking
        expect(instance).to.have.property('dataMasking');
        // expect(instance.dataMasking).to.be(expectedValueLiteral);
      });

      it('should have the property dllModuleLoad (base name: "dllModuleLoad")', function() {
        // TODO: update the code to test the property dllModuleLoad
        expect(instance).to.have.property('dllModuleLoad');
        // expect(instance.dllModuleLoad).to.be(expectedValueLiteral);
      });

      it('should have the property dns (base name: "dns")', function() {
        // TODO: update the code to test the property dns
        expect(instance).to.have.property('dns');
        // expect(instance.dns).to.be(expectedValueLiteral);
      });

      it('should have the property crossProcess (base name: "crossProcess")', function() {
        // TODO: update the code to test the property crossProcess
        expect(instance).to.have.property('crossProcess');
        // expect(instance.crossProcess).to.be(expectedValueLiteral);
      });

      it('should have the property registry (base name: "registry")', function() {
        // TODO: update the code to test the property registry
        expect(instance).to.have.property('registry');
        // expect(instance.registry).to.be(expectedValueLiteral);
      });

      it('should have the property driver (base name: "driver")', function() {
        // TODO: update the code to test the property driver
        expect(instance).to.have.property('driver');
        // expect(instance.driver).to.be(expectedValueLiteral);
      });

      it('should have the property fds (base name: "fds")', function() {
        // TODO: update the code to test the property fds
        expect(instance).to.have.property('fds');
        // expect(instance.fds).to.be(expectedValueLiteral);
      });

      it('should have the property windowsEventLogsExtended (base name: "windowsEventLogsExtended")', function() {
        // TODO: update the code to test the property windowsEventLogsExtended
        expect(instance).to.have.property('windowsEventLogsExtended');
        // expect(instance.windowsEventLogsExtended).to.be(expectedValueLiteral);
      });

      it('should have the property file (base name: "file")', function() {
        // TODO: update the code to test the property file
        expect(instance).to.have.property('file');
        // expect(instance.file).to.be(expectedValueLiteral);
      });

      it('should have the property namedPipeExtended (base name: "namedPipeExtended")', function() {
        // TODO: update the code to test the property namedPipeExtended
        expect(instance).to.have.property('namedPipeExtended');
        // expect(instance.namedPipeExtended).to.be(expectedValueLiteral);
      });

      it('should have the property url (base name: "url")', function() {
        // TODO: update the code to test the property url
        expect(instance).to.have.property('url');
        // expect(instance.url).to.be(expectedValueLiteral);
      });

      it('should have the property behavioralIndicators (base name: "behavioralIndicators")', function() {
        // TODO: update the code to test the property behavioralIndicators
        expect(instance).to.have.property('behavioralIndicators');
        // expect(instance.behavioralIndicators).to.be(expectedValueLiteral);
      });

      it('should have the property process (base name: "process")', function() {
        // TODO: update the code to test the property process
        expect(instance).to.have.property('process');
        // expect(instance.process).to.be(expectedValueLiteral);
      });

      it('should have the property commandScripts (base name: "commandScripts")', function() {
        // TODO: update the code to test the property commandScripts
        expect(instance).to.have.property('commandScripts');
        // expect(instance.commandScripts).to.be(expectedValueLiteral);
      });

      it('should have the property namedPipe (base name: "namedPipe")', function() {
        // TODO: update the code to test the property namedPipe
        expect(instance).to.have.property('namedPipe');
        // expect(instance.namedPipe).to.be(expectedValueLiteral);
      });

      it('should have the property ip (base name: "ip")', function() {
        // TODO: update the code to test the property ip
        expect(instance).to.have.property('ip');
        // expect(instance.ip).to.be(expectedValueLiteral);
      });

      it('should have the property login (base name: "login")', function() {
        // TODO: update the code to test the property login
        expect(instance).to.have.property('login');
        // expect(instance.login).to.be(expectedValueLiteral);
      });

      it('should have the property scheduledTask (base name: "scheduledTask")', function() {
        // TODO: update the code to test the property scheduledTask
        expect(instance).to.have.property('scheduledTask');
        // expect(instance.scheduledTask).to.be(expectedValueLiteral);
      });

    });
  });

}));
