/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ThreatsSchemasThreatSchemaMany200MitigationStatus', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.ThreatsSchemasThreatSchemaMany200MitigationStatus();
      });

      it('should create an instance of ThreatsSchemasThreatSchemaMany200MitigationStatus', function() {
        // TODO: update the code to test ThreatsSchemasThreatSchemaMany200MitigationStatus
        expect(instance).to.be.a(S1MgmtApi.ThreatsSchemasThreatSchemaMany200MitigationStatus);
      });

      it('should have the property reportId (base name: "reportId")', function() {
        // TODO: update the code to test the property reportId
        expect(instance).to.have.property('reportId');
        // expect(instance.reportId).to.be(expectedValueLiteral);
      });

      it('should have the property action (base name: "action")', function() {
        // TODO: update the code to test the property action
        expect(instance).to.have.property('action');
        // expect(instance.action).to.be(expectedValueLiteral);
      });

      it('should have the property actionsCounters (base name: "actionsCounters")', function() {
        // TODO: update the code to test the property actionsCounters
        expect(instance).to.have.property('actionsCounters');
        // expect(instance.actionsCounters).to.be(expectedValueLiteral);
      });

      it('should have the property groupNotFound (base name: "groupNotFound")', function() {
        // TODO: update the code to test the property groupNotFound
        expect(instance).to.have.property('groupNotFound');
        // expect(instance.groupNotFound).to.be(expectedValueLiteral);
      });

      it('should have the property mitigationEndedAt (base name: "mitigationEndedAt")', function() {
        // TODO: update the code to test the property mitigationEndedAt
        expect(instance).to.have.property('mitigationEndedAt');
        // expect(instance.mitigationEndedAt).to.be(expectedValueLiteral);
      });

      it('should have the property lastUpdate (base name: "lastUpdate")', function() {
        // TODO: update the code to test the property lastUpdate
        expect(instance).to.have.property('lastUpdate');
        // expect(instance.lastUpdate).to.be(expectedValueLiteral);
      });

      it('should have the property agentSupportsReport (base name: "agentSupportsReport")', function() {
        // TODO: update the code to test the property agentSupportsReport
        expect(instance).to.have.property('agentSupportsReport');
        // expect(instance.agentSupportsReport).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property mitigationStartedAt (base name: "mitigationStartedAt")', function() {
        // TODO: update the code to test the property mitigationStartedAt
        expect(instance).to.have.property('mitigationStartedAt');
        // expect(instance.mitigationStartedAt).to.be(expectedValueLiteral);
      });

      it('should have the property latestReport (base name: "latestReport")', function() {
        // TODO: update the code to test the property latestReport
        expect(instance).to.have.property('latestReport');
        // expect(instance.latestReport).to.be(expectedValueLiteral);
      });

    });
  });

}));
