/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('UsersSchemasBulkUsersActionSchemaFilter', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.UsersSchemasBulkUsersActionSchemaFilter();
      });

      it('should create an instance of UsersSchemasBulkUsersActionSchemaFilter', function() {
        // TODO: update the code to test UsersSchemasBulkUsersActionSchemaFilter
        expect(instance).to.be.a(S1MgmtApi.UsersSchemasBulkUsersActionSchemaFilter);
      });

      it('should have the property createdAtGt (base name: "createdAt__gt")', function() {
        // TODO: update the code to test the property createdAtGt
        expect(instance).to.have.property('createdAtGt');
        // expect(instance.createdAtGt).to.be(expectedValueLiteral);
      });

      it('should have the property emailVerified (base name: "emailVerified")', function() {
        // TODO: update the code to test the property emailVerified
        expect(instance).to.have.property('emailVerified');
        // expect(instance.emailVerified).to.be(expectedValueLiteral);
      });

      it('should have the property canGenerateApiToken (base name: "canGenerateApiToken")', function() {
        // TODO: update the code to test the property canGenerateApiToken
        expect(instance).to.have.property('canGenerateApiToken');
        // expect(instance.canGenerateApiToken).to.be(expectedValueLiteral);
      });

      it('should have the property lastActivationBetween (base name: "lastActivation__between")', function() {
        // TODO: update the code to test the property lastActivationBetween
        expect(instance).to.have.property('lastActivationBetween');
        // expect(instance.lastActivationBetween).to.be(expectedValueLiteral);
      });

      it('should have the property ids (base name: "ids")', function() {
        // TODO: update the code to test the property ids
        expect(instance).to.have.property('ids');
        // expect(instance.ids).to.be(expectedValueLiteral);
      });

      it('should have the property query (base name: "query")', function() {
        // TODO: update the code to test the property query
        expect(instance).to.have.property('query');
        // expect(instance.query).to.be(expectedValueLiteral);
      });

      it('should have the property apiTokenExpiresAtLte (base name: "apiTokenExpiresAt__lte")', function() {
        // TODO: update the code to test the property apiTokenExpiresAtLte
        expect(instance).to.have.property('apiTokenExpiresAtLte');
        // expect(instance.apiTokenExpiresAtLte).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtLt (base name: "createdAt__lt")', function() {
        // TODO: update the code to test the property createdAtLt
        expect(instance).to.have.property('createdAtLt');
        // expect(instance.createdAtLt).to.be(expectedValueLiteral);
      });

      it('should have the property lastActivationLte (base name: "lastActivation__lte")', function() {
        // TODO: update the code to test the property lastActivationLte
        expect(instance).to.have.property('lastActivationLte');
        // expect(instance.lastActivationLte).to.be(expectedValueLiteral);
      });

      it('should have the property sources (base name: "sources")', function() {
        // TODO: update the code to test the property sources
        expect(instance).to.have.property('sources');
        // expect(instance.sources).to.be(expectedValueLiteral);
      });

      it('should have the property primaryTwoFaMethod (base name: "primaryTwoFaMethod")', function() {
        // TODO: update the code to test the property primaryTwoFaMethod
        expect(instance).to.have.property('primaryTwoFaMethod');
        // expect(instance.primaryTwoFaMethod).to.be(expectedValueLiteral);
      });

      it('should have the property lastLogin (base name: "lastLogin")', function() {
        // TODO: update the code to test the property lastLogin
        expect(instance).to.have.property('lastLogin');
        // expect(instance.lastLogin).to.be(expectedValueLiteral);
      });

      it('should have the property lastActivationLt (base name: "lastActivation__lt")', function() {
        // TODO: update the code to test the property lastActivationLt
        expect(instance).to.have.property('lastActivationLt');
        // expect(instance.lastActivationLt).to.be(expectedValueLiteral);
      });

      it('should have the property hasValidApiToken (base name: "hasValidApiToken")', function() {
        // TODO: update the code to test the property hasValidApiToken
        expect(instance).to.have.property('hasValidApiToken');
        // expect(instance.hasValidApiToken).to.be(expectedValueLiteral);
      });

      it('should have the property source (base name: "source")', function() {
        // TODO: update the code to test the property source
        expect(instance).to.have.property('source');
        // expect(instance.source).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtLte (base name: "createdAt__lte")', function() {
        // TODO: update the code to test the property createdAtLte
        expect(instance).to.have.property('createdAtLte');
        // expect(instance.createdAtLte).to.be(expectedValueLiteral);
      });

      it('should have the property dateJoined (base name: "dateJoined")', function() {
        // TODO: update the code to test the property dateJoined
        expect(instance).to.have.property('dateJoined');
        // expect(instance.dateJoined).to.be(expectedValueLiteral);
      });

      it('should have the property roleIds (base name: "roleIds")', function() {
        // TODO: update the code to test the property roleIds
        expect(instance).to.have.property('roleIds');
        // expect(instance.roleIds).to.be(expectedValueLiteral);
      });

      it('should have the property fullNameContains (base name: "fullName__contains")', function() {
        // TODO: update the code to test the property fullNameContains
        expect(instance).to.have.property('fullNameContains');
        // expect(instance.fullNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property apiTokenExpiresAtGt (base name: "apiTokenExpiresAt__gt")', function() {
        // TODO: update the code to test the property apiTokenExpiresAtGt
        expect(instance).to.have.property('apiTokenExpiresAtGt');
        // expect(instance.apiTokenExpiresAtGt).to.be(expectedValueLiteral);
      });

      it('should have the property twoFaStatuses (base name: "twoFaStatuses")', function() {
        // TODO: update the code to test the property twoFaStatuses
        expect(instance).to.have.property('twoFaStatuses');
        // expect(instance.twoFaStatuses).to.be(expectedValueLiteral);
      });

      it('should have the property fullNameReadOnly (base name: "fullNameReadOnly")', function() {
        // TODO: update the code to test the property fullNameReadOnly
        expect(instance).to.have.property('fullNameReadOnly');
        // expect(instance.fullNameReadOnly).to.be(expectedValueLiteral);
      });

      it('should have the property twoFaStatus (base name: "twoFaStatus")', function() {
        // TODO: update the code to test the property twoFaStatus
        expect(instance).to.have.property('twoFaStatus');
        // expect(instance.twoFaStatus).to.be(expectedValueLiteral);
      });

      it('should have the property apiTokenExpiresAtGte (base name: "apiTokenExpiresAt__gte")', function() {
        // TODO: update the code to test the property apiTokenExpiresAtGte
        expect(instance).to.have.property('apiTokenExpiresAtGte');
        // expect(instance.apiTokenExpiresAtGte).to.be(expectedValueLiteral);
      });

      it('should have the property fullName (base name: "fullName")', function() {
        // TODO: update the code to test the property fullName
        expect(instance).to.have.property('fullName');
        // expect(instance.fullName).to.be(expectedValueLiteral);
      });

      it('should have the property groupsReadOnly (base name: "groupsReadOnly")', function() {
        // TODO: update the code to test the property groupsReadOnly
        expect(instance).to.have.property('groupsReadOnly');
        // expect(instance.groupsReadOnly).to.be(expectedValueLiteral);
      });

      it('should have the property apiTokenExpiresAtBetween (base name: "apiTokenExpiresAt__between")', function() {
        // TODO: update the code to test the property apiTokenExpiresAtBetween
        expect(instance).to.have.property('apiTokenExpiresAtBetween');
        // expect(instance.apiTokenExpiresAtBetween).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtBetween (base name: "createdAt__between")', function() {
        // TODO: update the code to test the property createdAtBetween
        expect(instance).to.have.property('createdAtBetween');
        // expect(instance.createdAtBetween).to.be(expectedValueLiteral);
      });

      it('should have the property firstLogin (base name: "firstLogin")', function() {
        // TODO: update the code to test the property firstLogin
        expect(instance).to.have.property('firstLogin');
        // expect(instance.firstLogin).to.be(expectedValueLiteral);
      });

      it('should have the property emailReadOnly (base name: "emailReadOnly")', function() {
        // TODO: update the code to test the property emailReadOnly
        expect(instance).to.have.property('emailReadOnly');
        // expect(instance.emailReadOnly).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtGte (base name: "createdAt__gte")', function() {
        // TODO: update the code to test the property createdAtGte
        expect(instance).to.have.property('createdAtGte');
        // expect(instance.createdAtGte).to.be(expectedValueLiteral);
      });

      it('should have the property lastActivationGt (base name: "lastActivation__gt")', function() {
        // TODO: update the code to test the property lastActivationGt
        expect(instance).to.have.property('lastActivationGt');
        // expect(instance.lastActivationGt).to.be(expectedValueLiteral);
      });

      it('should have the property apiTokenExpiresAtLt (base name: "apiTokenExpiresAt__lt")', function() {
        // TODO: update the code to test the property apiTokenExpiresAtLt
        expect(instance).to.have.property('apiTokenExpiresAtLt');
        // expect(instance.apiTokenExpiresAtLt).to.be(expectedValueLiteral);
      });

      it('should have the property emailContains (base name: "email__contains")', function() {
        // TODO: update the code to test the property emailContains
        expect(instance).to.have.property('emailContains');
        // expect(instance.emailContains).to.be(expectedValueLiteral);
      });

      it('should have the property lastActivationGte (base name: "lastActivation__gte")', function() {
        // TODO: update the code to test the property lastActivationGte
        expect(instance).to.have.property('lastActivationGte');
        // expect(instance.lastActivationGte).to.be(expectedValueLiteral);
      });

      it('should have the property twoFaEnabled (base name: "twoFaEnabled")', function() {
        // TODO: update the code to test the property twoFaEnabled
        expect(instance).to.have.property('twoFaEnabled');
        // expect(instance.twoFaEnabled).to.be(expectedValueLiteral);
      });

    });
  });

}));
