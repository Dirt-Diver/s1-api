/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V21ApplicationManagementApplicationManagementSchemasRisksByAggregatedApplicationsSchemaMany200Data', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRisksByAggregatedApplicationsSchemaMany200Data();
      });

      it('should create an instance of V21ApplicationManagementApplicationManagementSchemasRisksByAggregatedApplicationsSchemaMany200Data', function() {
        // TODO: update the code to test V21ApplicationManagementApplicationManagementSchemasRisksByAggregatedApplicationsSchemaMany200Data
        expect(instance).to.be.a(S1MgmtApi.V21ApplicationManagementApplicationManagementSchemasRisksByAggregatedApplicationsSchemaMany200Data);
      });

      it('should have the property daysDetected (base name: "daysDetected")', function() {
        // TODO: update the code to test the property daysDetected
        expect(instance).to.have.property('daysDetected');
        // expect(instance.daysDetected).to.be(expectedValueLiteral);
      });

      it('should have the property cveCount (base name: "cveCount")', function() {
        // TODO: update the code to test the property cveCount
        expect(instance).to.have.property('cveCount');
        // expect(instance.cveCount).to.be(expectedValueLiteral);
      });

      it('should have the property endpointsWithoutTicket (base name: "endpointsWithoutTicket")', function() {
        // TODO: update the code to test the property endpointsWithoutTicket
        expect(instance).to.have.property('endpointsWithoutTicket');
        // expect(instance.endpointsWithoutTicket).to.be(expectedValueLiteral);
      });

      it('should have the property detectionDate (base name: "detectionDate")', function() {
        // TODO: update the code to test the property detectionDate
        expect(instance).to.have.property('detectionDate');
        // expect(instance.detectionDate).to.be(expectedValueLiteral);
      });

      it('should have the property statuses (base name: "statuses")', function() {
        // TODO: update the code to test the property statuses
        expect(instance).to.have.property('statuses');
        // expect(instance.statuses).to.be(expectedValueLiteral);
      });

      it('should have the property estimate (base name: "estimate")', function() {
        // TODO: update the code to test the property estimate
        expect(instance).to.have.property('estimate');
        // expect(instance.estimate).to.be(expectedValueLiteral);
      });

      it('should have the property highestSeverity (base name: "highestSeverity")', function() {
        // TODO: update the code to test the property highestSeverity
        expect(instance).to.have.property('highestSeverity');
        // expect(instance.highestSeverity).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property exploitedInTheWild (base name: "exploitedInTheWild")', function() {
        // TODO: update the code to test the property exploitedInTheWild
        expect(instance).to.have.property('exploitedInTheWild');
        // expect(instance.exploitedInTheWild).to.be(expectedValueLiteral);
      });

      it('should have the property applicationType (base name: "applicationType")', function() {
        // TODO: update the code to test the property applicationType
        expect(instance).to.have.property('applicationType');
        // expect(instance.applicationType).to.be(expectedValueLiteral);
      });

      it('should have the property highestRiskScore (base name: "highestRiskScore")', function() {
        // TODO: update the code to test the property highestRiskScore
        expect(instance).to.have.property('highestRiskScore');
        // expect(instance.highestRiskScore).to.be(expectedValueLiteral);
      });

      it('should have the property vendor (base name: "vendor")', function() {
        // TODO: update the code to test the property vendor
        expect(instance).to.have.property('vendor');
        // expect(instance.vendor).to.be(expectedValueLiteral);
      });

      it('should have the property remediationLevel (base name: "remediationLevel")', function() {
        // TODO: update the code to test the property remediationLevel
        expect(instance).to.have.property('remediationLevel');
        // expect(instance.remediationLevel).to.be(expectedValueLiteral);
      });

      it('should have the property versionCount (base name: "versionCount")', function() {
        // TODO: update the code to test the property versionCount
        expect(instance).to.have.property('versionCount');
        // expect(instance.versionCount).to.be(expectedValueLiteral);
      });

      it('should have the property exploitCodeMaturity (base name: "exploitCodeMaturity")', function() {
        // TODO: update the code to test the property exploitCodeMaturity
        expect(instance).to.have.property('exploitCodeMaturity');
        // expect(instance.exploitCodeMaturity).to.be(expectedValueLiteral);
      });

      it('should have the property highestNvdBaseScore (base name: "highestNvdBaseScore")', function() {
        // TODO: update the code to test the property highestNvdBaseScore
        expect(instance).to.have.property('highestNvdBaseScore');
        // expect(instance.highestNvdBaseScore).to.be(expectedValueLiteral);
      });

      it('should have the property endpointCount (base name: "endpointCount")', function() {
        // TODO: update the code to test the property endpointCount
        expect(instance).to.have.property('endpointCount');
        // expect(instance.endpointCount).to.be(expectedValueLiteral);
      });

    });
  });

}));
