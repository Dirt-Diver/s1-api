/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V21RsoSchemasUpdateScriptData', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.V21RsoSchemasUpdateScriptData();
      });

      it('should create an instance of V21RsoSchemasUpdateScriptData', function() {
        // TODO: update the code to test V21RsoSchemasUpdateScriptData
        expect(instance).to.be.a(S1MgmtApi.V21RsoSchemasUpdateScriptData);
      });

      it('should have the property inputRequired (base name: "inputRequired")', function() {
        // TODO: update the code to test the property inputRequired
        expect(instance).to.have.property('inputRequired');
        // expect(instance.inputRequired).to.be(expectedValueLiteral);
      });

      it('should have the property inputInstructions (base name: "inputInstructions")', function() {
        // TODO: update the code to test the property inputInstructions
        expect(instance).to.have.property('inputInstructions');
        // expect(instance.inputInstructions).to.be(expectedValueLiteral);
      });

      it('should have the property scriptName (base name: "scriptName")', function() {
        // TODO: update the code to test the property scriptName
        expect(instance).to.have.property('scriptName');
        // expect(instance.scriptName).to.be(expectedValueLiteral);
      });

      it('should have the property inputExample (base name: "inputExample")', function() {
        // TODO: update the code to test the property inputExample
        expect(instance).to.have.property('inputExample');
        // expect(instance.inputExample).to.be(expectedValueLiteral);
      });

      it('should have the property scriptType (base name: "scriptType")', function() {
        // TODO: update the code to test the property scriptType
        expect(instance).to.have.property('scriptType');
        // expect(instance.scriptType).to.be(expectedValueLiteral);
      });

      it('should have the property scriptDescription (base name: "scriptDescription")', function() {
        // TODO: update the code to test the property scriptDescription
        expect(instance).to.have.property('scriptDescription');
        // expect(instance.scriptDescription).to.be(expectedValueLiteral);
      });

      it('should have the property packageEndpointExpirationSeconds (base name: "packageEndpointExpirationSeconds")', function() {
        // TODO: update the code to test the property packageEndpointExpirationSeconds
        expect(instance).to.have.property('packageEndpointExpirationSeconds');
        // expect(instance.packageEndpointExpirationSeconds).to.be(expectedValueLiteral);
      });

      it('should have the property scriptRuntimeTimeoutSeconds (base name: "scriptRuntimeTimeoutSeconds")', function() {
        // TODO: update the code to test the property scriptRuntimeTimeoutSeconds
        expect(instance).to.have.property('scriptRuntimeTimeoutSeconds');
        // expect(instance.scriptRuntimeTimeoutSeconds).to.be(expectedValueLiteral);
      });

      it('should have the property osTypes (base name: "osTypes")', function() {
        // TODO: update the code to test the property osTypes
        expect(instance).to.have.property('osTypes');
        // expect(instance.osTypes).to.be(expectedValueLiteral);
      });

      it('should have the property packageEndpointExpiration (base name: "packageEndpointExpiration")', function() {
        // TODO: update the code to test the property packageEndpointExpiration
        expect(instance).to.have.property('packageEndpointExpiration');
        // expect(instance.packageEndpointExpiration).to.be(expectedValueLiteral);
      });

    });
  });

}));
