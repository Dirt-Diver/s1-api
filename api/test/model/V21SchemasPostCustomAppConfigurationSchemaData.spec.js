/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V21SchemasPostCustomAppConfigurationSchemaData', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.V21SchemasPostCustomAppConfigurationSchemaData();
      });

      it('should create an instance of V21SchemasPostCustomAppConfigurationSchemaData', function() {
        // TODO: update the code to test V21SchemasPostCustomAppConfigurationSchemaData
        expect(instance).to.be.a(S1MgmtApi.V21SchemasPostCustomAppConfigurationSchemaData);
      });

      it('should have the property scopeId (base name: "scopeId")', function() {
        // TODO: update the code to test the property scopeId
        expect(instance).to.have.property('scopeId');
        // expect(instance.scopeId).to.be(expectedValueLiteral);
      });

      it('should have the property driverMemory (base name: "driverMemory")', function() {
        // TODO: update the code to test the property driverMemory
        expect(instance).to.have.property('driverMemory');
        // expect(instance.driverMemory).to.be(expectedValueLiteral);
      });

      it('should have the property executorMemory (base name: "executorMemory")', function() {
        // TODO: update the code to test the property executorMemory
        expect(instance).to.have.property('executorMemory');
        // expect(instance.executorMemory).to.be(expectedValueLiteral);
      });

      it('should have the property minScale (base name: "minScale")', function() {
        // TODO: update the code to test the property minScale
        expect(instance).to.have.property('minScale');
        // expect(instance.minScale).to.be(expectedValueLiteral);
      });

      it('should have the property scopeLevel (base name: "scopeLevel")', function() {
        // TODO: update the code to test the property scopeLevel
        expect(instance).to.have.property('scopeLevel');
        // expect(instance.scopeLevel).to.be(expectedValueLiteral);
      });

      it('should have the property driverCores (base name: "driverCores")', function() {
        // TODO: update the code to test the property driverCores
        expect(instance).to.have.property('driverCores');
        // expect(instance.driverCores).to.be(expectedValueLiteral);
      });

      it('should have the property mgmtId (base name: "mgmtId")', function() {
        // TODO: update the code to test the property mgmtId
        expect(instance).to.have.property('mgmtId');
        // expect(instance.mgmtId).to.be(expectedValueLiteral);
      });

      it('should have the property sparkConf (base name: "sparkConf")', function() {
        // TODO: update the code to test the property sparkConf
        expect(instance).to.have.property('sparkConf');
        // expect(instance.sparkConf).to.be(expectedValueLiteral);
      });

      it('should have the property maxScale (base name: "maxScale")', function() {
        // TODO: update the code to test the property maxScale
        expect(instance).to.have.property('maxScale');
        // expect(instance.maxScale).to.be(expectedValueLiteral);
      });

      it('should have the property executorCores (base name: "executorCores")', function() {
        // TODO: update the code to test the property executorCores
        expect(instance).to.have.property('executorCores');
        // expect(instance.executorCores).to.be(expectedValueLiteral);
      });

    });
  });

}));
