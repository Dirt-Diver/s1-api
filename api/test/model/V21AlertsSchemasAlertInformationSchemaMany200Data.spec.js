/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V21AlertsSchemasAlertInformationSchemaMany200Data', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.V21AlertsSchemasAlertInformationSchemaMany200Data();
      });

      it('should create an instance of V21AlertsSchemasAlertInformationSchemaMany200Data', function() {
        // TODO: update the code to test V21AlertsSchemasAlertInformationSchemaMany200Data
        expect(instance).to.be.a(S1MgmtApi.V21AlertsSchemasAlertInformationSchemaMany200Data);
      });

      it('should have the property sourceParentProcessInfo (base name: "sourceParentProcessInfo")', function() {
        // TODO: update the code to test the property sourceParentProcessInfo
        expect(instance).to.have.property('sourceParentProcessInfo');
        // expect(instance.sourceParentProcessInfo).to.be(expectedValueLiteral);
      });

      it('should have the property ruleInfo (base name: "ruleInfo")', function() {
        // TODO: update the code to test the property ruleInfo
        expect(instance).to.have.property('ruleInfo');
        // expect(instance.ruleInfo).to.be(expectedValueLiteral);
      });

      it('should have the property alertInfo (base name: "alertInfo")', function() {
        // TODO: update the code to test the property alertInfo
        expect(instance).to.have.property('alertInfo');
        // expect(instance.alertInfo).to.be(expectedValueLiteral);
      });

      it('should have the property targetProcessInfo (base name: "targetProcessInfo")', function() {
        // TODO: update the code to test the property targetProcessInfo
        expect(instance).to.have.property('targetProcessInfo');
        // expect(instance.targetProcessInfo).to.be(expectedValueLiteral);
      });

      it('should have the property containerInfo (base name: "containerInfo")', function() {
        // TODO: update the code to test the property containerInfo
        expect(instance).to.have.property('containerInfo');
        // expect(instance.containerInfo).to.be(expectedValueLiteral);
      });

      it('should have the property kubernetesInfo (base name: "kubernetesInfo")', function() {
        // TODO: update the code to test the property kubernetesInfo
        expect(instance).to.have.property('kubernetesInfo');
        // expect(instance.kubernetesInfo).to.be(expectedValueLiteral);
      });

      it('should have the property sourceProcessInfo (base name: "sourceProcessInfo")', function() {
        // TODO: update the code to test the property sourceProcessInfo
        expect(instance).to.have.property('sourceProcessInfo');
        // expect(instance.sourceProcessInfo).to.be(expectedValueLiteral);
      });

      it('should have the property agentDetectionInfo (base name: "agentDetectionInfo")', function() {
        // TODO: update the code to test the property agentDetectionInfo
        expect(instance).to.have.property('agentDetectionInfo');
        // expect(instance.agentDetectionInfo).to.be(expectedValueLiteral);
      });

    });
  });

}));
