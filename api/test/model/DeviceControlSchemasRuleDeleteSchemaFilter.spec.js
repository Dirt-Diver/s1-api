/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DeviceControlSchemasRuleDeleteSchemaFilter', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.DeviceControlSchemasRuleDeleteSchemaFilter();
      });

      it('should create an instance of DeviceControlSchemasRuleDeleteSchemaFilter', function() {
        // TODO: update the code to test DeviceControlSchemasRuleDeleteSchemaFilter
        expect(instance).to.be.a(S1MgmtApi.DeviceControlSchemasRuleDeleteSchemaFilter);
      });

      it('should have the property createdAtGt (base name: "createdAt__gt")', function() {
        // TODO: update the code to test the property createdAtGt
        expect(instance).to.have.property('createdAtGt');
        // expect(instance.createdAtGt).to.be(expectedValueLiteral);
      });

      it('should have the property versions (base name: "versions")', function() {
        // TODO: update the code to test the property versions
        expect(instance).to.have.property('versions');
        // expect(instance.versions).to.be(expectedValueLiteral);
      });

      it('should have the property uids (base name: "uids")', function() {
        // TODO: update the code to test the property uids
        expect(instance).to.have.property('uids');
        // expect(instance.uids).to.be(expectedValueLiteral);
      });

      it('should have the property actions (base name: "actions")', function() {
        // TODO: update the code to test the property actions
        expect(instance).to.have.property('actions');
        // expect(instance.actions).to.be(expectedValueLiteral);
      });

      it('should have the property deviceNames (base name: "deviceNames")', function() {
        // TODO: update the code to test the property deviceNames
        expect(instance).to.have.property('deviceNames');
        // expect(instance.deviceNames).to.be(expectedValueLiteral);
      });

      it('should have the property interfaces (base name: "interfaces")', function() {
        // TODO: update the code to test the property interfaces
        expect(instance).to.have.property('interfaces');
        // expect(instance.interfaces).to.be(expectedValueLiteral);
      });

      it('should have the property deviceClasses (base name: "deviceClasses")', function() {
        // TODO: update the code to test the property deviceClasses
        expect(instance).to.have.property('deviceClasses');
        // expect(instance.deviceClasses).to.be(expectedValueLiteral);
      });

      it('should have the property query (base name: "query")', function() {
        // TODO: update the code to test the property query
        expect(instance).to.have.property('query');
        // expect(instance.query).to.be(expectedValueLiteral);
      });

      it('should have the property ids (base name: "ids")', function() {
        // TODO: update the code to test the property ids
        expect(instance).to.have.property('ids');
        // expect(instance.ids).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtLt (base name: "createdAt__lt")', function() {
        // TODO: update the code to test the property createdAtLt
        expect(instance).to.have.property('createdAtLt');
        // expect(instance.createdAtLt).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtLte (base name: "createdAt__lte")', function() {
        // TODO: update the code to test the property createdAtLte
        expect(instance).to.have.property('createdAtLte');
        // expect(instance.createdAtLte).to.be(expectedValueLiteral);
      });

      it('should have the property accessPermissions (base name: "accessPermissions")', function() {
        // TODO: update the code to test the property accessPermissions
        expect(instance).to.have.property('accessPermissions');
        // expect(instance.accessPermissions).to.be(expectedValueLiteral);
      });

      it('should have the property scopes (base name: "scopes")', function() {
        // TODO: update the code to test the property scopes
        expect(instance).to.have.property('scopes');
        // expect(instance.scopes).to.be(expectedValueLiteral);
      });

      it('should have the property statuses (base name: "statuses")', function() {
        // TODO: update the code to test the property statuses
        expect(instance).to.have.property('statuses');
        // expect(instance.statuses).to.be(expectedValueLiteral);
      });

      it('should have the property deviceIds (base name: "deviceIds")', function() {
        // TODO: update the code to test the property deviceIds
        expect(instance).to.have.property('deviceIds');
        // expect(instance.deviceIds).to.be(expectedValueLiteral);
      });

      it('should have the property productIds (base name: "productIds")', function() {
        // TODO: update the code to test the property productIds
        expect(instance).to.have.property('productIds');
        // expect(instance.productIds).to.be(expectedValueLiteral);
      });

      it('should have the property ruleName (base name: "ruleName")', function() {
        // TODO: update the code to test the property ruleName
        expect(instance).to.have.property('ruleName');
        // expect(instance.ruleName).to.be(expectedValueLiteral);
      });

      it('should have the property bluetoothAddresses (base name: "bluetoothAddresses")', function() {
        // TODO: update the code to test the property bluetoothAddresses
        expect(instance).to.have.property('bluetoothAddresses');
        // expect(instance.bluetoothAddresses).to.be(expectedValueLiteral);
      });

      it('should have the property vendorIds (base name: "vendorIds")', function() {
        // TODO: update the code to test the property vendorIds
        expect(instance).to.have.property('vendorIds');
        // expect(instance.vendorIds).to.be(expectedValueLiteral);
      });

      it('should have the property tenant (base name: "tenant")', function() {
        // TODO: update the code to test the property tenant
        expect(instance).to.have.property('tenant');
        // expect(instance.tenant).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtBetween (base name: "createdAt__between")', function() {
        // TODO: update the code to test the property createdAtBetween
        expect(instance).to.have.property('createdAtBetween');
        // expect(instance.createdAtBetween).to.be(expectedValueLiteral);
      });

      it('should have the property groupIds (base name: "groupIds")', function() {
        // TODO: update the code to test the property groupIds
        expect(instance).to.have.property('groupIds');
        // expect(instance.groupIds).to.be(expectedValueLiteral);
      });

      it('should have the property gattServices (base name: "gattServices")', function() {
        // TODO: update the code to test the property gattServices
        expect(instance).to.have.property('gattServices');
        // expect(instance.gattServices).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtGte (base name: "createdAt__gte")', function() {
        // TODO: update the code to test the property createdAtGte
        expect(instance).to.have.property('createdAtGte');
        // expect(instance.createdAtGte).to.be(expectedValueLiteral);
      });

      it('should have the property siteIds (base name: "siteIds")', function() {
        // TODO: update the code to test the property siteIds
        expect(instance).to.have.property('siteIds');
        // expect(instance.siteIds).to.be(expectedValueLiteral);
      });

      it('should have the property accountIds (base name: "accountIds")', function() {
        // TODO: update the code to test the property accountIds
        expect(instance).to.have.property('accountIds');
        // expect(instance.accountIds).to.be(expectedValueLiteral);
      });

      it('should have the property deviceInformationServiceInfoKeys (base name: "deviceInformationServiceInfoKeys")', function() {
        // TODO: update the code to test the property deviceInformationServiceInfoKeys
        expect(instance).to.have.property('deviceInformationServiceInfoKeys');
        // expect(instance.deviceInformationServiceInfoKeys).to.be(expectedValueLiteral);
      });

      it('should have the property manufacturerNames (base name: "manufacturerNames")', function() {
        // TODO: update the code to test the property manufacturerNames
        expect(instance).to.have.property('manufacturerNames');
        // expect(instance.manufacturerNames).to.be(expectedValueLiteral);
      });

      it('should have the property serviceClasses (base name: "serviceClasses")', function() {
        // TODO: update the code to test the property serviceClasses
        expect(instance).to.have.property('serviceClasses');
        // expect(instance.serviceClasses).to.be(expectedValueLiteral);
      });

      it('should have the property minorClasses (base name: "minorClasses")', function() {
        // TODO: update the code to test the property minorClasses
        expect(instance).to.have.property('minorClasses');
        // expect(instance.minorClasses).to.be(expectedValueLiteral);
      });

    });
  });

}));
