/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TasksSchemasResponseTaskSchema200Data', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.TasksSchemasResponseTaskSchema200Data();
      });

      it('should create an instance of TasksSchemasResponseTaskSchema200Data', function() {
        // TODO: update the code to test TasksSchemasResponseTaskSchema200Data
        expect(instance).to.be.a(S1MgmtApi.TasksSchemasResponseTaskSchema200Data);
      });

      it('should have the property maintenanceWindowsByDay (base name: "maintenanceWindowsByDay")', function() {
        // TODO: update the code to test the property maintenanceWindowsByDay
        expect(instance).to.have.property('maintenanceWindowsByDay');
        // expect(instance.maintenanceWindowsByDay).to.be(expectedValueLiteral);
      });

      it('should have the property maxConcurrent (base name: "maxConcurrent")', function() {
        // TODO: update the code to test the property maxConcurrent
        expect(instance).to.have.property('maxConcurrent');
        // expect(instance.maxConcurrent).to.be(expectedValueLiteral);
      });

      it('should have the property maintenanceConfigUpdatedAt (base name: "maintenanceConfigUpdatedAt")', function() {
        // TODO: update the code to test the property maintenanceConfigUpdatedAt
        expect(instance).to.have.property('maintenanceConfigUpdatedAt');
        // expect(instance.maintenanceConfigUpdatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property inheritParentMaintenanceConfig (base name: "inheritParentMaintenanceConfig")', function() {
        // TODO: update the code to test the property inheritParentMaintenanceConfig
        expect(instance).to.have.property('inheritParentMaintenanceConfig');
        // expect(instance.inheritParentMaintenanceConfig).to.be(expectedValueLiteral);
      });

      it('should have the property taskType (base name: "taskType")', function() {
        // TODO: update the code to test the property taskType
        expect(instance).to.have.property('taskType');
        // expect(instance.taskType).to.be(expectedValueLiteral);
      });

      it('should have the property timezoneGmt (base name: "timezoneGmt")', function() {
        // TODO: update the code to test the property timezoneGmt
        expect(instance).to.have.property('timezoneGmt');
        // expect(instance.timezoneGmt).to.be(expectedValueLiteral);
      });

      it('should have the property parentMaxConcurrent (base name: "parentMaxConcurrent")', function() {
        // TODO: update the code to test the property parentMaxConcurrent
        expect(instance).to.have.property('parentMaxConcurrent');
        // expect(instance.parentMaxConcurrent).to.be(expectedValueLiteral);
      });

      it('should have the property concurrencyConfigUpdatedAt (base name: "concurrencyConfigUpdatedAt")', function() {
        // TODO: update the code to test the property concurrencyConfigUpdatedAt
        expect(instance).to.have.property('concurrencyConfigUpdatedAt');
        // expect(instance.concurrencyConfigUpdatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property inheritParentConcurrencyConfig (base name: "inheritParentConcurrencyConfig")', function() {
        // TODO: update the code to test the property inheritParentConcurrencyConfig
        expect(instance).to.have.property('inheritParentConcurrencyConfig');
        // expect(instance.inheritParentConcurrencyConfig).to.be(expectedValueLiteral);
      });

      it('should have the property concurrencyConfigUpdatedBy (base name: "concurrencyConfigUpdatedBy")', function() {
        // TODO: update the code to test the property concurrencyConfigUpdatedBy
        expect(instance).to.have.property('concurrencyConfigUpdatedBy');
        // expect(instance.concurrencyConfigUpdatedBy).to.be(expectedValueLiteral);
      });

      it('should have the property maintenanceConfigUpdatedBy (base name: "maintenanceConfigUpdatedBy")', function() {
        // TODO: update the code to test the property maintenanceConfigUpdatedBy
        expect(instance).to.have.property('maintenanceConfigUpdatedBy');
        // expect(instance.maintenanceConfigUpdatedBy).to.be(expectedValueLiteral);
      });

    });
  });

}));
