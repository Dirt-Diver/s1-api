/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('FiltersFiltersDeepVisibilityFilterViewSchema200Data', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.FiltersFiltersDeepVisibilityFilterViewSchema200Data();
      });

      it('should create an instance of FiltersFiltersDeepVisibilityFilterViewSchema200Data', function() {
        // TODO: update the code to test FiltersFiltersDeepVisibilityFilterViewSchema200Data
        expect(instance).to.be.a(S1MgmtApi.FiltersFiltersDeepVisibilityFilterViewSchema200Data);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property recipients (base name: "recipients")', function() {
        // TODO: update the code to test the property recipients
        expect(instance).to.have.property('recipients');
        // expect(instance.recipients).to.be(expectedValueLiteral);
      });

      it('should have the property scopeId (base name: "scopeId")', function() {
        // TODO: update the code to test the property scopeId
        expect(instance).to.have.property('scopeId');
        // expect(instance.scopeId).to.be(expectedValueLiteral);
      });

      it('should have the property siteId (base name: "siteId")', function() {
        // TODO: update the code to test the property siteId
        expect(instance).to.have.property('siteId');
        // expect(instance.siteId).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updatedAt")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property scopeLevelName (base name: "scopeLevelName")', function() {
        // TODO: update the code to test the property scopeLevelName
        expect(instance).to.have.property('scopeLevelName');
        // expect(instance.scopeLevelName).to.be(expectedValueLiteral);
      });

      it('should have the property filterFields (base name: "filterFields")', function() {
        // TODO: update the code to test the property filterFields
        expect(instance).to.have.property('filterFields');
        // expect(instance.filterFields).to.be(expectedValueLiteral);
      });

      it('should have the property scopeLevel (base name: "scopeLevel")', function() {
        // TODO: update the code to test the property scopeLevel
        expect(instance).to.have.property('scopeLevel');
        // expect(instance.scopeLevel).to.be(expectedValueLiteral);
      });

      it('should have the property frequency (base name: "frequency")', function() {
        // TODO: update the code to test the property frequency
        expect(instance).to.have.property('frequency');
        // expect(instance.frequency).to.be(expectedValueLiteral);
      });

      it('should have the property notifications (base name: "notifications")', function() {
        // TODO: update the code to test the property notifications
        expect(instance).to.have.property('notifications');
        // expect(instance.notifications).to.be(expectedValueLiteral);
      });

    });
  });

}));
