/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('FirewallControlSchemasPutFirewallSchemaData', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.FirewallControlSchemasPutFirewallSchemaData();
      });

      it('should create an instance of FirewallControlSchemasPutFirewallSchemaData', function() {
        // TODO: update the code to test FirewallControlSchemasPutFirewallSchemaData
        expect(instance).to.be.a(S1MgmtApi.FirewallControlSchemasPutFirewallSchemaData);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property action (base name: "action")', function() {
        // TODO: update the code to test the property action
        expect(instance).to.have.property('action');
        // expect(instance.action).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property remotePort (base name: "remotePort")', function() {
        // TODO: update the code to test the property remotePort
        expect(instance).to.have.property('remotePort');
        // expect(instance.remotePort).to.be(expectedValueLiteral);
      });

      it('should have the property protocol (base name: "protocol")', function() {
        // TODO: update the code to test the property protocol
        expect(instance).to.have.property('protocol');
        // expect(instance.protocol).to.be(expectedValueLiteral);
      });

      it('should have the property osType (base name: "osType")', function() {
        // TODO: update the code to test the property osType
        expect(instance).to.have.property('osType');
        // expect(instance.osType).to.be(expectedValueLiteral);
      });

      it('should have the property localPort (base name: "localPort")', function() {
        // TODO: update the code to test the property localPort
        expect(instance).to.have.property('localPort');
        // expect(instance.localPort).to.be(expectedValueLiteral);
      });

      it('should have the property remoteHost (base name: "remoteHost")', function() {
        // TODO: update the code to test the property remoteHost
        expect(instance).to.have.property('remoteHost');
        // expect(instance.remoteHost).to.be(expectedValueLiteral);
      });

      it('should have the property tagIds (base name: "tagIds")', function() {
        // TODO: update the code to test the property tagIds
        expect(instance).to.have.property('tagIds');
        // expect(instance.tagIds).to.be(expectedValueLiteral);
      });

      it('should have the property osTypes (base name: "osTypes")', function() {
        // TODO: update the code to test the property osTypes
        expect(instance).to.have.property('osTypes');
        // expect(instance.osTypes).to.be(expectedValueLiteral);
      });

      it('should have the property localHost (base name: "localHost")', function() {
        // TODO: update the code to test the property localHost
        expect(instance).to.have.property('localHost');
        // expect(instance.localHost).to.be(expectedValueLiteral);
      });

      it('should have the property direction (base name: "direction")', function() {
        // TODO: update the code to test the property direction
        expect(instance).to.have.property('direction');
        // expect(instance.direction).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property application (base name: "application")', function() {
        // TODO: update the code to test the property application
        expect(instance).to.have.property('application');
        // expect(instance.application).to.be(expectedValueLiteral);
      });

      it('should have the property location (base name: "location")', function() {
        // TODO: update the code to test the property location
        expect(instance).to.have.property('location');
        // expect(instance.location).to.be(expectedValueLiteral);
      });

      it('should have the property tag (base name: "tag")', function() {
        // TODO: update the code to test the property tag
        expect(instance).to.have.property('tag');
        // expect(instance.tag).to.be(expectedValueLiteral);
      });

      it('should have the property remoteHosts (base name: "remoteHosts")', function() {
        // TODO: update the code to test the property remoteHosts
        expect(instance).to.have.property('remoteHosts');
        // expect(instance.remoteHosts).to.be(expectedValueLiteral);
      });

    });
  });

}));
