/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SitesDuplicateSiteSchemaData', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.SitesDuplicateSiteSchemaData();
      });

      it('should create an instance of SitesDuplicateSiteSchemaData', function() {
        // TODO: update the code to test SitesDuplicateSiteSchemaData
        expect(instance).to.be.a(S1MgmtApi.SitesDuplicateSiteSchemaData);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property sourceSiteId (base name: "sourceSiteId")', function() {
        // TODO: update the code to test the property sourceSiteId
        expect(instance).to.have.property('sourceSiteId');
        // expect(instance.sourceSiteId).to.be(expectedValueLiteral);
      });

      it('should have the property unlimitedLicenses (base name: "unlimitedLicenses")', function() {
        // TODO: update the code to test the property unlimitedLicenses
        expect(instance).to.have.property('unlimitedLicenses');
        // expect(instance.unlimitedLicenses).to.be(expectedValueLiteral);
      });

      it('should have the property policy (base name: "policy")', function() {
        // TODO: update the code to test the property policy
        expect(instance).to.have.property('policy');
        // expect(instance.policy).to.be(expectedValueLiteral);
      });

      it('should have the property totalLicenses (base name: "totalLicenses")', function() {
        // TODO: update the code to test the property totalLicenses
        expect(instance).to.have.property('totalLicenses');
        // expect(instance.totalLicenses).to.be(expectedValueLiteral);
      });

      it('should have the property policySource (base name: "policySource")', function() {
        // TODO: update the code to test the property policySource
        expect(instance).to.have.property('policySource');
        // expect(instance.policySource).to.be(expectedValueLiteral);
      });

      it('should have the property copyUsers (base name: "copyUsers")', function() {
        // TODO: update the code to test the property copyUsers
        expect(instance).to.have.property('copyUsers');
        // expect(instance.copyUsers).to.be(expectedValueLiteral);
      });

    });
  });

}));
