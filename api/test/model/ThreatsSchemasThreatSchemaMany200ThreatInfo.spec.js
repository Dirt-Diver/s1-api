/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ThreatsSchemasThreatSchemaMany200ThreatInfo', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.ThreatsSchemasThreatSchemaMany200ThreatInfo();
      });

      it('should create an instance of ThreatsSchemasThreatSchemaMany200ThreatInfo', function() {
        // TODO: update the code to test ThreatsSchemasThreatSchemaMany200ThreatInfo
        expect(instance).to.be.a(S1MgmtApi.ThreatsSchemasThreatSchemaMany200ThreatInfo);
      });

      it('should have the property mitigationStatus (base name: "mitigationStatus")', function() {
        // TODO: update the code to test the property mitigationStatus
        expect(instance).to.have.property('mitigationStatus');
        // expect(instance.mitigationStatus).to.be(expectedValueLiteral);
      });

      it('should have the property fileExtensionType (base name: "fileExtensionType")', function() {
        // TODO: update the code to test the property fileExtensionType
        expect(instance).to.have.property('fileExtensionType');
        // expect(instance.fileExtensionType).to.be(expectedValueLiteral);
      });

      it('should have the property confidenceLevel (base name: "confidenceLevel")', function() {
        // TODO: update the code to test the property confidenceLevel
        expect(instance).to.have.property('confidenceLevel');
        // expect(instance.confidenceLevel).to.be(expectedValueLiteral);
      });

      it('should have the property publisherName (base name: "publisherName")', function() {
        // TODO: update the code to test the property publisherName
        expect(instance).to.have.property('publisherName');
        // expect(instance.publisherName).to.be(expectedValueLiteral);
      });

      it('should have the property browserType (base name: "browserType")', function() {
        // TODO: update the code to test the property browserType
        expect(instance).to.have.property('browserType');
        // expect(instance.browserType).to.be(expectedValueLiteral);
      });

      it('should have the property processUser (base name: "processUser")', function() {
        // TODO: update the code to test the property processUser
        expect(instance).to.have.property('processUser');
        // expect(instance.processUser).to.be(expectedValueLiteral);
      });

      it('should have the property filePath (base name: "filePath")', function() {
        // TODO: update the code to test the property filePath
        expect(instance).to.have.property('filePath');
        // expect(instance.filePath).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updatedAt")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property mitigationStatusDescription (base name: "mitigationStatusDescription")', function() {
        // TODO: update the code to test the property mitigationStatusDescription
        expect(instance).to.have.property('mitigationStatusDescription');
        // expect(instance.mitigationStatusDescription).to.be(expectedValueLiteral);
      });

      it('should have the property maliciousProcessArguments (base name: "maliciousProcessArguments")', function() {
        // TODO: update the code to test the property maliciousProcessArguments
        expect(instance).to.have.property('maliciousProcessArguments');
        // expect(instance.maliciousProcessArguments).to.be(expectedValueLiteral);
      });

      it('should have the property incidentStatusDescription (base name: "incidentStatusDescription")', function() {
        // TODO: update the code to test the property incidentStatusDescription
        expect(instance).to.have.property('incidentStatusDescription');
        // expect(instance.incidentStatusDescription).to.be(expectedValueLiteral);
      });

      it('should have the property rebootRequired (base name: "rebootRequired")', function() {
        // TODO: update the code to test the property rebootRequired
        expect(instance).to.have.property('rebootRequired');
        // expect(instance.rebootRequired).to.be(expectedValueLiteral);
      });

      it('should have the property collectionId (base name: "collectionId")', function() {
        // TODO: update the code to test the property collectionId
        expect(instance).to.have.property('collectionId');
        // expect(instance.collectionId).to.be(expectedValueLiteral);
      });

      it('should have the property automaticallyResolved (base name: "automaticallyResolved")', function() {
        // TODO: update the code to test the property automaticallyResolved
        expect(instance).to.have.property('automaticallyResolved');
        // expect(instance.automaticallyResolved).to.be(expectedValueLiteral);
      });

      it('should have the property macroModules (base name: "macroModules")', function() {
        // TODO: update the code to test the property macroModules
        expect(instance).to.have.property('macroModules');
        // expect(instance.macroModules).to.be(expectedValueLiteral);
      });

      it('should have the property pendingActions (base name: "pendingActions")', function() {
        // TODO: update the code to test the property pendingActions
        expect(instance).to.have.property('pendingActions');
        // expect(instance.pendingActions).to.be(expectedValueLiteral);
      });

      it('should have the property reachedEventsLimit (base name: "reachedEventsLimit")', function() {
        // TODO: update the code to test the property reachedEventsLimit
        expect(instance).to.have.property('reachedEventsLimit');
        // expect(instance.reachedEventsLimit).to.be(expectedValueLiteral);
      });

      it('should have the property md5 (base name: "md5")', function() {
        // TODO: update the code to test the property md5
        expect(instance).to.have.property('md5');
        // expect(instance.md5).to.be(expectedValueLiteral);
      });

      it('should have the property classificationSource (base name: "classificationSource")', function() {
        // TODO: update the code to test the property classificationSource
        expect(instance).to.have.property('classificationSource');
        // expect(instance.classificationSource).to.be(expectedValueLiteral);
      });

      it('should have the property fileExtension (base name: "fileExtension")', function() {
        // TODO: update the code to test the property fileExtension
        expect(instance).to.have.property('fileExtension');
        // expect(instance.fileExtension).to.be(expectedValueLiteral);
      });

      it('should have the property fileSize (base name: "fileSize")', function() {
        // TODO: update the code to test the property fileSize
        expect(instance).to.have.property('fileSize');
        // expect(instance.fileSize).to.be(expectedValueLiteral);
      });

      it('should have the property externalTicketId (base name: "externalTicketId")', function() {
        // TODO: update the code to test the property externalTicketId
        expect(instance).to.have.property('externalTicketId');
        // expect(instance.externalTicketId).to.be(expectedValueLiteral);
      });

      it('should have the property classification (base name: "classification")', function() {
        // TODO: update the code to test the property classification
        expect(instance).to.have.property('classification');
        // expect(instance.classification).to.be(expectedValueLiteral);
      });

      it('should have the property sha1 (base name: "sha1")', function() {
        // TODO: update the code to test the property sha1
        expect(instance).to.have.property('sha1');
        // expect(instance.sha1).to.be(expectedValueLiteral);
      });

      it('should have the property failedActions (base name: "failedActions")', function() {
        // TODO: update the code to test the property failedActions
        expect(instance).to.have.property('failedActions');
        // expect(instance.failedActions).to.be(expectedValueLiteral);
      });

      it('should have the property analystVerdictDescription (base name: "analystVerdictDescription")', function() {
        // TODO: update the code to test the property analystVerdictDescription
        expect(instance).to.have.property('analystVerdictDescription');
        // expect(instance.analystVerdictDescription).to.be(expectedValueLiteral);
      });

      it('should have the property sha256 (base name: "sha256")', function() {
        // TODO: update the code to test the property sha256
        expect(instance).to.have.property('sha256');
        // expect(instance.sha256).to.be(expectedValueLiteral);
      });

      it('should have the property originatorProcess (base name: "originatorProcess")', function() {
        // TODO: update the code to test the property originatorProcess
        expect(instance).to.have.property('originatorProcess');
        // expect(instance.originatorProcess).to.be(expectedValueLiteral);
      });

      it('should have the property fileVerificationType (base name: "fileVerificationType")', function() {
        // TODO: update the code to test the property fileVerificationType
        expect(instance).to.have.property('fileVerificationType');
        // expect(instance.fileVerificationType).to.be(expectedValueLiteral);
      });

      it('should have the property isValidCertificate (base name: "isValidCertificate")', function() {
        // TODO: update the code to test the property isValidCertificate
        expect(instance).to.have.property('isValidCertificate');
        // expect(instance.isValidCertificate).to.be(expectedValueLiteral);
      });

      it('should have the property isFileless (base name: "isFileless")', function() {
        // TODO: update the code to test the property isFileless
        expect(instance).to.have.property('isFileless');
        // expect(instance.isFileless).to.be(expectedValueLiteral);
      });

      it('should have the property engines (base name: "engines")', function() {
        // TODO: update the code to test the property engines
        expect(instance).to.have.property('engines');
        // expect(instance.engines).to.be(expectedValueLiteral);
      });

      it('should have the property analystVerdict (base name: "analystVerdict")', function() {
        // TODO: update the code to test the property analystVerdict
        expect(instance).to.have.property('analystVerdict');
        // expect(instance.analystVerdict).to.be(expectedValueLiteral);
      });

      it('should have the property mitigatedPreemptively (base name: "mitigatedPreemptively")', function() {
        // TODO: update the code to test the property mitigatedPreemptively
        expect(instance).to.have.property('mitigatedPreemptively');
        // expect(instance.mitigatedPreemptively).to.be(expectedValueLiteral);
      });

      it('should have the property certificateId (base name: "certificateId")', function() {
        // TODO: update the code to test the property certificateId
        expect(instance).to.have.property('certificateId');
        // expect(instance.certificateId).to.be(expectedValueLiteral);
      });

      it('should have the property initiatingUsername (base name: "initiatingUsername")', function() {
        // TODO: update the code to test the property initiatingUsername
        expect(instance).to.have.property('initiatingUsername');
        // expect(instance.initiatingUsername).to.be(expectedValueLiteral);
      });

      it('should have the property storyline (base name: "storyline")', function() {
        // TODO: update the code to test the property storyline
        expect(instance).to.have.property('storyline');
        // expect(instance.storyline).to.be(expectedValueLiteral);
      });

      it('should have the property detectionType (base name: "detectionType")', function() {
        // TODO: update the code to test the property detectionType
        expect(instance).to.have.property('detectionType');
        // expect(instance.detectionType).to.be(expectedValueLiteral);
      });

      it('should have the property threatName (base name: "threatName")', function() {
        // TODO: update the code to test the property threatName
        expect(instance).to.have.property('threatName');
        // expect(instance.threatName).to.be(expectedValueLiteral);
      });

      it('should have the property identifiedAt (base name: "identifiedAt")', function() {
        // TODO: update the code to test the property identifiedAt
        expect(instance).to.have.property('identifiedAt');
        // expect(instance.identifiedAt).to.be(expectedValueLiteral);
      });

      it('should have the property incidentStatus (base name: "incidentStatus")', function() {
        // TODO: update the code to test the property incidentStatus
        expect(instance).to.have.property('incidentStatus');
        // expect(instance.incidentStatus).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property initiatedBy (base name: "initiatedBy")', function() {
        // TODO: update the code to test the property initiatedBy
        expect(instance).to.have.property('initiatedBy');
        // expect(instance.initiatedBy).to.be(expectedValueLiteral);
      });

      it('should have the property initiatedByDescription (base name: "initiatedByDescription")', function() {
        // TODO: update the code to test the property initiatedByDescription
        expect(instance).to.have.property('initiatedByDescription');
        // expect(instance.initiatedByDescription).to.be(expectedValueLiteral);
      });

      it('should have the property detectionEngines (base name: "detectionEngines")', function() {
        // TODO: update the code to test the property detectionEngines
        expect(instance).to.have.property('detectionEngines');
        // expect(instance.detectionEngines).to.be(expectedValueLiteral);
      });

      it('should have the property threatId (base name: "threatId")', function() {
        // TODO: update the code to test the property threatId
        expect(instance).to.have.property('threatId');
        // expect(instance.threatId).to.be(expectedValueLiteral);
      });

      it('should have the property cloudFilesHashVerdict (base name: "cloudFilesHashVerdict")', function() {
        // TODO: update the code to test the property cloudFilesHashVerdict
        expect(instance).to.have.property('cloudFilesHashVerdict');
        // expect(instance.cloudFilesHashVerdict).to.be(expectedValueLiteral);
      });

      it('should have the property externalTicketExists (base name: "externalTicketExists")', function() {
        // TODO: update the code to test the property externalTicketExists
        expect(instance).to.have.property('externalTicketExists');
        // expect(instance.externalTicketExists).to.be(expectedValueLiteral);
      });

      it('should have the property initiatingUserId (base name: "initiatingUserId")', function() {
        // TODO: update the code to test the property initiatingUserId
        expect(instance).to.have.property('initiatingUserId');
        // expect(instance.initiatingUserId).to.be(expectedValueLiteral);
      });

    });
  });

}));
