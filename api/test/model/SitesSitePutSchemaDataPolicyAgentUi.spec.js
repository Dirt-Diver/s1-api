/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SitesSitePutSchemaDataPolicyAgentUi', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.SitesSitePutSchemaDataPolicyAgentUi();
      });

      it('should create an instance of SitesSitePutSchemaDataPolicyAgentUi', function() {
        // TODO: update the code to test SitesSitePutSchemaDataPolicyAgentUi
        expect(instance).to.be.a(S1MgmtApi.SitesSitePutSchemaDataPolicyAgentUi);
      });

      it('should have the property threatPopUpNotifications (base name: "threatPopUpNotifications")', function() {
        // TODO: update the code to test the property threatPopUpNotifications
        expect(instance).to.have.property('threatPopUpNotifications');
        // expect(instance.threatPopUpNotifications).to.be(expectedValueLiteral);
      });

      it('should have the property contactFreeText (base name: "contactFreeText")', function() {
        // TODO: update the code to test the property contactFreeText
        expect(instance).to.have.property('contactFreeText');
        // expect(instance.contactFreeText).to.be(expectedValueLiteral);
      });

      it('should have the property contactEmail (base name: "contactEmail")', function() {
        // TODO: update the code to test the property contactEmail
        expect(instance).to.have.property('contactEmail');
        // expect(instance.contactEmail).to.be(expectedValueLiteral);
      });

      it('should have the property maxEventAgeDays (base name: "maxEventAgeDays")', function() {
        // TODO: update the code to test the property maxEventAgeDays
        expect(instance).to.have.property('maxEventAgeDays');
        // expect(instance.maxEventAgeDays).to.be(expectedValueLiteral);
      });

      it('should have the property showAgentWarnings (base name: "showAgentWarnings")', function() {
        // TODO: update the code to test the property showAgentWarnings
        expect(instance).to.have.property('showAgentWarnings');
        // expect(instance.showAgentWarnings).to.be(expectedValueLiteral);
      });

      it('should have the property contactPhoneNumber (base name: "contactPhoneNumber")', function() {
        // TODO: update the code to test the property contactPhoneNumber
        expect(instance).to.have.property('contactPhoneNumber');
        // expect(instance.contactPhoneNumber).to.be(expectedValueLiteral);
      });

      it('should have the property showDeviceTab (base name: "showDeviceTab")', function() {
        // TODO: update the code to test the property showDeviceTab
        expect(instance).to.have.property('showDeviceTab');
        // expect(instance.showDeviceTab).to.be(expectedValueLiteral);
      });

      it('should have the property devicePopUpNotifications (base name: "devicePopUpNotifications")', function() {
        // TODO: update the code to test the property devicePopUpNotifications
        expect(instance).to.have.property('devicePopUpNotifications');
        // expect(instance.devicePopUpNotifications).to.be(expectedValueLiteral);
      });

      it('should have the property showSupport (base name: "showSupport")', function() {
        // TODO: update the code to test the property showSupport
        expect(instance).to.have.property('showSupport');
        // expect(instance.showSupport).to.be(expectedValueLiteral);
      });

      it('should have the property showQuarantineTab (base name: "showQuarantineTab")', function() {
        // TODO: update the code to test the property showQuarantineTab
        expect(instance).to.have.property('showQuarantineTab');
        // expect(instance.showQuarantineTab).to.be(expectedValueLiteral);
      });

      it('should have the property contactCompany (base name: "contactCompany")', function() {
        // TODO: update the code to test the property contactCompany
        expect(instance).to.have.property('contactCompany');
        // expect(instance.contactCompany).to.be(expectedValueLiteral);
      });

      it('should have the property showSuspicious (base name: "showSuspicious")', function() {
        // TODO: update the code to test the property showSuspicious
        expect(instance).to.have.property('showSuspicious');
        // expect(instance.showSuspicious).to.be(expectedValueLiteral);
      });

      it('should have the property contactOther (base name: "contactOther")', function() {
        // TODO: update the code to test the property contactOther
        expect(instance).to.have.property('contactOther');
        // expect(instance.contactOther).to.be(expectedValueLiteral);
      });

      it('should have the property contactDirectMessage (base name: "contactDirectMessage")', function() {
        // TODO: update the code to test the property contactDirectMessage
        expect(instance).to.have.property('contactDirectMessage');
        // expect(instance.contactDirectMessage).to.be(expectedValueLiteral);
      });

      it('should have the property contactSupportWebsite (base name: "contactSupportWebsite")', function() {
        // TODO: update the code to test the property contactSupportWebsite
        expect(instance).to.have.property('contactSupportWebsite');
        // expect(instance.contactSupportWebsite).to.be(expectedValueLiteral);
      });

      it('should have the property agentUiOn (base name: "agentUiOn")', function() {
        // TODO: update the code to test the property agentUiOn
        expect(instance).to.have.property('agentUiOn');
        // expect(instance.agentUiOn).to.be(expectedValueLiteral);
      });

    });
  });

}));
