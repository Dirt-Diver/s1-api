/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SitesSiteResponseSchema200DataLicensesBundles', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.SitesSiteResponseSchema200DataLicensesBundles();
      });

      it('should create an instance of SitesSiteResponseSchema200DataLicensesBundles', function() {
        // TODO: update the code to test SitesSiteResponseSchema200DataLicensesBundles
        expect(instance).to.be.a(S1MgmtApi.SitesSiteResponseSchema200DataLicensesBundles);
      });

      it('should have the property minorVersion (base name: "minorVersion")', function() {
        // TODO: update the code to test the property minorVersion
        expect(instance).to.have.property('minorVersion');
        // expect(instance.minorVersion).to.be(expectedValueLiteral);
      });

      it('should have the property majorVersion (base name: "majorVersion")', function() {
        // TODO: update the code to test the property majorVersion
        expect(instance).to.have.property('majorVersion');
        // expect(instance.majorVersion).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property surfaces (base name: "surfaces")', function() {
        // TODO: update the code to test the property surfaces
        expect(instance).to.have.property('surfaces');
        // expect(instance.surfaces).to.be(expectedValueLiteral);
      });

      it('should have the property totalSurfaces (base name: "totalSurfaces")', function() {
        // TODO: update the code to test the property totalSurfaces
        expect(instance).to.have.property('totalSurfaces');
        // expect(instance.totalSurfaces).to.be(expectedValueLiteral);
      });

      it('should have the property displayName (base name: "displayName")', function() {
        // TODO: update the code to test the property displayName
        expect(instance).to.have.property('displayName');
        // expect(instance.displayName).to.be(expectedValueLiteral);
      });

    });
  });

}));
