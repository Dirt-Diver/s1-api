/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('FirewallControlSchemasRuleDeleteSchemaFilter', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.FirewallControlSchemasRuleDeleteSchemaFilter();
      });

      it('should create an instance of FirewallControlSchemasRuleDeleteSchemaFilter', function() {
        // TODO: update the code to test FirewallControlSchemasRuleDeleteSchemaFilter
        expect(instance).to.be.a(S1MgmtApi.FirewallControlSchemasRuleDeleteSchemaFilter);
      });

      it('should have the property createdAtGt (base name: "createdAt__gt")', function() {
        // TODO: update the code to test the property createdAtGt
        expect(instance).to.have.property('createdAtGt');
        // expect(instance.createdAtGt).to.be(expectedValueLiteral);
      });

      it('should have the property nameContains (base name: "name__contains")', function() {
        // TODO: update the code to test the property nameContains
        expect(instance).to.have.property('nameContains');
        // expect(instance.nameContains).to.be(expectedValueLiteral);
      });

      it('should have the property serviceContains (base name: "service__contains")', function() {
        // TODO: update the code to test the property serviceContains
        expect(instance).to.have.property('serviceContains');
        // expect(instance.serviceContains).to.be(expectedValueLiteral);
      });

      it('should have the property actions (base name: "actions")', function() {
        // TODO: update the code to test the property actions
        expect(instance).to.have.property('actions');
        // expect(instance.actions).to.be(expectedValueLiteral);
      });

      it('should have the property tagIds (base name: "tagIds")', function() {
        // TODO: update the code to test the property tagIds
        expect(instance).to.have.property('tagIds');
        // expect(instance.tagIds).to.be(expectedValueLiteral);
      });

      it('should have the property directions (base name: "directions")', function() {
        // TODO: update the code to test the property directions
        expect(instance).to.have.property('directions');
        // expect(instance.directions).to.be(expectedValueLiteral);
      });

      it('should have the property protocols (base name: "protocols")', function() {
        // TODO: update the code to test the property protocols
        expect(instance).to.have.property('protocols');
        // expect(instance.protocols).to.be(expectedValueLiteral);
      });

      it('should have the property ids (base name: "ids")', function() {
        // TODO: update the code to test the property ids
        expect(instance).to.have.property('ids');
        // expect(instance.ids).to.be(expectedValueLiteral);
      });

      it('should have the property query (base name: "query")', function() {
        // TODO: update the code to test the property query
        expect(instance).to.have.property('query');
        // expect(instance.query).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtLt (base name: "createdAt__lt")', function() {
        // TODO: update the code to test the property createdAtLt
        expect(instance).to.have.property('createdAtLt');
        // expect(instance.createdAtLt).to.be(expectedValueLiteral);
      });

      it('should have the property osTypes (base name: "osTypes")', function() {
        // TODO: update the code to test the property osTypes
        expect(instance).to.have.property('osTypes');
        // expect(instance.osTypes).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtLte (base name: "createdAt__lte")', function() {
        // TODO: update the code to test the property createdAtLte
        expect(instance).to.have.property('createdAtLte');
        // expect(instance.createdAtLte).to.be(expectedValueLiteral);
      });

      it('should have the property scopes (base name: "scopes")', function() {
        // TODO: update the code to test the property scopes
        expect(instance).to.have.property('scopes');
        // expect(instance.scopes).to.be(expectedValueLiteral);
      });

      it('should have the property statuses (base name: "statuses")', function() {
        // TODO: update the code to test the property statuses
        expect(instance).to.have.property('statuses');
        // expect(instance.statuses).to.be(expectedValueLiteral);
      });

      it('should have the property protocolContains (base name: "protocol__contains")', function() {
        // TODO: update the code to test the property protocolContains
        expect(instance).to.have.property('protocolContains');
        // expect(instance.protocolContains).to.be(expectedValueLiteral);
      });

      it('should have the property applicationContains (base name: "application__contains")', function() {
        // TODO: update the code to test the property applicationContains
        expect(instance).to.have.property('applicationContains');
        // expect(instance.applicationContains).to.be(expectedValueLiteral);
      });

      it('should have the property locationIds (base name: "locationIds")', function() {
        // TODO: update the code to test the property locationIds
        expect(instance).to.have.property('locationIds');
        // expect(instance.locationIds).to.be(expectedValueLiteral);
      });

      it('should have the property tenant (base name: "tenant")', function() {
        // TODO: update the code to test the property tenant
        expect(instance).to.have.property('tenant');
        // expect(instance.tenant).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtBetween (base name: "createdAt__between")', function() {
        // TODO: update the code to test the property createdAtBetween
        expect(instance).to.have.property('createdAtBetween');
        // expect(instance.createdAtBetween).to.be(expectedValueLiteral);
      });

      it('should have the property groupIds (base name: "groupIds")', function() {
        // TODO: update the code to test the property groupIds
        expect(instance).to.have.property('groupIds');
        // expect(instance.groupIds).to.be(expectedValueLiteral);
      });

      it('should have the property createdAtGte (base name: "createdAt__gte")', function() {
        // TODO: update the code to test the property createdAtGte
        expect(instance).to.have.property('createdAtGte');
        // expect(instance.createdAtGte).to.be(expectedValueLiteral);
      });

      it('should have the property siteIds (base name: "siteIds")', function() {
        // TODO: update the code to test the property siteIds
        expect(instance).to.have.property('siteIds');
        // expect(instance.siteIds).to.be(expectedValueLiteral);
      });

      it('should have the property accountIds (base name: "accountIds")', function() {
        // TODO: update the code to test the property accountIds
        expect(instance).to.have.property('accountIds');
        // expect(instance.accountIds).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property tagNameContains (base name: "tagName__contains")', function() {
        // TODO: update the code to test the property tagNameContains
        expect(instance).to.have.property('tagNameContains');
        // expect(instance.tagNameContains).to.be(expectedValueLiteral);
      });

      it('should have the property applications (base name: "applications")', function() {
        // TODO: update the code to test the property applications
        expect(instance).to.have.property('applications');
        // expect(instance.applications).to.be(expectedValueLiteral);
      });

    });
  });

}));
