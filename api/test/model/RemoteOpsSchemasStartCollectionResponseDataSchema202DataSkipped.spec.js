/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('RemoteOpsSchemasStartCollectionResponseDataSchema202DataSkipped', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.RemoteOpsSchemasStartCollectionResponseDataSchema202DataSkipped();
      });

      it('should create an instance of RemoteOpsSchemasStartCollectionResponseDataSchema202DataSkipped', function() {
        // TODO: update the code to test RemoteOpsSchemasStartCollectionResponseDataSchema202DataSkipped
        expect(instance).to.be.a(S1MgmtApi.RemoteOpsSchemasStartCollectionResponseDataSchema202DataSkipped);
      });

      it('should have the property notEnabledFeature (base name: "notEnabledFeature")', function() {
        // TODO: update the code to test the property notEnabledFeature
        expect(instance).to.have.property('notEnabledFeature');
        // expect(instance.notEnabledFeature).to.be(expectedValueLiteral);
      });

      it('should have the property notApplicableScope (base name: "notApplicableScope")', function() {
        // TODO: update the code to test the property notApplicableScope
        expect(instance).to.have.property('notApplicableScope');
        // expect(instance.notApplicableScope).to.be(expectedValueLiteral);
      });

      it('should have the property notAvailable (base name: "notAvailable")', function() {
        // TODO: update the code to test the property notAvailable
        expect(instance).to.have.property('notAvailable');
        // expect(instance.notAvailable).to.be(expectedValueLiteral);
      });

      it('should have the property other (base name: "other")', function() {
        // TODO: update the code to test the property other
        expect(instance).to.have.property('other');
        // expect(instance.other).to.be(expectedValueLiteral);
      });

      it('should have the property notApplicableOs (base name: "notApplicableOs")', function() {
        // TODO: update the code to test the property notApplicableOs
        expect(instance).to.have.property('notApplicableOs');
        // expect(instance.notApplicableOs).to.be(expectedValueLiteral);
      });

      it('should have the property notSupported (base name: "notSupported")', function() {
        // TODO: update the code to test the property notSupported
        expect(instance).to.have.property('notSupported');
        // expect(instance.notSupported).to.be(expectedValueLiteral);
      });

    });
  });

}));
