/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V21DevicesSchemasDeviceDataSchemaMany200Data', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.V21DevicesSchemasDeviceDataSchemaMany200Data();
      });

      it('should create an instance of V21DevicesSchemasDeviceDataSchemaMany200Data', function() {
        // TODO: update the code to test V21DevicesSchemasDeviceDataSchemaMany200Data
        expect(instance).to.be.a(S1MgmtApi.V21DevicesSchemasDeviceDataSchemaMany200Data);
      });

      it('should have the property stagefreightVulnerable (base name: "stagefreightVulnerable")', function() {
        // TODO: update the code to test the property stagefreightVulnerable
        expect(instance).to.have.property('stagefreightVulnerable');
        // expect(instance.stagefreightVulnerable).to.be(expectedValueLiteral);
      });

      it('should have the property appState (base name: "appState")', function() {
        // TODO: update the code to test the property appState
        expect(instance).to.have.property('appState');
        // expect(instance.appState).to.be(expectedValueLiteral);
      });

      it('should have the property lastActiveOn (base name: "lastActiveOn")', function() {
        // TODO: update the code to test the property lastActiveOn
        expect(instance).to.have.property('lastActiveOn');
        // expect(instance.lastActiveOn).to.be(expectedValueLiteral);
      });

      it('should have the property siteId (base name: "siteId")', function() {
        // TODO: update the code to test the property siteId
        expect(instance).to.have.property('siteId');
        // expect(instance.siteId).to.be(expectedValueLiteral);
      });

      it('should have the property owner (base name: "owner")', function() {
        // TODO: update the code to test the property owner
        expect(instance).to.have.property('owner');
        // expect(instance.owner).to.be(expectedValueLiteral);
      });

      it('should have the property accountId (base name: "accountId")', function() {
        // TODO: update the code to test the property accountId
        expect(instance).to.have.property('accountId');
        // expect(instance.accountId).to.be(expectedValueLiteral);
      });

      it('should have the property encrypted (base name: "encrypted")', function() {
        // TODO: update the code to test the property encrypted
        expect(instance).to.have.property('encrypted');
        // expect(instance.encrypted).to.be(expectedValueLiteral);
      });

      it('should have the property screenLocked (base name: "screenLocked")', function() {
        // TODO: update the code to test the property screenLocked
        expect(instance).to.have.property('screenLocked');
        // expect(instance.screenLocked).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property alertCounts (base name: "alertCounts")', function() {
        // TODO: update the code to test the property alertCounts
        expect(instance).to.have.property('alertCounts');
        // expect(instance.alertCounts).to.be(expectedValueLiteral);
      });

      it('should have the property groupId (base name: "groupId")', function() {
        // TODO: update the code to test the property groupId
        expect(instance).to.have.property('groupId');
        // expect(instance.groupId).to.be(expectedValueLiteral);
      });

      it('should have the property privileges (base name: "privileges")', function() {
        // TODO: update the code to test the property privileges
        expect(instance).to.have.property('privileges');
        // expect(instance.privileges).to.be(expectedValueLiteral);
      });

      it('should have the property accountName (base name: "accountName")', function() {
        // TODO: update the code to test the property accountName
        expect(instance).to.have.property('accountName');
        // expect(instance.accountName).to.be(expectedValueLiteral);
      });

      it('should have the property siteName (base name: "siteName")', function() {
        // TODO: update the code to test the property siteName
        expect(instance).to.have.property('siteName');
        // expect(instance.siteName).to.be(expectedValueLiteral);
      });

      it('should have the property registrationDate (base name: "registrationDate")', function() {
        // TODO: update the code to test the property registrationDate
        expect(instance).to.have.property('registrationDate');
        // expect(instance.registrationDate).to.be(expectedValueLiteral);
      });

      it('should have the property debugMode (base name: "debugMode")', function() {
        // TODO: update the code to test the property debugMode
        expect(instance).to.have.property('debugMode');
        // expect(instance.debugMode).to.be(expectedValueLiteral);
      });

      it('should have the property registrationSource (base name: "registrationSource")', function() {
        // TODO: update the code to test the property registrationSource
        expect(instance).to.have.property('registrationSource');
        // expect(instance.registrationSource).to.be(expectedValueLiteral);
      });

      it('should have the property model (base name: "model")', function() {
        // TODO: update the code to test the property model
        expect(instance).to.have.property('model');
        // expect(instance.model).to.be(expectedValueLiteral);
      });

      it('should have the property deviceId (base name: "deviceId")', function() {
        // TODO: update the code to test the property deviceId
        expect(instance).to.have.property('deviceId');
        // expect(instance.deviceId).to.be(expectedValueLiteral);
      });

      it('should have the property policyUpdatedAt (base name: "policyUpdatedAt")', function() {
        // TODO: update the code to test the property policyUpdatedAt
        expect(instance).to.have.property('policyUpdatedAt');
        // expect(instance.policyUpdatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property healthState (base name: "healthState")', function() {
        // TODO: update the code to test the property healthState
        expect(instance).to.have.property('healthState');
        // expect(instance.healthState).to.be(expectedValueLiteral);
      });

      it('should have the property appVersion (base name: "appVersion")', function() {
        // TODO: update the code to test the property appVersion
        expect(instance).to.have.property('appVersion');
        // expect(instance.appVersion).to.be(expectedValueLiteral);
      });

      it('should have the property unofficialAppstore (base name: "unofficialAppstore")', function() {
        // TODO: update the code to test the property unofficialAppstore
        expect(instance).to.have.property('unofficialAppstore');
        // expect(instance.unofficialAppstore).to.be(expectedValueLiteral);
      });

      it('should have the property _protected (base name: "protected")', function() {
        // TODO: update the code to test the property _protected
        expect(instance).to.have.property('_protected');
        // expect(instance._protected).to.be(expectedValueLiteral);
      });

      it('should have the property trackingId1 (base name: "trackingId1")', function() {
        // TODO: update the code to test the property trackingId1
        expect(instance).to.have.property('trackingId1');
        // expect(instance.trackingId1).to.be(expectedValueLiteral);
      });

      it('should have the property developerMode (base name: "developerMode")', function() {
        // TODO: update the code to test the property developerMode
        expect(instance).to.have.property('developerMode');
        // expect(instance.developerMode).to.be(expectedValueLiteral);
      });

      it('should have the property groupName (base name: "groupName")', function() {
        // TODO: update the code to test the property groupName
        expect(instance).to.have.property('groupName');
        // expect(instance.groupName).to.be(expectedValueLiteral);
      });

      it('should have the property trackingId2 (base name: "trackingId2")', function() {
        // TODO: update the code to test the property trackingId2
        expect(instance).to.have.property('trackingId2');
        // expect(instance.trackingId2).to.be(expectedValueLiteral);
      });

      it('should have the property managedState (base name: "managedState")', function() {
        // TODO: update the code to test the property managedState
        expect(instance).to.have.property('managedState');
        // expect(instance.managedState).to.be(expectedValueLiteral);
      });

      it('should have the property registrationType (base name: "registrationType")', function() {
        // TODO: update the code to test the property registrationType
        expect(instance).to.have.property('registrationType');
        // expect(instance.registrationType).to.be(expectedValueLiteral);
      });

      it('should have the property threatCounts (base name: "threatCounts")', function() {
        // TODO: update the code to test the property threatCounts
        expect(instance).to.have.property('threatCounts');
        // expect(instance.threatCounts).to.be(expectedValueLiteral);
      });

      it('should have the property osVersion (base name: "osVersion")', function() {
        // TODO: update the code to test the property osVersion
        expect(instance).to.have.property('osVersion');
        // expect(instance.osVersion).to.be(expectedValueLiteral);
      });

      it('should have the property registeredOn (base name: "registeredOn")', function() {
        // TODO: update the code to test the property registeredOn
        expect(instance).to.have.property('registeredOn');
        // expect(instance.registeredOn).to.be(expectedValueLiteral);
      });

      it('should have the property platform (base name: "platform")', function() {
        // TODO: update the code to test the property platform
        expect(instance).to.have.property('platform');
        // expect(instance.platform).to.be(expectedValueLiteral);
      });

    });
  });

}));
