/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V21PolicySchemasPolicy200Data', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.V21PolicySchemasPolicy200Data();
      });

      it('should create an instance of V21PolicySchemasPolicy200Data', function() {
        // TODO: update the code to test V21PolicySchemasPolicy200Data
        expect(instance).to.be.a(S1MgmtApi.V21PolicySchemasPolicy200Data);
      });

      it('should have the property updatedBy (base name: "updatedBy")', function() {
        // TODO: update the code to test the property updatedBy
        expect(instance).to.have.property('updatedBy');
        // expect(instance.updatedBy).to.be(expectedValueLiteral);
      });

      it('should have the property threatResponseGroupId (base name: "threatResponseGroupId")', function() {
        // TODO: update the code to test the property threatResponseGroupId
        expect(instance).to.have.property('threatResponseGroupId');
        // expect(instance.threatResponseGroupId).to.be(expectedValueLiteral);
      });

      it('should have the property alertResponseGroupId (base name: "alertResponseGroupId")', function() {
        // TODO: update the code to test the property alertResponseGroupId
        expect(instance).to.have.property('alertResponseGroupId');
        // expect(instance.alertResponseGroupId).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updatedAt")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property userFullName (base name: "userFullName")', function() {
        // TODO: update the code to test the property userFullName
        expect(instance).to.have.property('userFullName');
        // expect(instance.userFullName).to.be(expectedValueLiteral);
      });

      it('should have the property alertOnDeviceAlert (base name: "alertOnDeviceAlert")', function() {
        // TODO: update the code to test the property alertOnDeviceAlert
        expect(instance).to.have.property('alertOnDeviceAlert');
        // expect(instance.alertOnDeviceAlert).to.be(expectedValueLiteral);
      });

      it('should have the property alerts (base name: "alerts")', function() {
        // TODO: update the code to test the property alerts
        expect(instance).to.have.property('alerts');
        // expect(instance.alerts).to.be(expectedValueLiteral);
      });

      it('should have the property connectionScopeId (base name: "connectionScopeId")', function() {
        // TODO: update the code to test the property connectionScopeId
        expect(instance).to.have.property('connectionScopeId');
        // expect(instance.connectionScopeId).to.be(expectedValueLiteral);
      });

      it('should have the property connectionId (base name: "connectionId")', function() {
        // TODO: update the code to test the property connectionId
        expect(instance).to.have.property('connectionId');
        // expect(instance.connectionId).to.be(expectedValueLiteral);
      });

      it('should have the property engines (base name: "engines")', function() {
        // TODO: update the code to test the property engines
        expect(instance).to.have.property('engines');
        // expect(instance.engines).to.be(expectedValueLiteral);
      });

      it('should have the property connectionScopeLevel (base name: "connectionScopeLevel")', function() {
        // TODO: update the code to test the property connectionScopeLevel
        expect(instance).to.have.property('connectionScopeLevel');
        // expect(instance.connectionScopeLevel).to.be(expectedValueLiteral);
      });

      it('should have the property inheritedFrom (base name: "inheritedFrom")', function() {
        // TODO: update the code to test the property inheritedFrom
        expect(instance).to.have.property('inheritedFrom');
        // expect(instance.inheritedFrom).to.be(expectedValueLiteral);
      });

      it('should have the property responseActions (base name: "responseActions")', function() {
        // TODO: update the code to test the property responseActions
        expect(instance).to.have.property('responseActions');
        // expect(instance.responseActions).to.be(expectedValueLiteral);
      });

      it('should have the property threatPhishingPrevention (base name: "threatPhishingPrevention")', function() {
        // TODO: update the code to test the property threatPhishingPrevention
        expect(instance).to.have.property('threatPhishingPrevention');
        // expect(instance.threatPhishingPrevention).to.be(expectedValueLiteral);
      });

      it('should have the property _default (base name: "default")', function() {
        // TODO: update the code to test the property _default
        expect(instance).to.have.property('_default');
        // expect(instance._default).to.be(expectedValueLiteral);
      });

      it('should have the property threatOnDeviceAlert (base name: "threatOnDeviceAlert")', function() {
        // TODO: update the code to test the property threatOnDeviceAlert
        expect(instance).to.have.property('threatOnDeviceAlert');
        // expect(instance.threatOnDeviceAlert).to.be(expectedValueLiteral);
      });

      it('should have the property threats (base name: "threats")', function() {
        // TODO: update the code to test the property threats
        expect(instance).to.have.property('threats');
        // expect(instance.threats).to.be(expectedValueLiteral);
      });

    });
  });

}));
