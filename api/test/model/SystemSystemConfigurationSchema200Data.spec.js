/*
 * S1 MGMT API
 * SentinelOne Management Console API specification.
 *
 * OpenAPI spec version: 2.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.39
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.S1MgmtApi);
  }
}(this, function(expect, S1MgmtApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SystemSystemConfigurationSchema200Data', function() {
      beforeEach(function() {
        instance = new S1MgmtApi.SystemSystemConfigurationSchema200Data();
      });

      it('should create an instance of SystemSystemConfigurationSchema200Data', function() {
        // TODO: update the code to test SystemSystemConfigurationSchema200Data
        expect(instance).to.be.a(S1MgmtApi.SystemSystemConfigurationSchema200Data);
      });

      it('should have the property rememberMeLengthRange (base name: "rememberMeLengthRange")', function() {
        // TODO: update the code to test the property rememberMeLengthRange
        expect(instance).to.have.property('rememberMeLengthRange');
        // expect(instance.rememberMeLengthRange).to.be(expectedValueLiteral);
      });

      it('should have the property accessibleUrl (base name: "accessibleUrl")', function() {
        // TODO: update the code to test the property accessibleUrl
        expect(instance).to.have.property('accessibleUrl');
        // expect(instance.accessibleUrl).to.be(expectedValueLiteral);
      });

      it('should have the property cloudIntelligenceOn (base name: "cloudIntelligenceOn")', function() {
        // TODO: update the code to test the property cloudIntelligenceOn
        expect(instance).to.have.property('cloudIntelligenceOn');
        // expect(instance.cloudIntelligenceOn).to.be(expectedValueLiteral);
      });

      it('should have the property advancedModeAllowChanges (base name: "advancedModeAllowChanges")', function() {
        // TODO: update the code to test the property advancedModeAllowChanges
        expect(instance).to.have.property('advancedModeAllowChanges');
        // expect(instance.advancedModeAllowChanges).to.be(expectedValueLiteral);
      });

      it('should have the property maxCoreLicenses (base name: "maxCoreLicenses")', function() {
        // TODO: update the code to test the property maxCoreLicenses
        expect(instance).to.have.property('maxCoreLicenses');
        // expect(instance.maxCoreLicenses).to.be(expectedValueLiteral);
      });

      it('should have the property region (base name: "region")', function() {
        // TODO: update the code to test the property region
        expect(instance).to.have.property('region');
        // expect(instance.region).to.be(expectedValueLiteral);
      });

      it('should have the property globalSalesforceId (base name: "globalSalesforceId")', function() {
        // TODO: update the code to test the property globalSalesforceId
        expect(instance).to.have.property('globalSalesforceId');
        // expect(instance.globalSalesforceId).to.be(expectedValueLiteral);
      });

      it('should have the property advancedMode (base name: "advancedMode")', function() {
        // TODO: update the code to test the property advancedMode
        expect(instance).to.have.property('advancedMode');
        // expect(instance.advancedMode).to.be(expectedValueLiteral);
      });

      it('should have the property earlyAccess (base name: "earlyAccess")', function() {
        // TODO: update the code to test the property earlyAccess
        expect(instance).to.have.property('earlyAccess');
        // expect(instance.earlyAccess).to.be(expectedValueLiteral);
      });

      it('should have the property unlimitedComplete (base name: "unlimitedComplete")', function() {
        // TODO: update the code to test the property unlimitedComplete
        expect(instance).to.have.property('unlimitedComplete');
        // expect(instance.unlimitedComplete).to.be(expectedValueLiteral);
      });

      it('should have the property cloudLastConnectionTime (base name: "cloudLastConnectionTime")', function() {
        // TODO: update the code to test the property cloudLastConnectionTime
        expect(instance).to.have.property('cloudLastConnectionTime');
        // expect(instance.cloudLastConnectionTime).to.be(expectedValueLiteral);
      });

      it('should have the property unlimitedControl (base name: "unlimitedControl")', function() {
        // TODO: update the code to test the property unlimitedControl
        expect(instance).to.have.property('unlimitedControl');
        // expect(instance.unlimitedControl).to.be(expectedValueLiteral);
      });

      it('should have the property allowDuplicateSite (base name: "allowDuplicateSite")', function() {
        // TODO: update the code to test the property allowDuplicateSite
        expect(instance).to.have.property('allowDuplicateSite');
        // expect(instance.allowDuplicateSite).to.be(expectedValueLiteral);
      });

      it('should have the property globalSharedConsole (base name: "globalSharedConsole")', function() {
        // TODO: update the code to test the property globalSharedConsole
        expect(instance).to.have.property('globalSharedConsole');
        // expect(instance.globalSharedConsole).to.be(expectedValueLiteral);
      });

      it('should have the property scalyrUrl (base name: "scalyrUrl")', function() {
        // TODO: update the code to test the property scalyrUrl
        expect(instance).to.have.property('scalyrUrl');
        // expect(instance.scalyrUrl).to.be(expectedValueLiteral);
      });

      it('should have the property maxControlLicenses (base name: "maxControlLicenses")', function() {
        // TODO: update the code to test the property maxControlLicenses
        expect(instance).to.have.property('maxControlLicenses');
        // expect(instance.maxControlLicenses).to.be(expectedValueLiteral);
      });

      it('should have the property maxCompleteLicenses (base name: "maxCompleteLicenses")', function() {
        // TODO: update the code to test the property maxCompleteLicenses
        expect(instance).to.have.property('maxCompleteLicenses');
        // expect(instance.maxCompleteLicenses).to.be(expectedValueLiteral);
      });

      it('should have the property rememberMeLength (base name: "rememberMeLength")', function() {
        // TODO: update the code to test the property rememberMeLength
        expect(instance).to.have.property('rememberMeLength');
        // expect(instance.rememberMeLength).to.be(expectedValueLiteral);
      });

      it('should have the property licenses (base name: "licenses")', function() {
        // TODO: update the code to test the property licenses
        expect(instance).to.have.property('licenses');
        // expect(instance.licenses).to.be(expectedValueLiteral);
      });

      it('should have the property allowedDomains (base name: "allowedDomains")', function() {
        // TODO: update the code to test the property allowedDomains
        expect(instance).to.have.property('allowedDomains');
        // expect(instance.allowedDomains).to.be(expectedValueLiteral);
      });

      it('should have the property passwordExpiration (base name: "passwordExpiration")', function() {
        // TODO: update the code to test the property passwordExpiration
        expect(instance).to.have.property('passwordExpiration');
        // expect(instance.passwordExpiration).to.be(expectedValueLiteral);
      });

      it('should have the property uiInactivityTimeoutSeconds (base name: "uiInactivityTimeoutSeconds")', function() {
        // TODO: update the code to test the property uiInactivityTimeoutSeconds
        expect(instance).to.have.property('uiInactivityTimeoutSeconds');
        // expect(instance.uiInactivityTimeoutSeconds).to.be(expectedValueLiteral);
      });

      it('should have the property earlyAccessPlatforms (base name: "earlyAccessPlatforms")', function() {
        // TODO: update the code to test the property earlyAccessPlatforms
        expect(instance).to.have.property('earlyAccessPlatforms');
        // expect(instance.earlyAccessPlatforms).to.be(expectedValueLiteral);
      });

      it('should have the property globalTwoFaEnabled (base name: "globalTwoFaEnabled")', function() {
        // TODO: update the code to test the property globalTwoFaEnabled
        expect(instance).to.have.property('globalTwoFaEnabled');
        // expect(instance.globalTwoFaEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property unlimitedCore (base name: "unlimitedCore")', function() {
        // TODO: update the code to test the property unlimitedCore
        expect(instance).to.have.property('unlimitedCore');
        // expect(instance.unlimitedCore).to.be(expectedValueLiteral);
      });

      it('should have the property tfaEnrollmentExpiration (base name: "tfaEnrollmentExpiration")', function() {
        // TODO: update the code to test the property tfaEnrollmentExpiration
        expect(instance).to.have.property('tfaEnrollmentExpiration');
        // expect(instance.tfaEnrollmentExpiration).to.be(expectedValueLiteral);
      });

      it('should have the property uiInactivityTimeoutSecondsRange (base name: "uiInactivityTimeoutSecondsRange")', function() {
        // TODO: update the code to test the property uiInactivityTimeoutSecondsRange
        expect(instance).to.have.property('uiInactivityTimeoutSecondsRange');
        // expect(instance.uiInactivityTimeoutSecondsRange).to.be(expectedValueLiteral);
      });

      it('should have the property passwordExpirationRange (base name: "passwordExpirationRange")', function() {
        // TODO: update the code to test the property passwordExpirationRange
        expect(instance).to.have.property('passwordExpirationRange');
        // expect(instance.passwordExpirationRange).to.be(expectedValueLiteral);
      });

    });
  });

}));
